ARM GAS  /tmp/cck0uY6y.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"tasks.c"
  14              		.section	.debug_abbrev,"",%progbits
  15              	.Ldebug_abbrev0:
  16              		.section	.debug_info,"",%progbits
  17              	.Ldebug_info0:
  18              		.section	.debug_line,"",%progbits
  19              	.Ldebug_line0:
  20 0000 B8070000 		.section	.debug_macinfo,"",%progbits
  20      0200BF04 
  20      00000201 
  20      FB0E0D00 
  20      01010101 
  21              	.Ldebug_macinfo0:
  22              		.text
  23              	.Ltext0:
  24              		.file 1 "FreeRTOS/tasks.c"
  25              		.section	.debug_macinfo
  26 0000 03       		.byte	0x3
  27 0001 00       		.uleb128 0x0
  28 0002 01       		.uleb128 0x1
  29 0003 01       		.byte	0x1
  30 0004 00       		.uleb128 0x0
  31 0005 5F5F5354 		.ascii	"__STDC__ 1\000"
  31      44435F5F 
  31      203100
  32 0010 01       		.byte	0x1
  33 0011 00       		.uleb128 0x0
  34 0012 5F5F5354 		.ascii	"__STDC_VERSION__ 199901L\000"
  34      44435F56 
  34      45525349 
  34      4F4E5F5F 
  34      20313939 
  35 002b 01       		.byte	0x1
  36 002c 00       		.uleb128 0x0
  37 002d 5F5F5354 		.ascii	"__STDC_HOSTED__ 1\000"
  37      44435F48 
  37      4F535445 
  37      445F5F20 
  37      3100
  38 003f 01       		.byte	0x1
  39 0040 00       		.uleb128 0x0
  40 0041 5F5F474E 		.ascii	"__GNUC__ 4\000"
  40      55435F5F 
  40      203400
  41 004c 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 2


  42 004d 00       		.uleb128 0x0
  43 004e 5F5F474E 		.ascii	"__GNUC_MINOR__ 4\000"
  43      55435F4D 
  43      494E4F52 
  43      5F5F2034 
  43      00
  44 005f 01       		.byte	0x1
  45 0060 00       		.uleb128 0x0
  46 0061 5F5F474E 		.ascii	"__GNUC_PATCHLEVEL__ 1\000"
  46      55435F50 
  46      41544348 
  46      4C455645 
  46      4C5F5F20 
  47 0077 01       		.byte	0x1
  48 0078 00       		.uleb128 0x0
  49 0079 5F5F5349 		.ascii	"__SIZE_TYPE__ unsigned int\000"
  49      5A455F54 
  49      5950455F 
  49      5F20756E 
  49      7369676E 
  50 0094 01       		.byte	0x1
  51 0095 00       		.uleb128 0x0
  52 0096 5F5F5054 		.ascii	"__PTRDIFF_TYPE__ int\000"
  52      52444946 
  52      465F5459 
  52      50455F5F 
  52      20696E74 
  53 00ab 01       		.byte	0x1
  54 00ac 00       		.uleb128 0x0
  55 00ad 5F5F5743 		.ascii	"__WCHAR_TYPE__ unsigned int\000"
  55      4841525F 
  55      54595045 
  55      5F5F2075 
  55      6E736967 
  56 00c9 01       		.byte	0x1
  57 00ca 00       		.uleb128 0x0
  58 00cb 5F5F5749 		.ascii	"__WINT_TYPE__ unsigned int\000"
  58      4E545F54 
  58      5950455F 
  58      5F20756E 
  58      7369676E 
  59 00e6 01       		.byte	0x1
  60 00e7 00       		.uleb128 0x0
  61 00e8 5F5F494E 		.ascii	"__INTMAX_TYPE__ long long int\000"
  61      544D4158 
  61      5F545950 
  61      455F5F20 
  61      6C6F6E67 
  62 0106 01       		.byte	0x1
  63 0107 00       		.uleb128 0x0
  64 0108 5F5F5549 		.ascii	"__UINTMAX_TYPE__ long long unsigned int\000"
  64      4E544D41 
  64      585F5459 
  64      50455F5F 
  64      206C6F6E 
  65 0130 01       		.byte	0x1
  66 0131 00       		.uleb128 0x0
ARM GAS  /tmp/cck0uY6y.s 			page 3


  67 0132 5F5F4348 		.ascii	"__CHAR16_TYPE__ short unsigned int\000"
  67      41523136 
  67      5F545950 
  67      455F5F20 
  67      73686F72 
  68 0155 01       		.byte	0x1
  69 0156 00       		.uleb128 0x0
  70 0157 5F5F4348 		.ascii	"__CHAR32_TYPE__ unsigned int\000"
  70      41523332 
  70      5F545950 
  70      455F5F20 
  70      756E7369 
  71 0174 01       		.byte	0x1
  72 0175 00       		.uleb128 0x0
  73 0176 5F5F4758 		.ascii	"__GXX_ABI_VERSION 1002\000"
  73      585F4142 
  73      495F5645 
  73      5253494F 
  73      4E203130 
  74 018d 01       		.byte	0x1
  75 018e 00       		.uleb128 0x0
  76 018f 5F5F5343 		.ascii	"__SCHAR_MAX__ 127\000"
  76      4841525F 
  76      4D41585F 
  76      5F203132 
  76      3700
  77 01a1 01       		.byte	0x1
  78 01a2 00       		.uleb128 0x0
  79 01a3 5F5F5348 		.ascii	"__SHRT_MAX__ 32767\000"
  79      52545F4D 
  79      41585F5F 
  79      20333237 
  79      363700
  80 01b6 01       		.byte	0x1
  81 01b7 00       		.uleb128 0x0
  82 01b8 5F5F494E 		.ascii	"__INT_MAX__ 2147483647\000"
  82      545F4D41 
  82      585F5F20 
  82      32313437 
  82      34383336 
  83 01cf 01       		.byte	0x1
  84 01d0 00       		.uleb128 0x0
  85 01d1 5F5F4C4F 		.ascii	"__LONG_MAX__ 2147483647L\000"
  85      4E475F4D 
  85      41585F5F 
  85      20323134 
  85      37343833 
  86 01ea 01       		.byte	0x1
  87 01eb 00       		.uleb128 0x0
  88 01ec 5F5F4C4F 		.ascii	"__LONG_LONG_MAX__ 9223372036854775807LL\000"
  88      4E475F4C 
  88      4F4E475F 
  88      4D41585F 
  88      5F203932 
  89 0214 01       		.byte	0x1
  90 0215 00       		.uleb128 0x0
  91 0216 5F5F5743 		.ascii	"__WCHAR_MAX__ 4294967295U\000"
ARM GAS  /tmp/cck0uY6y.s 			page 4


  91      4841525F 
  91      4D41585F 
  91      5F203432 
  91      39343936 
  92 0230 01       		.byte	0x1
  93 0231 00       		.uleb128 0x0
  94 0232 5F5F4348 		.ascii	"__CHAR_BIT__ 8\000"
  94      41525F42 
  94      49545F5F 
  94      203800
  95 0241 01       		.byte	0x1
  96 0242 00       		.uleb128 0x0
  97 0243 5F5F494E 		.ascii	"__INTMAX_MAX__ 9223372036854775807LL\000"
  97      544D4158 
  97      5F4D4158 
  97      5F5F2039 
  97      32323333 
  98 0268 01       		.byte	0x1
  99 0269 00       		.uleb128 0x0
 100 026a 5F5F464C 		.ascii	"__FLT_EVAL_METHOD__ 0\000"
 100      545F4556 
 100      414C5F4D 
 100      4554484F 
 100      445F5F20 
 101 0280 01       		.byte	0x1
 102 0281 00       		.uleb128 0x0
 103 0282 5F5F4445 		.ascii	"__DEC_EVAL_METHOD__ 2\000"
 103      435F4556 
 103      414C5F4D 
 103      4554484F 
 103      445F5F20 
 104 0298 01       		.byte	0x1
 105 0299 00       		.uleb128 0x0
 106 029a 5F5F464C 		.ascii	"__FLT_RADIX__ 2\000"
 106      545F5241 
 106      4449585F 
 106      5F203200 
 107 02aa 01       		.byte	0x1
 108 02ab 00       		.uleb128 0x0
 109 02ac 5F5F464C 		.ascii	"__FLT_MANT_DIG__ 24\000"
 109      545F4D41 
 109      4E545F44 
 109      49475F5F 
 109      20323400 
 110 02c0 01       		.byte	0x1
 111 02c1 00       		.uleb128 0x0
 112 02c2 5F5F464C 		.ascii	"__FLT_DIG__ 6\000"
 112      545F4449 
 112      475F5F20 
 112      3600
 113 02d0 01       		.byte	0x1
 114 02d1 00       		.uleb128 0x0
 115 02d2 5F5F464C 		.ascii	"__FLT_MIN_EXP__ (-125)\000"
 115      545F4D49 
 115      4E5F4558 
 115      505F5F20 
 115      282D3132 
ARM GAS  /tmp/cck0uY6y.s 			page 5


 116 02e9 01       		.byte	0x1
 117 02ea 00       		.uleb128 0x0
 118 02eb 5F5F464C 		.ascii	"__FLT_MIN_10_EXP__ (-37)\000"
 118      545F4D49 
 118      4E5F3130 
 118      5F455850 
 118      5F5F2028 
 119 0304 01       		.byte	0x1
 120 0305 00       		.uleb128 0x0
 121 0306 5F5F464C 		.ascii	"__FLT_MAX_EXP__ 128\000"
 121      545F4D41 
 121      585F4558 
 121      505F5F20 
 121      31323800 
 122 031a 01       		.byte	0x1
 123 031b 00       		.uleb128 0x0
 124 031c 5F5F464C 		.ascii	"__FLT_MAX_10_EXP__ 38\000"
 124      545F4D41 
 124      585F3130 
 124      5F455850 
 124      5F5F2033 
 125 0332 01       		.byte	0x1
 126 0333 00       		.uleb128 0x0
 127 0334 5F5F464C 		.ascii	"__FLT_MAX__ 3.40282347e+38F\000"
 127      545F4D41 
 127      585F5F20 
 127      332E3430 
 127      32383233 
 128 0350 01       		.byte	0x1
 129 0351 00       		.uleb128 0x0
 130 0352 5F5F464C 		.ascii	"__FLT_MIN__ 1.17549435e-38F\000"
 130      545F4D49 
 130      4E5F5F20 
 130      312E3137 
 130      35343934 
 131 036e 01       		.byte	0x1
 132 036f 00       		.uleb128 0x0
 133 0370 5F5F464C 		.ascii	"__FLT_EPSILON__ 1.19209290e-7F\000"
 133      545F4550 
 133      53494C4F 
 133      4E5F5F20 
 133      312E3139 
 134 038f 01       		.byte	0x1
 135 0390 00       		.uleb128 0x0
 136 0391 5F5F464C 		.ascii	"__FLT_DENORM_MIN__ 1.40129846e-45F\000"
 136      545F4445 
 136      4E4F524D 
 136      5F4D494E 
 136      5F5F2031 
 137 03b4 01       		.byte	0x1
 138 03b5 00       		.uleb128 0x0
 139 03b6 5F5F464C 		.ascii	"__FLT_HAS_DENORM__ 1\000"
 139      545F4841 
 139      535F4445 
 139      4E4F524D 
 139      5F5F2031 
 140 03cb 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 6


 141 03cc 00       		.uleb128 0x0
 142 03cd 5F5F464C 		.ascii	"__FLT_HAS_INFINITY__ 1\000"
 142      545F4841 
 142      535F494E 
 142      46494E49 
 142      54595F5F 
 143 03e4 01       		.byte	0x1
 144 03e5 00       		.uleb128 0x0
 145 03e6 5F5F464C 		.ascii	"__FLT_HAS_QUIET_NAN__ 1\000"
 145      545F4841 
 145      535F5155 
 145      4945545F 
 145      4E414E5F 
 146 03fe 01       		.byte	0x1
 147 03ff 00       		.uleb128 0x0
 148 0400 5F5F4442 		.ascii	"__DBL_MANT_DIG__ 53\000"
 148      4C5F4D41 
 148      4E545F44 
 148      49475F5F 
 148      20353300 
 149 0414 01       		.byte	0x1
 150 0415 00       		.uleb128 0x0
 151 0416 5F5F4442 		.ascii	"__DBL_DIG__ 15\000"
 151      4C5F4449 
 151      475F5F20 
 151      313500
 152 0425 01       		.byte	0x1
 153 0426 00       		.uleb128 0x0
 154 0427 5F5F4442 		.ascii	"__DBL_MIN_EXP__ (-1021)\000"
 154      4C5F4D49 
 154      4E5F4558 
 154      505F5F20 
 154      282D3130 
 155 043f 01       		.byte	0x1
 156 0440 00       		.uleb128 0x0
 157 0441 5F5F4442 		.ascii	"__DBL_MIN_10_EXP__ (-307)\000"
 157      4C5F4D49 
 157      4E5F3130 
 157      5F455850 
 157      5F5F2028 
 158 045b 01       		.byte	0x1
 159 045c 00       		.uleb128 0x0
 160 045d 5F5F4442 		.ascii	"__DBL_MAX_EXP__ 1024\000"
 160      4C5F4D41 
 160      585F4558 
 160      505F5F20 
 160      31303234 
 161 0472 01       		.byte	0x1
 162 0473 00       		.uleb128 0x0
 163 0474 5F5F4442 		.ascii	"__DBL_MAX_10_EXP__ 308\000"
 163      4C5F4D41 
 163      585F3130 
 163      5F455850 
 163      5F5F2033 
 164 048b 01       		.byte	0x1
 165 048c 00       		.uleb128 0x0
 166 048d 5F5F4442 		.ascii	"__DBL_MAX__ 1.7976931348623157e+308\000"
ARM GAS  /tmp/cck0uY6y.s 			page 7


 166      4C5F4D41 
 166      585F5F20 
 166      312E3739 
 166      37363933 
 167 04b1 01       		.byte	0x1
 168 04b2 00       		.uleb128 0x0
 169 04b3 5F5F4442 		.ascii	"__DBL_MIN__ 2.2250738585072014e-308\000"
 169      4C5F4D49 
 169      4E5F5F20 
 169      322E3232 
 169      35303733 
 170 04d7 01       		.byte	0x1
 171 04d8 00       		.uleb128 0x0
 172 04d9 5F5F4442 		.ascii	"__DBL_EPSILON__ 2.2204460492503131e-16\000"
 172      4C5F4550 
 172      53494C4F 
 172      4E5F5F20 
 172      322E3232 
 173 0500 01       		.byte	0x1
 174 0501 00       		.uleb128 0x0
 175 0502 5F5F4442 		.ascii	"__DBL_DENORM_MIN__ 4.9406564584124654e-324\000"
 175      4C5F4445 
 175      4E4F524D 
 175      5F4D494E 
 175      5F5F2034 
 176 052d 01       		.byte	0x1
 177 052e 00       		.uleb128 0x0
 178 052f 5F5F4442 		.ascii	"__DBL_HAS_DENORM__ 1\000"
 178      4C5F4841 
 178      535F4445 
 178      4E4F524D 
 178      5F5F2031 
 179 0544 01       		.byte	0x1
 180 0545 00       		.uleb128 0x0
 181 0546 5F5F4442 		.ascii	"__DBL_HAS_INFINITY__ 1\000"
 181      4C5F4841 
 181      535F494E 
 181      46494E49 
 181      54595F5F 
 182 055d 01       		.byte	0x1
 183 055e 00       		.uleb128 0x0
 184 055f 5F5F4442 		.ascii	"__DBL_HAS_QUIET_NAN__ 1\000"
 184      4C5F4841 
 184      535F5155 
 184      4945545F 
 184      4E414E5F 
 185 0577 01       		.byte	0x1
 186 0578 00       		.uleb128 0x0
 187 0579 5F5F4C44 		.ascii	"__LDBL_MANT_DIG__ 53\000"
 187      424C5F4D 
 187      414E545F 
 187      4449475F 
 187      5F203533 
 188 058e 01       		.byte	0x1
 189 058f 00       		.uleb128 0x0
 190 0590 5F5F4C44 		.ascii	"__LDBL_DIG__ 15\000"
 190      424C5F44 
ARM GAS  /tmp/cck0uY6y.s 			page 8


 190      49475F5F 
 190      20313500 
 191 05a0 01       		.byte	0x1
 192 05a1 00       		.uleb128 0x0
 193 05a2 5F5F4C44 		.ascii	"__LDBL_MIN_EXP__ (-1021)\000"
 193      424C5F4D 
 193      494E5F45 
 193      58505F5F 
 193      20282D31 
 194 05bb 01       		.byte	0x1
 195 05bc 00       		.uleb128 0x0
 196 05bd 5F5F4C44 		.ascii	"__LDBL_MIN_10_EXP__ (-307)\000"
 196      424C5F4D 
 196      494E5F31 
 196      305F4558 
 196      505F5F20 
 197 05d8 01       		.byte	0x1
 198 05d9 00       		.uleb128 0x0
 199 05da 5F5F4C44 		.ascii	"__LDBL_MAX_EXP__ 1024\000"
 199      424C5F4D 
 199      41585F45 
 199      58505F5F 
 199      20313032 
 200 05f0 01       		.byte	0x1
 201 05f1 00       		.uleb128 0x0
 202 05f2 5F5F4C44 		.ascii	"__LDBL_MAX_10_EXP__ 308\000"
 202      424C5F4D 
 202      41585F31 
 202      305F4558 
 202      505F5F20 
 203 060a 01       		.byte	0x1
 204 060b 00       		.uleb128 0x0
 205 060c 5F5F4445 		.ascii	"__DECIMAL_DIG__ 17\000"
 205      43494D41 
 205      4C5F4449 
 205      475F5F20 
 205      313700
 206 061f 01       		.byte	0x1
 207 0620 00       		.uleb128 0x0
 208 0621 5F5F4C44 		.ascii	"__LDBL_MAX__ 1.7976931348623157e+308L\000"
 208      424C5F4D 
 208      41585F5F 
 208      20312E37 
 208      39373639 
 209 0647 01       		.byte	0x1
 210 0648 00       		.uleb128 0x0
 211 0649 5F5F4C44 		.ascii	"__LDBL_MIN__ 2.2250738585072014e-308L\000"
 211      424C5F4D 
 211      494E5F5F 
 211      20322E32 
 211      32353037 
 212 066f 01       		.byte	0x1
 213 0670 00       		.uleb128 0x0
 214 0671 5F5F4C44 		.ascii	"__LDBL_EPSILON__ 2.2204460492503131e-16L\000"
 214      424C5F45 
 214      5053494C 
 214      4F4E5F5F 
ARM GAS  /tmp/cck0uY6y.s 			page 9


 214      20322E32 
 215 069a 01       		.byte	0x1
 216 069b 00       		.uleb128 0x0
 217 069c 5F5F4C44 		.ascii	"__LDBL_DENORM_MIN__ 4.9406564584124654e-324L\000"
 217      424C5F44 
 217      454E4F52 
 217      4D5F4D49 
 217      4E5F5F20 
 218 06c9 01       		.byte	0x1
 219 06ca 00       		.uleb128 0x0
 220 06cb 5F5F4C44 		.ascii	"__LDBL_HAS_DENORM__ 1\000"
 220      424C5F48 
 220      41535F44 
 220      454E4F52 
 220      4D5F5F20 
 221 06e1 01       		.byte	0x1
 222 06e2 00       		.uleb128 0x0
 223 06e3 5F5F4C44 		.ascii	"__LDBL_HAS_INFINITY__ 1\000"
 223      424C5F48 
 223      41535F49 
 223      4E46494E 
 223      4954595F 
 224 06fb 01       		.byte	0x1
 225 06fc 00       		.uleb128 0x0
 226 06fd 5F5F4C44 		.ascii	"__LDBL_HAS_QUIET_NAN__ 1\000"
 226      424C5F48 
 226      41535F51 
 226      55494554 
 226      5F4E414E 
 227 0716 01       		.byte	0x1
 228 0717 00       		.uleb128 0x0
 229 0718 5F5F4445 		.ascii	"__DEC32_MANT_DIG__ 7\000"
 229      4333325F 
 229      4D414E54 
 229      5F444947 
 229      5F5F2037 
 230 072d 01       		.byte	0x1
 231 072e 00       		.uleb128 0x0
 232 072f 5F5F4445 		.ascii	"__DEC32_MIN_EXP__ (-94)\000"
 232      4333325F 
 232      4D494E5F 
 232      4558505F 
 232      5F20282D 
 233 0747 01       		.byte	0x1
 234 0748 00       		.uleb128 0x0
 235 0749 5F5F4445 		.ascii	"__DEC32_MAX_EXP__ 97\000"
 235      4333325F 
 235      4D41585F 
 235      4558505F 
 235      5F203937 
 236 075e 01       		.byte	0x1
 237 075f 00       		.uleb128 0x0
 238 0760 5F5F4445 		.ascii	"__DEC32_MIN__ 1E-95DF\000"
 238      4333325F 
 238      4D494E5F 
 238      5F203145 
 238      2D393544 
ARM GAS  /tmp/cck0uY6y.s 			page 10


 239 0776 01       		.byte	0x1
 240 0777 00       		.uleb128 0x0
 241 0778 5F5F4445 		.ascii	"__DEC32_MAX__ 9.999999E96DF\000"
 241      4333325F 
 241      4D41585F 
 241      5F20392E 
 241      39393939 
 242 0794 01       		.byte	0x1
 243 0795 00       		.uleb128 0x0
 244 0796 5F5F4445 		.ascii	"__DEC32_EPSILON__ 1E-6DF\000"
 244      4333325F 
 244      45505349 
 244      4C4F4E5F 
 244      5F203145 
 245 07af 01       		.byte	0x1
 246 07b0 00       		.uleb128 0x0
 247 07b1 5F5F4445 		.ascii	"__DEC32_SUBNORMAL_MIN__ 0.000001E-95DF\000"
 247      4333325F 
 247      5355424E 
 247      4F524D41 
 247      4C5F4D49 
 248 07d8 01       		.byte	0x1
 249 07d9 00       		.uleb128 0x0
 250 07da 5F5F4445 		.ascii	"__DEC64_MANT_DIG__ 16\000"
 250      4336345F 
 250      4D414E54 
 250      5F444947 
 250      5F5F2031 
 251 07f0 01       		.byte	0x1
 252 07f1 00       		.uleb128 0x0
 253 07f2 5F5F4445 		.ascii	"__DEC64_MIN_EXP__ (-382)\000"
 253      4336345F 
 253      4D494E5F 
 253      4558505F 
 253      5F20282D 
 254 080b 01       		.byte	0x1
 255 080c 00       		.uleb128 0x0
 256 080d 5F5F4445 		.ascii	"__DEC64_MAX_EXP__ 385\000"
 256      4336345F 
 256      4D41585F 
 256      4558505F 
 256      5F203338 
 257 0823 01       		.byte	0x1
 258 0824 00       		.uleb128 0x0
 259 0825 5F5F4445 		.ascii	"__DEC64_MIN__ 1E-383DD\000"
 259      4336345F 
 259      4D494E5F 
 259      5F203145 
 259      2D333833 
 260 083c 01       		.byte	0x1
 261 083d 00       		.uleb128 0x0
 262 083e 5F5F4445 		.ascii	"__DEC64_MAX__ 9.999999999999999E384DD\000"
 262      4336345F 
 262      4D41585F 
 262      5F20392E 
 262      39393939 
 263 0864 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 11


 264 0865 00       		.uleb128 0x0
 265 0866 5F5F4445 		.ascii	"__DEC64_EPSILON__ 1E-15DD\000"
 265      4336345F 
 265      45505349 
 265      4C4F4E5F 
 265      5F203145 
 266 0880 01       		.byte	0x1
 267 0881 00       		.uleb128 0x0
 268 0882 5F5F4445 		.ascii	"__DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD\000"
 268      4336345F 
 268      5355424E 
 268      4F524D41 
 268      4C5F4D49 
 269 08b3 01       		.byte	0x1
 270 08b4 00       		.uleb128 0x0
 271 08b5 5F5F4445 		.ascii	"__DEC128_MANT_DIG__ 34\000"
 271      43313238 
 271      5F4D414E 
 271      545F4449 
 271      475F5F20 
 272 08cc 01       		.byte	0x1
 273 08cd 00       		.uleb128 0x0
 274 08ce 5F5F4445 		.ascii	"__DEC128_MIN_EXP__ (-6142)\000"
 274      43313238 
 274      5F4D494E 
 274      5F455850 
 274      5F5F2028 
 275 08e9 01       		.byte	0x1
 276 08ea 00       		.uleb128 0x0
 277 08eb 5F5F4445 		.ascii	"__DEC128_MAX_EXP__ 6145\000"
 277      43313238 
 277      5F4D4158 
 277      5F455850 
 277      5F5F2036 
 278 0903 01       		.byte	0x1
 279 0904 00       		.uleb128 0x0
 280 0905 5F5F4445 		.ascii	"__DEC128_MIN__ 1E-6143DL\000"
 280      43313238 
 280      5F4D494E 
 280      5F5F2031 
 280      452D3631 
 281 091e 01       		.byte	0x1
 282 091f 00       		.uleb128 0x0
 283 0920 5F5F4445 		.ascii	"__DEC128_MAX__ 9.999999999999999999999999999999999E"
 283      43313238 
 283      5F4D4158 
 283      5F5F2039 
 283      2E393939 
 284 0953 36313434 		.ascii	"6144DL\000"
 284      444C00
 285 095a 01       		.byte	0x1
 286 095b 00       		.uleb128 0x0
 287 095c 5F5F4445 		.ascii	"__DEC128_EPSILON__ 1E-33DL\000"
 287      43313238 
 287      5F455053 
 287      494C4F4E 
 287      5F5F2031 
ARM GAS  /tmp/cck0uY6y.s 			page 12


 288 0977 01       		.byte	0x1
 289 0978 00       		.uleb128 0x0
 290 0979 5F5F4445 		.ascii	"__DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000"
 290      43313238 
 290      5F535542 
 290      4E4F524D 
 290      414C5F4D 
 291 09ac 30303030 		.ascii	"000000001E-6143DL\000"
 291      30303030 
 291      31452D36 
 291      31343344 
 291      4C00
 292 09be 01       		.byte	0x1
 293 09bf 00       		.uleb128 0x0
 294 09c0 5F5F5245 		.ascii	"__REGISTER_PREFIX__ \000"
 294      47495354 
 294      45525F50 
 294      52454649 
 294      585F5F20 
 295 09d5 01       		.byte	0x1
 296 09d6 00       		.uleb128 0x0
 297 09d7 5F5F5553 		.ascii	"__USER_LABEL_PREFIX__ \000"
 297      45525F4C 
 297      4142454C 
 297      5F505245 
 297      4649585F 
 298 09ee 01       		.byte	0x1
 299 09ef 00       		.uleb128 0x0
 300 09f0 5F5F5645 		.ascii	"__VERSION__ \"4.4.1\"\000"
 300      5253494F 
 300      4E5F5F20 
 300      22342E34 
 300      2E312200 
 301 0a04 01       		.byte	0x1
 302 0a05 00       		.uleb128 0x0
 303 0a06 5F5F474E 		.ascii	"__GNUC_STDC_INLINE__ 1\000"
 303      55435F53 
 303      5444435F 
 303      494E4C49 
 303      4E455F5F 
 304 0a1d 01       		.byte	0x1
 305 0a1e 00       		.uleb128 0x0
 306 0a1f 5F5F4E4F 		.ascii	"__NO_INLINE__ 1\000"
 306      5F494E4C 
 306      494E455F 
 306      5F203100 
 307 0a2f 01       		.byte	0x1
 308 0a30 00       		.uleb128 0x0
 309 0a31 5F5F4649 		.ascii	"__FINITE_MATH_ONLY__ 0\000"
 309      4E495445 
 309      5F4D4154 
 309      485F4F4E 
 309      4C595F5F 
 310 0a48 01       		.byte	0x1
 311 0a49 00       		.uleb128 0x0
 312 0a4a 5F5F4348 		.ascii	"__CHAR_UNSIGNED__ 1\000"
 312      41525F55 
ARM GAS  /tmp/cck0uY6y.s 			page 13


 312      4E534947 
 312      4E45445F 
 312      5F203100 
 313 0a5e 01       		.byte	0x1
 314 0a5f 00       		.uleb128 0x0
 315 0a60 5F5F5349 		.ascii	"__SIZEOF_INT__ 4\000"
 315      5A454F46 
 315      5F494E54 
 315      5F5F2034 
 315      00
 316 0a71 01       		.byte	0x1
 317 0a72 00       		.uleb128 0x0
 318 0a73 5F5F5349 		.ascii	"__SIZEOF_LONG__ 4\000"
 318      5A454F46 
 318      5F4C4F4E 
 318      475F5F20 
 318      3400
 319 0a85 01       		.byte	0x1
 320 0a86 00       		.uleb128 0x0
 321 0a87 5F5F5349 		.ascii	"__SIZEOF_LONG_LONG__ 8\000"
 321      5A454F46 
 321      5F4C4F4E 
 321      475F4C4F 
 321      4E475F5F 
 322 0a9e 01       		.byte	0x1
 323 0a9f 00       		.uleb128 0x0
 324 0aa0 5F5F5349 		.ascii	"__SIZEOF_SHORT__ 2\000"
 324      5A454F46 
 324      5F53484F 
 324      52545F5F 
 324      203200
 325 0ab3 01       		.byte	0x1
 326 0ab4 00       		.uleb128 0x0
 327 0ab5 5F5F5349 		.ascii	"__SIZEOF_FLOAT__ 4\000"
 327      5A454F46 
 327      5F464C4F 
 327      41545F5F 
 327      203400
 328 0ac8 01       		.byte	0x1
 329 0ac9 00       		.uleb128 0x0
 330 0aca 5F5F5349 		.ascii	"__SIZEOF_DOUBLE__ 8\000"
 330      5A454F46 
 330      5F444F55 
 330      424C455F 
 330      5F203800 
 331 0ade 01       		.byte	0x1
 332 0adf 00       		.uleb128 0x0
 333 0ae0 5F5F5349 		.ascii	"__SIZEOF_LONG_DOUBLE__ 8\000"
 333      5A454F46 
 333      5F4C4F4E 
 333      475F444F 
 333      55424C45 
 334 0af9 01       		.byte	0x1
 335 0afa 00       		.uleb128 0x0
 336 0afb 5F5F5349 		.ascii	"__SIZEOF_SIZE_T__ 4\000"
 336      5A454F46 
 336      5F53495A 
ARM GAS  /tmp/cck0uY6y.s 			page 14


 336      455F545F 
 336      5F203400 
 337 0b0f 01       		.byte	0x1
 338 0b10 00       		.uleb128 0x0
 339 0b11 5F5F5349 		.ascii	"__SIZEOF_WCHAR_T__ 4\000"
 339      5A454F46 
 339      5F574348 
 339      41525F54 
 339      5F5F2034 
 340 0b26 01       		.byte	0x1
 341 0b27 00       		.uleb128 0x0
 342 0b28 5F5F5349 		.ascii	"__SIZEOF_WINT_T__ 4\000"
 342      5A454F46 
 342      5F57494E 
 342      545F545F 
 342      5F203400 
 343 0b3c 01       		.byte	0x1
 344 0b3d 00       		.uleb128 0x0
 345 0b3e 5F5F5349 		.ascii	"__SIZEOF_PTRDIFF_T__ 4\000"
 345      5A454F46 
 345      5F505452 
 345      44494646 
 345      5F545F5F 
 346 0b55 01       		.byte	0x1
 347 0b56 00       		.uleb128 0x0
 348 0b57 5F5F5349 		.ascii	"__SIZEOF_POINTER__ 4\000"
 348      5A454F46 
 348      5F504F49 
 348      4E544552 
 348      5F5F2034 
 349 0b6c 01       		.byte	0x1
 350 0b6d 00       		.uleb128 0x0
 351 0b6e 5F5F6172 		.ascii	"__arm__ 1\000"
 351      6D5F5F20 
 351      3100
 352 0b78 01       		.byte	0x1
 353 0b79 00       		.uleb128 0x0
 354 0b7a 5F5F4150 		.ascii	"__APCS_32__ 1\000"
 354      43535F33 
 354      325F5F20 
 354      3100
 355 0b88 01       		.byte	0x1
 356 0b89 00       		.uleb128 0x0
 357 0b8a 5F5F7468 		.ascii	"__thumb__ 1\000"
 357      756D625F 
 357      5F203100 
 358 0b96 01       		.byte	0x1
 359 0b97 00       		.uleb128 0x0
 360 0b98 5F5F7468 		.ascii	"__thumb2__ 1\000"
 360      756D6232 
 360      5F5F2031 
 360      00
 361 0ba5 01       		.byte	0x1
 362 0ba6 00       		.uleb128 0x0
 363 0ba7 5F5F4152 		.ascii	"__ARMEL__ 1\000"
 363      4D454C5F 
 363      5F203100 
ARM GAS  /tmp/cck0uY6y.s 			page 15


 364 0bb3 01       		.byte	0x1
 365 0bb4 00       		.uleb128 0x0
 366 0bb5 5F5F5448 		.ascii	"__THUMBEL__ 1\000"
 366      554D4245 
 366      4C5F5F20 
 366      3100
 367 0bc3 01       		.byte	0x1
 368 0bc4 00       		.uleb128 0x0
 369 0bc5 5F5F534F 		.ascii	"__SOFTFP__ 1\000"
 369      46544650 
 369      5F5F2031 
 369      00
 370 0bd2 01       		.byte	0x1
 371 0bd3 00       		.uleb128 0x0
 372 0bd4 5F5F5646 		.ascii	"__VFP_FP__ 1\000"
 372      505F4650 
 372      5F5F2031 
 372      00
 373 0be1 01       		.byte	0x1
 374 0be2 00       		.uleb128 0x0
 375 0be3 5F5F5448 		.ascii	"__THUMB_INTERWORK__ 1\000"
 375      554D425F 
 375      494E5445 
 375      52574F52 
 375      4B5F5F20 
 376 0bf9 01       		.byte	0x1
 377 0bfa 00       		.uleb128 0x0
 378 0bfb 5F5F4152 		.ascii	"__ARM_ARCH_7M__ 1\000"
 378      4D5F4152 
 378      43485F37 
 378      4D5F5F20 
 378      3100
 379 0c0d 01       		.byte	0x1
 380 0c0e 00       		.uleb128 0x0
 381 0c0f 5F5F4152 		.ascii	"__ARM_EABI__ 1\000"
 381      4D5F4541 
 381      42495F5F 
 381      203100
 382 0c1e 01       		.byte	0x1
 383 0c1f 00       		.uleb128 0x0
 384 0c20 5F5F4758 		.ascii	"__GXX_TYPEINFO_EQUALITY_INLINE 0\000"
 384      585F5459 
 384      5045494E 
 384      464F5F45 
 384      5155414C 
 385 0c41 01       		.byte	0x1
 386 0c42 00       		.uleb128 0x0
 387 0c43 5F5F454C 		.ascii	"__ELF__ 1\000"
 387      465F5F20 
 387      3100
 388 0c4d 01       		.byte	0x1
 389 0c4e 00       		.uleb128 0x0
 390 0c4f 5F5F4249 		.ascii	"__BIGGEST_ALIGNMENT__ 8\000"
 390      47474553 
 390      545F414C 
 390      49474E4D 
 390      454E545F 
ARM GAS  /tmp/cck0uY6y.s 			page 16


 391 0c67 01       		.byte	0x1
 392 0c68 00       		.uleb128 0x0
 393 0c69 5F5F5553 		.ascii	"__USES_INITFINI__ 1\000"
 393      45535F49 
 393      4E495446 
 393      494E495F 
 393      5F203100 
 394 0c7d 01       		.byte	0x1
 395 0c7e 00       		.uleb128 0x0
 396 0c7f 465F4350 		.ascii	"F_CPU 12000000UL\000"
 396      55203132 
 396      30303030 
 396      3030554C 
 396      00
 397 0c90 01       		.byte	0x1
 398 0c91 00       		.uleb128 0x0
 399 0c92 465F434C 		.ascii	"F_CLOCK 12000000UL\000"
 399      4F434B20 
 399      31323030 
 399      30303030 
 399      554C00
 400 0ca5 01       		.byte	0x1
 401 0ca6 00       		.uleb128 0x0
 402 0ca7 424F4152 		.ascii	"BOARD BOARD_\000"
 402      4420424F 
 402      4152445F 
 402      00
 403 0cb4 01       		.byte	0x1
 404 0cb5 00       		.uleb128 0x0
 405 0cb6 44454255 		.ascii	"DEBUG 1\000"
 405      47203100 
 406 0cbe 01       		.byte	0x1
 407 0cbf 00       		.uleb128 0x0
 408 0cc0 5041434B 		.ascii	"PACK_STRUCT_END __attribute((packed))\000"
 408      5F535452 
 408      5543545F 
 408      454E4420 
 408      5F5F6174 
 409 0ce6 01       		.byte	0x1
 410 0ce7 00       		.uleb128 0x0
 411 0ce8 414C4947 		.ascii	"ALIGN_STRUCT_END __attribute((aligned(4)))\000"
 411      4E5F5354 
 411      52554354 
 411      5F454E44 
 411      205F5F61 
 412 0d13 01       		.byte	0x1
 413 0d14 00       		.uleb128 0x0
 414 0d15 5F4C5043 		.ascii	"_LPC1758_ 1\000"
 414      31373538 
 414      5F203100 
 415              		.file 2 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../l
 416 0d21 03       		.byte	0x3
 417 0d22 37       		.uleb128 0x37
 418 0d23 02       		.uleb128 0x2
 419 0d24 01       		.byte	0x1
 420 0d25 1B       		.uleb128 0x1b
 421 0d26 5F535444 		.ascii	"_STDIO_H_ \000"
ARM GAS  /tmp/cck0uY6y.s 			page 17


 421      494F5F48 
 421      5F2000
 422              		.file 3 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../l
 423 0d31 03       		.byte	0x3
 424 0d32 1D       		.uleb128 0x1d
 425 0d33 03       		.uleb128 0x3
 426 0d34 01       		.byte	0x1
 427 0d35 0D       		.uleb128 0xd
 428 0d36 5F414E53 		.ascii	"_ANSIDECL_H_ \000"
 428      49444543 
 428      4C5F485F 
 428      2000
 429              		.file 4 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../l
 430 0d44 03       		.byte	0x3
 431 0d45 0F       		.uleb128 0xf
 432 0d46 04       		.uleb128 0x4
 433 0d47 01       		.byte	0x1
 434 0d48 05       		.uleb128 0x5
 435 0d49 5F5F4E45 		.ascii	"__NEWLIB_H__ 1\000"
 435      574C4942 
 435      5F485F5F 
 435      203100
 436 0d58 01       		.byte	0x1
 437 0d59 0B       		.uleb128 0xb
 438 0d5a 5F4E4557 		.ascii	"_NEWLIB_VERSION \"1.17.0\"\000"
 438      4C49425F 
 438      56455253 
 438      494F4E20 
 438      22312E31 
 439 0d73 01       		.byte	0x1
 440 0d74 12       		.uleb128 0x12
 441 0d75 5F57414E 		.ascii	"_WANT_IO_LONG_LONG 1\000"
 441      545F494F 
 441      5F4C4F4E 
 441      475F4C4F 
 441      4E472031 
 442 0d8a 01       		.byte	0x1
 443 0d8b 22       		.uleb128 0x22
 444 0d8c 5F4D425F 		.ascii	"_MB_LEN_MAX 1\000"
 444      4C454E5F 
 444      4D415820 
 444      3100
 445 0d9a 01       		.byte	0x1
 446 0d9b 2C       		.uleb128 0x2c
 447 0d9c 48415645 		.ascii	"HAVE_INITFINI_ARRAY 1\000"
 447      5F494E49 
 447      5446494E 
 447      495F4152 
 447      52415920 
 448 0db2 01       		.byte	0x1
 449 0db3 30       		.uleb128 0x30
 450 0db4 5F415445 		.ascii	"_ATEXIT_DYNAMIC_ALLOC 1\000"
 450      5849545F 
 450      44594E41 
 450      4D49435F 
 450      414C4C4F 
 451 0dcc 04       		.byte	0x4
ARM GAS  /tmp/cck0uY6y.s 			page 18


 452              		.file 5 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../l
 453 0dcd 03       		.byte	0x3
 454 0dce 10       		.uleb128 0x10
 455 0dcf 05       		.uleb128 0x5
 456 0dd0 01       		.byte	0x1
 457 0dd1 02       		.uleb128 0x2
 458 0dd2 5F5F5359 		.ascii	"__SYS_CONFIG_H__ \000"
 458      535F434F 
 458      4E464947 
 458      5F485F5F 
 458      2000
 459              		.file 6 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../l
 460 0de4 03       		.byte	0x3
 461 0de5 04       		.uleb128 0x4
 462 0de6 06       		.uleb128 0x6
 463 0de7 01       		.byte	0x1
 464 0de8 3C       		.uleb128 0x3c
 465 0de9 5F5F4945 		.ascii	"__IEEE_LITTLE_ENDIAN \000"
 465      45455F4C 
 465      4954544C 
 465      455F454E 
 465      4449414E 
 466 0dff 04       		.byte	0x4
 467 0e00 01       		.byte	0x1
 468 0e01 8201     		.uleb128 0x82
 469 0e03 5F524545 		.ascii	"_REENT_SMALL \000"
 469      4E545F53 
 469      4D414C4C 
 469      2000
 470 0e11 01       		.byte	0x1
 471 0e12 A601     		.uleb128 0xa6
 472 0e14 5F504F49 		.ascii	"_POINTER_INT long\000"
 472      4E544552 
 472      5F494E54 
 472      206C6F6E 
 472      6700
 473 0e26 02       		.byte	0x2
 474 0e27 AC01     		.uleb128 0xac
 475 0e29 5F5F5241 		.ascii	"__RAND_MAX\000"
 475      4E445F4D 
 475      415800
 476 0e34 01       		.byte	0x1
 477 0e35 B001     		.uleb128 0xb0
 478 0e37 5F5F5241 		.ascii	"__RAND_MAX 0x7fffffff\000"
 478      4E445F4D 
 478      41582030 
 478      78376666 
 478      66666666 
 479 0e4d 01       		.byte	0x1
 480 0e4e BD01     		.uleb128 0xbd
 481 0e50 5F5F494D 		.ascii	"__IMPORT \000"
 481      504F5254 
 481      2000
 482 0e5a 01       		.byte	0x1
 483 0e5b C401     		.uleb128 0xc4
 484 0e5d 5F524541 		.ascii	"_READ_WRITE_RETURN_TYPE int\000"
 484      445F5752 
ARM GAS  /tmp/cck0uY6y.s 			page 19


 484      4954455F 
 484      52455455 
 484      524E5F54 
 485 0e79 04       		.byte	0x4
 486 0e7a 01       		.byte	0x1
 487 0e7b 17       		.uleb128 0x17
 488 0e7c 5F484156 		.ascii	"_HAVE_STDC \000"
 488      455F5354 
 488      44432000 
 489 0e88 01       		.byte	0x1
 490 0e89 2E       		.uleb128 0x2e
 491 0e8a 5F424547 		.ascii	"_BEGIN_STD_C \000"
 491      494E5F53 
 491      54445F43 
 491      2000
 492 0e98 01       		.byte	0x1
 493 0e99 2F       		.uleb128 0x2f
 494 0e9a 5F454E44 		.ascii	"_END_STD_C \000"
 494      5F535444 
 494      5F432000 
 495 0ea6 01       		.byte	0x1
 496 0ea7 30       		.uleb128 0x30
 497 0ea8 5F4E4F54 		.ascii	"_NOTHROW \000"
 497      48524F57 
 497      2000
 498 0eb2 01       		.byte	0x1
 499 0eb3 34       		.uleb128 0x34
 500 0eb4 5F505452 		.ascii	"_PTR void *\000"
 500      20766F69 
 500      64202A00 
 501 0ec0 01       		.byte	0x1
 502 0ec1 35       		.uleb128 0x35
 503 0ec2 5F414E44 		.ascii	"_AND ,\000"
 503      202C00
 504 0ec9 01       		.byte	0x1
 505 0eca 36       		.uleb128 0x36
 506 0ecb 5F4E4F41 		.ascii	"_NOARGS void\000"
 506      52475320 
 506      766F6964 
 506      00
 507 0ed8 01       		.byte	0x1
 508 0ed9 37       		.uleb128 0x37
 509 0eda 5F434F4E 		.ascii	"_CONST const\000"
 509      53542063 
 509      6F6E7374 
 509      00
 510 0ee7 01       		.byte	0x1
 511 0ee8 38       		.uleb128 0x38
 512 0ee9 5F564F4C 		.ascii	"_VOLATILE volatile\000"
 512      4154494C 
 512      4520766F 
 512      6C617469 
 512      6C6500
 513 0efc 01       		.byte	0x1
 514 0efd 39       		.uleb128 0x39
 515 0efe 5F534947 		.ascii	"_SIGNED signed\000"
 515      4E454420 
ARM GAS  /tmp/cck0uY6y.s 			page 20


 515      7369676E 
 515      656400
 516 0f0d 01       		.byte	0x1
 517 0f0e 3A       		.uleb128 0x3a
 518 0f0f 5F444F54 		.ascii	"_DOTS , ...\000"
 518      53202C20 
 518      2E2E2E00 
 519 0f1b 01       		.byte	0x1
 520 0f1c 3B       		.uleb128 0x3b
 521 0f1d 5F564F49 		.ascii	"_VOID void\000"
 521      4420766F 
 521      696400
 522 0f28 01       		.byte	0x1
 523 0f29 41       		.uleb128 0x41
 524 0f2a 5F455846 		.ascii	"_EXFUN_NOTHROW(name,proto) name proto _NOTHROW\000"
 524      554E5F4E 
 524      4F544852 
 524      4F57286E 
 524      616D652C 
 525 0f59 01       		.byte	0x1
 526 0f5a 42       		.uleb128 0x42
 527 0f5b 5F455846 		.ascii	"_EXFUN(name,proto) name proto\000"
 527      554E286E 
 527      616D652C 
 527      70726F74 
 527      6F29206E 
 528 0f79 01       		.byte	0x1
 529 0f7a 43       		.uleb128 0x43
 530 0f7b 5F455850 		.ascii	"_EXPARM(name,proto) (* name) proto\000"
 530      41524D28 
 530      6E616D65 
 530      2C70726F 
 530      746F2920 
 531 0f9e 01       		.byte	0x1
 532 0f9f 45       		.uleb128 0x45
 533 0fa0 5F444546 		.ascii	"_DEFUN(name,arglist,args) name(args)\000"
 533      554E286E 
 533      616D652C 
 533      6172676C 
 533      6973742C 
 534 0fc5 01       		.byte	0x1
 535 0fc6 46       		.uleb128 0x46
 536 0fc7 5F444546 		.ascii	"_DEFUN_VOID(name) name(_NOARGS)\000"
 536      554E5F56 
 536      4F494428 
 536      6E616D65 
 536      29206E61 
 537 0fe7 01       		.byte	0x1
 538 0fe8 47       		.uleb128 0x47
 539 0fe9 5F434153 		.ascii	"_CAST_VOID (void)\000"
 539      545F564F 
 539      49442028 
 539      766F6964 
 539      2900
 540 0ffb 01       		.byte	0x1
 541 0ffc 49       		.uleb128 0x49
 542 0ffd 5F4C4F4E 		.ascii	"_LONG_DOUBLE long double\000"
ARM GAS  /tmp/cck0uY6y.s 			page 21


 542      475F444F 
 542      55424C45 
 542      206C6F6E 
 542      6720646F 
 543 1016 01       		.byte	0x1
 544 1017 4C       		.uleb128 0x4c
 545 1018 5F4C4F4E 		.ascii	"_LONG_LONG_TYPE long long\000"
 545      475F4C4F 
 545      4E475F54 
 545      59504520 
 545      6C6F6E67 
 546 1032 01       		.byte	0x1
 547 1033 4F       		.uleb128 0x4f
 548 1034 5F504152 		.ascii	"_PARAMS(paramlist) paramlist\000"
 548      414D5328 
 548      70617261 
 548      6D6C6973 
 548      74292070 
 549 1051 01       		.byte	0x1
 550 1052 69       		.uleb128 0x69
 551 1053 5F415454 		.ascii	"_ATTRIBUTE(attrs) __attribute__ (attrs)\000"
 551      52494255 
 551      54452861 
 551      74747273 
 551      29205F5F 
 552 107b 04       		.byte	0x4
 553 107c 01       		.byte	0x1
 554 107d 1F       		.uleb128 0x1f
 555 107e 5F465354 		.ascii	"_FSTDIO \000"
 555      44494F20 
 555      00
 556 1087 01       		.byte	0x1
 557 1088 21       		.uleb128 0x21
 558 1089 5F5F6E65 		.ascii	"__need_size_t \000"
 558      65645F73 
 558      697A655F 
 558      742000
 559              		.file 7 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../l
 560 1098 03       		.byte	0x3
 561 1099 22       		.uleb128 0x22
 562 109a 07       		.uleb128 0x7
 563 109b 01       		.byte	0x1
 564 109c BA01     		.uleb128 0xba
 565 109e 5F5F7369 		.ascii	"__size_t__ \000"
 565      7A655F74 
 565      5F5F2000 
 566 10aa 01       		.byte	0x1
 567 10ab BB01     		.uleb128 0xbb
 568 10ad 5F5F5349 		.ascii	"__SIZE_T__ \000"
 568      5A455F54 
 568      5F5F2000 
 569 10b9 01       		.byte	0x1
 570 10ba BC01     		.uleb128 0xbc
 571 10bc 5F53495A 		.ascii	"_SIZE_T \000"
 571      455F5420 
 571      00
 572 10c5 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 22


 573 10c6 BD01     		.uleb128 0xbd
 574 10c8 5F535953 		.ascii	"_SYS_SIZE_T_H \000"
 574      5F53495A 
 574      455F545F 
 574      482000
 575 10d7 01       		.byte	0x1
 576 10d8 BE01     		.uleb128 0xbe
 577 10da 5F545F53 		.ascii	"_T_SIZE_ \000"
 577      495A455F 
 577      2000
 578 10e4 01       		.byte	0x1
 579 10e5 BF01     		.uleb128 0xbf
 580 10e7 5F545F53 		.ascii	"_T_SIZE \000"
 580      495A4520 
 580      00
 581 10f0 01       		.byte	0x1
 582 10f1 C001     		.uleb128 0xc0
 583 10f3 5F5F5349 		.ascii	"__SIZE_T \000"
 583      5A455F54 
 583      2000
 584 10fd 01       		.byte	0x1
 585 10fe C101     		.uleb128 0xc1
 586 1100 5F53495A 		.ascii	"_SIZE_T_ \000"
 586      455F545F 
 586      2000
 587 110a 01       		.byte	0x1
 588 110b C201     		.uleb128 0xc2
 589 110d 5F425344 		.ascii	"_BSD_SIZE_T_ \000"
 589      5F53495A 
 589      455F545F 
 589      2000
 590 111b 01       		.byte	0x1
 591 111c C301     		.uleb128 0xc3
 592 111e 5F53495A 		.ascii	"_SIZE_T_DEFINED_ \000"
 592      455F545F 
 592      44454649 
 592      4E45445F 
 592      2000
 593 1130 01       		.byte	0x1
 594 1131 C401     		.uleb128 0xc4
 595 1133 5F53495A 		.ascii	"_SIZE_T_DEFINED \000"
 595      455F545F 
 595      44454649 
 595      4E454420 
 595      00
 596 1144 01       		.byte	0x1
 597 1145 C501     		.uleb128 0xc5
 598 1147 5F425344 		.ascii	"_BSD_SIZE_T_DEFINED_ \000"
 598      5F53495A 
 598      455F545F 
 598      44454649 
 598      4E45445F 
 599 115d 01       		.byte	0x1
 600 115e C601     		.uleb128 0xc6
 601 1160 5F53495A 		.ascii	"_SIZE_T_DECLARED \000"
 601      455F545F 
 601      4445434C 
ARM GAS  /tmp/cck0uY6y.s 			page 23


 601      41524544 
 601      2000
 602 1172 01       		.byte	0x1
 603 1173 C701     		.uleb128 0xc7
 604 1175 5F5F5F69 		.ascii	"___int_size_t_h \000"
 604      6E745F73 
 604      697A655F 
 604      745F6820 
 604      00
 605 1186 01       		.byte	0x1
 606 1187 C801     		.uleb128 0xc8
 607 1189 5F474343 		.ascii	"_GCC_SIZE_T \000"
 607      5F53495A 
 607      455F5420 
 607      00
 608 1196 01       		.byte	0x1
 609 1197 C901     		.uleb128 0xc9
 610 1199 5F53495A 		.ascii	"_SIZET_ \000"
 610      45545F20 
 610      00
 611 11a2 01       		.byte	0x1
 612 11a3 CD01     		.uleb128 0xcd
 613 11a5 5F5F7369 		.ascii	"__size_t \000"
 613      7A655F74 
 613      2000
 614 11af 02       		.byte	0x2
 615 11b0 E901     		.uleb128 0xe9
 616 11b2 5F5F6E65 		.ascii	"__need_size_t\000"
 616      65645F73 
 616      697A655F 
 616      7400
 617 11c0 02       		.byte	0x2
 618 11c1 9603     		.uleb128 0x196
 619 11c3 5F5F6E65 		.ascii	"__need_NULL\000"
 619      65645F4E 
 619      554C4C00 
 620 11cf 04       		.byte	0x4
 621 11d0 01       		.byte	0x1
 622 11d1 24       		.uleb128 0x24
 623 11d2 5F5F6E65 		.ascii	"__need___va_list \000"
 623      65645F5F 
 623      5F76615F 
 623      6C697374 
 623      2000
 624              		.file 8 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../l
 625 11e4 03       		.byte	0x3
 626 11e5 25       		.uleb128 0x25
 627 11e6 08       		.uleb128 0x8
 628 11e7 02       		.byte	0x2
 629 11e8 22       		.uleb128 0x22
 630 11e9 5F5F6E65 		.ascii	"__need___va_list\000"
 630      65645F5F 
 630      5F76615F 
 630      6C697374 
 630      00
 631 11fa 01       		.byte	0x1
 632 11fb 27       		.uleb128 0x27
ARM GAS  /tmp/cck0uY6y.s 			page 24


 633 11fc 5F5F474E 		.ascii	"__GNUC_VA_LIST \000"
 633      55435F56 
 633      415F4C49 
 633      53542000 
 634 120c 04       		.byte	0x4
 635              		.file 9 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../l
 636 120d 03       		.byte	0x3
 637 120e 2D       		.uleb128 0x2d
 638 120f 09       		.uleb128 0x9
 639 1210 01       		.byte	0x1
 640 1211 0B       		.uleb128 0xb
 641 1212 5F535953 		.ascii	"_SYS_REENT_H_ \000"
 641      5F524545 
 641      4E545F48 
 641      5F2000
 642 1221 03       		.byte	0x3
 643 1222 0D       		.uleb128 0xd
 644 1223 03       		.uleb128 0x3
 645 1224 04       		.byte	0x4
 646              		.file 10 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 647 1225 03       		.byte	0x3
 648 1226 0E       		.uleb128 0xe
 649 1227 0A       		.uleb128 0xa
 650 1228 01       		.byte	0x1
 651 1229 0A       		.uleb128 0xa
 652 122a 5F535953 		.ascii	"_SYS__TYPES_H \000"
 652      5F5F5459 
 652      5045535F 
 652      482000
 653              		.file 11 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 654 1239 03       		.byte	0x3
 655 123a 0C       		.uleb128 0xc
 656 123b 0B       		.uleb128 0xb
 657 123c 01       		.byte	0x1
 658 123d 06       		.uleb128 0x6
 659 123e 5F4D4143 		.ascii	"_MACHINE__TYPES_H \000"
 659      48494E45 
 659      5F5F5459 
 659      5045535F 
 659      482000
 660              		.file 12 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 661 1251 03       		.byte	0x3
 662 1252 07       		.uleb128 0x7
 663 1253 0C       		.uleb128 0xc
 664 1254 01       		.byte	0x1
 665 1255 06       		.uleb128 0x6
 666 1256 5F4D4143 		.ascii	"_MACHINE__DEFAULT_TYPES_H \000"
 666      48494E45 
 666      5F5F4445 
 666      4641554C 
 666      545F5459 
 667 1271 01       		.byte	0x1
 668 1272 12       		.uleb128 0x12
 669 1273 5F5F4558 		.ascii	"__EXP(x) __ ##x ##__\000"
 669      50287829 
 669      205F5F20 
 669      23237820 
ARM GAS  /tmp/cck0uY6y.s 			page 25


 669      23235F5F 
 670 1288 01       		.byte	0x1
 671 1289 1C       		.uleb128 0x1c
 672 128a 5F5F5F69 		.ascii	"___int8_t_defined 1\000"
 672      6E74385F 
 672      745F6465 
 672      66696E65 
 672      64203100 
 673 129e 01       		.byte	0x1
 674 129f 26       		.uleb128 0x26
 675 12a0 5F5F5F69 		.ascii	"___int16_t_defined 1\000"
 675      6E743136 
 675      5F745F64 
 675      6566696E 
 675      65642031 
 676 12b5 01       		.byte	0x1
 677 12b6 30       		.uleb128 0x30
 678 12b7 5F5F5F69 		.ascii	"___int_least16_t_defined 1\000"
 678      6E745F6C 
 678      65617374 
 678      31365F74 
 678      5F646566 
 679 12d2 01       		.byte	0x1
 680 12d3 3C       		.uleb128 0x3c
 681 12d4 5F5F5F69 		.ascii	"___int32_t_defined 1\000"
 681      6E743332 
 681      5F745F64 
 681      6566696E 
 681      65642031 
 682 12e9 01       		.byte	0x1
 683 12ea 4E       		.uleb128 0x4e
 684 12eb 5F5F5F69 		.ascii	"___int_least32_t_defined 1\000"
 684      6E745F6C 
 684      65617374 
 684      33325F74 
 684      5F646566 
 685 1306 01       		.byte	0x1
 686 1307 65       		.uleb128 0x65
 687 1308 5F5F5F69 		.ascii	"___int64_t_defined 1\000"
 687      6E743634 
 687      5F745F64 
 687      6566696E 
 687      65642031 
 688 131d 02       		.byte	0x2
 689 131e 73       		.uleb128 0x73
 690 131f 5F5F4558 		.ascii	"__EXP\000"
 690      5000
 691 1325 04       		.byte	0x4
 692 1326 04       		.byte	0x4
 693              		.file 13 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 694 1327 03       		.byte	0x3
 695 1328 0D       		.uleb128 0xd
 696 1329 0D       		.uleb128 0xd
 697 132a 01       		.byte	0x1
 698 132b 02       		.uleb128 0x2
 699 132c 5F5F5359 		.ascii	"__SYS_LOCK_H__ \000"
 699      535F4C4F 
ARM GAS  /tmp/cck0uY6y.s 			page 26


 699      434B5F48 
 699      5F5F2000 
 700 133c 01       		.byte	0x1
 701 133d 0B       		.uleb128 0xb
 702 133e 5F5F4C4F 		.ascii	"__LOCK_INIT(class,lock) static int lock = 0;\000"
 702      434B5F49 
 702      4E495428 
 702      636C6173 
 702      732C6C6F 
 703 136b 01       		.byte	0x1
 704 136c 0C       		.uleb128 0xc
 705 136d 5F5F4C4F 		.ascii	"__LOCK_INIT_RECURSIVE(class,lock) static int lock ="
 705      434B5F49 
 705      4E49545F 
 705      52454355 
 705      52534956 
 706 13a0 20303B00 		.ascii	" 0;\000"
 707 13a4 01       		.byte	0x1
 708 13a5 0D       		.uleb128 0xd
 709 13a6 5F5F6C6F 		.ascii	"__lock_init(lock) (_CAST_VOID 0)\000"
 709      636B5F69 
 709      6E697428 
 709      6C6F636B 
 709      2920285F 
 710 13c7 01       		.byte	0x1
 711 13c8 0E       		.uleb128 0xe
 712 13c9 5F5F6C6F 		.ascii	"__lock_init_recursive(lock) (_CAST_VOID 0)\000"
 712      636B5F69 
 712      6E69745F 
 712      72656375 
 712      72736976 
 713 13f4 01       		.byte	0x1
 714 13f5 0F       		.uleb128 0xf
 715 13f6 5F5F6C6F 		.ascii	"__lock_close(lock) (_CAST_VOID 0)\000"
 715      636B5F63 
 715      6C6F7365 
 715      286C6F63 
 715      6B292028 
 716 1418 01       		.byte	0x1
 717 1419 10       		.uleb128 0x10
 718 141a 5F5F6C6F 		.ascii	"__lock_close_recursive(lock) (_CAST_VOID 0)\000"
 718      636B5F63 
 718      6C6F7365 
 718      5F726563 
 718      75727369 
 719 1446 01       		.byte	0x1
 720 1447 11       		.uleb128 0x11
 721 1448 5F5F6C6F 		.ascii	"__lock_acquire(lock) (_CAST_VOID 0)\000"
 721      636B5F61 
 721      63717569 
 721      7265286C 
 721      6F636B29 
 722 146c 01       		.byte	0x1
 723 146d 12       		.uleb128 0x12
 724 146e 5F5F6C6F 		.ascii	"__lock_acquire_recursive(lock) (_CAST_VOID 0)\000"
 724      636B5F61 
 724      63717569 
ARM GAS  /tmp/cck0uY6y.s 			page 27


 724      72655F72 
 724      65637572 
 725 149c 01       		.byte	0x1
 726 149d 13       		.uleb128 0x13
 727 149e 5F5F6C6F 		.ascii	"__lock_try_acquire(lock) (_CAST_VOID 0)\000"
 727      636B5F74 
 727      72795F61 
 727      63717569 
 727      7265286C 
 728 14c6 01       		.byte	0x1
 729 14c7 14       		.uleb128 0x14
 730 14c8 5F5F6C6F 		.ascii	"__lock_try_acquire_recursive(lock) (_CAST_VOID 0)\000"
 730      636B5F74 
 730      72795F61 
 730      63717569 
 730      72655F72 
 731 14fa 01       		.byte	0x1
 732 14fb 15       		.uleb128 0x15
 733 14fc 5F5F6C6F 		.ascii	"__lock_release(lock) (_CAST_VOID 0)\000"
 733      636B5F72 
 733      656C6561 
 733      7365286C 
 733      6F636B29 
 734 1520 01       		.byte	0x1
 735 1521 16       		.uleb128 0x16
 736 1522 5F5F6C6F 		.ascii	"__lock_release_recursive(lock) (_CAST_VOID 0)\000"
 736      636B5F72 
 736      656C6561 
 736      73655F72 
 736      65637572 
 737 1550 04       		.byte	0x4
 738 1551 01       		.byte	0x1
 739 1552 3E       		.uleb128 0x3e
 740 1553 5F5F6E65 		.ascii	"__need_wint_t \000"
 740      65645F77 
 740      696E745F 
 740      742000
 741 1562 03       		.byte	0x3
 742 1563 3F       		.uleb128 0x3f
 743 1564 07       		.uleb128 0x7
 744 1565 01       		.byte	0x1
 745 1566 DB02     		.uleb128 0x15b
 746 1568 5F57494E 		.ascii	"_WINT_T \000"
 746      545F5420 
 746      00
 747 1571 02       		.byte	0x2
 748 1572 E202     		.uleb128 0x162
 749 1574 5F5F6E65 		.ascii	"__need_wint_t\000"
 749      65645F77 
 749      696E745F 
 749      7400
 750 1582 02       		.byte	0x2
 751 1583 9603     		.uleb128 0x196
 752 1585 5F5F6E65 		.ascii	"__need_NULL\000"
 752      65645F4E 
 752      554C4C00 
 753 1591 04       		.byte	0x4
ARM GAS  /tmp/cck0uY6y.s 			page 28


 754 1592 04       		.byte	0x4
 755 1593 01       		.byte	0x1
 756 1594 10       		.uleb128 0x10
 757 1595 5F4E554C 		.ascii	"_NULL 0\000"
 757      4C203000 
 758 159d 01       		.byte	0x1
 759 159e 14       		.uleb128 0x14
 760 159f 5F5F4C6F 		.ascii	"__Long long\000"
 760      6E67206C 
 760      6F6E6700 
 761 15ab 01       		.byte	0x1
 762 15ac 45       		.uleb128 0x45
 763 15ad 5F415445 		.ascii	"_ATEXIT_SIZE 32\000"
 763      5849545F 
 763      53495A45 
 763      20333200 
 764 15bd 01       		.byte	0x1
 765 15be 9E01     		.uleb128 0x9e
 766 15c0 5F524545 		.ascii	"_REENT_SMALL_CHECK_INIT(ptr) do { if ((ptr) && !(pt"
 766      4E545F53 
 766      4D414C4C 
 766      5F434845 
 766      434B5F49 
 767 15f3 72292D3E 		.ascii	"r)->__sdidinit) __sinit (ptr); } while (0)\000"
 767      5F5F7364 
 767      6964696E 
 767      69742920 
 767      5F5F7369 
 768 161e 01       		.byte	0x1
 769 161f B702     		.uleb128 0x137
 770 1621 5F52414E 		.ascii	"_RAND48_SEED_0 (0x330e)\000"
 770      4434385F 
 770      53454544 
 770      5F302028 
 770      30783333 
 771 1639 01       		.byte	0x1
 772 163a B802     		.uleb128 0x138
 773 163c 5F52414E 		.ascii	"_RAND48_SEED_1 (0xabcd)\000"
 773      4434385F 
 773      53454544 
 773      5F312028 
 773      30786162 
 774 1654 01       		.byte	0x1
 775 1655 B902     		.uleb128 0x139
 776 1657 5F52414E 		.ascii	"_RAND48_SEED_2 (0x1234)\000"
 776      4434385F 
 776      53454544 
 776      5F322028 
 776      30783132 
 777 166f 01       		.byte	0x1
 778 1670 BA02     		.uleb128 0x13a
 779 1672 5F52414E 		.ascii	"_RAND48_MULT_0 (0xe66d)\000"
 779      4434385F 
 779      4D554C54 
 779      5F302028 
 779      30786536 
 780 168a 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 29


 781 168b BB02     		.uleb128 0x13b
 782 168d 5F52414E 		.ascii	"_RAND48_MULT_1 (0xdeec)\000"
 782      4434385F 
 782      4D554C54 
 782      5F312028 
 782      30786465 
 783 16a5 01       		.byte	0x1
 784 16a6 BC02     		.uleb128 0x13c
 785 16a8 5F52414E 		.ascii	"_RAND48_MULT_2 (0x0005)\000"
 785      4434385F 
 785      4D554C54 
 785      5F322028 
 785      30783030 
 786 16c0 01       		.byte	0x1
 787 16c1 BD02     		.uleb128 0x13d
 788 16c3 5F52414E 		.ascii	"_RAND48_ADD (0x000b)\000"
 788      4434385F 
 788      41444420 
 788      28307830 
 788      30306229 
 789 16d8 01       		.byte	0x1
 790 16d9 C902     		.uleb128 0x149
 791 16db 5F524545 		.ascii	"_REENT_EMERGENCY_SIZE 25\000"
 791      4E545F45 
 791      4D455247 
 791      454E4359 
 791      5F53495A 
 792 16f4 01       		.byte	0x1
 793 16f5 CA02     		.uleb128 0x14a
 794 16f7 5F524545 		.ascii	"_REENT_ASCTIME_SIZE 26\000"
 794      4E545F41 
 794      53435449 
 794      4D455F53 
 794      495A4520 
 795 170e 01       		.byte	0x1
 796 170f CB02     		.uleb128 0x14b
 797 1711 5F524545 		.ascii	"_REENT_SIGNAL_SIZE 24\000"
 797      4E545F53 
 797      49474E41 
 797      4C5F5349 
 797      5A452032 
 798 1727 01       		.byte	0x1
 799 1728 AE03     		.uleb128 0x1ae
 800 172a 5F524545 		.ascii	"_REENT_INIT(var) { 0, (__FILE *)&__sf_fake_stdin, ("
 800      4E545F49 
 800      4E495428 
 800      76617229 
 800      207B2030 
 801 175d 5F5F4649 		.ascii	"__FILE *)&__sf_fake_stdout, (__FILE *)&__sf_fake_st"
 801      4C45202A 
 801      29265F5F 
 801      73665F66 
 801      616B655F 
 802 1790 64657272 		.ascii	"derr, 0, _NULL, 0, 0, \"C\", _NULL, _NULL, 0, 0, _N"
 802      2C20302C 
 802      205F4E55 
 802      4C4C2C20 
ARM GAS  /tmp/cck0uY6y.s 			page 30


 802      302C2030 
 803 17c1 554C4C2C 		.ascii	"ULL, _NULL, _NULL, _NULL, _NULL, _NULL, {_NULL, 0, "
 803      205F4E55 
 803      4C4C2C20 
 803      5F4E554C 
 803      4C2C205F 
 804 17f4 7B5F4E55 		.ascii	"{_NULL}, _NULL}, {_NULL, 0, _NULL}, _NULL, _NULL, _"
 804      4C4C7D2C 
 804      205F4E55 
 804      4C4C7D2C 
 804      207B5F4E 
 805 1827 4E554C4C 		.ascii	"NULL }\000"
 805      207D00
 806 182e 01       		.byte	0x1
 807 182f C903     		.uleb128 0x1c9
 808 1831 5F524545 		.ascii	"_REENT_INIT_PTR(var) { (var)->_stdin = (__FILE *)&_"
 808      4E545F49 
 808      4E49545F 
 808      50545228 
 808      76617229 
 809 1864 5F73665F 		.ascii	"_sf_fake_stdin; (var)->_stdout = (__FILE *)&__sf_fa"
 809      66616B65 
 809      5F737464 
 809      696E3B20 
 809      28766172 
 810 1897 6B655F73 		.ascii	"ke_stdout; (var)->_stderr = (__FILE *)&__sf_fake_st"
 810      74646F75 
 810      743B2028 
 810      76617229 
 810      2D3E5F73 
 811 18ca 64657272 		.ascii	"derr; (var)->_errno = 0; (var)->_inc = 0; (var)->_e"
 811      3B202876 
 811      6172292D 
 811      3E5F6572 
 811      726E6F20 
 812 18fd 6D657267 		.ascii	"mergency = _NULL; (var)->__sdidinit = 0; (var)->_cu"
 812      656E6379 
 812      203D205F 
 812      4E554C4C 
 812      3B202876 
 813 1930 7272656E 		.ascii	"rrent_category = 0; (var)->_current_locale = \"C\";"
 813      745F6361 
 813      7465676F 
 813      7279203D 
 813      20303B20 
 814 1961 20287661 		.ascii	" (var)->_mp = _NULL; (var)->__cleanup = _NULL; (var"
 814      72292D3E 
 814      5F6D7020 
 814      3D205F4E 
 814      554C4C3B 
 815 1994 292D3E5F 		.ascii	")->_gamma_signgam = 0; (var)->_cvtlen = 0; (var)->_"
 815      67616D6D 
 815      615F7369 
 815      676E6761 
 815      6D203D20 
 816 19c7 63767462 		.ascii	"cvtbuf = _NULL; (var)->_r48 = _NULL; (var)->_localt"
 816      7566203D 
ARM GAS  /tmp/cck0uY6y.s 			page 31


 816      205F4E55 
 816      4C4C3B20 
 816      28766172 
 817 19fa 696D655F 		.ascii	"ime_buf = _NULL; (var)->_asctime_buf = _NULL; (var)"
 817      62756620 
 817      3D205F4E 
 817      554C4C3B 
 817      20287661 
 818 1a2d 2D3E5F73 		.ascii	"->_sig_func = _NULL; (var)->_atexit = _NULL; (var)-"
 818      69675F66 
 818      756E6320 
 818      3D205F4E 
 818      554C4C3B 
 819 1a60 3E5F6174 		.ascii	">_atexit0._next = _NULL; (var)->_atexit0._ind = 0; "
 819      65786974 
 819      302E5F6E 
 819      65787420 
 819      3D205F4E 
 820 1a93 28766172 		.ascii	"(var)->_atexit0._fns[0] = _NULL; (var)->_atexit0._o"
 820      292D3E5F 
 820      61746578 
 820      6974302E 
 820      5F666E73 
 821 1ac6 6E5F6578 		.ascii	"n_exit_args_ptr = _NULL; (var)->__sglue._next = _NU"
 821      69745F61 
 821      7267735F 
 821      70747220 
 821      3D205F4E 
 822 1af9 4C4C3B20 		.ascii	"LL; (var)->__sglue._niobs = 0; (var)->__sglue._iobs"
 822      28766172 
 822      292D3E5F 
 822      5F73676C 
 822      75652E5F 
 823 1b2c 203D205F 		.ascii	" = _NULL; (var)->__sf = 0; (var)->_misc = _NULL; (v"
 823      4E554C4C 
 823      3B202876 
 823      6172292D 
 823      3E5F5F73 
 824 1b5f 6172292D 		.ascii	"ar)->_signal_buf = _NULL; }\000"
 824      3E5F7369 
 824      676E616C 
 824      5F627566 
 824      203D205F 
 825              		.file 14 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 826 1b7b 03       		.byte	0x3
 827 1b7c EB03     		.uleb128 0x1eb
 828 1b7e 0E       		.uleb128 0xe
 829 1b7f 02       		.byte	0x2
 830 1b80 0B       		.uleb128 0xb
 831 1b81 61737365 		.ascii	"assert\000"
 831      727400
 832 1b88 01       		.byte	0x1
 833 1b89 1A       		.uleb128 0x1a
 834 1b8a 61737365 		.ascii	"assert(__e) ((__e) ? (void)0 : __assert_func (__FIL"
 834      7274285F 
 834      5F652920 
 834      28285F5F 
ARM GAS  /tmp/cck0uY6y.s 			page 32


 834      6529203F 
 835 1bbd 455F5F2C 		.ascii	"E__, __LINE__, __ASSERT_FUNC, #__e))\000"
 835      205F5F4C 
 835      494E455F 
 835      5F2C205F 
 835      5F415353 
 836 1be2 01       		.byte	0x1
 837 1be3 23       		.uleb128 0x23
 838 1be4 5F5F4153 		.ascii	"__ASSERT_FUNC __func__\000"
 838      53455254 
 838      5F46554E 
 838      43205F5F 
 838      66756E63 
 839 1bfb 04       		.byte	0x4
 840 1bfc 01       		.byte	0x1
 841 1bfd EC03     		.uleb128 0x1ec
 842 1bff 5F5F7265 		.ascii	"__reent_assert(x) assert(x)\000"
 842      656E745F 
 842      61737365 
 842      72742878 
 842      29206173 
 843 1c1b 01       		.byte	0x1
 844 1c1c F603     		.uleb128 0x1f6
 845 1c1e 5F524545 		.ascii	"_REENT_CHECK(var,what,type,size,init) do { struct _"
 845      4E545F43 
 845      4845434B 
 845      28766172 
 845      2C776861 
 846 1c51 7265656E 		.ascii	"reent *_r = (var); if (_r->what == NULL) { _r->what"
 846      74202A5F 
 846      72203D20 
 846      28766172 
 846      293B2069 
 847 1c84 203D2028 		.ascii	" = (type)malloc(size); __reent_assert(_r->what); in"
 847      74797065 
 847      296D616C 
 847      6C6F6328 
 847      73697A65 
 848 1cb7 69743B20 		.ascii	"it; } } while (0)\000"
 848      7D207D20 
 848      7768696C 
 848      65202830 
 848      2900
 849 1cc9 01       		.byte	0x1
 850 1cca FF03     		.uleb128 0x1ff
 851 1ccc 5F524545 		.ascii	"_REENT_CHECK_TM(var) _REENT_CHECK(var, _localtime_b"
 851      4E545F43 
 851      4845434B 
 851      5F544D28 
 851      76617229 
 852 1cff 75662C20 		.ascii	"uf, struct __tm *, sizeof *((var)->_localtime_buf),"
 852      73747275 
 852      6374205F 
 852      5F746D20 
 852      2A2C2073 
 853 1d32 202900   		.ascii	" )\000"
 854 1d35 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 33


 855 1d36 8304     		.uleb128 0x203
 856 1d38 5F524545 		.ascii	"_REENT_CHECK_ASCTIME_BUF(var) _REENT_CHECK(var, _as"
 856      4E545F43 
 856      4845434B 
 856      5F415343 
 856      54494D45 
 857 1d6b 6374696D 		.ascii	"ctime_buf, char *, _REENT_ASCTIME_SIZE, memset((var"
 857      655F6275 
 857      662C2063 
 857      68617220 
 857      2A2C205F 
 858 1d9e 292D3E5F 		.ascii	")->_asctime_buf, 0, _REENT_ASCTIME_SIZE))\000"
 858      61736374 
 858      696D655F 
 858      6275662C 
 858      20302C20 
 859 1dc8 01       		.byte	0x1
 860 1dc9 8804     		.uleb128 0x208
 861 1dcb 5F524545 		.ascii	"_REENT_INIT_RAND48(var) do { struct _reent *_r = (v"
 861      4E545F49 
 861      4E49545F 
 861      52414E44 
 861      34382876 
 862 1dfe 6172293B 		.ascii	"ar); _r->_r48->_seed[0] = _RAND48_SEED_0; _r->_r48-"
 862      205F722D 
 862      3E5F7234 
 862      382D3E5F 
 862      73656564 
 863 1e31 3E5F7365 		.ascii	">_seed[1] = _RAND48_SEED_1; _r->_r48->_seed[2] = _R"
 863      65645B31 
 863      5D203D20 
 863      5F52414E 
 863      4434385F 
 864 1e64 414E4434 		.ascii	"AND48_SEED_2; _r->_r48->_mult[0] = _RAND48_MULT_0; "
 864      385F5345 
 864      45445F32 
 864      3B205F72 
 864      2D3E5F72 
 865 1e97 5F722D3E 		.ascii	"_r->_r48->_mult[1] = _RAND48_MULT_1; _r->_r48->_mul"
 865      5F723438 
 865      2D3E5F6D 
 865      756C745B 
 865      315D203D 
 866 1eca 745B325D 		.ascii	"t[2] = _RAND48_MULT_2; _r->_r48->_add = _RAND48_ADD"
 866      203D205F 
 866      52414E44 
 866      34385F4D 
 866      554C545F 
 867 1efd 3B205F72 		.ascii	"; _r->_r48->_rand_next = 1; } while (0)\000"
 867      2D3E5F72 
 867      34382D3E 
 867      5F72616E 
 867      645F6E65 
 868 1f25 01       		.byte	0x1
 869 1f26 9304     		.uleb128 0x213
 870 1f28 5F524545 		.ascii	"_REENT_CHECK_RAND48(var) _REENT_CHECK(var, _r48, st"
 870      4E545F43 
ARM GAS  /tmp/cck0uY6y.s 			page 34


 870      4845434B 
 870      5F52414E 
 870      44343828 
 871 1f5b 72756374 		.ascii	"ruct _rand48 *, sizeof *((var)->_r48), _REENT_INIT_"
 871      205F7261 
 871      6E643438 
 871      202A2C20 
 871      73697A65 
 872 1f8e 52414E44 		.ascii	"RAND48((var)))\000"
 872      34382828 
 872      76617229 
 872      292900
 873 1f9d 01       		.byte	0x1
 874 1f9e 9604     		.uleb128 0x216
 875 1fa0 5F524545 		.ascii	"_REENT_INIT_MP(var) do { struct _reent *_r = (var);"
 875      4E545F49 
 875      4E49545F 
 875      4D502876 
 875      61722920 
 876 1fd3 205F722D 		.ascii	" _r->_mp->_result_k = 0; _r->_mp->_result = _r->_mp"
 876      3E5F6D70 
 876      2D3E5F72 
 876      6573756C 
 876      745F6B20 
 877 2006 2D3E5F70 		.ascii	"->_p5s = _NULL; _r->_mp->_freelist = _NULL; } while"
 877      3573203D 
 877      205F4E55 
 877      4C4C3B20 
 877      5F722D3E 
 878 2039 20283029 		.ascii	" (0)\000"
 878      00
 879 203e 01       		.byte	0x1
 880 203f 9C04     		.uleb128 0x21c
 881 2041 5F524545 		.ascii	"_REENT_CHECK_MP(var) _REENT_CHECK(var, _mp, struct "
 881      4E545F43 
 881      4845434B 
 881      5F4D5028 
 881      76617229 
 882 2074 5F6D7072 		.ascii	"_mprec *, sizeof *((var)->_mp), _REENT_INIT_MP(var)"
 882      6563202A 
 882      2C207369 
 882      7A656F66 
 882      202A2828 
 883 20a7 2900     		.ascii	")\000"
 884 20a9 01       		.byte	0x1
 885 20aa 9F04     		.uleb128 0x21f
 886 20ac 5F524545 		.ascii	"_REENT_CHECK_EMERGENCY(var) _REENT_CHECK(var, _emer"
 886      4E545F43 
 886      4845434B 
 886      5F454D45 
 886      5247454E 
 887 20df 67656E63 		.ascii	"gency, char *, _REENT_EMERGENCY_SIZE, )\000"
 887      792C2063 
 887      68617220 
 887      2A2C205F 
 887      5245454E 
 888 2107 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 35


 889 2108 A204     		.uleb128 0x222
 890 210a 5F524545 		.ascii	"_REENT_INIT_MISC(var) do { struct _reent *_r = (var"
 890      4E545F49 
 890      4E49545F 
 890      4D495343 
 890      28766172 
 891 213d 293B205F 		.ascii	"); _r->_misc->_strtok_last = _NULL; _r->_misc->_mbl"
 891      722D3E5F 
 891      6D697363 
 891      2D3E5F73 
 891      7472746F 
 892 2170 656E5F73 		.ascii	"en_state.__count = 0; _r->_misc->_mblen_state.__val"
 892      74617465 
 892      2E5F5F63 
 892      6F756E74 
 892      203D2030 
 893 21a3 75652E5F 		.ascii	"ue.__wch = 0; _r->_misc->_wctomb_state.__count = 0;"
 893      5F776368 
 893      203D2030 
 893      3B205F72 
 893      2D3E5F6D 
 894 21d6 205F722D 		.ascii	" _r->_misc->_wctomb_state.__value.__wch = 0; _r->_m"
 894      3E5F6D69 
 894      73632D3E 
 894      5F776374 
 894      6F6D625F 
 895 2209 6973632D 		.ascii	"isc->_mbtowc_state.__count = 0; _r->_misc->_mbtowc_"
 895      3E5F6D62 
 895      746F7763 
 895      5F737461 
 895      74652E5F 
 896 223c 73746174 		.ascii	"state.__value.__wch = 0; _r->_misc->_mbrlen_state._"
 896      652E5F5F 
 896      76616C75 
 896      652E5F5F 
 896      77636820 
 897 226f 5F636F75 		.ascii	"_count = 0; _r->_misc->_mbrlen_state.__value.__wch "
 897      6E74203D 
 897      20303B20 
 897      5F722D3E 
 897      5F6D6973 
 898 22a2 3D20303B 		.ascii	"= 0; _r->_misc->_mbrtowc_state.__count = 0; _r->_mi"
 898      205F722D 
 898      3E5F6D69 
 898      73632D3E 
 898      5F6D6272 
 899 22d5 73632D3E 		.ascii	"sc->_mbrtowc_state.__value.__wch = 0; _r->_misc->_m"
 899      5F6D6272 
 899      746F7763 
 899      5F737461 
 899      74652E5F 
 900 2308 62737274 		.ascii	"bsrtowcs_state.__count = 0; _r->_misc->_mbsrtowcs_s"
 900      6F776373 
 900      5F737461 
 900      74652E5F 
 900      5F636F75 
 901 233b 74617465 		.ascii	"tate.__value.__wch = 0; _r->_misc->_wcrtomb_state._"
ARM GAS  /tmp/cck0uY6y.s 			page 36


 901      2E5F5F76 
 901      616C7565 
 901      2E5F5F77 
 901      6368203D 
 902 236e 5F636F75 		.ascii	"_count = 0; _r->_misc->_wcrtomb_state.__value.__wch"
 902      6E74203D 
 902      20303B20 
 902      5F722D3E 
 902      5F6D6973 
 903 23a1 203D2030 		.ascii	" = 0; _r->_misc->_wcsrtombs_state.__count = 0; _r->"
 903      3B205F72 
 903      2D3E5F6D 
 903      6973632D 
 903      3E5F7763 
 904 23d4 5F6D6973 		.ascii	"_misc->_wcsrtombs_state.__value.__wch = 0; _r->_mis"
 904      632D3E5F 
 904      77637372 
 904      746F6D62 
 904      735F7374 
 905 2407 632D3E5F 		.ascii	"c->_l64a_buf[0] = '\\0'; _r->_misc->_getdate_err = "
 905      6C363461 
 905      5F627566 
 905      5B305D20 
 905      3D20275C 
 906 2439 303B207D 		.ascii	"0; } while (0)\000"
 906      20776869 
 906      6C652028 
 906      302900
 907 2448 01       		.byte	0x1
 908 2449 B804     		.uleb128 0x238
 909 244b 5F524545 		.ascii	"_REENT_CHECK_MISC(var) _REENT_CHECK(var, _misc, str"
 909      4E545F43 
 909      4845434B 
 909      5F4D4953 
 909      43287661 
 910 247e 75637420 		.ascii	"uct _misc_reent *, sizeof *((var)->_misc), _REENT_I"
 910      5F6D6973 
 910      635F7265 
 910      656E7420 
 910      2A2C2073 
 911 24b1 4E49545F 		.ascii	"NIT_MISC(var))\000"
 911      4D495343 
 911      28766172 
 911      292900
 912 24c0 01       		.byte	0x1
 913 24c1 BB04     		.uleb128 0x23b
 914 24c3 5F524545 		.ascii	"_REENT_CHECK_SIGNAL_BUF(var) _REENT_CHECK(var, _sig"
 914      4E545F43 
 914      4845434B 
 914      5F534947 
 914      4E414C5F 
 915 24f6 6E616C5F 		.ascii	"nal_buf, char *, _REENT_SIGNAL_SIZE, )\000"
 915      6275662C 
 915      20636861 
 915      72202A2C 
 915      205F5245 
 916 251d 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 37


 917 251e BE04     		.uleb128 0x23e
 918 2520 5F524545 		.ascii	"_REENT_SIGNGAM(ptr) ((ptr)->_gamma_signgam)\000"
 918      4E545F53 
 918      49474E47 
 918      414D2870 
 918      74722920 
 919 254c 01       		.byte	0x1
 920 254d BF04     		.uleb128 0x23f
 921 254f 5F524545 		.ascii	"_REENT_RAND_NEXT(ptr) ((ptr)->_r48->_rand_next)\000"
 921      4E545F52 
 921      414E445F 
 921      4E455854 
 921      28707472 
 922 257f 01       		.byte	0x1
 923 2580 C004     		.uleb128 0x240
 924 2582 5F524545 		.ascii	"_REENT_RAND48_SEED(ptr) ((ptr)->_r48->_seed)\000"
 924      4E545F52 
 924      414E4434 
 924      385F5345 
 924      45442870 
 925 25af 01       		.byte	0x1
 926 25b0 C104     		.uleb128 0x241
 927 25b2 5F524545 		.ascii	"_REENT_RAND48_MULT(ptr) ((ptr)->_r48->_mult)\000"
 927      4E545F52 
 927      414E4434 
 927      385F4D55 
 927      4C542870 
 928 25df 01       		.byte	0x1
 929 25e0 C204     		.uleb128 0x242
 930 25e2 5F524545 		.ascii	"_REENT_RAND48_ADD(ptr) ((ptr)->_r48->_add)\000"
 930      4E545F52 
 930      414E4434 
 930      385F4144 
 930      44287074 
 931 260d 01       		.byte	0x1
 932 260e C304     		.uleb128 0x243
 933 2610 5F524545 		.ascii	"_REENT_MP_RESULT(ptr) ((ptr)->_mp->_result)\000"
 933      4E545F4D 
 933      505F5245 
 933      53554C54 
 933      28707472 
 934 263c 01       		.byte	0x1
 935 263d C404     		.uleb128 0x244
 936 263f 5F524545 		.ascii	"_REENT_MP_RESULT_K(ptr) ((ptr)->_mp->_result_k)\000"
 936      4E545F4D 
 936      505F5245 
 936      53554C54 
 936      5F4B2870 
 937 266f 01       		.byte	0x1
 938 2670 C504     		.uleb128 0x245
 939 2672 5F524545 		.ascii	"_REENT_MP_P5S(ptr) ((ptr)->_mp->_p5s)\000"
 939      4E545F4D 
 939      505F5035 
 939      53287074 
 939      72292028 
 940 2698 01       		.byte	0x1
 941 2699 C604     		.uleb128 0x246
ARM GAS  /tmp/cck0uY6y.s 			page 38


 942 269b 5F524545 		.ascii	"_REENT_MP_FREELIST(ptr) ((ptr)->_mp->_freelist)\000"
 942      4E545F4D 
 942      505F4652 
 942      45454C49 
 942      53542870 
 943 26cb 01       		.byte	0x1
 944 26cc C704     		.uleb128 0x247
 945 26ce 5F524545 		.ascii	"_REENT_ASCTIME_BUF(ptr) ((ptr)->_asctime_buf)\000"
 945      4E545F41 
 945      53435449 
 945      4D455F42 
 945      55462870 
 946 26fc 01       		.byte	0x1
 947 26fd C804     		.uleb128 0x248
 948 26ff 5F524545 		.ascii	"_REENT_TM(ptr) ((ptr)->_localtime_buf)\000"
 948      4E545F54 
 948      4D287074 
 948      72292028 
 948      28707472 
 949 2726 01       		.byte	0x1
 950 2727 C904     		.uleb128 0x249
 951 2729 5F524545 		.ascii	"_REENT_EMERGENCY(ptr) ((ptr)->_emergency)\000"
 951      4E545F45 
 951      4D455247 
 951      454E4359 
 951      28707472 
 952 2753 01       		.byte	0x1
 953 2754 CA04     		.uleb128 0x24a
 954 2756 5F524545 		.ascii	"_REENT_STRTOK_LAST(ptr) ((ptr)->_misc->_strtok_last"
 954      4E545F53 
 954      5452544F 
 954      4B5F4C41 
 954      53542870 
 955 2789 2900     		.ascii	")\000"
 956 278b 01       		.byte	0x1
 957 278c CB04     		.uleb128 0x24b
 958 278e 5F524545 		.ascii	"_REENT_MBLEN_STATE(ptr) ((ptr)->_misc->_mblen_state"
 958      4E545F4D 
 958      424C454E 
 958      5F535441 
 958      54452870 
 959 27c1 2900     		.ascii	")\000"
 960 27c3 01       		.byte	0x1
 961 27c4 CC04     		.uleb128 0x24c
 962 27c6 5F524545 		.ascii	"_REENT_MBTOWC_STATE(ptr) ((ptr)->_misc->_mbtowc_sta"
 962      4E545F4D 
 962      42544F57 
 962      435F5354 
 962      41544528 
 963 27f9 74652900 		.ascii	"te)\000"
 964 27fd 01       		.byte	0x1
 965 27fe CD04     		.uleb128 0x24d
 966 2800 5F524545 		.ascii	"_REENT_WCTOMB_STATE(ptr) ((ptr)->_misc->_wctomb_sta"
 966      4E545F57 
 966      43544F4D 
 966      425F5354 
 966      41544528 
ARM GAS  /tmp/cck0uY6y.s 			page 39


 967 2833 74652900 		.ascii	"te)\000"
 968 2837 01       		.byte	0x1
 969 2838 CE04     		.uleb128 0x24e
 970 283a 5F524545 		.ascii	"_REENT_MBRLEN_STATE(ptr) ((ptr)->_misc->_mbrlen_sta"
 970      4E545F4D 
 970      42524C45 
 970      4E5F5354 
 970      41544528 
 971 286d 74652900 		.ascii	"te)\000"
 972 2871 01       		.byte	0x1
 973 2872 CF04     		.uleb128 0x24f
 974 2874 5F524545 		.ascii	"_REENT_MBRTOWC_STATE(ptr) ((ptr)->_misc->_mbrtowc_s"
 974      4E545F4D 
 974      4252544F 
 974      57435F53 
 974      54415445 
 975 28a7 74617465 		.ascii	"tate)\000"
 975      2900
 976 28ad 01       		.byte	0x1
 977 28ae D004     		.uleb128 0x250
 978 28b0 5F524545 		.ascii	"_REENT_MBSRTOWCS_STATE(ptr) ((ptr)->_misc->_mbsrtow"
 978      4E545F4D 
 978      42535254 
 978      4F574353 
 978      5F535441 
 979 28e3 63735F73 		.ascii	"cs_state)\000"
 979      74617465 
 979      2900
 980 28ed 01       		.byte	0x1
 981 28ee D104     		.uleb128 0x251
 982 28f0 5F524545 		.ascii	"_REENT_WCRTOMB_STATE(ptr) ((ptr)->_misc->_wcrtomb_s"
 982      4E545F57 
 982      4352544F 
 982      4D425F53 
 982      54415445 
 983 2923 74617465 		.ascii	"tate)\000"
 983      2900
 984 2929 01       		.byte	0x1
 985 292a D204     		.uleb128 0x252
 986 292c 5F524545 		.ascii	"_REENT_WCSRTOMBS_STATE(ptr) ((ptr)->_misc->_wcsrtom"
 986      4E545F57 
 986      43535254 
 986      4F4D4253 
 986      5F535441 
 987 295f 62735F73 		.ascii	"bs_state)\000"
 987      74617465 
 987      2900
 988 2969 01       		.byte	0x1
 989 296a D304     		.uleb128 0x253
 990 296c 5F524545 		.ascii	"_REENT_L64A_BUF(ptr) ((ptr)->_misc->_l64a_buf)\000"
 990      4E545F4C 
 990      3634415F 
 990      42554628 
 990      70747229 
 991 299b 01       		.byte	0x1
 992 299c D404     		.uleb128 0x254
 993 299e 5F524545 		.ascii	"_REENT_GETDATE_ERR_P(ptr) (&((ptr)->_misc->_getdate"
ARM GAS  /tmp/cck0uY6y.s 			page 40


 993      4E545F47 
 993      45544441 
 993      54455F45 
 993      52525F50 
 994 29d1 5F657272 		.ascii	"_err))\000"
 994      292900
 995 29d8 01       		.byte	0x1
 996 29d9 D504     		.uleb128 0x255
 997 29db 5F524545 		.ascii	"_REENT_SIGNAL_BUF(ptr) ((ptr)->_signal_buf)\000"
 997      4E545F53 
 997      49474E41 
 997      4C5F4255 
 997      46287074 
 998 2a07 01       		.byte	0x1
 999 2a08 C006     		.uleb128 0x340
 1000 2a0a 5F5F4154 		.ascii	"__ATTRIBUTE_IMPURE_PTR__ \000"
 1000      54524942 
 1000      5554455F 
 1000      494D5055 
 1000      52455F50 
 1001 2a24 01       		.byte	0x1
 1002 2a25 D206     		.uleb128 0x352
 1003 2a27 5F524545 		.ascii	"_REENT _impure_ptr\000"
 1003      4E54205F 
 1003      696D7075 
 1003      72655F70 
 1003      747200
 1004 2a3a 01       		.byte	0x1
 1005 2a3b D706     		.uleb128 0x357
 1006 2a3d 5F474C4F 		.ascii	"_GLOBAL_REENT _global_impure_ptr\000"
 1006      42414C5F 
 1006      5245454E 
 1006      54205F67 
 1006      6C6F6261 
 1007 2a5e 04       		.byte	0x4
 1008              		.file 15 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 1009 2a5f 03       		.byte	0x3
 1010 2a60 2E       		.uleb128 0x2e
 1011 2a61 0F       		.uleb128 0xf
 1012 2a62 01       		.byte	0x1
 1013 2a63 17       		.uleb128 0x17
 1014 2a64 5F5F494E 		.ascii	"__INTTYPES_DEFINED__ \000"
 1014      54545950 
 1014      45535F44 
 1014      4546494E 
 1014      45445F5F 
 1015 2a7a 01       		.byte	0x1
 1016 2a7b 3C       		.uleb128 0x3c
 1017 2a7c 5F535953 		.ascii	"_SYS_TYPES_H \000"
 1017      5F545950 
 1017      45535F48 
 1017      2000
 1018 2a8a 03       		.byte	0x3
 1019 2a8b 45       		.uleb128 0x45
 1020 2a8c 07       		.uleb128 0x7
 1021 2a8d 01       		.byte	0x1
 1022 2a8e 28       		.uleb128 0x28
ARM GAS  /tmp/cck0uY6y.s 			page 41


 1023 2a8f 5F535444 		.ascii	"_STDDEF_H \000"
 1023      4445465F 
 1023      482000
 1024 2a9a 01       		.byte	0x1
 1025 2a9b 29       		.uleb128 0x29
 1026 2a9c 5F535444 		.ascii	"_STDDEF_H_ \000"
 1026      4445465F 
 1026      485F2000 
 1027 2aa8 01       		.byte	0x1
 1028 2aa9 2B       		.uleb128 0x2b
 1029 2aaa 5F414E53 		.ascii	"_ANSI_STDDEF_H \000"
 1029      495F5354 
 1029      44444546 
 1029      5F482000 
 1030 2aba 01       		.byte	0x1
 1031 2abb 2D       		.uleb128 0x2d
 1032 2abc 5F5F5354 		.ascii	"__STDDEF_H__ \000"
 1032      44444546 
 1032      5F485F5F 
 1032      2000
 1033 2aca 01       		.byte	0x1
 1034 2acb 8A01     		.uleb128 0x8a
 1035 2acd 5F505452 		.ascii	"_PTRDIFF_T \000"
 1035      44494646 
 1035      5F542000 
 1036 2ad9 01       		.byte	0x1
 1037 2ada 8B01     		.uleb128 0x8b
 1038 2adc 5F545F50 		.ascii	"_T_PTRDIFF_ \000"
 1038      54524449 
 1038      46465F20 
 1038      00
 1039 2ae9 01       		.byte	0x1
 1040 2aea 8C01     		.uleb128 0x8c
 1041 2aec 5F545F50 		.ascii	"_T_PTRDIFF \000"
 1041      54524449 
 1041      46462000 
 1042 2af8 01       		.byte	0x1
 1043 2af9 8D01     		.uleb128 0x8d
 1044 2afb 5F5F5054 		.ascii	"__PTRDIFF_T \000"
 1044      52444946 
 1044      465F5420 
 1044      00
 1045 2b08 01       		.byte	0x1
 1046 2b09 8E01     		.uleb128 0x8e
 1047 2b0b 5F505452 		.ascii	"_PTRDIFF_T_ \000"
 1047      44494646 
 1047      5F545F20 
 1047      00
 1048 2b18 01       		.byte	0x1
 1049 2b19 8F01     		.uleb128 0x8f
 1050 2b1b 5F425344 		.ascii	"_BSD_PTRDIFF_T_ \000"
 1050      5F505452 
 1050      44494646 
 1050      5F545F20 
 1050      00
 1051 2b2c 01       		.byte	0x1
 1052 2b2d 9001     		.uleb128 0x90
ARM GAS  /tmp/cck0uY6y.s 			page 42


 1053 2b2f 5F5F5F69 		.ascii	"___int_ptrdiff_t_h \000"
 1053      6E745F70 
 1053      74726469 
 1053      66665F74 
 1053      5F682000 
 1054 2b43 01       		.byte	0x1
 1055 2b44 9101     		.uleb128 0x91
 1056 2b46 5F474343 		.ascii	"_GCC_PTRDIFF_T \000"
 1056      5F505452 
 1056      44494646 
 1056      5F542000 
 1057 2b56 02       		.byte	0x2
 1058 2b57 A001     		.uleb128 0xa0
 1059 2b59 5F5F6E65 		.ascii	"__need_ptrdiff_t\000"
 1059      65645F70 
 1059      74726469 
 1059      66665F74 
 1059      00
 1060 2b6a 02       		.byte	0x2
 1061 2b6b E901     		.uleb128 0xe9
 1062 2b6d 5F5F6E65 		.ascii	"__need_size_t\000"
 1062      65645F73 
 1062      697A655F 
 1062      7400
 1063 2b7b 01       		.byte	0x1
 1064 2b7c 8602     		.uleb128 0x106
 1065 2b7e 5F5F7763 		.ascii	"__wchar_t__ \000"
 1065      6861725F 
 1065      745F5F20 
 1065      00
 1066 2b8b 01       		.byte	0x1
 1067 2b8c 8702     		.uleb128 0x107
 1068 2b8e 5F5F5743 		.ascii	"__WCHAR_T__ \000"
 1068      4841525F 
 1068      545F5F20 
 1068      00
 1069 2b9b 01       		.byte	0x1
 1070 2b9c 8802     		.uleb128 0x108
 1071 2b9e 5F574348 		.ascii	"_WCHAR_T \000"
 1071      41525F54 
 1071      2000
 1072 2ba8 01       		.byte	0x1
 1073 2ba9 8902     		.uleb128 0x109
 1074 2bab 5F545F57 		.ascii	"_T_WCHAR_ \000"
 1074      43484152 
 1074      5F2000
 1075 2bb6 01       		.byte	0x1
 1076 2bb7 8A02     		.uleb128 0x10a
 1077 2bb9 5F545F57 		.ascii	"_T_WCHAR \000"
 1077      43484152 
 1077      2000
 1078 2bc3 01       		.byte	0x1
 1079 2bc4 8B02     		.uleb128 0x10b
 1080 2bc6 5F5F5743 		.ascii	"__WCHAR_T \000"
 1080      4841525F 
 1080      542000
 1081 2bd1 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 43


 1082 2bd2 8C02     		.uleb128 0x10c
 1083 2bd4 5F574348 		.ascii	"_WCHAR_T_ \000"
 1083      41525F54 
 1083      5F2000
 1084 2bdf 01       		.byte	0x1
 1085 2be0 8D02     		.uleb128 0x10d
 1086 2be2 5F425344 		.ascii	"_BSD_WCHAR_T_ \000"
 1086      5F574348 
 1086      41525F54 
 1086      5F2000
 1087 2bf1 01       		.byte	0x1
 1088 2bf2 8E02     		.uleb128 0x10e
 1089 2bf4 5F574348 		.ascii	"_WCHAR_T_DEFINED_ \000"
 1089      41525F54 
 1089      5F444546 
 1089      494E4544 
 1089      5F2000
 1090 2c07 01       		.byte	0x1
 1091 2c08 8F02     		.uleb128 0x10f
 1092 2c0a 5F574348 		.ascii	"_WCHAR_T_DEFINED \000"
 1092      41525F54 
 1092      5F444546 
 1092      494E4544 
 1092      2000
 1093 2c1c 01       		.byte	0x1
 1094 2c1d 9002     		.uleb128 0x110
 1095 2c1f 5F574348 		.ascii	"_WCHAR_T_H \000"
 1095      41525F54 
 1095      5F482000 
 1096 2c2b 01       		.byte	0x1
 1097 2c2c 9102     		.uleb128 0x111
 1098 2c2e 5F5F5F69 		.ascii	"___int_wchar_t_h \000"
 1098      6E745F77 
 1098      63686172 
 1098      5F745F68 
 1098      2000
 1099 2c40 01       		.byte	0x1
 1100 2c41 9202     		.uleb128 0x112
 1101 2c43 5F5F494E 		.ascii	"__INT_WCHAR_T_H \000"
 1101      545F5743 
 1101      4841525F 
 1101      545F4820 
 1101      00
 1102 2c54 01       		.byte	0x1
 1103 2c55 9302     		.uleb128 0x113
 1104 2c57 5F474343 		.ascii	"_GCC_WCHAR_T \000"
 1104      5F574348 
 1104      41525F54 
 1104      2000
 1105 2c65 01       		.byte	0x1
 1106 2c66 9402     		.uleb128 0x114
 1107 2c68 5F574348 		.ascii	"_WCHAR_T_DECLARED \000"
 1107      41525F54 
 1107      5F444543 
 1107      4C415245 
 1107      442000
 1108 2c7b 02       		.byte	0x2
ARM GAS  /tmp/cck0uY6y.s 			page 44


 1109 2c7c A102     		.uleb128 0x121
 1110 2c7e 5F425344 		.ascii	"_BSD_WCHAR_T_\000"
 1110      5F574348 
 1110      41525F54 
 1110      5F00
 1111 2c8c 02       		.byte	0x2
 1112 2c8d D602     		.uleb128 0x156
 1113 2c8f 5F5F6E65 		.ascii	"__need_wchar_t\000"
 1113      65645F77 
 1113      63686172 
 1113      5F7400
 1114 2c9e 02       		.byte	0x2
 1115 2c9f 8B03     		.uleb128 0x18b
 1116 2ca1 4E554C4C 		.ascii	"NULL\000"
 1116      00
 1117 2ca6 01       		.byte	0x1
 1118 2ca7 9003     		.uleb128 0x190
 1119 2ca9 4E554C4C 		.ascii	"NULL ((void *)0)\000"
 1119      20282876 
 1119      6F696420 
 1119      2A293029 
 1119      00
 1120 2cba 02       		.byte	0x2
 1121 2cbb 9603     		.uleb128 0x196
 1122 2cbd 5F5F6E65 		.ascii	"__need_NULL\000"
 1122      65645F4E 
 1122      554C4C00 
 1123 2cc9 01       		.byte	0x1
 1124 2cca 9B03     		.uleb128 0x19b
 1125 2ccc 6F666673 		.ascii	"offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEM"
 1125      65746F66 
 1125      28545950 
 1125      452C4D45 
 1125      4D424552 
 1126 2cff 42455229 		.ascii	"BER)\000"
 1126      00
 1127 2d04 04       		.byte	0x4
 1128              		.file 16 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 1129 2d05 03       		.byte	0x3
 1130 2d06 46       		.uleb128 0x46
 1131 2d07 10       		.uleb128 0x10
 1132 2d08 01       		.byte	0x1
 1133 2d09 02       		.uleb128 0x2
 1134 2d0a 5F4D4143 		.ascii	"_MACHTYPES_H_ \000"
 1134      48545950 
 1134      45535F48 
 1134      5F2000
 1135 2d19 01       		.byte	0x1
 1136 2d1a 0D       		.uleb128 0xd
 1137 2d1b 5F434C4F 		.ascii	"_CLOCK_T_ unsigned long\000"
 1137      434B5F54 
 1137      5F20756E 
 1137      7369676E 
 1137      6564206C 
 1138 2d33 01       		.byte	0x1
 1139 2d34 0E       		.uleb128 0xe
 1140 2d35 5F54494D 		.ascii	"_TIME_T_ long\000"
ARM GAS  /tmp/cck0uY6y.s 			page 45


 1140      455F545F 
 1140      206C6F6E 
 1140      6700
 1141 2d43 01       		.byte	0x1
 1142 2d44 0F       		.uleb128 0xf
 1143 2d45 5F434C4F 		.ascii	"_CLOCKID_T_ unsigned long\000"
 1143      434B4944 
 1143      5F545F20 
 1143      756E7369 
 1143      676E6564 
 1144 2d5f 01       		.byte	0x1
 1145 2d60 10       		.uleb128 0x10
 1146 2d61 5F54494D 		.ascii	"_TIMER_T_ unsigned long\000"
 1146      45525F54 
 1146      5F20756E 
 1146      7369676E 
 1146      6564206C 
 1147 2d79 04       		.byte	0x4
 1148 2d7a 01       		.byte	0x1
 1149 2d7b 50       		.uleb128 0x50
 1150 2d7c 5F53545F 		.ascii	"_ST_INT32 __attribute__ ((__mode__ (__SI__)))\000"
 1150      494E5433 
 1150      32205F5F 
 1150      61747472 
 1150      69627574 
 1151 2daa 01       		.byte	0x1
 1152 2dab 57       		.uleb128 0x57
 1153 2dac 70687973 		.ascii	"physadr physadr_t\000"
 1153      61647220 
 1153      70687973 
 1153      6164725F 
 1153      7400
 1154 2dbe 01       		.byte	0x1
 1155 2dbf 58       		.uleb128 0x58
 1156 2dc0 71756164 		.ascii	"quad quad_t\000"
 1156      20717561 
 1156      645F7400 
 1157 2dcc 01       		.byte	0x1
 1158 2dcd 60       		.uleb128 0x60
 1159 2dce 5F425344 		.ascii	"_BSDTYPES_DEFINED \000"
 1159      54595045 
 1159      535F4445 
 1159      46494E45 
 1159      442000
 1160 2de1 01       		.byte	0x1
 1161 2de2 69       		.uleb128 0x69
 1162 2de3 5F5F636C 		.ascii	"__clock_t_defined \000"
 1162      6F636B5F 
 1162      745F6465 
 1162      66696E65 
 1162      642000
 1163 2df6 01       		.byte	0x1
 1164 2df7 6E       		.uleb128 0x6e
 1165 2df8 5F5F7469 		.ascii	"__time_t_defined \000"
 1165      6D655F74 
 1165      5F646566 
 1165      696E6564 
ARM GAS  /tmp/cck0uY6y.s 			page 46


 1165      2000
 1166 2e0a 01       		.byte	0x1
 1167 2e0b C901     		.uleb128 0xc9
 1168 2e0d 5F535953 		.ascii	"_SYS_TYPES_FD_SET \000"
 1168      5F545950 
 1168      45535F46 
 1168      445F5345 
 1168      542000
 1169 2e20 01       		.byte	0x1
 1170 2e21 CA01     		.uleb128 0xca
 1171 2e23 4E424259 		.ascii	"NBBY 8\000"
 1171      203800
 1172 2e2a 01       		.byte	0x1
 1173 2e2b D201     		.uleb128 0xd2
 1174 2e2d 46445F53 		.ascii	"FD_SETSIZE 64\000"
 1174      45545349 
 1174      5A452036 
 1174      3400
 1175 2e3b 01       		.byte	0x1
 1176 2e3c D601     		.uleb128 0xd6
 1177 2e3e 4E464442 		.ascii	"NFDBITS (sizeof (fd_mask) * NBBY)\000"
 1177      49545320 
 1177      2873697A 
 1177      656F6620 
 1177      2866645F 
 1178 2e60 01       		.byte	0x1
 1179 2e61 D801     		.uleb128 0xd8
 1180 2e63 686F776D 		.ascii	"howmany(x,y) (((x)+((y)-1))/(y))\000"
 1180      616E7928 
 1180      782C7929 
 1180      20282828 
 1180      78292B28 
 1181 2e84 01       		.byte	0x1
 1182 2e85 E101     		.uleb128 0xe1
 1183 2e87 66645F73 		.ascii	"fd_set _types_fd_set\000"
 1183      6574205F 
 1183      74797065 
 1183      735F6664 
 1183      5F736574 
 1184 2e9c 01       		.byte	0x1
 1185 2e9d E301     		.uleb128 0xe3
 1186 2e9f 46445F53 		.ascii	"FD_SET(n,p) ((p)->fds_bits[(n)/NFDBITS] |= (1L << ("
 1186      4554286E 
 1186      2C702920 
 1186      28287029 
 1186      2D3E6664 
 1187 2ed2 286E2920 		.ascii	"(n) % NFDBITS)))\000"
 1187      25204E46 
 1187      44424954 
 1187      53292929 
 1187      00
 1188 2ee3 01       		.byte	0x1
 1189 2ee4 E401     		.uleb128 0xe4
 1190 2ee6 46445F43 		.ascii	"FD_CLR(n,p) ((p)->fds_bits[(n)/NFDBITS] &= ~(1L << "
 1190      4C52286E 
 1190      2C702920 
 1190      28287029 
ARM GAS  /tmp/cck0uY6y.s 			page 47


 1190      2D3E6664 
 1191 2f19 28286E29 		.ascii	"((n) % NFDBITS)))\000"
 1191      2025204E 
 1191      46444249 
 1191      54532929 
 1191      2900
 1192 2f2b 01       		.byte	0x1
 1193 2f2c E501     		.uleb128 0xe5
 1194 2f2e 46445F49 		.ascii	"FD_ISSET(n,p) ((p)->fds_bits[(n)/NFDBITS] & (1L << "
 1194      53534554 
 1194      286E2C70 
 1194      29202828 
 1194      70292D3E 
 1195 2f61 28286E29 		.ascii	"((n) % NFDBITS)))\000"
 1195      2025204E 
 1195      46444249 
 1195      54532929 
 1195      2900
 1196 2f73 01       		.byte	0x1
 1197 2f74 E601     		.uleb128 0xe6
 1198 2f76 46445F5A 		.ascii	"FD_ZERO(p) (__extension__ (void)({ size_t __i; char"
 1198      45524F28 
 1198      70292028 
 1198      5F5F6578 
 1198      74656E73 
 1199 2fa9 202A5F5F 		.ascii	" *__tmp = (char *)p; for (__i = 0; __i < sizeof (*("
 1199      746D7020 
 1199      3D202863 
 1199      68617220 
 1199      2A29703B 
 1200 2fdc 7029293B 		.ascii	"p)); ++__i) *__tmp++ = 0; }))\000"
 1200      202B2B5F 
 1200      5F692920 
 1200      2A5F5F74 
 1200      6D702B2B 
 1201 2ffa 02       		.byte	0x2
 1202 2ffb EF01     		.uleb128 0xef
 1203 2ffd 5F5F4D53 		.ascii	"__MS_types__\000"
 1203      5F747970 
 1203      65735F5F 
 1203      00
 1204 300a 02       		.byte	0x2
 1205 300b F001     		.uleb128 0xf0
 1206 300d 5F53545F 		.ascii	"_ST_INT32\000"
 1206      494E5433 
 1206      3200
 1207 3017 01       		.byte	0x1
 1208 3018 F501     		.uleb128 0xf5
 1209 301a 5F5F636C 		.ascii	"__clockid_t_defined \000"
 1209      6F636B69 
 1209      645F745F 
 1209      64656669 
 1209      6E656420 
 1210 302f 01       		.byte	0x1
 1211 3030 FA01     		.uleb128 0xfa
 1212 3032 5F5F7469 		.ascii	"__timer_t_defined \000"
 1212      6D65725F 
ARM GAS  /tmp/cck0uY6y.s 			page 48


 1212      745F6465 
 1212      66696E65 
 1212      642000
 1213              		.file 17 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 1214 3045 03       		.byte	0x3
 1215 3046 8002     		.uleb128 0x100
 1216 3048 11       		.uleb128 0x11
 1217 3049 01       		.byte	0x1
 1218 304a 16       		.uleb128 0x16
 1219 304b 5F535953 		.ascii	"_SYS_FEATURES_H \000"
 1219      5F464541 
 1219      54555245 
 1219      535F4820 
 1219      00
 1220 305c 04       		.byte	0x4
 1221 305d 02       		.byte	0x2
 1222 305e 9D03     		.uleb128 0x19d
 1223 3060 5F5F6E65 		.ascii	"__need_inttypes\000"
 1223      65645F69 
 1223      6E747479 
 1223      70657300 
 1224 3070 04       		.byte	0x4
 1225              		.file 18 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 1226 3071 03       		.byte	0x3
 1227 3072 41       		.uleb128 0x41
 1228 3073 12       		.uleb128 0x12
 1229 3074 01       		.byte	0x1
 1230 3075 02       		.uleb128 0x2
 1231 3076 5F4E4557 		.ascii	"_NEWLIB_STDIO_H \000"
 1231      4C49425F 
 1231      53544449 
 1231      4F5F4820 
 1231      00
 1232 3087 01       		.byte	0x1
 1233 3088 0D       		.uleb128 0xd
 1234 3089 5F666C6F 		.ascii	"_flockfile(fp) (((fp)->_flags & __SSTR) ? 0 : __loc"
 1234      636B6669 
 1234      6C652866 
 1234      70292028 
 1234      28286670 
 1235 30bc 6B5F6163 		.ascii	"k_acquire_recursive((fp)->_lock))\000"
 1235      71756972 
 1235      655F7265 
 1235      63757273 
 1235      69766528 
 1236 30de 01       		.byte	0x1
 1237 30df 15       		.uleb128 0x15
 1238 30e0 5F66756E 		.ascii	"_funlockfile(fp) (((fp)->_flags & __SSTR) ? 0 : __l"
 1238      6C6F636B 
 1238      66696C65 
 1238      28667029 
 1238      20282828 
 1239 3113 6F636B5F 		.ascii	"ock_release_recursive((fp)->_lock))\000"
 1239      72656C65 
 1239      6173655F 
 1239      72656375 
 1239      72736976 
ARM GAS  /tmp/cck0uY6y.s 			page 49


 1240 3137 04       		.byte	0x4
 1241 3138 01       		.byte	0x1
 1242 3139 43       		.uleb128 0x43
 1243 313a 5F5F534C 		.ascii	"__SLBF 0x0001\000"
 1243      42462030 
 1243      78303030 
 1243      3100
 1244 3148 01       		.byte	0x1
 1245 3149 44       		.uleb128 0x44
 1246 314a 5F5F534E 		.ascii	"__SNBF 0x0002\000"
 1246      42462030 
 1246      78303030 
 1246      3200
 1247 3158 01       		.byte	0x1
 1248 3159 45       		.uleb128 0x45
 1249 315a 5F5F5352 		.ascii	"__SRD 0x0004\000"
 1249      44203078 
 1249      30303034 
 1249      00
 1250 3167 01       		.byte	0x1
 1251 3168 46       		.uleb128 0x46
 1252 3169 5F5F5357 		.ascii	"__SWR 0x0008\000"
 1252      52203078 
 1252      30303038 
 1252      00
 1253 3176 01       		.byte	0x1
 1254 3177 48       		.uleb128 0x48
 1255 3178 5F5F5352 		.ascii	"__SRW 0x0010\000"
 1255      57203078 
 1255      30303130 
 1255      00
 1256 3185 01       		.byte	0x1
 1257 3186 49       		.uleb128 0x49
 1258 3187 5F5F5345 		.ascii	"__SEOF 0x0020\000"
 1258      4F462030 
 1258      78303032 
 1258      3000
 1259 3195 01       		.byte	0x1
 1260 3196 4A       		.uleb128 0x4a
 1261 3197 5F5F5345 		.ascii	"__SERR 0x0040\000"
 1261      52522030 
 1261      78303034 
 1261      3000
 1262 31a5 01       		.byte	0x1
 1263 31a6 4B       		.uleb128 0x4b
 1264 31a7 5F5F534D 		.ascii	"__SMBF 0x0080\000"
 1264      42462030 
 1264      78303038 
 1264      3000
 1265 31b5 01       		.byte	0x1
 1266 31b6 4C       		.uleb128 0x4c
 1267 31b7 5F5F5341 		.ascii	"__SAPP 0x0100\000"
 1267      50502030 
 1267      78303130 
 1267      3000
 1268 31c5 01       		.byte	0x1
 1269 31c6 4D       		.uleb128 0x4d
ARM GAS  /tmp/cck0uY6y.s 			page 50


 1270 31c7 5F5F5353 		.ascii	"__SSTR 0x0200\000"
 1270      54522030 
 1270      78303230 
 1270      3000
 1271 31d5 01       		.byte	0x1
 1272 31d6 4E       		.uleb128 0x4e
 1273 31d7 5F5F534F 		.ascii	"__SOPT 0x0400\000"
 1273      50542030 
 1273      78303430 
 1273      3000
 1274 31e5 01       		.byte	0x1
 1275 31e6 4F       		.uleb128 0x4f
 1276 31e7 5F5F534E 		.ascii	"__SNPT 0x0800\000"
 1276      50542030 
 1276      78303830 
 1276      3000
 1277 31f5 01       		.byte	0x1
 1278 31f6 50       		.uleb128 0x50
 1279 31f7 5F5F534F 		.ascii	"__SOFF 0x1000\000"
 1279      46462030 
 1279      78313030 
 1279      3000
 1280 3205 01       		.byte	0x1
 1281 3206 51       		.uleb128 0x51
 1282 3207 5F5F534F 		.ascii	"__SORD 0x2000\000"
 1282      52442030 
 1282      78323030 
 1282      3000
 1283 3215 01       		.byte	0x1
 1284 3216 55       		.uleb128 0x55
 1285 3217 5F5F534C 		.ascii	"__SL64 0x8000\000"
 1285      36342030 
 1285      78383030 
 1285      3000
 1286 3225 01       		.byte	0x1
 1287 3226 58       		.uleb128 0x58
 1288 3227 5F5F5357 		.ascii	"__SWID 0x2000\000"
 1288      49442030 
 1288      78323030 
 1288      3000
 1289 3235 01       		.byte	0x1
 1290 3236 6B       		.uleb128 0x6b
 1291 3237 5F494F46 		.ascii	"_IOFBF 0\000"
 1291      42462030 
 1291      00
 1292 3240 01       		.byte	0x1
 1293 3241 6C       		.uleb128 0x6c
 1294 3242 5F494F4C 		.ascii	"_IOLBF 1\000"
 1294      42462031 
 1294      00
 1295 324b 01       		.byte	0x1
 1296 324c 6D       		.uleb128 0x6d
 1297 324d 5F494F4E 		.ascii	"_IONBF 2\000"
 1297      42462032 
 1297      00
 1298 3256 01       		.byte	0x1
 1299 3257 74       		.uleb128 0x74
ARM GAS  /tmp/cck0uY6y.s 			page 51


 1300 3258 454F4620 		.ascii	"EOF (-1)\000"
 1300      282D3129 
 1300      00
 1301 3261 01       		.byte	0x1
 1302 3262 8A01     		.uleb128 0x8a
 1303 3264 42554653 		.ascii	"BUFSIZ 1024\000"
 1303      495A2031 
 1303      30323400 
 1304 3270 01       		.byte	0x1
 1305 3271 9001     		.uleb128 0x90
 1306 3273 464F5045 		.ascii	"FOPEN_MAX 20\000"
 1306      4E5F4D41 
 1306      58203230 
 1306      00
 1307 3280 01       		.byte	0x1
 1308 3281 9601     		.uleb128 0x96
 1309 3283 46494C45 		.ascii	"FILENAME_MAX 1024\000"
 1309      4E414D45 
 1309      5F4D4158 
 1309      20313032 
 1309      3400
 1310 3295 01       		.byte	0x1
 1311 3296 9C01     		.uleb128 0x9c
 1312 3298 4C5F746D 		.ascii	"L_tmpnam FILENAME_MAX\000"
 1312      706E616D 
 1312      2046494C 
 1312      454E414D 
 1312      455F4D41 
 1313 32ae 01       		.byte	0x1
 1314 32af 9F01     		.uleb128 0x9f
 1315 32b1 544D505F 		.ascii	"TMP_MAX 26\000"
 1315      4D415820 
 1315      323600
 1316 32bc 01       		.byte	0x1
 1317 32bd A201     		.uleb128 0xa2
 1318 32bf 505F746D 		.ascii	"P_tmpdir \"/tmp\"\000"
 1318      70646972 
 1318      20222F74 
 1318      6D702200 
 1319 32cf 01       		.byte	0x1
 1320 32d0 A801     		.uleb128 0xa8
 1321 32d2 5345454B 		.ascii	"SEEK_SET 0\000"
 1321      5F534554 
 1321      203000
 1322 32dd 01       		.byte	0x1
 1323 32de AB01     		.uleb128 0xab
 1324 32e0 5345454B 		.ascii	"SEEK_CUR 1\000"
 1324      5F435552 
 1324      203100
 1325 32eb 01       		.byte	0x1
 1326 32ec AE01     		.uleb128 0xae
 1327 32ee 5345454B 		.ascii	"SEEK_END 2\000"
 1327      5F454E44 
 1327      203200
 1328 32f9 01       		.byte	0x1
 1329 32fa BA01     		.uleb128 0xba
 1330 32fc 73746469 		.ascii	"stdin (_REENT->_stdin)\000"
ARM GAS  /tmp/cck0uY6y.s 			page 52


 1330      6E20285F 
 1330      5245454E 
 1330      542D3E5F 
 1330      73746469 
 1331 3313 01       		.byte	0x1
 1332 3314 BB01     		.uleb128 0xbb
 1333 3316 7374646F 		.ascii	"stdout (_REENT->_stdout)\000"
 1333      75742028 
 1333      5F524545 
 1333      4E542D3E 
 1333      5F737464 
 1334 332f 01       		.byte	0x1
 1335 3330 BC01     		.uleb128 0xbc
 1336 3332 73746465 		.ascii	"stderr (_REENT->_stderr)\000"
 1336      72722028 
 1336      5F524545 
 1336      4E542D3E 
 1336      5F737464 
 1337 334b 01       		.byte	0x1
 1338 334c C401     		.uleb128 0xc4
 1339 334e 5F737464 		.ascii	"_stdin_r(x) ((x)->_stdin)\000"
 1339      696E5F72 
 1339      28782920 
 1339      28287829 
 1339      2D3E5F73 
 1340 3368 01       		.byte	0x1
 1341 3369 C501     		.uleb128 0xc5
 1342 336b 5F737464 		.ascii	"_stdout_r(x) ((x)->_stdout)\000"
 1342      6F75745F 
 1342      72287829 
 1342      20282878 
 1342      292D3E5F 
 1343 3387 01       		.byte	0x1
 1344 3388 C601     		.uleb128 0xc6
 1345 338a 5F737464 		.ascii	"_stderr_r(x) ((x)->_stderr)\000"
 1345      6572725F 
 1345      72287829 
 1345      20282878 
 1345      292D3E5F 
 1346 33a6 01       		.byte	0x1
 1347 33a7 CD01     		.uleb128 0xcd
 1348 33a9 5F5F5641 		.ascii	"__VALIST __gnuc_va_list\000"
 1348      4C495354 
 1348      205F5F67 
 1348      6E75635F 
 1348      76615F6C 
 1349 33c1 01       		.byte	0x1
 1350 33c2 C604     		.uleb128 0x246
 1351 33c4 66726F70 		.ascii	"fropen(__cookie,__fn) funopen(__cookie, __fn, (int "
 1351      656E285F 
 1351      5F636F6F 
 1351      6B69652C 
 1351      5F5F666E 
 1352 33f7 282A2928 		.ascii	"(*)())0, (fpos_t (*)())0, (int (*)())0)\000"
 1352      2929302C 
 1352      20286670 
 1352      6F735F74 
ARM GAS  /tmp/cck0uY6y.s 			page 53


 1352      20282A29 
 1353 341f 01       		.byte	0x1
 1354 3420 C804     		.uleb128 0x248
 1355 3422 66776F70 		.ascii	"fwopen(__cookie,__fn) funopen(__cookie, (int (*)())"
 1355      656E285F 
 1355      5F636F6F 
 1355      6B69652C 
 1355      5F5F666E 
 1356 3455 302C205F 		.ascii	"0, __fn, (fpos_t (*)())0, (int (*)())0)\000"
 1356      5F666E2C 
 1356      20286670 
 1356      6F735F74 
 1356      20282A29 
 1357 347d 01       		.byte	0x1
 1358 347e E904     		.uleb128 0x269
 1359 3480 5F5F7367 		.ascii	"__sgetc_raw_r(__ptr,__f) (--(__f)->_r < 0 ? __srget"
 1359      6574635F 
 1359      7261775F 
 1359      72285F5F 
 1359      7074722C 
 1360 34b3 5F72285F 		.ascii	"_r(__ptr, __f) : (int)(*(__f)->_p++))\000"
 1360      5F707472 
 1360      2C205F5F 
 1360      6629203A 
 1360      2028696E 
 1361 34d9 01       		.byte	0x1
 1362 34da 9905     		.uleb128 0x299
 1363 34dc 5F5F7367 		.ascii	"__sgetc_r(__ptr,__p) __sgetc_raw_r(__ptr, __p)\000"
 1363      6574635F 
 1363      72285F5F 
 1363      7074722C 
 1363      5F5F7029 
 1364 350b 01       		.byte	0x1
 1365 350c A905     		.uleb128 0x2a9
 1366 350e 5F5F7370 		.ascii	"__sputc_raw_r(__ptr,__c,__p) (--(__p)->_w < 0 ? (__"
 1366      7574635F 
 1366      7261775F 
 1366      72285F5F 
 1366      7074722C 
 1367 3541 70292D3E 		.ascii	"p)->_w >= (__p)->_lbfsize ? (*(__p)->_p = (__c)), *"
 1367      5F77203E 
 1367      3D20285F 
 1367      5F70292D 
 1367      3E5F6C62 
 1368 3574 285F5F70 		.ascii	"(__p)->_p != '\\n' ? (int)*(__p)->_p++ : __swbuf_r("
 1368      292D3E5F 
 1368      7020213D 
 1368      20275C6E 
 1368      27203F20 
 1369 35a6 5F5F7074 		.ascii	"__ptr, '\\n', __p) : __swbuf_r(__ptr, (int)(__c), _"
 1369      722C2027 
 1369      5C6E272C 
 1369      205F5F70 
 1369      29203A20 
 1370 35d8 5F702920 		.ascii	"_p) : (*(__p)->_p = (__c), (int)*(__p)->_p++))\000"
 1370      3A20282A 
 1370      285F5F70 
ARM GAS  /tmp/cck0uY6y.s 			page 54


 1370      292D3E5F 
 1370      70203D20 
 1371 3607 01       		.byte	0x1
 1372 3608 B705     		.uleb128 0x2b7
 1373 360a 5F5F7370 		.ascii	"__sputc_r(__ptr,__c,__p) __sputc_raw_r(__ptr, __c, "
 1373      7574635F 
 1373      72285F5F 
 1373      7074722C 
 1373      5F5F632C 
 1374 363d 5F5F7029 		.ascii	"__p)\000"
 1374      00
 1375 3642 01       		.byte	0x1
 1376 3643 BB05     		.uleb128 0x2bb
 1377 3645 5F5F7366 		.ascii	"__sfeof(p) (((p)->_flags & __SEOF) != 0)\000"
 1377      656F6628 
 1377      70292028 
 1377      28287029 
 1377      2D3E5F66 
 1378 366e 01       		.byte	0x1
 1379 366f BC05     		.uleb128 0x2bc
 1380 3671 5F5F7366 		.ascii	"__sferror(p) (((p)->_flags & __SERR) != 0)\000"
 1380      6572726F 
 1380      72287029 
 1380      20282828 
 1380      70292D3E 
 1381 369c 01       		.byte	0x1
 1382 369d BD05     		.uleb128 0x2bd
 1383 369f 5F5F7363 		.ascii	"__sclearerr(p) ((void)((p)->_flags &= ~(__SERR|__SE"
 1383      6C656172 
 1383      65727228 
 1383      70292028 
 1383      28766F69 
 1384 36d2 4F462929 		.ascii	"OF)))\000"
 1384      2900
 1385 36d8 01       		.byte	0x1
 1386 36d9 BE05     		.uleb128 0x2be
 1387 36db 5F5F7366 		.ascii	"__sfileno(p) ((p)->_file)\000"
 1387      696C656E 
 1387      6F287029 
 1387      20282870 
 1387      292D3E5F 
 1388 36f5 01       		.byte	0x1
 1389 36f6 CC05     		.uleb128 0x2cc
 1390 36f8 67657463 		.ascii	"getc(fp) __sgetc_r(_REENT, fp)\000"
 1390      28667029 
 1390      205F5F73 
 1390      67657463 
 1390      5F72285F 
 1391 3717 01       		.byte	0x1
 1392 3718 CD05     		.uleb128 0x2cd
 1393 371a 70757463 		.ascii	"putc(x,fp) __sputc_r(_REENT, x, fp)\000"
 1393      28782C66 
 1393      7029205F 
 1393      5F737075 
 1393      74635F72 
 1394 373e 01       		.byte	0x1
 1395 373f D305     		.uleb128 0x2d3
ARM GAS  /tmp/cck0uY6y.s 			page 55


 1396 3741 66617374 		.ascii	"fast_putc(x,p) (--(p)->_w < 0 ? __swbuf_r(_REENT, ("
 1396      5F707574 
 1396      6328782C 
 1396      70292028 
 1396      2D2D2870 
 1397 3774 696E7429 		.ascii	"int)(x), p) == EOF : (*(p)->_p = (x), (p)->_p++, 0)"
 1397      2878292C 
 1397      20702920 
 1397      3D3D2045 
 1397      4F46203A 
 1398 37a7 2900     		.ascii	")\000"
 1399 37a9 01       		.byte	0x1
 1400 37aa D605     		.uleb128 0x2d6
 1401 37ac 4C5F6375 		.ascii	"L_cuserid 9\000"
 1401      73657269 
 1401      64203900 
 1402 37b8 01       		.byte	0x1
 1403 37b9 DE05     		.uleb128 0x2de
 1404 37bb 67657463 		.ascii	"getchar() getc(stdin)\000"
 1404      68617228 
 1404      29206765 
 1404      74632873 
 1404      7464696E 
 1405 37d1 01       		.byte	0x1
 1406 37d2 DF05     		.uleb128 0x2df
 1407 37d4 70757463 		.ascii	"putchar(x) putc(x, stdout)\000"
 1407      68617228 
 1407      78292070 
 1407      75746328 
 1407      782C2073 
 1408 37ef 04       		.byte	0x4
 1409              		.file 19 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 1410 37f0 03       		.byte	0x3
 1411 37f1 38       		.uleb128 0x38
 1412 37f2 13       		.uleb128 0x13
 1413 37f3 01       		.byte	0x1
 1414 37f4 08       		.uleb128 0x8
 1415 37f5 5F535444 		.ascii	"_STDLIB_H_ \000"
 1415      4C49425F 
 1415      485F2000 
 1416 3801 01       		.byte	0x1
 1417 3802 11       		.uleb128 0x11
 1418 3803 5F5F6E65 		.ascii	"__need_size_t \000"
 1418      65645F73 
 1418      697A655F 
 1418      742000
 1419 3812 01       		.byte	0x1
 1420 3813 12       		.uleb128 0x12
 1421 3814 5F5F6E65 		.ascii	"__need_wchar_t \000"
 1421      65645F77 
 1421      63686172 
 1421      5F742000 
 1422 3824 03       		.byte	0x3
 1423 3825 13       		.uleb128 0x13
 1424 3826 07       		.uleb128 0x7
 1425 3827 02       		.byte	0x2
 1426 3828 A001     		.uleb128 0xa0
ARM GAS  /tmp/cck0uY6y.s 			page 56


 1427 382a 5F5F6E65 		.ascii	"__need_ptrdiff_t\000"
 1427      65645F70 
 1427      74726469 
 1427      66665F74 
 1427      00
 1428 383b 02       		.byte	0x2
 1429 383c E901     		.uleb128 0xe9
 1430 383e 5F5F6E65 		.ascii	"__need_size_t\000"
 1430      65645F73 
 1430      697A655F 
 1430      7400
 1431 384c 02       		.byte	0x2
 1432 384d D602     		.uleb128 0x156
 1433 384f 5F5F6E65 		.ascii	"__need_wchar_t\000"
 1433      65645F77 
 1433      63686172 
 1433      5F7400
 1434 385e 02       		.byte	0x2
 1435 385f 8B03     		.uleb128 0x18b
 1436 3861 4E554C4C 		.ascii	"NULL\000"
 1436      00
 1437 3866 01       		.byte	0x1
 1438 3867 9003     		.uleb128 0x190
 1439 3869 4E554C4C 		.ascii	"NULL ((void *)0)\000"
 1439      20282876 
 1439      6F696420 
 1439      2A293029 
 1439      00
 1440 387a 02       		.byte	0x2
 1441 387b 9603     		.uleb128 0x196
 1442 387d 5F5F6E65 		.ascii	"__need_NULL\000"
 1442      65645F4E 
 1442      554C4C00 
 1443 3889 01       		.byte	0x1
 1444 388a 9B03     		.uleb128 0x19b
 1445 388c 6F666673 		.ascii	"offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEM"
 1445      65746F66 
 1445      28545950 
 1445      452C4D45 
 1445      4D424552 
 1446 38bf 42455229 		.ascii	"BER)\000"
 1446      00
 1447 38c4 04       		.byte	0x4
 1448              		.file 20 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 1449 38c5 03       		.byte	0x3
 1450 38c6 16       		.uleb128 0x16
 1451 38c7 14       		.uleb128 0x14
 1452 38c8 01       		.byte	0x1
 1453 38c9 02       		.uleb128 0x2
 1454 38ca 5F4D4143 		.ascii	"_MACHSTDLIB_H_ \000"
 1454      48535444 
 1454      4C49425F 
 1454      485F2000 
 1455 38da 04       		.byte	0x4
 1456              		.file 21 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 1457 38db 03       		.byte	0x3
 1458 38dc 18       		.uleb128 0x18
ARM GAS  /tmp/cck0uY6y.s 			page 57


 1459 38dd 15       		.uleb128 0x15
 1460 38de 01       		.byte	0x1
 1461 38df 08       		.uleb128 0x8
 1462 38e0 5F4E4557 		.ascii	"_NEWLIB_ALLOCA_H \000"
 1462      4C49425F 
 1462      414C4C4F 
 1462      43415F48 
 1462      2000
 1463 38f2 02       		.byte	0x2
 1464 38f3 0D       		.uleb128 0xd
 1465 38f4 616C6C6F 		.ascii	"alloca\000"
 1465      636100
 1466 38fb 01       		.byte	0x1
 1467 38fc 10       		.uleb128 0x10
 1468 38fd 616C6C6F 		.ascii	"alloca(size) __builtin_alloca(size)\000"
 1468      63612873 
 1468      697A6529 
 1468      205F5F62 
 1468      75696C74 
 1469 3921 04       		.byte	0x4
 1470 3922 01       		.byte	0x1
 1471 3923 39       		.uleb128 0x39
 1472 3924 45584954 		.ascii	"EXIT_FAILURE 1\000"
 1472      5F464149 
 1472      4C555245 
 1472      203100
 1473 3933 01       		.byte	0x1
 1474 3934 3A       		.uleb128 0x3a
 1475 3935 45584954 		.ascii	"EXIT_SUCCESS 0\000"
 1475      5F535543 
 1475      43455353 
 1475      203000
 1476 3944 01       		.byte	0x1
 1477 3945 3C       		.uleb128 0x3c
 1478 3946 52414E44 		.ascii	"RAND_MAX __RAND_MAX\000"
 1478      5F4D4158 
 1478      205F5F52 
 1478      414E445F 
 1478      4D415800 
 1479 395a 01       		.byte	0x1
 1480 395b 44       		.uleb128 0x44
 1481 395c 4D425F43 		.ascii	"MB_CUR_MAX __mb_cur_max\000"
 1481      55525F4D 
 1481      4158205F 
 1481      5F6D625F 
 1481      6375725F 
 1482 3974 01       		.byte	0x1
 1483 3975 7F       		.uleb128 0x7f
 1484 3976 73747274 		.ascii	"strtodf strtof\000"
 1484      6F646620 
 1484      73747274 
 1484      6F6600
 1485 3985 04       		.byte	0x4
 1486              		.file 22 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 1487 3986 03       		.byte	0x3
 1488 3987 39       		.uleb128 0x39
 1489 3988 16       		.uleb128 0x16
ARM GAS  /tmp/cck0uY6y.s 			page 58


 1490 3989 01       		.byte	0x1
 1491 398a 08       		.uleb128 0x8
 1492 398b 5F535452 		.ascii	"_STRING_H_ \000"
 1492      494E475F 
 1492      485F2000 
 1493 3997 01       		.byte	0x1
 1494 3998 0D       		.uleb128 0xd
 1495 3999 5F5F6E65 		.ascii	"__need_size_t \000"
 1495      65645F73 
 1495      697A655F 
 1495      742000
 1496 39a8 03       		.byte	0x3
 1497 39a9 0E       		.uleb128 0xe
 1498 39aa 07       		.uleb128 0x7
 1499 39ab 02       		.byte	0x2
 1500 39ac A001     		.uleb128 0xa0
 1501 39ae 5F5F6E65 		.ascii	"__need_ptrdiff_t\000"
 1501      65645F70 
 1501      74726469 
 1501      66665F74 
 1501      00
 1502 39bf 02       		.byte	0x2
 1503 39c0 E901     		.uleb128 0xe9
 1504 39c2 5F5F6E65 		.ascii	"__need_size_t\000"
 1504      65645F73 
 1504      697A655F 
 1504      7400
 1505 39d0 02       		.byte	0x2
 1506 39d1 D602     		.uleb128 0x156
 1507 39d3 5F5F6E65 		.ascii	"__need_wchar_t\000"
 1507      65645F77 
 1507      63686172 
 1507      5F7400
 1508 39e2 02       		.byte	0x2
 1509 39e3 8B03     		.uleb128 0x18b
 1510 39e5 4E554C4C 		.ascii	"NULL\000"
 1510      00
 1511 39ea 01       		.byte	0x1
 1512 39eb 9003     		.uleb128 0x190
 1513 39ed 4E554C4C 		.ascii	"NULL ((void *)0)\000"
 1513      20282876 
 1513      6F696420 
 1513      2A293029 
 1513      00
 1514 39fe 02       		.byte	0x2
 1515 39ff 9603     		.uleb128 0x196
 1516 3a01 5F5F6E65 		.ascii	"__need_NULL\000"
 1516      65645F4E 
 1516      554C4C00 
 1517 3a0d 01       		.byte	0x1
 1518 3a0e 9B03     		.uleb128 0x19b
 1519 3a10 6F666673 		.ascii	"offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEM"
 1519      65746F66 
 1519      28545950 
 1519      452C4D45 
 1519      4D424552 
 1520 3a43 42455229 		.ascii	"BER)\000"
ARM GAS  /tmp/cck0uY6y.s 			page 59


 1520      00
 1521 3a48 04       		.byte	0x4
 1522 3a49 01       		.byte	0x1
 1523 3a4a 56       		.uleb128 0x56
 1524 3a4b 73747263 		.ascii	"strcmpi strcasecmp\000"
 1524      6D706920 
 1524      73747263 
 1524      61736563 
 1524      6D7000
 1525 3a5e 01       		.byte	0x1
 1526 3a5f 59       		.uleb128 0x59
 1527 3a60 73747269 		.ascii	"stricmp strcasecmp\000"
 1527      636D7020 
 1527      73747263 
 1527      61736563 
 1527      6D7000
 1528 3a73 01       		.byte	0x1
 1529 3a74 5C       		.uleb128 0x5c
 1530 3a75 7374726E 		.ascii	"strncmpi strncasecmp\000"
 1530      636D7069 
 1530      20737472 
 1530      6E636173 
 1530      65636D70 
 1531 3a8a 01       		.byte	0x1
 1532 3a8b 5F       		.uleb128 0x5f
 1533 3a8c 7374726E 		.ascii	"strnicmp strncasecmp\000"
 1533      69636D70 
 1533      20737472 
 1533      6E636173 
 1533      65636D70 
 1534              		.file 23 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 1535 3aa1 03       		.byte	0x3
 1536 3aa2 64       		.uleb128 0x64
 1537 3aa3 17       		.uleb128 0x17
 1538 3aa4 04       		.byte	0x4
 1539 3aa5 04       		.byte	0x4
 1540 3aa6 01       		.byte	0x1
 1541 3aa7 3E       		.uleb128 0x3e
 1542 3aa8 4D50555F 		.ascii	"MPU_WRAPPERS_INCLUDED_FROM_API_FILE \000"
 1542      57524150 
 1542      50455253 
 1542      5F494E43 
 1542      4C554445 
 1543              		.file 24 "./FreeRTOS/include/FreeRTOS.h"
 1544 3acd 03       		.byte	0x3
 1545 3ace 40       		.uleb128 0x40
 1546 3acf 18       		.uleb128 0x18
 1547 3ad0 01       		.byte	0x1
 1548 3ad1 37       		.uleb128 0x37
 1549 3ad2 494E435F 		.ascii	"INC_FREERTOS_H \000"
 1549      46524545 
 1549      52544F53 
 1549      5F482000 
 1550 3ae2 03       		.byte	0x3
 1551 3ae3 3D       		.uleb128 0x3d
 1552 3ae4 07       		.uleb128 0x7
 1553 3ae5 04       		.byte	0x4
ARM GAS  /tmp/cck0uY6y.s 			page 60


 1554              		.file 25 "./FreeRTOS/include/projdefs.h"
 1555 3ae6 03       		.byte	0x3
 1556 3ae7 40       		.uleb128 0x40
 1557 3ae8 19       		.uleb128 0x19
 1558 3ae9 01       		.byte	0x1
 1559 3aea 37       		.uleb128 0x37
 1560 3aeb 50524F4A 		.ascii	"PROJDEFS_H \000"
 1560      44454653 
 1560      5F482000 
 1561 3af7 01       		.byte	0x1
 1562 3af8 3C       		.uleb128 0x3c
 1563 3af9 70645452 		.ascii	"pdTRUE ( 1 )\000"
 1563      55452028 
 1563      20312029 
 1563      00
 1564 3b06 01       		.byte	0x1
 1565 3b07 3D       		.uleb128 0x3d
 1566 3b08 70644641 		.ascii	"pdFALSE ( 0 )\000"
 1566      4C534520 
 1566      28203020 
 1566      2900
 1567 3b16 01       		.byte	0x1
 1568 3b17 3F       		.uleb128 0x3f
 1569 3b18 70645041 		.ascii	"pdPASS ( 1 )\000"
 1569      53532028 
 1569      20312029 
 1569      00
 1570 3b25 01       		.byte	0x1
 1571 3b26 40       		.uleb128 0x40
 1572 3b27 70644641 		.ascii	"pdFAIL ( 0 )\000"
 1572      494C2028 
 1572      20302029 
 1572      00
 1573 3b34 01       		.byte	0x1
 1574 3b35 41       		.uleb128 0x41
 1575 3b36 65727251 		.ascii	"errQUEUE_EMPTY ( 0 )\000"
 1575      55455545 
 1575      5F454D50 
 1575      54592028 
 1575      20302029 
 1576 3b4b 01       		.byte	0x1
 1577 3b4c 42       		.uleb128 0x42
 1578 3b4d 65727251 		.ascii	"errQUEUE_FULL ( 0 )\000"
 1578      55455545 
 1578      5F46554C 
 1578      4C202820 
 1578      30202900 
 1579 3b61 01       		.byte	0x1
 1580 3b62 45       		.uleb128 0x45
 1581 3b63 65727243 		.ascii	"errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY ( -1 )\000"
 1581      4F554C44 
 1581      5F4E4F54 
 1581      5F414C4C 
 1581      4F434154 
 1582 3b90 01       		.byte	0x1
 1583 3b91 46       		.uleb128 0x46
 1584 3b92 6572724E 		.ascii	"errNO_TASK_TO_RUN ( -2 )\000"
ARM GAS  /tmp/cck0uY6y.s 			page 61


 1584      4F5F5441 
 1584      534B5F54 
 1584      4F5F5255 
 1584      4E202820 
 1585 3bab 01       		.byte	0x1
 1586 3bac 47       		.uleb128 0x47
 1587 3bad 65727251 		.ascii	"errQUEUE_BLOCKED ( -4 )\000"
 1587      55455545 
 1587      5F424C4F 
 1587      434B4544 
 1587      2028202D 
 1588 3bc5 01       		.byte	0x1
 1589 3bc6 48       		.uleb128 0x48
 1590 3bc7 65727251 		.ascii	"errQUEUE_YIELD ( -5 )\000"
 1590      55455545 
 1590      5F594945 
 1590      4C442028 
 1590      202D3520 
 1591 3bdd 04       		.byte	0x4
 1592              		.file 26 "./FreeRTOSConfig.h"
 1593 3bde 03       		.byte	0x3
 1594 3bdf 43       		.uleb128 0x43
 1595 3be0 1A       		.uleb128 0x1a
 1596 3be1 01       		.byte	0x1
 1597 3be2 37       		.uleb128 0x37
 1598 3be3 46524545 		.ascii	"FREERTOS_CONFIG_H \000"
 1598      52544F53 
 1598      5F434F4E 
 1598      4649475F 
 1598      482000
 1599              		.file 27 "../../libs/CMSIS/CM3/DeviceSupport/NXP/LPC17xx/LPC17xx.h"
 1600 3bf6 03       		.byte	0x3
 1601 3bf7 39       		.uleb128 0x39
 1602 3bf8 1B       		.uleb128 0x1b
 1603 3bf9 01       		.byte	0x1
 1604 3bfa 1B       		.uleb128 0x1b
 1605 3bfb 5F5F4C50 		.ascii	"__LPC17xx_H__ \000"
 1605      43313778 
 1605      785F485F 
 1605      5F2000
 1606 3c0a 01       		.byte	0x1
 1607 3c0b 5B       		.uleb128 0x5b
 1608 3c0c 5F5F4D50 		.ascii	"__MPU_PRESENT 1\000"
 1608      555F5052 
 1608      4553454E 
 1608      54203100 
 1609 3c1c 01       		.byte	0x1
 1610 3c1d 5C       		.uleb128 0x5c
 1611 3c1e 5F5F4E56 		.ascii	"__NVIC_PRIO_BITS 5\000"
 1611      49435F50 
 1611      52494F5F 
 1611      42495453 
 1611      203500
 1612 3c31 01       		.byte	0x1
 1613 3c32 5D       		.uleb128 0x5d
 1614 3c33 5F5F5665 		.ascii	"__Vendor_SysTickConfig 0\000"
 1614      6E646F72 
ARM GAS  /tmp/cck0uY6y.s 			page 62


 1614      5F537973 
 1614      5469636B 
 1614      436F6E66 
 1615              		.file 28 "../../libs/CMSIS/CM3/CoreSupport/core_cm3.h"
 1616 3c4c 03       		.byte	0x3
 1617 3c4d 60       		.uleb128 0x60
 1618 3c4e 1C       		.uleb128 0x1c
 1619 3c4f 01       		.byte	0x1
 1620 3c50 19       		.uleb128 0x19
 1621 3c51 5F5F434D 		.ascii	"__CM3_CORE_H__ \000"
 1621      335F434F 
 1621      52455F48 
 1621      5F5F2000 
 1622 3c61 01       		.byte	0x1
 1623 3c62 54       		.uleb128 0x54
 1624 3c63 5F5F434D 		.ascii	"__CM3_CMSIS_VERSION_MAIN (0x01)\000"
 1624      335F434D 
 1624      5349535F 
 1624      56455253 
 1624      494F4E5F 
 1625 3c83 01       		.byte	0x1
 1626 3c84 55       		.uleb128 0x55
 1627 3c85 5F5F434D 		.ascii	"__CM3_CMSIS_VERSION_SUB (0x30)\000"
 1627      335F434D 
 1627      5349535F 
 1627      56455253 
 1627      494F4E5F 
 1628 3ca4 01       		.byte	0x1
 1629 3ca5 56       		.uleb128 0x56
 1630 3ca6 5F5F434D 		.ascii	"__CM3_CMSIS_VERSION ((__CM3_CMSIS_VERSION_MAIN << 1"
 1630      335F434D 
 1630      5349535F 
 1630      56455253 
 1630      494F4E20 
 1631 3cd9 3629207C 		.ascii	"6) | __CM3_CMSIS_VERSION_SUB)\000"
 1631      205F5F43 
 1631      4D335F43 
 1631      4D534953 
 1631      5F564552 
 1632 3cf7 01       		.byte	0x1
 1633 3cf8 58       		.uleb128 0x58
 1634 3cf9 5F5F434F 		.ascii	"__CORTEX_M (0x03)\000"
 1634      52544558 
 1634      5F4D2028 
 1634      30783033 
 1634      2900
 1635              		.file 29 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 1636 3d0b 03       		.byte	0x3
 1637 3d0c 5A       		.uleb128 0x5a
 1638 3d0d 1D       		.uleb128 0x1d
 1639 3d0e 01       		.byte	0x1
 1640 3d0f 0A       		.uleb128 0xa
 1641 3d10 5F535444 		.ascii	"_STDINT_H \000"
 1641      494E545F 
 1641      482000
 1642 3d1b 01       		.byte	0x1
 1643 3d1c 14       		.uleb128 0x14
ARM GAS  /tmp/cck0uY6y.s 			page 63


 1644 3d1d 5F5F5354 		.ascii	"__STDINT_EXP(x) __ ##x ##__\000"
 1644      44494E54 
 1644      5F455850 
 1644      28782920 
 1644      5F5F2023 
 1645 3d39 01       		.byte	0x1
 1646 3d3a 1E       		.uleb128 0x1e
 1647 3d3b 5F5F6861 		.ascii	"__have_longlong64 1\000"
 1647      76655F6C 
 1647      6F6E676C 
 1647      6F6E6736 
 1647      34203100 
 1648 3d4f 01       		.byte	0x1
 1649 3d50 25       		.uleb128 0x25
 1650 3d51 5F5F6861 		.ascii	"__have_long32 1\000"
 1650      76655F6C 
 1650      6F6E6733 
 1650      32203100 
 1651 3d61 01       		.byte	0x1
 1652 3d62 2B       		.uleb128 0x2b
 1653 3d63 5F5F696E 		.ascii	"__int8_t_defined 1\000"
 1653      74385F74 
 1653      5F646566 
 1653      696E6564 
 1653      203100
 1654 3d76 01       		.byte	0x1
 1655 3d77 31       		.uleb128 0x31
 1656 3d78 5F5F696E 		.ascii	"__int_least8_t_defined 1\000"
 1656      745F6C65 
 1656      61737438 
 1656      5F745F64 
 1656      6566696E 
 1657 3d91 01       		.byte	0x1
 1658 3d92 37       		.uleb128 0x37
 1659 3d93 5F5F696E 		.ascii	"__int16_t_defined 1\000"
 1659      7431365F 
 1659      745F6465 
 1659      66696E65 
 1659      64203100 
 1660 3da7 01       		.byte	0x1
 1661 3da8 45       		.uleb128 0x45
 1662 3da9 5F5F696E 		.ascii	"__int_least16_t_defined 1\000"
 1662      745F6C65 
 1662      61737431 
 1662      365F745F 
 1662      64656669 
 1663 3dc3 01       		.byte	0x1
 1664 3dc4 51       		.uleb128 0x51
 1665 3dc5 5F5F696E 		.ascii	"__int32_t_defined 1\000"
 1665      7433325F 
 1665      745F6465 
 1665      66696E65 
 1665      64203100 
 1666 3dd9 01       		.byte	0x1
 1667 3dda 63       		.uleb128 0x63
 1668 3ddb 5F5F696E 		.ascii	"__int_least32_t_defined 1\000"
 1668      745F6C65 
ARM GAS  /tmp/cck0uY6y.s 			page 64


 1668      61737433 
 1668      325F745F 
 1668      64656669 
 1669 3df5 01       		.byte	0x1
 1670 3df6 79       		.uleb128 0x79
 1671 3df7 5F5F696E 		.ascii	"__int64_t_defined 1\000"
 1671      7436345F 
 1671      745F6465 
 1671      66696E65 
 1671      64203100 
 1672 3e0b 01       		.byte	0x1
 1673 3e0c 8301     		.uleb128 0x83
 1674 3e0e 5F5F696E 		.ascii	"__int_least64_t_defined 1\000"
 1674      745F6C65 
 1674      61737436 
 1674      345F745F 
 1674      64656669 
 1675 3e28 01       		.byte	0x1
 1676 3e29 A101     		.uleb128 0xa1
 1677 3e2b 5F5F696E 		.ascii	"__int_fast8_t_defined 1\000"
 1677      745F6661 
 1677      7374385F 
 1677      745F6465 
 1677      66696E65 
 1678 3e43 01       		.byte	0x1
 1679 3e44 A701     		.uleb128 0xa7
 1680 3e46 5F5F696E 		.ascii	"__int_fast16_t_defined 1\000"
 1680      745F6661 
 1680      73743136 
 1680      5F745F64 
 1680      6566696E 
 1681 3e5f 01       		.byte	0x1
 1682 3e60 AD01     		.uleb128 0xad
 1683 3e62 5F5F696E 		.ascii	"__int_fast32_t_defined 1\000"
 1683      745F6661 
 1683      73743332 
 1683      5F745F64 
 1683      6566696E 
 1684 3e7b 01       		.byte	0x1
 1685 3e7c D701     		.uleb128 0xd7
 1686 3e7e 5F5F696E 		.ascii	"__int_fast64_t_defined 1\000"
 1686      745F6661 
 1686      73743634 
 1686      5F745F64 
 1686      6566696E 
 1687 3e97 01       		.byte	0x1
 1688 3e98 8102     		.uleb128 0x101
 1689 3e9a 494E5438 		.ascii	"INT8_MIN -128\000"
 1689      5F4D494E 
 1689      202D3132 
 1689      3800
 1690 3ea8 01       		.byte	0x1
 1691 3ea9 8202     		.uleb128 0x102
 1692 3eab 494E5438 		.ascii	"INT8_MAX 127\000"
 1692      5F4D4158 
 1692      20313237 
 1692      00
ARM GAS  /tmp/cck0uY6y.s 			page 65


 1693 3eb8 01       		.byte	0x1
 1694 3eb9 8302     		.uleb128 0x103
 1695 3ebb 55494E54 		.ascii	"UINT8_MAX 255\000"
 1695      385F4D41 
 1695      58203235 
 1695      3500
 1696 3ec9 01       		.byte	0x1
 1697 3eca 8702     		.uleb128 0x107
 1698 3ecc 494E545F 		.ascii	"INT_LEAST8_MIN -128\000"
 1698      4C454153 
 1698      54385F4D 
 1698      494E202D 
 1698      31323800 
 1699 3ee0 01       		.byte	0x1
 1700 3ee1 8802     		.uleb128 0x108
 1701 3ee3 494E545F 		.ascii	"INT_LEAST8_MAX 127\000"
 1701      4C454153 
 1701      54385F4D 
 1701      41582031 
 1701      323700
 1702 3ef6 01       		.byte	0x1
 1703 3ef7 8902     		.uleb128 0x109
 1704 3ef9 55494E54 		.ascii	"UINT_LEAST8_MAX 255\000"
 1704      5F4C4541 
 1704      5354385F 
 1704      4D415820 
 1704      32353500 
 1705 3f0d 01       		.byte	0x1
 1706 3f0e 8F02     		.uleb128 0x10f
 1707 3f10 494E5431 		.ascii	"INT16_MIN -32768\000"
 1707      365F4D49 
 1707      4E202D33 
 1707      32373638 
 1707      00
 1708 3f21 01       		.byte	0x1
 1709 3f22 9002     		.uleb128 0x110
 1710 3f24 494E5431 		.ascii	"INT16_MAX 32767\000"
 1710      365F4D41 
 1710      58203332 
 1710      37363700 
 1711 3f34 01       		.byte	0x1
 1712 3f35 9102     		.uleb128 0x111
 1713 3f37 55494E54 		.ascii	"UINT16_MAX 65535\000"
 1713      31365F4D 
 1713      41582036 
 1713      35353335 
 1713      00
 1714 3f48 01       		.byte	0x1
 1715 3f49 9502     		.uleb128 0x115
 1716 3f4b 494E545F 		.ascii	"INT_LEAST16_MIN -32768\000"
 1716      4C454153 
 1716      5431365F 
 1716      4D494E20 
 1716      2D333237 
 1717 3f62 01       		.byte	0x1
 1718 3f63 9602     		.uleb128 0x116
 1719 3f65 494E545F 		.ascii	"INT_LEAST16_MAX 32767\000"
ARM GAS  /tmp/cck0uY6y.s 			page 66


 1719      4C454153 
 1719      5431365F 
 1719      4D415820 
 1719      33323736 
 1720 3f7b 01       		.byte	0x1
 1721 3f7c 9702     		.uleb128 0x117
 1722 3f7e 55494E54 		.ascii	"UINT_LEAST16_MAX 65535\000"
 1722      5F4C4541 
 1722      53543136 
 1722      5F4D4158 
 1722      20363535 
 1723 3f95 01       		.byte	0x1
 1724 3f96 9E02     		.uleb128 0x11e
 1725 3f98 494E5433 		.ascii	"INT32_MIN (-2147483647L-1)\000"
 1725      325F4D49 
 1725      4E20282D 
 1725      32313437 
 1725      34383336 
 1726 3fb3 01       		.byte	0x1
 1727 3fb4 9F02     		.uleb128 0x11f
 1728 3fb6 494E5433 		.ascii	"INT32_MAX 2147483647L\000"
 1728      325F4D41 
 1728      58203231 
 1728      34373438 
 1728      33363437 
 1729 3fcc 01       		.byte	0x1
 1730 3fcd A002     		.uleb128 0x120
 1731 3fcf 55494E54 		.ascii	"UINT32_MAX 4294967295UL\000"
 1731      33325F4D 
 1731      41582034 
 1731      32393439 
 1731      36373239 
 1732 3fe7 01       		.byte	0x1
 1733 3fe8 AA02     		.uleb128 0x12a
 1734 3fea 494E545F 		.ascii	"INT_LEAST32_MIN (-2147483647L-1)\000"
 1734      4C454153 
 1734      5433325F 
 1734      4D494E20 
 1734      282D3231 
 1735 400b 01       		.byte	0x1
 1736 400c AB02     		.uleb128 0x12b
 1737 400e 494E545F 		.ascii	"INT_LEAST32_MAX 2147483647L\000"
 1737      4C454153 
 1737      5433325F 
 1737      4D415820 
 1737      32313437 
 1738 402a 01       		.byte	0x1
 1739 402b AC02     		.uleb128 0x12c
 1740 402d 55494E54 		.ascii	"UINT_LEAST32_MAX 4294967295UL\000"
 1740      5F4C4541 
 1740      53543332 
 1740      5F4D4158 
 1740      20343239 
 1741 404b 01       		.byte	0x1
 1742 404c BC02     		.uleb128 0x13c
 1743 404e 494E5436 		.ascii	"INT64_MIN (-9223372036854775807LL-1LL)\000"
 1743      345F4D49 
ARM GAS  /tmp/cck0uY6y.s 			page 67


 1743      4E20282D 
 1743      39323233 
 1743      33373230 
 1744 4075 01       		.byte	0x1
 1745 4076 BD02     		.uleb128 0x13d
 1746 4078 494E5436 		.ascii	"INT64_MAX 9223372036854775807LL\000"
 1746      345F4D41 
 1746      58203932 
 1746      32333337 
 1746      32303336 
 1747 4098 01       		.byte	0x1
 1748 4099 BE02     		.uleb128 0x13e
 1749 409b 55494E54 		.ascii	"UINT64_MAX 18446744073709551615ULL\000"
 1749      36345F4D 
 1749      41582031 
 1749      38343436 
 1749      37343430 
 1750 40be 01       		.byte	0x1
 1751 40bf C802     		.uleb128 0x148
 1752 40c1 494E545F 		.ascii	"INT_LEAST64_MIN (-9223372036854775807LL-1LL)\000"
 1752      4C454153 
 1752      5436345F 
 1752      4D494E20 
 1752      282D3932 
 1753 40ee 01       		.byte	0x1
 1754 40ef C902     		.uleb128 0x149
 1755 40f1 494E545F 		.ascii	"INT_LEAST64_MAX 9223372036854775807LL\000"
 1755      4C454153 
 1755      5436345F 
 1755      4D415820 
 1755      39323233 
 1756 4117 01       		.byte	0x1
 1757 4118 CA02     		.uleb128 0x14a
 1758 411a 55494E54 		.ascii	"UINT_LEAST64_MAX 18446744073709551615ULL\000"
 1758      5F4C4541 
 1758      53543634 
 1758      5F4D4158 
 1758      20313834 
 1759 4143 01       		.byte	0x1
 1760 4144 D002     		.uleb128 0x150
 1761 4146 494E545F 		.ascii	"INT_FAST8_MIN (-__STDINT_EXP(INT_MAX)-1)\000"
 1761      46415354 
 1761      385F4D49 
 1761      4E20282D 
 1761      5F5F5354 
 1762 416f 01       		.byte	0x1
 1763 4170 D102     		.uleb128 0x151
 1764 4172 494E545F 		.ascii	"INT_FAST8_MAX __STDINT_EXP(INT_MAX)\000"
 1764      46415354 
 1764      385F4D41 
 1764      58205F5F 
 1764      53544449 
 1765 4196 01       		.byte	0x1
 1766 4197 D202     		.uleb128 0x152
 1767 4199 55494E54 		.ascii	"UINT_FAST8_MAX (__STDINT_EXP(INT_MAX)*2U+1U)\000"
 1767      5F464153 
 1767      54385F4D 
ARM GAS  /tmp/cck0uY6y.s 			page 68


 1767      41582028 
 1767      5F5F5354 
 1768 41c6 01       		.byte	0x1
 1769 41c7 DC02     		.uleb128 0x15c
 1770 41c9 494E545F 		.ascii	"INT_FAST16_MIN (-__STDINT_EXP(INT_MAX)-1)\000"
 1770      46415354 
 1770      31365F4D 
 1770      494E2028 
 1770      2D5F5F53 
 1771 41f3 01       		.byte	0x1
 1772 41f4 DD02     		.uleb128 0x15d
 1773 41f6 494E545F 		.ascii	"INT_FAST16_MAX __STDINT_EXP(INT_MAX)\000"
 1773      46415354 
 1773      31365F4D 
 1773      4158205F 
 1773      5F535444 
 1774 421b 01       		.byte	0x1
 1775 421c DE02     		.uleb128 0x15e
 1776 421e 55494E54 		.ascii	"UINT_FAST16_MAX (__STDINT_EXP(INT_MAX)*2U+1U)\000"
 1776      5F464153 
 1776      5431365F 
 1776      4D415820 
 1776      285F5F53 
 1777 424c 01       		.byte	0x1
 1778 424d E802     		.uleb128 0x168
 1779 424f 494E545F 		.ascii	"INT_FAST32_MIN (-__STDINT_EXP(INT_MAX)-1)\000"
 1779      46415354 
 1779      33325F4D 
 1779      494E2028 
 1779      2D5F5F53 
 1780 4279 01       		.byte	0x1
 1781 427a E902     		.uleb128 0x169
 1782 427c 494E545F 		.ascii	"INT_FAST32_MAX __STDINT_EXP(INT_MAX)\000"
 1782      46415354 
 1782      33325F4D 
 1782      4158205F 
 1782      5F535444 
 1783 42a1 01       		.byte	0x1
 1784 42a2 EA02     		.uleb128 0x16a
 1785 42a4 55494E54 		.ascii	"UINT_FAST32_MAX (__STDINT_EXP(INT_MAX)*2U+1U)\000"
 1785      5F464153 
 1785      5433325F 
 1785      4D415820 
 1785      285F5F53 
 1786 42d2 01       		.byte	0x1
 1787 42d3 F802     		.uleb128 0x178
 1788 42d5 494E545F 		.ascii	"INT_FAST64_MIN INT_LEAST64_MIN\000"
 1788      46415354 
 1788      36345F4D 
 1788      494E2049 
 1788      4E545F4C 
 1789 42f4 01       		.byte	0x1
 1790 42f5 F902     		.uleb128 0x179
 1791 42f7 494E545F 		.ascii	"INT_FAST64_MAX INT_LEAST64_MAX\000"
 1791      46415354 
 1791      36345F4D 
 1791      41582049 
ARM GAS  /tmp/cck0uY6y.s 			page 69


 1791      4E545F4C 
 1792 4316 01       		.byte	0x1
 1793 4317 FA02     		.uleb128 0x17a
 1794 4319 55494E54 		.ascii	"UINT_FAST64_MAX UINT_LEAST64_MAX\000"
 1794      5F464153 
 1794      5436345F 
 1794      4D415820 
 1794      55494E54 
 1795 433a 01       		.byte	0x1
 1796 433b FF02     		.uleb128 0x17f
 1797 433d 494E544D 		.ascii	"INTMAX_MAX __INTMAX_MAX__\000"
 1797      41585F4D 
 1797      4158205F 
 1797      5F494E54 
 1797      4D41585F 
 1798 4357 01       		.byte	0x1
 1799 4358 8003     		.uleb128 0x180
 1800 435a 494E544D 		.ascii	"INTMAX_MIN (-INTMAX_MAX - 1)\000"
 1800      41585F4D 
 1800      494E2028 
 1800      2D494E54 
 1800      4D41585F 
 1801 4377 01       		.byte	0x1
 1802 4378 8B03     		.uleb128 0x18b
 1803 437a 55494E54 		.ascii	"UINTMAX_MAX UINT64_MAX\000"
 1803      4D41585F 
 1803      4D415820 
 1803      55494E54 
 1803      36345F4D 
 1804 4391 01       		.byte	0x1
 1805 4392 9203     		.uleb128 0x192
 1806 4394 53495A45 		.ascii	"SIZE_MAX (__STDINT_EXP(LONG_MAX) * 2UL + 1)\000"
 1806      5F4D4158 
 1806      20285F5F 
 1806      53544449 
 1806      4E545F45 
 1807 43c0 01       		.byte	0x1
 1808 43c1 9603     		.uleb128 0x196
 1809 43c3 5349475F 		.ascii	"SIG_ATOMIC_MIN (-__STDINT_EXP(INT_MAX) - 1)\000"
 1809      41544F4D 
 1809      49435F4D 
 1809      494E2028 
 1809      2D5F5F53 
 1810 43ef 01       		.byte	0x1
 1811 43f0 9703     		.uleb128 0x197
 1812 43f2 5349475F 		.ascii	"SIG_ATOMIC_MAX __STDINT_EXP(INT_MAX)\000"
 1812      41544F4D 
 1812      49435F4D 
 1812      4158205F 
 1812      5F535444 
 1813 4417 01       		.byte	0x1
 1814 4418 9D03     		.uleb128 0x19d
 1815 441a 50545244 		.ascii	"PTRDIFF_MAX __STDINT_EXP(LONG_MAX)\000"
 1815      4946465F 
 1815      4D415820 
 1815      5F5F5354 
 1815      44494E54 
ARM GAS  /tmp/cck0uY6y.s 			page 70


 1816 443d 01       		.byte	0x1
 1817 443e 9F03     		.uleb128 0x19f
 1818 4440 50545244 		.ascii	"PTRDIFF_MIN (-PTRDIFF_MAX - 1)\000"
 1818      4946465F 
 1818      4D494E20 
 1818      282D5054 
 1818      52444946 
 1819 445f 01       		.byte	0x1
 1820 4460 A203     		.uleb128 0x1a2
 1821 4462 57434841 		.ascii	"WCHAR_MAX __WCHAR_MAX__\000"
 1821      525F4D41 
 1821      58205F5F 
 1821      57434841 
 1821      525F4D41 
 1822 447a 01       		.byte	0x1
 1823 447b AC03     		.uleb128 0x1ac
 1824 447d 57494E54 		.ascii	"WINT_MAX (__STDINT_EXP(INT_MAX) * 2U + 1U)\000"
 1824      5F4D4158 
 1824      20285F5F 
 1824      53544449 
 1824      4E545F45 
 1825 44a8 01       		.byte	0x1
 1826 44a9 B103     		.uleb128 0x1b1
 1827 44ab 57494E54 		.ascii	"WINT_MIN 0U\000"
 1827      5F4D494E 
 1827      20305500 
 1828 44b7 01       		.byte	0x1
 1829 44b8 B503     		.uleb128 0x1b5
 1830 44ba 494E5438 		.ascii	"INT8_C(x) x\000"
 1830      5F432878 
 1830      29207800 
 1831 44c6 01       		.byte	0x1
 1832 44c7 B703     		.uleb128 0x1b7
 1833 44c9 55494E54 		.ascii	"UINT8_C(x) x\000"
 1833      385F4328 
 1833      78292078 
 1833      00
 1834 44d6 01       		.byte	0x1
 1835 44d7 BC03     		.uleb128 0x1bc
 1836 44d9 494E5431 		.ascii	"INT16_C(x) x\000"
 1836      365F4328 
 1836      78292078 
 1836      00
 1837 44e6 01       		.byte	0x1
 1838 44e7 BE03     		.uleb128 0x1be
 1839 44e9 55494E54 		.ascii	"UINT16_C(x) x\000"
 1839      31365F43 
 1839      28782920 
 1839      7800
 1840 44f7 01       		.byte	0x1
 1841 44f8 C403     		.uleb128 0x1c4
 1842 44fa 494E5433 		.ascii	"INT32_C(x) x ##L\000"
 1842      325F4328 
 1842      78292078 
 1842      2023234C 
 1842      00
 1843 450b 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 71


 1844 450c C503     		.uleb128 0x1c5
 1845 450e 55494E54 		.ascii	"UINT32_C(x) x ##UL\000"
 1845      33325F43 
 1845      28782920 
 1845      78202323 
 1845      554C00
 1846 4521 01       		.byte	0x1
 1847 4522 D003     		.uleb128 0x1d0
 1848 4524 494E5436 		.ascii	"INT64_C(x) x ##LL\000"
 1848      345F4328 
 1848      78292078 
 1848      2023234C 
 1848      4C00
 1849 4536 01       		.byte	0x1
 1850 4537 D103     		.uleb128 0x1d1
 1851 4539 55494E54 		.ascii	"UINT64_C(x) x ##ULL\000"
 1851      36345F43 
 1851      28782920 
 1851      78202323 
 1851      554C4C00 
 1852 454d 01       		.byte	0x1
 1853 454e DA03     		.uleb128 0x1da
 1854 4550 494E544D 		.ascii	"INTMAX_C(x) x ##LL\000"
 1854      41585F43 
 1854      28782920 
 1854      78202323 
 1854      4C4C00
 1855 4563 01       		.byte	0x1
 1856 4564 DB03     		.uleb128 0x1db
 1857 4566 55494E54 		.ascii	"UINTMAX_C(x) x ##ULL\000"
 1857      4D41585F 
 1857      43287829 
 1857      20782023 
 1857      23554C4C 
 1858 457b 04       		.byte	0x4
 1859 457c 01       		.byte	0x1
 1860 457d 71       		.uleb128 0x71
 1861 457e 5F5F4920 		.ascii	"__I volatile const\000"
 1861      766F6C61 
 1861      74696C65 
 1861      20636F6E 
 1861      737400
 1862 4591 01       		.byte	0x1
 1863 4592 73       		.uleb128 0x73
 1864 4593 5F5F4F20 		.ascii	"__O volatile\000"
 1864      766F6C61 
 1864      74696C65 
 1864      00
 1865 45a0 01       		.byte	0x1
 1866 45a1 74       		.uleb128 0x74
 1867 45a2 5F5F494F 		.ascii	"__IO volatile\000"
 1867      20766F6C 
 1867      6174696C 
 1867      6500
 1868 45b0 01       		.byte	0x1
 1869 45b1 B301     		.uleb128 0xb3
 1870 45b3 5343425F 		.ascii	"SCB_CPUID_IMPLEMENTER_Pos 24\000"
ARM GAS  /tmp/cck0uY6y.s 			page 72


 1870      43505549 
 1870      445F494D 
 1870      504C454D 
 1870      454E5445 
 1871 45d0 01       		.byte	0x1
 1872 45d1 B401     		.uleb128 0xb4
 1873 45d3 5343425F 		.ascii	"SCB_CPUID_IMPLEMENTER_Msk (0xFFul << SCB_CPUID_IMPL"
 1873      43505549 
 1873      445F494D 
 1873      504C454D 
 1873      454E5445 
 1874 4606 454D454E 		.ascii	"EMENTER_Pos)\000"
 1874      5445525F 
 1874      506F7329 
 1874      00
 1875 4613 01       		.byte	0x1
 1876 4614 B601     		.uleb128 0xb6
 1877 4616 5343425F 		.ascii	"SCB_CPUID_VARIANT_Pos 20\000"
 1877      43505549 
 1877      445F5641 
 1877      5249414E 
 1877      545F506F 
 1878 462f 01       		.byte	0x1
 1879 4630 B701     		.uleb128 0xb7
 1880 4632 5343425F 		.ascii	"SCB_CPUID_VARIANT_Msk (0xFul << SCB_CPUID_VARIANT_P"
 1880      43505549 
 1880      445F5641 
 1880      5249414E 
 1880      545F4D73 
 1881 4665 6F732900 		.ascii	"os)\000"
 1882 4669 01       		.byte	0x1
 1883 466a B901     		.uleb128 0xb9
 1884 466c 5343425F 		.ascii	"SCB_CPUID_PARTNO_Pos 4\000"
 1884      43505549 
 1884      445F5041 
 1884      52544E4F 
 1884      5F506F73 
 1885 4683 01       		.byte	0x1
 1886 4684 BA01     		.uleb128 0xba
 1887 4686 5343425F 		.ascii	"SCB_CPUID_PARTNO_Msk (0xFFFul << SCB_CPUID_PARTNO_P"
 1887      43505549 
 1887      445F5041 
 1887      52544E4F 
 1887      5F4D736B 
 1888 46b9 6F732900 		.ascii	"os)\000"
 1889 46bd 01       		.byte	0x1
 1890 46be BC01     		.uleb128 0xbc
 1891 46c0 5343425F 		.ascii	"SCB_CPUID_REVISION_Pos 0\000"
 1891      43505549 
 1891      445F5245 
 1891      56495349 
 1891      4F4E5F50 
 1892 46d9 01       		.byte	0x1
 1893 46da BD01     		.uleb128 0xbd
 1894 46dc 5343425F 		.ascii	"SCB_CPUID_REVISION_Msk (0xFul << SCB_CPUID_REVISION"
 1894      43505549 
 1894      445F5245 
ARM GAS  /tmp/cck0uY6y.s 			page 73


 1894      56495349 
 1894      4F4E5F4D 
 1895 470f 5F506F73 		.ascii	"_Pos)\000"
 1895      2900
 1896 4715 01       		.byte	0x1
 1897 4716 C001     		.uleb128 0xc0
 1898 4718 5343425F 		.ascii	"SCB_ICSR_NMIPENDSET_Pos 31\000"
 1898      49435352 
 1898      5F4E4D49 
 1898      50454E44 
 1898      5345545F 
 1899 4733 01       		.byte	0x1
 1900 4734 C101     		.uleb128 0xc1
 1901 4736 5343425F 		.ascii	"SCB_ICSR_NMIPENDSET_Msk (1ul << SCB_ICSR_NMIPENDSET"
 1901      49435352 
 1901      5F4E4D49 
 1901      50454E44 
 1901      5345545F 
 1902 4769 5F506F73 		.ascii	"_Pos)\000"
 1902      2900
 1903 476f 01       		.byte	0x1
 1904 4770 C301     		.uleb128 0xc3
 1905 4772 5343425F 		.ascii	"SCB_ICSR_PENDSVSET_Pos 28\000"
 1905      49435352 
 1905      5F50454E 
 1905      44535653 
 1905      45545F50 
 1906 478c 01       		.byte	0x1
 1907 478d C401     		.uleb128 0xc4
 1908 478f 5343425F 		.ascii	"SCB_ICSR_PENDSVSET_Msk (1ul << SCB_ICSR_PENDSVSET_P"
 1908      49435352 
 1908      5F50454E 
 1908      44535653 
 1908      45545F4D 
 1909 47c2 6F732900 		.ascii	"os)\000"
 1910 47c6 01       		.byte	0x1
 1911 47c7 C601     		.uleb128 0xc6
 1912 47c9 5343425F 		.ascii	"SCB_ICSR_PENDSVCLR_Pos 27\000"
 1912      49435352 
 1912      5F50454E 
 1912      44535643 
 1912      4C525F50 
 1913 47e3 01       		.byte	0x1
 1914 47e4 C701     		.uleb128 0xc7
 1915 47e6 5343425F 		.ascii	"SCB_ICSR_PENDSVCLR_Msk (1ul << SCB_ICSR_PENDSVCLR_P"
 1915      49435352 
 1915      5F50454E 
 1915      44535643 
 1915      4C525F4D 
 1916 4819 6F732900 		.ascii	"os)\000"
 1917 481d 01       		.byte	0x1
 1918 481e C901     		.uleb128 0xc9
 1919 4820 5343425F 		.ascii	"SCB_ICSR_PENDSTSET_Pos 26\000"
 1919      49435352 
 1919      5F50454E 
 1919      44535453 
 1919      45545F50 
ARM GAS  /tmp/cck0uY6y.s 			page 74


 1920 483a 01       		.byte	0x1
 1921 483b CA01     		.uleb128 0xca
 1922 483d 5343425F 		.ascii	"SCB_ICSR_PENDSTSET_Msk (1ul << SCB_ICSR_PENDSTSET_P"
 1922      49435352 
 1922      5F50454E 
 1922      44535453 
 1922      45545F4D 
 1923 4870 6F732900 		.ascii	"os)\000"
 1924 4874 01       		.byte	0x1
 1925 4875 CC01     		.uleb128 0xcc
 1926 4877 5343425F 		.ascii	"SCB_ICSR_PENDSTCLR_Pos 25\000"
 1926      49435352 
 1926      5F50454E 
 1926      44535443 
 1926      4C525F50 
 1927 4891 01       		.byte	0x1
 1928 4892 CD01     		.uleb128 0xcd
 1929 4894 5343425F 		.ascii	"SCB_ICSR_PENDSTCLR_Msk (1ul << SCB_ICSR_PENDSTCLR_P"
 1929      49435352 
 1929      5F50454E 
 1929      44535443 
 1929      4C525F4D 
 1930 48c7 6F732900 		.ascii	"os)\000"
 1931 48cb 01       		.byte	0x1
 1932 48cc CF01     		.uleb128 0xcf
 1933 48ce 5343425F 		.ascii	"SCB_ICSR_ISRPREEMPT_Pos 23\000"
 1933      49435352 
 1933      5F495352 
 1933      50524545 
 1933      4D50545F 
 1934 48e9 01       		.byte	0x1
 1935 48ea D001     		.uleb128 0xd0
 1936 48ec 5343425F 		.ascii	"SCB_ICSR_ISRPREEMPT_Msk (1ul << SCB_ICSR_ISRPREEMPT"
 1936      49435352 
 1936      5F495352 
 1936      50524545 
 1936      4D50545F 
 1937 491f 5F506F73 		.ascii	"_Pos)\000"
 1937      2900
 1938 4925 01       		.byte	0x1
 1939 4926 D201     		.uleb128 0xd2
 1940 4928 5343425F 		.ascii	"SCB_ICSR_ISRPENDING_Pos 22\000"
 1940      49435352 
 1940      5F495352 
 1940      50454E44 
 1940      494E475F 
 1941 4943 01       		.byte	0x1
 1942 4944 D301     		.uleb128 0xd3
 1943 4946 5343425F 		.ascii	"SCB_ICSR_ISRPENDING_Msk (1ul << SCB_ICSR_ISRPENDING"
 1943      49435352 
 1943      5F495352 
 1943      50454E44 
 1943      494E475F 
 1944 4979 5F506F73 		.ascii	"_Pos)\000"
 1944      2900
 1945 497f 01       		.byte	0x1
 1946 4980 D501     		.uleb128 0xd5
ARM GAS  /tmp/cck0uY6y.s 			page 75


 1947 4982 5343425F 		.ascii	"SCB_ICSR_VECTPENDING_Pos 12\000"
 1947      49435352 
 1947      5F564543 
 1947      5450454E 
 1947      44494E47 
 1948 499e 01       		.byte	0x1
 1949 499f D601     		.uleb128 0xd6
 1950 49a1 5343425F 		.ascii	"SCB_ICSR_VECTPENDING_Msk (0x1FFul << SCB_ICSR_VECTP"
 1950      49435352 
 1950      5F564543 
 1950      5450454E 
 1950      44494E47 
 1951 49d4 454E4449 		.ascii	"ENDING_Pos)\000"
 1951      4E475F50 
 1951      6F732900 
 1952 49e0 01       		.byte	0x1
 1953 49e1 D801     		.uleb128 0xd8
 1954 49e3 5343425F 		.ascii	"SCB_ICSR_RETTOBASE_Pos 11\000"
 1954      49435352 
 1954      5F524554 
 1954      544F4241 
 1954      53455F50 
 1955 49fd 01       		.byte	0x1
 1956 49fe D901     		.uleb128 0xd9
 1957 4a00 5343425F 		.ascii	"SCB_ICSR_RETTOBASE_Msk (1ul << SCB_ICSR_RETTOBASE_P"
 1957      49435352 
 1957      5F524554 
 1957      544F4241 
 1957      53455F4D 
 1958 4a33 6F732900 		.ascii	"os)\000"
 1959 4a37 01       		.byte	0x1
 1960 4a38 DB01     		.uleb128 0xdb
 1961 4a3a 5343425F 		.ascii	"SCB_ICSR_VECTACTIVE_Pos 0\000"
 1961      49435352 
 1961      5F564543 
 1961      54414354 
 1961      4956455F 
 1962 4a54 01       		.byte	0x1
 1963 4a55 DC01     		.uleb128 0xdc
 1964 4a57 5343425F 		.ascii	"SCB_ICSR_VECTACTIVE_Msk (0x1FFul << SCB_ICSR_VECTAC"
 1964      49435352 
 1964      5F564543 
 1964      54414354 
 1964      4956455F 
 1965 4a8a 54495645 		.ascii	"TIVE_Pos)\000"
 1965      5F506F73 
 1965      2900
 1966 4a94 01       		.byte	0x1
 1967 4a95 DF01     		.uleb128 0xdf
 1968 4a97 5343425F 		.ascii	"SCB_VTOR_TBLBASE_Pos 29\000"
 1968      56544F52 
 1968      5F54424C 
 1968      42415345 
 1968      5F506F73 
 1969 4aaf 01       		.byte	0x1
 1970 4ab0 E001     		.uleb128 0xe0
 1971 4ab2 5343425F 		.ascii	"SCB_VTOR_TBLBASE_Msk (0x1FFul << SCB_VTOR_TBLBASE_P"
ARM GAS  /tmp/cck0uY6y.s 			page 76


 1971      56544F52 
 1971      5F54424C 
 1971      42415345 
 1971      5F4D736B 
 1972 4ae5 6F732900 		.ascii	"os)\000"
 1973 4ae9 01       		.byte	0x1
 1974 4aea E201     		.uleb128 0xe2
 1975 4aec 5343425F 		.ascii	"SCB_VTOR_TBLOFF_Pos 7\000"
 1975      56544F52 
 1975      5F54424C 
 1975      4F46465F 
 1975      506F7320 
 1976 4b02 01       		.byte	0x1
 1977 4b03 E301     		.uleb128 0xe3
 1978 4b05 5343425F 		.ascii	"SCB_VTOR_TBLOFF_Msk (0x3FFFFFul << SCB_VTOR_TBLOFF_"
 1978      56544F52 
 1978      5F54424C 
 1978      4F46465F 
 1978      4D736B20 
 1979 4b38 506F7329 		.ascii	"Pos)\000"
 1979      00
 1980 4b3d 01       		.byte	0x1
 1981 4b3e E601     		.uleb128 0xe6
 1982 4b40 5343425F 		.ascii	"SCB_AIRCR_VECTKEY_Pos 16\000"
 1982      41495243 
 1982      525F5645 
 1982      43544B45 
 1982      595F506F 
 1983 4b59 01       		.byte	0x1
 1984 4b5a E701     		.uleb128 0xe7
 1985 4b5c 5343425F 		.ascii	"SCB_AIRCR_VECTKEY_Msk (0xFFFFul << SCB_AIRCR_VECTKE"
 1985      41495243 
 1985      525F5645 
 1985      43544B45 
 1985      595F4D73 
 1986 4b8f 595F506F 		.ascii	"Y_Pos)\000"
 1986      732900
 1987 4b96 01       		.byte	0x1
 1988 4b97 E901     		.uleb128 0xe9
 1989 4b99 5343425F 		.ascii	"SCB_AIRCR_VECTKEYSTAT_Pos 16\000"
 1989      41495243 
 1989      525F5645 
 1989      43544B45 
 1989      59535441 
 1990 4bb6 01       		.byte	0x1
 1991 4bb7 EA01     		.uleb128 0xea
 1992 4bb9 5343425F 		.ascii	"SCB_AIRCR_VECTKEYSTAT_Msk (0xFFFFul << SCB_AIRCR_VE"
 1992      41495243 
 1992      525F5645 
 1992      43544B45 
 1992      59535441 
 1993 4bec 43544B45 		.ascii	"CTKEYSTAT_Pos)\000"
 1993      59535441 
 1993      545F506F 
 1993      732900
 1994 4bfb 01       		.byte	0x1
 1995 4bfc EC01     		.uleb128 0xec
ARM GAS  /tmp/cck0uY6y.s 			page 77


 1996 4bfe 5343425F 		.ascii	"SCB_AIRCR_ENDIANESS_Pos 15\000"
 1996      41495243 
 1996      525F454E 
 1996      4449414E 
 1996      4553535F 
 1997 4c19 01       		.byte	0x1
 1998 4c1a ED01     		.uleb128 0xed
 1999 4c1c 5343425F 		.ascii	"SCB_AIRCR_ENDIANESS_Msk (1ul << SCB_AIRCR_ENDIANESS"
 1999      41495243 
 1999      525F454E 
 1999      4449414E 
 1999      4553535F 
 2000 4c4f 5F506F73 		.ascii	"_Pos)\000"
 2000      2900
 2001 4c55 01       		.byte	0x1
 2002 4c56 EF01     		.uleb128 0xef
 2003 4c58 5343425F 		.ascii	"SCB_AIRCR_PRIGROUP_Pos 8\000"
 2003      41495243 
 2003      525F5052 
 2003      4947524F 
 2003      55505F50 
 2004 4c71 01       		.byte	0x1
 2005 4c72 F001     		.uleb128 0xf0
 2006 4c74 5343425F 		.ascii	"SCB_AIRCR_PRIGROUP_Msk (7ul << SCB_AIRCR_PRIGROUP_P"
 2006      41495243 
 2006      525F5052 
 2006      4947524F 
 2006      55505F4D 
 2007 4ca7 6F732900 		.ascii	"os)\000"
 2008 4cab 01       		.byte	0x1
 2009 4cac F201     		.uleb128 0xf2
 2010 4cae 5343425F 		.ascii	"SCB_AIRCR_SYSRESETREQ_Pos 2\000"
 2010      41495243 
 2010      525F5359 
 2010      53524553 
 2010      45545245 
 2011 4cca 01       		.byte	0x1
 2012 4ccb F301     		.uleb128 0xf3
 2013 4ccd 5343425F 		.ascii	"SCB_AIRCR_SYSRESETREQ_Msk (1ul << SCB_AIRCR_SYSRESE"
 2013      41495243 
 2013      525F5359 
 2013      53524553 
 2013      45545245 
 2014 4d00 54524551 		.ascii	"TREQ_Pos)\000"
 2014      5F506F73 
 2014      2900
 2015 4d0a 01       		.byte	0x1
 2016 4d0b F501     		.uleb128 0xf5
 2017 4d0d 5343425F 		.ascii	"SCB_AIRCR_VECTCLRACTIVE_Pos 1\000"
 2017      41495243 
 2017      525F5645 
 2017      4354434C 
 2017      52414354 
 2018 4d2b 01       		.byte	0x1
 2019 4d2c F601     		.uleb128 0xf6
 2020 4d2e 5343425F 		.ascii	"SCB_AIRCR_VECTCLRACTIVE_Msk (1ul << SCB_AIRCR_VECTC"
 2020      41495243 
ARM GAS  /tmp/cck0uY6y.s 			page 78


 2020      525F5645 
 2020      4354434C 
 2020      52414354 
 2021 4d61 4C524143 		.ascii	"LRACTIVE_Pos)\000"
 2021      54495645 
 2021      5F506F73 
 2021      2900
 2022 4d6f 01       		.byte	0x1
 2023 4d70 F801     		.uleb128 0xf8
 2024 4d72 5343425F 		.ascii	"SCB_AIRCR_VECTRESET_Pos 0\000"
 2024      41495243 
 2024      525F5645 
 2024      43545245 
 2024      5345545F 
 2025 4d8c 01       		.byte	0x1
 2026 4d8d F901     		.uleb128 0xf9
 2027 4d8f 5343425F 		.ascii	"SCB_AIRCR_VECTRESET_Msk (1ul << SCB_AIRCR_VECTRESET"
 2027      41495243 
 2027      525F5645 
 2027      43545245 
 2027      5345545F 
 2028 4dc2 5F506F73 		.ascii	"_Pos)\000"
 2028      2900
 2029 4dc8 01       		.byte	0x1
 2030 4dc9 FC01     		.uleb128 0xfc
 2031 4dcb 5343425F 		.ascii	"SCB_SCR_SEVONPEND_Pos 4\000"
 2031      5343525F 
 2031      5345564F 
 2031      4E50454E 
 2031      445F506F 
 2032 4de3 01       		.byte	0x1
 2033 4de4 FD01     		.uleb128 0xfd
 2034 4de6 5343425F 		.ascii	"SCB_SCR_SEVONPEND_Msk (1ul << SCB_SCR_SEVONPEND_Pos"
 2034      5343525F 
 2034      5345564F 
 2034      4E50454E 
 2034      445F4D73 
 2035 4e19 2900     		.ascii	")\000"
 2036 4e1b 01       		.byte	0x1
 2037 4e1c FF01     		.uleb128 0xff
 2038 4e1e 5343425F 		.ascii	"SCB_SCR_SLEEPDEEP_Pos 2\000"
 2038      5343525F 
 2038      534C4545 
 2038      50444545 
 2038      505F506F 
 2039 4e36 01       		.byte	0x1
 2040 4e37 8002     		.uleb128 0x100
 2041 4e39 5343425F 		.ascii	"SCB_SCR_SLEEPDEEP_Msk (1ul << SCB_SCR_SLEEPDEEP_Pos"
 2041      5343525F 
 2041      534C4545 
 2041      50444545 
 2041      505F4D73 
 2042 4e6c 2900     		.ascii	")\000"
 2043 4e6e 01       		.byte	0x1
 2044 4e6f 8202     		.uleb128 0x102
 2045 4e71 5343425F 		.ascii	"SCB_SCR_SLEEPONEXIT_Pos 1\000"
 2045      5343525F 
ARM GAS  /tmp/cck0uY6y.s 			page 79


 2045      534C4545 
 2045      504F4E45 
 2045      5849545F 
 2046 4e8b 01       		.byte	0x1
 2047 4e8c 8302     		.uleb128 0x103
 2048 4e8e 5343425F 		.ascii	"SCB_SCR_SLEEPONEXIT_Msk (1ul << SCB_SCR_SLEEPONEXIT"
 2048      5343525F 
 2048      534C4545 
 2048      504F4E45 
 2048      5849545F 
 2049 4ec1 5F506F73 		.ascii	"_Pos)\000"
 2049      2900
 2050 4ec7 01       		.byte	0x1
 2051 4ec8 8602     		.uleb128 0x106
 2052 4eca 5343425F 		.ascii	"SCB_CCR_STKALIGN_Pos 9\000"
 2052      4343525F 
 2052      53544B41 
 2052      4C49474E 
 2052      5F506F73 
 2053 4ee1 01       		.byte	0x1
 2054 4ee2 8702     		.uleb128 0x107
 2055 4ee4 5343425F 		.ascii	"SCB_CCR_STKALIGN_Msk (1ul << SCB_CCR_STKALIGN_Pos)\000"
 2055      4343525F 
 2055      53544B41 
 2055      4C49474E 
 2055      5F4D736B 
 2056 4f17 01       		.byte	0x1
 2057 4f18 8902     		.uleb128 0x109
 2058 4f1a 5343425F 		.ascii	"SCB_CCR_BFHFNMIGN_Pos 8\000"
 2058      4343525F 
 2058      42464846 
 2058      4E4D4947 
 2058      4E5F506F 
 2059 4f32 01       		.byte	0x1
 2060 4f33 8A02     		.uleb128 0x10a
 2061 4f35 5343425F 		.ascii	"SCB_CCR_BFHFNMIGN_Msk (1ul << SCB_CCR_BFHFNMIGN_Pos"
 2061      4343525F 
 2061      42464846 
 2061      4E4D4947 
 2061      4E5F4D73 
 2062 4f68 2900     		.ascii	")\000"
 2063 4f6a 01       		.byte	0x1
 2064 4f6b 8C02     		.uleb128 0x10c
 2065 4f6d 5343425F 		.ascii	"SCB_CCR_DIV_0_TRP_Pos 4\000"
 2065      4343525F 
 2065      4449565F 
 2065      305F5452 
 2065      505F506F 
 2066 4f85 01       		.byte	0x1
 2067 4f86 8D02     		.uleb128 0x10d
 2068 4f88 5343425F 		.ascii	"SCB_CCR_DIV_0_TRP_Msk (1ul << SCB_CCR_DIV_0_TRP_Pos"
 2068      4343525F 
 2068      4449565F 
 2068      305F5452 
 2068      505F4D73 
 2069 4fbb 2900     		.ascii	")\000"
 2070 4fbd 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 80


 2071 4fbe 8F02     		.uleb128 0x10f
 2072 4fc0 5343425F 		.ascii	"SCB_CCR_UNALIGN_TRP_Pos 3\000"
 2072      4343525F 
 2072      554E414C 
 2072      49474E5F 
 2072      5452505F 
 2073 4fda 01       		.byte	0x1
 2074 4fdb 9002     		.uleb128 0x110
 2075 4fdd 5343425F 		.ascii	"SCB_CCR_UNALIGN_TRP_Msk (1ul << SCB_CCR_UNALIGN_TRP"
 2075      4343525F 
 2075      554E414C 
 2075      49474E5F 
 2075      5452505F 
 2076 5010 5F506F73 		.ascii	"_Pos)\000"
 2076      2900
 2077 5016 01       		.byte	0x1
 2078 5017 9202     		.uleb128 0x112
 2079 5019 5343425F 		.ascii	"SCB_CCR_USERSETMPEND_Pos 1\000"
 2079      4343525F 
 2079      55534552 
 2079      5345544D 
 2079      50454E44 
 2080 5034 01       		.byte	0x1
 2081 5035 9302     		.uleb128 0x113
 2082 5037 5343425F 		.ascii	"SCB_CCR_USERSETMPEND_Msk (1ul << SCB_CCR_USERSETMPE"
 2082      4343525F 
 2082      55534552 
 2082      5345544D 
 2082      50454E44 
 2083 506a 4E445F50 		.ascii	"ND_Pos)\000"
 2083      6F732900 
 2084 5072 01       		.byte	0x1
 2085 5073 9502     		.uleb128 0x115
 2086 5075 5343425F 		.ascii	"SCB_CCR_NONBASETHRDENA_Pos 0\000"
 2086      4343525F 
 2086      4E4F4E42 
 2086      41534554 
 2086      48524445 
 2087 5092 01       		.byte	0x1
 2088 5093 9602     		.uleb128 0x116
 2089 5095 5343425F 		.ascii	"SCB_CCR_NONBASETHRDENA_Msk (1ul << SCB_CCR_NONBASET"
 2089      4343525F 
 2089      4E4F4E42 
 2089      41534554 
 2089      48524445 
 2090 50c8 48524445 		.ascii	"HRDENA_Pos)\000"
 2090      4E415F50 
 2090      6F732900 
 2091 50d4 01       		.byte	0x1
 2092 50d5 9902     		.uleb128 0x119
 2093 50d7 5343425F 		.ascii	"SCB_SHCSR_USGFAULTENA_Pos 18\000"
 2093      53484353 
 2093      525F5553 
 2093      47464155 
 2093      4C54454E 
 2094 50f4 01       		.byte	0x1
 2095 50f5 9A02     		.uleb128 0x11a
ARM GAS  /tmp/cck0uY6y.s 			page 81


 2096 50f7 5343425F 		.ascii	"SCB_SHCSR_USGFAULTENA_Msk (1ul << SCB_SHCSR_USGFAUL"
 2096      53484353 
 2096      525F5553 
 2096      47464155 
 2096      4C54454E 
 2097 512a 54454E41 		.ascii	"TENA_Pos)\000"
 2097      5F506F73 
 2097      2900
 2098 5134 01       		.byte	0x1
 2099 5135 9C02     		.uleb128 0x11c
 2100 5137 5343425F 		.ascii	"SCB_SHCSR_BUSFAULTENA_Pos 17\000"
 2100      53484353 
 2100      525F4255 
 2100      53464155 
 2100      4C54454E 
 2101 5154 01       		.byte	0x1
 2102 5155 9D02     		.uleb128 0x11d
 2103 5157 5343425F 		.ascii	"SCB_SHCSR_BUSFAULTENA_Msk (1ul << SCB_SHCSR_BUSFAUL"
 2103      53484353 
 2103      525F4255 
 2103      53464155 
 2103      4C54454E 
 2104 518a 54454E41 		.ascii	"TENA_Pos)\000"
 2104      5F506F73 
 2104      2900
 2105 5194 01       		.byte	0x1
 2106 5195 9F02     		.uleb128 0x11f
 2107 5197 5343425F 		.ascii	"SCB_SHCSR_MEMFAULTENA_Pos 16\000"
 2107      53484353 
 2107      525F4D45 
 2107      4D464155 
 2107      4C54454E 
 2108 51b4 01       		.byte	0x1
 2109 51b5 A002     		.uleb128 0x120
 2110 51b7 5343425F 		.ascii	"SCB_SHCSR_MEMFAULTENA_Msk (1ul << SCB_SHCSR_MEMFAUL"
 2110      53484353 
 2110      525F4D45 
 2110      4D464155 
 2110      4C54454E 
 2111 51ea 54454E41 		.ascii	"TENA_Pos)\000"
 2111      5F506F73 
 2111      2900
 2112 51f4 01       		.byte	0x1
 2113 51f5 A202     		.uleb128 0x122
 2114 51f7 5343425F 		.ascii	"SCB_SHCSR_SVCALLPENDED_Pos 15\000"
 2114      53484353 
 2114      525F5356 
 2114      43414C4C 
 2114      50454E44 
 2115 5215 01       		.byte	0x1
 2116 5216 A302     		.uleb128 0x123
 2117 5218 5343425F 		.ascii	"SCB_SHCSR_SVCALLPENDED_Msk (1ul << SCB_SHCSR_SVCALL"
 2117      53484353 
 2117      525F5356 
 2117      43414C4C 
 2117      50454E44 
 2118 524b 50454E44 		.ascii	"PENDED_Pos)\000"
ARM GAS  /tmp/cck0uY6y.s 			page 82


 2118      45445F50 
 2118      6F732900 
 2119 5257 01       		.byte	0x1
 2120 5258 A502     		.uleb128 0x125
 2121 525a 5343425F 		.ascii	"SCB_SHCSR_BUSFAULTPENDED_Pos 14\000"
 2121      53484353 
 2121      525F4255 
 2121      53464155 
 2121      4C545045 
 2122 527a 01       		.byte	0x1
 2123 527b A602     		.uleb128 0x126
 2124 527d 5343425F 		.ascii	"SCB_SHCSR_BUSFAULTPENDED_Msk (1ul << SCB_SHCSR_BUSF"
 2124      53484353 
 2124      525F4255 
 2124      53464155 
 2124      4C545045 
 2125 52b0 41554C54 		.ascii	"AULTPENDED_Pos)\000"
 2125      50454E44 
 2125      45445F50 
 2125      6F732900 
 2126 52c0 01       		.byte	0x1
 2127 52c1 A802     		.uleb128 0x128
 2128 52c3 5343425F 		.ascii	"SCB_SHCSR_MEMFAULTPENDED_Pos 13\000"
 2128      53484353 
 2128      525F4D45 
 2128      4D464155 
 2128      4C545045 
 2129 52e3 01       		.byte	0x1
 2130 52e4 A902     		.uleb128 0x129
 2131 52e6 5343425F 		.ascii	"SCB_SHCSR_MEMFAULTPENDED_Msk (1ul << SCB_SHCSR_MEMF"
 2131      53484353 
 2131      525F4D45 
 2131      4D464155 
 2131      4C545045 
 2132 5319 41554C54 		.ascii	"AULTPENDED_Pos)\000"
 2132      50454E44 
 2132      45445F50 
 2132      6F732900 
 2133 5329 01       		.byte	0x1
 2134 532a AB02     		.uleb128 0x12b
 2135 532c 5343425F 		.ascii	"SCB_SHCSR_USGFAULTPENDED_Pos 12\000"
 2135      53484353 
 2135      525F5553 
 2135      47464155 
 2135      4C545045 
 2136 534c 01       		.byte	0x1
 2137 534d AC02     		.uleb128 0x12c
 2138 534f 5343425F 		.ascii	"SCB_SHCSR_USGFAULTPENDED_Msk (1ul << SCB_SHCSR_USGF"
 2138      53484353 
 2138      525F5553 
 2138      47464155 
 2138      4C545045 
 2139 5382 41554C54 		.ascii	"AULTPENDED_Pos)\000"
 2139      50454E44 
 2139      45445F50 
 2139      6F732900 
 2140 5392 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 83


 2141 5393 AE02     		.uleb128 0x12e
 2142 5395 5343425F 		.ascii	"SCB_SHCSR_SYSTICKACT_Pos 11\000"
 2142      53484353 
 2142      525F5359 
 2142      53544943 
 2142      4B414354 
 2143 53b1 01       		.byte	0x1
 2144 53b2 AF02     		.uleb128 0x12f
 2145 53b4 5343425F 		.ascii	"SCB_SHCSR_SYSTICKACT_Msk (1ul << SCB_SHCSR_SYSTICKA"
 2145      53484353 
 2145      525F5359 
 2145      53544943 
 2145      4B414354 
 2146 53e7 43545F50 		.ascii	"CT_Pos)\000"
 2146      6F732900 
 2147 53ef 01       		.byte	0x1
 2148 53f0 B102     		.uleb128 0x131
 2149 53f2 5343425F 		.ascii	"SCB_SHCSR_PENDSVACT_Pos 10\000"
 2149      53484353 
 2149      525F5045 
 2149      4E445356 
 2149      4143545F 
 2150 540d 01       		.byte	0x1
 2151 540e B202     		.uleb128 0x132
 2152 5410 5343425F 		.ascii	"SCB_SHCSR_PENDSVACT_Msk (1ul << SCB_SHCSR_PENDSVACT"
 2152      53484353 
 2152      525F5045 
 2152      4E445356 
 2152      4143545F 
 2153 5443 5F506F73 		.ascii	"_Pos)\000"
 2153      2900
 2154 5449 01       		.byte	0x1
 2155 544a B402     		.uleb128 0x134
 2156 544c 5343425F 		.ascii	"SCB_SHCSR_MONITORACT_Pos 8\000"
 2156      53484353 
 2156      525F4D4F 
 2156      4E49544F 
 2156      52414354 
 2157 5467 01       		.byte	0x1
 2158 5468 B502     		.uleb128 0x135
 2159 546a 5343425F 		.ascii	"SCB_SHCSR_MONITORACT_Msk (1ul << SCB_SHCSR_MONITORA"
 2159      53484353 
 2159      525F4D4F 
 2159      4E49544F 
 2159      52414354 
 2160 549d 43545F50 		.ascii	"CT_Pos)\000"
 2160      6F732900 
 2161 54a5 01       		.byte	0x1
 2162 54a6 B702     		.uleb128 0x137
 2163 54a8 5343425F 		.ascii	"SCB_SHCSR_SVCALLACT_Pos 7\000"
 2163      53484353 
 2163      525F5356 
 2163      43414C4C 
 2163      4143545F 
 2164 54c2 01       		.byte	0x1
 2165 54c3 B802     		.uleb128 0x138
 2166 54c5 5343425F 		.ascii	"SCB_SHCSR_SVCALLACT_Msk (1ul << SCB_SHCSR_SVCALLACT"
ARM GAS  /tmp/cck0uY6y.s 			page 84


 2166      53484353 
 2166      525F5356 
 2166      43414C4C 
 2166      4143545F 
 2167 54f8 5F506F73 		.ascii	"_Pos)\000"
 2167      2900
 2168 54fe 01       		.byte	0x1
 2169 54ff BA02     		.uleb128 0x13a
 2170 5501 5343425F 		.ascii	"SCB_SHCSR_USGFAULTACT_Pos 3\000"
 2170      53484353 
 2170      525F5553 
 2170      47464155 
 2170      4C544143 
 2171 551d 01       		.byte	0x1
 2172 551e BB02     		.uleb128 0x13b
 2173 5520 5343425F 		.ascii	"SCB_SHCSR_USGFAULTACT_Msk (1ul << SCB_SHCSR_USGFAUL"
 2173      53484353 
 2173      525F5553 
 2173      47464155 
 2173      4C544143 
 2174 5553 54414354 		.ascii	"TACT_Pos)\000"
 2174      5F506F73 
 2174      2900
 2175 555d 01       		.byte	0x1
 2176 555e BD02     		.uleb128 0x13d
 2177 5560 5343425F 		.ascii	"SCB_SHCSR_BUSFAULTACT_Pos 1\000"
 2177      53484353 
 2177      525F4255 
 2177      53464155 
 2177      4C544143 
 2178 557c 01       		.byte	0x1
 2179 557d BE02     		.uleb128 0x13e
 2180 557f 5343425F 		.ascii	"SCB_SHCSR_BUSFAULTACT_Msk (1ul << SCB_SHCSR_BUSFAUL"
 2180      53484353 
 2180      525F4255 
 2180      53464155 
 2180      4C544143 
 2181 55b2 54414354 		.ascii	"TACT_Pos)\000"
 2181      5F506F73 
 2181      2900
 2182 55bc 01       		.byte	0x1
 2183 55bd C002     		.uleb128 0x140
 2184 55bf 5343425F 		.ascii	"SCB_SHCSR_MEMFAULTACT_Pos 0\000"
 2184      53484353 
 2184      525F4D45 
 2184      4D464155 
 2184      4C544143 
 2185 55db 01       		.byte	0x1
 2186 55dc C102     		.uleb128 0x141
 2187 55de 5343425F 		.ascii	"SCB_SHCSR_MEMFAULTACT_Msk (1ul << SCB_SHCSR_MEMFAUL"
 2187      53484353 
 2187      525F4D45 
 2187      4D464155 
 2187      4C544143 
 2188 5611 54414354 		.ascii	"TACT_Pos)\000"
 2188      5F506F73 
 2188      2900
ARM GAS  /tmp/cck0uY6y.s 			page 85


 2189 561b 01       		.byte	0x1
 2190 561c C402     		.uleb128 0x144
 2191 561e 5343425F 		.ascii	"SCB_CFSR_USGFAULTSR_Pos 16\000"
 2191      43465352 
 2191      5F555347 
 2191      4641554C 
 2191      5453525F 
 2192 5639 01       		.byte	0x1
 2193 563a C502     		.uleb128 0x145
 2194 563c 5343425F 		.ascii	"SCB_CFSR_USGFAULTSR_Msk (0xFFFFul << SCB_CFSR_USGFA"
 2194      43465352 
 2194      5F555347 
 2194      4641554C 
 2194      5453525F 
 2195 566f 554C5453 		.ascii	"ULTSR_Pos)\000"
 2195      525F506F 
 2195      732900
 2196 567a 01       		.byte	0x1
 2197 567b C702     		.uleb128 0x147
 2198 567d 5343425F 		.ascii	"SCB_CFSR_BUSFAULTSR_Pos 8\000"
 2198      43465352 
 2198      5F425553 
 2198      4641554C 
 2198      5453525F 
 2199 5697 01       		.byte	0x1
 2200 5698 C802     		.uleb128 0x148
 2201 569a 5343425F 		.ascii	"SCB_CFSR_BUSFAULTSR_Msk (0xFFul << SCB_CFSR_BUSFAUL"
 2201      43465352 
 2201      5F425553 
 2201      4641554C 
 2201      5453525F 
 2202 56cd 5453525F 		.ascii	"TSR_Pos)\000"
 2202      506F7329 
 2202      00
 2203 56d6 01       		.byte	0x1
 2204 56d7 CA02     		.uleb128 0x14a
 2205 56d9 5343425F 		.ascii	"SCB_CFSR_MEMFAULTSR_Pos 0\000"
 2205      43465352 
 2205      5F4D454D 
 2205      4641554C 
 2205      5453525F 
 2206 56f3 01       		.byte	0x1
 2207 56f4 CB02     		.uleb128 0x14b
 2208 56f6 5343425F 		.ascii	"SCB_CFSR_MEMFAULTSR_Msk (0xFFul << SCB_CFSR_MEMFAUL"
 2208      43465352 
 2208      5F4D454D 
 2208      4641554C 
 2208      5453525F 
 2209 5729 5453525F 		.ascii	"TSR_Pos)\000"
 2209      506F7329 
 2209      00
 2210 5732 01       		.byte	0x1
 2211 5733 CE02     		.uleb128 0x14e
 2212 5735 5343425F 		.ascii	"SCB_HFSR_DEBUGEVT_Pos 31\000"
 2212      48465352 
 2212      5F444542 
 2212      55474556 
ARM GAS  /tmp/cck0uY6y.s 			page 86


 2212      545F506F 
 2213 574e 01       		.byte	0x1
 2214 574f CF02     		.uleb128 0x14f
 2215 5751 5343425F 		.ascii	"SCB_HFSR_DEBUGEVT_Msk (1ul << SCB_HFSR_DEBUGEVT_Pos"
 2215      48465352 
 2215      5F444542 
 2215      55474556 
 2215      545F4D73 
 2216 5784 2900     		.ascii	")\000"
 2217 5786 01       		.byte	0x1
 2218 5787 D102     		.uleb128 0x151
 2219 5789 5343425F 		.ascii	"SCB_HFSR_FORCED_Pos 30\000"
 2219      48465352 
 2219      5F464F52 
 2219      4345445F 
 2219      506F7320 
 2220 57a0 01       		.byte	0x1
 2221 57a1 D202     		.uleb128 0x152
 2222 57a3 5343425F 		.ascii	"SCB_HFSR_FORCED_Msk (1ul << SCB_HFSR_FORCED_Pos)\000"
 2222      48465352 
 2222      5F464F52 
 2222      4345445F 
 2222      4D736B20 
 2223 57d4 01       		.byte	0x1
 2224 57d5 D402     		.uleb128 0x154
 2225 57d7 5343425F 		.ascii	"SCB_HFSR_VECTTBL_Pos 1\000"
 2225      48465352 
 2225      5F564543 
 2225      5454424C 
 2225      5F506F73 
 2226 57ee 01       		.byte	0x1
 2227 57ef D502     		.uleb128 0x155
 2228 57f1 5343425F 		.ascii	"SCB_HFSR_VECTTBL_Msk (1ul << SCB_HFSR_VECTTBL_Pos)\000"
 2228      48465352 
 2228      5F564543 
 2228      5454424C 
 2228      5F4D736B 
 2229 5824 01       		.byte	0x1
 2230 5825 D802     		.uleb128 0x158
 2231 5827 5343425F 		.ascii	"SCB_DFSR_EXTERNAL_Pos 4\000"
 2231      44465352 
 2231      5F455854 
 2231      45524E41 
 2231      4C5F506F 
 2232 583f 01       		.byte	0x1
 2233 5840 D902     		.uleb128 0x159
 2234 5842 5343425F 		.ascii	"SCB_DFSR_EXTERNAL_Msk (1ul << SCB_DFSR_EXTERNAL_Pos"
 2234      44465352 
 2234      5F455854 
 2234      45524E41 
 2234      4C5F4D73 
 2235 5875 2900     		.ascii	")\000"
 2236 5877 01       		.byte	0x1
 2237 5878 DB02     		.uleb128 0x15b
 2238 587a 5343425F 		.ascii	"SCB_DFSR_VCATCH_Pos 3\000"
 2238      44465352 
 2238      5F564341 
ARM GAS  /tmp/cck0uY6y.s 			page 87


 2238      5443485F 
 2238      506F7320 
 2239 5890 01       		.byte	0x1
 2240 5891 DC02     		.uleb128 0x15c
 2241 5893 5343425F 		.ascii	"SCB_DFSR_VCATCH_Msk (1ul << SCB_DFSR_VCATCH_Pos)\000"
 2241      44465352 
 2241      5F564341 
 2241      5443485F 
 2241      4D736B20 
 2242 58c4 01       		.byte	0x1
 2243 58c5 DE02     		.uleb128 0x15e
 2244 58c7 5343425F 		.ascii	"SCB_DFSR_DWTTRAP_Pos 2\000"
 2244      44465352 
 2244      5F445754 
 2244      54524150 
 2244      5F506F73 
 2245 58de 01       		.byte	0x1
 2246 58df DF02     		.uleb128 0x15f
 2247 58e1 5343425F 		.ascii	"SCB_DFSR_DWTTRAP_Msk (1ul << SCB_DFSR_DWTTRAP_Pos)\000"
 2247      44465352 
 2247      5F445754 
 2247      54524150 
 2247      5F4D736B 
 2248 5914 01       		.byte	0x1
 2249 5915 E102     		.uleb128 0x161
 2250 5917 5343425F 		.ascii	"SCB_DFSR_BKPT_Pos 1\000"
 2250      44465352 
 2250      5F424B50 
 2250      545F506F 
 2250      73203100 
 2251 592b 01       		.byte	0x1
 2252 592c E202     		.uleb128 0x162
 2253 592e 5343425F 		.ascii	"SCB_DFSR_BKPT_Msk (1ul << SCB_DFSR_BKPT_Pos)\000"
 2253      44465352 
 2253      5F424B50 
 2253      545F4D73 
 2253      6B202831 
 2254 595b 01       		.byte	0x1
 2255 595c E402     		.uleb128 0x164
 2256 595e 5343425F 		.ascii	"SCB_DFSR_HALTED_Pos 0\000"
 2256      44465352 
 2256      5F48414C 
 2256      5445445F 
 2256      506F7320 
 2257 5974 01       		.byte	0x1
 2258 5975 E502     		.uleb128 0x165
 2259 5977 5343425F 		.ascii	"SCB_DFSR_HALTED_Msk (1ul << SCB_DFSR_HALTED_Pos)\000"
 2259      44465352 
 2259      5F48414C 
 2259      5445445F 
 2259      4D736B20 
 2260 59a8 01       		.byte	0x1
 2261 59a9 F602     		.uleb128 0x176
 2262 59ab 53797354 		.ascii	"SysTick_CTRL_COUNTFLAG_Pos 16\000"
 2262      69636B5F 
 2262      4354524C 
 2262      5F434F55 
ARM GAS  /tmp/cck0uY6y.s 			page 88


 2262      4E54464C 
 2263 59c9 01       		.byte	0x1
 2264 59ca F702     		.uleb128 0x177
 2265 59cc 53797354 		.ascii	"SysTick_CTRL_COUNTFLAG_Msk (1ul << SysTick_CTRL_COU"
 2265      69636B5F 
 2265      4354524C 
 2265      5F434F55 
 2265      4E54464C 
 2266 59ff 4E54464C 		.ascii	"NTFLAG_Pos)\000"
 2266      41475F50 
 2266      6F732900 
 2267 5a0b 01       		.byte	0x1
 2268 5a0c F902     		.uleb128 0x179
 2269 5a0e 53797354 		.ascii	"SysTick_CTRL_CLKSOURCE_Pos 2\000"
 2269      69636B5F 
 2269      4354524C 
 2269      5F434C4B 
 2269      534F5552 
 2270 5a2b 01       		.byte	0x1
 2271 5a2c FA02     		.uleb128 0x17a
 2272 5a2e 53797354 		.ascii	"SysTick_CTRL_CLKSOURCE_Msk (1ul << SysTick_CTRL_CLK"
 2272      69636B5F 
 2272      4354524C 
 2272      5F434C4B 
 2272      534F5552 
 2273 5a61 534F5552 		.ascii	"SOURCE_Pos)\000"
 2273      43455F50 
 2273      6F732900 
 2274 5a6d 01       		.byte	0x1
 2275 5a6e FC02     		.uleb128 0x17c
 2276 5a70 53797354 		.ascii	"SysTick_CTRL_TICKINT_Pos 1\000"
 2276      69636B5F 
 2276      4354524C 
 2276      5F544943 
 2276      4B494E54 
 2277 5a8b 01       		.byte	0x1
 2278 5a8c FD02     		.uleb128 0x17d
 2279 5a8e 53797354 		.ascii	"SysTick_CTRL_TICKINT_Msk (1ul << SysTick_CTRL_TICKI"
 2279      69636B5F 
 2279      4354524C 
 2279      5F544943 
 2279      4B494E54 
 2280 5ac1 4E545F50 		.ascii	"NT_Pos)\000"
 2280      6F732900 
 2281 5ac9 01       		.byte	0x1
 2282 5aca FF02     		.uleb128 0x17f
 2283 5acc 53797354 		.ascii	"SysTick_CTRL_ENABLE_Pos 0\000"
 2283      69636B5F 
 2283      4354524C 
 2283      5F454E41 
 2283      424C455F 
 2284 5ae6 01       		.byte	0x1
 2285 5ae7 8003     		.uleb128 0x180
 2286 5ae9 53797354 		.ascii	"SysTick_CTRL_ENABLE_Msk (1ul << SysTick_CTRL_ENABLE"
 2286      69636B5F 
 2286      4354524C 
 2286      5F454E41 
ARM GAS  /tmp/cck0uY6y.s 			page 89


 2286      424C455F 
 2287 5b1c 5F506F73 		.ascii	"_Pos)\000"
 2287      2900
 2288 5b22 01       		.byte	0x1
 2289 5b23 8303     		.uleb128 0x183
 2290 5b25 53797354 		.ascii	"SysTick_LOAD_RELOAD_Pos 0\000"
 2290      69636B5F 
 2290      4C4F4144 
 2290      5F52454C 
 2290      4F41445F 
 2291 5b3f 01       		.byte	0x1
 2292 5b40 8403     		.uleb128 0x184
 2293 5b42 53797354 		.ascii	"SysTick_LOAD_RELOAD_Msk (0xFFFFFFul << SysTick_LOAD"
 2293      69636B5F 
 2293      4C4F4144 
 2293      5F52454C 
 2293      4F41445F 
 2294 5b75 5F52454C 		.ascii	"_RELOAD_Pos)\000"
 2294      4F41445F 
 2294      506F7329 
 2294      00
 2295 5b82 01       		.byte	0x1
 2296 5b83 8703     		.uleb128 0x187
 2297 5b85 53797354 		.ascii	"SysTick_VAL_CURRENT_Pos 0\000"
 2297      69636B5F 
 2297      56414C5F 
 2297      43555252 
 2297      454E545F 
 2298 5b9f 01       		.byte	0x1
 2299 5ba0 8803     		.uleb128 0x188
 2300 5ba2 53797354 		.ascii	"SysTick_VAL_CURRENT_Msk (0xFFFFFFul << SysTick_VAL_"
 2300      69636B5F 
 2300      56414C5F 
 2300      43555252 
 2300      454E545F 
 2301 5bd5 43555252 		.ascii	"CURRENT_Pos)\000"
 2301      454E545F 
 2301      506F7329 
 2301      00
 2302 5be2 01       		.byte	0x1
 2303 5be3 8B03     		.uleb128 0x18b
 2304 5be5 53797354 		.ascii	"SysTick_CALIB_NOREF_Pos 31\000"
 2304      69636B5F 
 2304      43414C49 
 2304      425F4E4F 
 2304      5245465F 
 2305 5c00 01       		.byte	0x1
 2306 5c01 8C03     		.uleb128 0x18c
 2307 5c03 53797354 		.ascii	"SysTick_CALIB_NOREF_Msk (1ul << SysTick_CALIB_NOREF"
 2307      69636B5F 
 2307      43414C49 
 2307      425F4E4F 
 2307      5245465F 
 2308 5c36 5F506F73 		.ascii	"_Pos)\000"
 2308      2900
 2309 5c3c 01       		.byte	0x1
 2310 5c3d 8E03     		.uleb128 0x18e
ARM GAS  /tmp/cck0uY6y.s 			page 90


 2311 5c3f 53797354 		.ascii	"SysTick_CALIB_SKEW_Pos 30\000"
 2311      69636B5F 
 2311      43414C49 
 2311      425F534B 
 2311      45575F50 
 2312 5c59 01       		.byte	0x1
 2313 5c5a 8F03     		.uleb128 0x18f
 2314 5c5c 53797354 		.ascii	"SysTick_CALIB_SKEW_Msk (1ul << SysTick_CALIB_SKEW_P"
 2314      69636B5F 
 2314      43414C49 
 2314      425F534B 
 2314      45575F4D 
 2315 5c8f 6F732900 		.ascii	"os)\000"
 2316 5c93 01       		.byte	0x1
 2317 5c94 9103     		.uleb128 0x191
 2318 5c96 53797354 		.ascii	"SysTick_CALIB_TENMS_Pos 0\000"
 2318      69636B5F 
 2318      43414C49 
 2318      425F5445 
 2318      4E4D535F 
 2319 5cb0 01       		.byte	0x1
 2320 5cb1 9203     		.uleb128 0x192
 2321 5cb3 53797354 		.ascii	"SysTick_CALIB_TENMS_Msk (0xFFFFFFul << SysTick_VAL_"
 2321      69636B5F 
 2321      43414C49 
 2321      425F5445 
 2321      4E4D535F 
 2322 5ce6 43555252 		.ascii	"CURRENT_Pos)\000"
 2322      454E545F 
 2322      506F7329 
 2322      00
 2323 5cf3 01       		.byte	0x1
 2324 5cf4 BF03     		.uleb128 0x1bf
 2325 5cf6 49544D5F 		.ascii	"ITM_TPR_PRIVMASK_Pos 0\000"
 2325      5450525F 
 2325      50524956 
 2325      4D41534B 
 2325      5F506F73 
 2326 5d0d 01       		.byte	0x1
 2327 5d0e C003     		.uleb128 0x1c0
 2328 5d10 49544D5F 		.ascii	"ITM_TPR_PRIVMASK_Msk (0xFul << ITM_TPR_PRIVMASK_Pos"
 2328      5450525F 
 2328      50524956 
 2328      4D41534B 
 2328      5F4D736B 
 2329 5d43 2900     		.ascii	")\000"
 2330 5d45 01       		.byte	0x1
 2331 5d46 C303     		.uleb128 0x1c3
 2332 5d48 49544D5F 		.ascii	"ITM_TCR_BUSY_Pos 23\000"
 2332      5443525F 
 2332      42555359 
 2332      5F506F73 
 2332      20323300 
 2333 5d5c 01       		.byte	0x1
 2334 5d5d C403     		.uleb128 0x1c4
 2335 5d5f 49544D5F 		.ascii	"ITM_TCR_BUSY_Msk (1ul << ITM_TCR_BUSY_Pos)\000"
 2335      5443525F 
ARM GAS  /tmp/cck0uY6y.s 			page 91


 2335      42555359 
 2335      5F4D736B 
 2335      20283175 
 2336 5d8a 01       		.byte	0x1
 2337 5d8b C603     		.uleb128 0x1c6
 2338 5d8d 49544D5F 		.ascii	"ITM_TCR_ATBID_Pos 16\000"
 2338      5443525F 
 2338      41544249 
 2338      445F506F 
 2338      73203136 
 2339 5da2 01       		.byte	0x1
 2340 5da3 C703     		.uleb128 0x1c7
 2341 5da5 49544D5F 		.ascii	"ITM_TCR_ATBID_Msk (0x7Ful << ITM_TCR_ATBID_Pos)\000"
 2341      5443525F 
 2341      41544249 
 2341      445F4D73 
 2341      6B202830 
 2342 5dd5 01       		.byte	0x1
 2343 5dd6 C903     		.uleb128 0x1c9
 2344 5dd8 49544D5F 		.ascii	"ITM_TCR_TSPrescale_Pos 8\000"
 2344      5443525F 
 2344      54535072 
 2344      65736361 
 2344      6C655F50 
 2345 5df1 01       		.byte	0x1
 2346 5df2 CA03     		.uleb128 0x1ca
 2347 5df4 49544D5F 		.ascii	"ITM_TCR_TSPrescale_Msk (3ul << ITM_TCR_TSPrescale_P"
 2347      5443525F 
 2347      54535072 
 2347      65736361 
 2347      6C655F4D 
 2348 5e27 6F732900 		.ascii	"os)\000"
 2349 5e2b 01       		.byte	0x1
 2350 5e2c CC03     		.uleb128 0x1cc
 2351 5e2e 49544D5F 		.ascii	"ITM_TCR_SWOENA_Pos 4\000"
 2351      5443525F 
 2351      53574F45 
 2351      4E415F50 
 2351      6F732034 
 2352 5e43 01       		.byte	0x1
 2353 5e44 CD03     		.uleb128 0x1cd
 2354 5e46 49544D5F 		.ascii	"ITM_TCR_SWOENA_Msk (1ul << ITM_TCR_SWOENA_Pos)\000"
 2354      5443525F 
 2354      53574F45 
 2354      4E415F4D 
 2354      736B2028 
 2355 5e75 01       		.byte	0x1
 2356 5e76 CF03     		.uleb128 0x1cf
 2357 5e78 49544D5F 		.ascii	"ITM_TCR_DWTENA_Pos 3\000"
 2357      5443525F 
 2357      44575445 
 2357      4E415F50 
 2357      6F732033 
 2358 5e8d 01       		.byte	0x1
 2359 5e8e D003     		.uleb128 0x1d0
 2360 5e90 49544D5F 		.ascii	"ITM_TCR_DWTENA_Msk (1ul << ITM_TCR_DWTENA_Pos)\000"
 2360      5443525F 
ARM GAS  /tmp/cck0uY6y.s 			page 92


 2360      44575445 
 2360      4E415F4D 
 2360      736B2028 
 2361 5ebf 01       		.byte	0x1
 2362 5ec0 D203     		.uleb128 0x1d2
 2363 5ec2 49544D5F 		.ascii	"ITM_TCR_SYNCENA_Pos 2\000"
 2363      5443525F 
 2363      53594E43 
 2363      454E415F 
 2363      506F7320 
 2364 5ed8 01       		.byte	0x1
 2365 5ed9 D303     		.uleb128 0x1d3
 2366 5edb 49544D5F 		.ascii	"ITM_TCR_SYNCENA_Msk (1ul << ITM_TCR_SYNCENA_Pos)\000"
 2366      5443525F 
 2366      53594E43 
 2366      454E415F 
 2366      4D736B20 
 2367 5f0c 01       		.byte	0x1
 2368 5f0d D503     		.uleb128 0x1d5
 2369 5f0f 49544D5F 		.ascii	"ITM_TCR_TSENA_Pos 1\000"
 2369      5443525F 
 2369      5453454E 
 2369      415F506F 
 2369      73203100 
 2370 5f23 01       		.byte	0x1
 2371 5f24 D603     		.uleb128 0x1d6
 2372 5f26 49544D5F 		.ascii	"ITM_TCR_TSENA_Msk (1ul << ITM_TCR_TSENA_Pos)\000"
 2372      5443525F 
 2372      5453454E 
 2372      415F4D73 
 2372      6B202831 
 2373 5f53 01       		.byte	0x1
 2374 5f54 D803     		.uleb128 0x1d8
 2375 5f56 49544D5F 		.ascii	"ITM_TCR_ITMENA_Pos 0\000"
 2375      5443525F 
 2375      49544D45 
 2375      4E415F50 
 2375      6F732030 
 2376 5f6b 01       		.byte	0x1
 2377 5f6c D903     		.uleb128 0x1d9
 2378 5f6e 49544D5F 		.ascii	"ITM_TCR_ITMENA_Msk (1ul << ITM_TCR_ITMENA_Pos)\000"
 2378      5443525F 
 2378      49544D45 
 2378      4E415F4D 
 2378      736B2028 
 2379 5f9d 01       		.byte	0x1
 2380 5f9e DC03     		.uleb128 0x1dc
 2381 5fa0 49544D5F 		.ascii	"ITM_IWR_ATVALIDM_Pos 0\000"
 2381      4957525F 
 2381      41545641 
 2381      4C49444D 
 2381      5F506F73 
 2382 5fb7 01       		.byte	0x1
 2383 5fb8 DD03     		.uleb128 0x1dd
 2384 5fba 49544D5F 		.ascii	"ITM_IWR_ATVALIDM_Msk (1ul << ITM_IWR_ATVALIDM_Pos)\000"
 2384      4957525F 
 2384      41545641 
ARM GAS  /tmp/cck0uY6y.s 			page 93


 2384      4C49444D 
 2384      5F4D736B 
 2385 5fed 01       		.byte	0x1
 2386 5fee E003     		.uleb128 0x1e0
 2387 5ff0 49544D5F 		.ascii	"ITM_IRR_ATREADYM_Pos 0\000"
 2387      4952525F 
 2387      41545245 
 2387      4144594D 
 2387      5F506F73 
 2388 6007 01       		.byte	0x1
 2389 6008 E103     		.uleb128 0x1e1
 2390 600a 49544D5F 		.ascii	"ITM_IRR_ATREADYM_Msk (1ul << ITM_IRR_ATREADYM_Pos)\000"
 2390      4952525F 
 2390      41545245 
 2390      4144594D 
 2390      5F4D736B 
 2391 603d 01       		.byte	0x1
 2392 603e E403     		.uleb128 0x1e4
 2393 6040 49544D5F 		.ascii	"ITM_IMCR_INTEGRATION_Pos 0\000"
 2393      494D4352 
 2393      5F494E54 
 2393      45475241 
 2393      54494F4E 
 2394 605b 01       		.byte	0x1
 2395 605c E503     		.uleb128 0x1e5
 2396 605e 49544D5F 		.ascii	"ITM_IMCR_INTEGRATION_Msk (1ul << ITM_IMCR_INTEGRATI"
 2396      494D4352 
 2396      5F494E54 
 2396      45475241 
 2396      54494F4E 
 2397 6091 4F4E5F50 		.ascii	"ON_Pos)\000"
 2397      6F732900 
 2398 6099 01       		.byte	0x1
 2399 609a E803     		.uleb128 0x1e8
 2400 609c 49544D5F 		.ascii	"ITM_LSR_ByteAcc_Pos 2\000"
 2400      4C53525F 
 2400      42797465 
 2400      4163635F 
 2400      506F7320 
 2401 60b2 01       		.byte	0x1
 2402 60b3 E903     		.uleb128 0x1e9
 2403 60b5 49544D5F 		.ascii	"ITM_LSR_ByteAcc_Msk (1ul << ITM_LSR_ByteAcc_Pos)\000"
 2403      4C53525F 
 2403      42797465 
 2403      4163635F 
 2403      4D736B20 
 2404 60e6 01       		.byte	0x1
 2405 60e7 EB03     		.uleb128 0x1eb
 2406 60e9 49544D5F 		.ascii	"ITM_LSR_Access_Pos 1\000"
 2406      4C53525F 
 2406      41636365 
 2406      73735F50 
 2406      6F732031 
 2407 60fe 01       		.byte	0x1
 2408 60ff EC03     		.uleb128 0x1ec
 2409 6101 49544D5F 		.ascii	"ITM_LSR_Access_Msk (1ul << ITM_LSR_Access_Pos)\000"
 2409      4C53525F 
ARM GAS  /tmp/cck0uY6y.s 			page 94


 2409      41636365 
 2409      73735F4D 
 2409      736B2028 
 2410 6130 01       		.byte	0x1
 2411 6131 EE03     		.uleb128 0x1ee
 2412 6133 49544D5F 		.ascii	"ITM_LSR_Present_Pos 0\000"
 2412      4C53525F 
 2412      50726573 
 2412      656E745F 
 2412      506F7320 
 2413 6149 01       		.byte	0x1
 2414 614a EF03     		.uleb128 0x1ef
 2415 614c 49544D5F 		.ascii	"ITM_LSR_Present_Msk (1ul << ITM_LSR_Present_Pos)\000"
 2415      4C53525F 
 2415      50726573 
 2415      656E745F 
 2415      4D736B20 
 2416 617d 01       		.byte	0x1
 2417 617e 8304     		.uleb128 0x203
 2418 6180 496E7465 		.ascii	"InterruptType_ICTR_INTLINESNUM_Pos 0\000"
 2418      72727570 
 2418      74547970 
 2418      655F4943 
 2418      54525F49 
 2419 61a5 01       		.byte	0x1
 2420 61a6 8404     		.uleb128 0x204
 2421 61a8 496E7465 		.ascii	"InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << Inter"
 2421      72727570 
 2421      74547970 
 2421      655F4943 
 2421      54525F49 
 2422 61db 72757074 		.ascii	"ruptType_ICTR_INTLINESNUM_Pos)\000"
 2422      54797065 
 2422      5F494354 
 2422      525F494E 
 2422      544C494E 
 2423 61fa 01       		.byte	0x1
 2424 61fb 8704     		.uleb128 0x207
 2425 61fd 496E7465 		.ascii	"InterruptType_ACTLR_DISFOLD_Pos 2\000"
 2425      72727570 
 2425      74547970 
 2425      655F4143 
 2425      544C525F 
 2426 621f 01       		.byte	0x1
 2427 6220 8804     		.uleb128 0x208
 2428 6222 496E7465 		.ascii	"InterruptType_ACTLR_DISFOLD_Msk (1ul << InterruptTy"
 2428      72727570 
 2428      74547970 
 2428      655F4143 
 2428      544C525F 
 2429 6255 70655F41 		.ascii	"pe_ACTLR_DISFOLD_Pos)\000"
 2429      43544C52 
 2429      5F444953 
 2429      464F4C44 
 2429      5F506F73 
 2430 626b 01       		.byte	0x1
 2431 626c 8A04     		.uleb128 0x20a
ARM GAS  /tmp/cck0uY6y.s 			page 95


 2432 626e 496E7465 		.ascii	"InterruptType_ACTLR_DISDEFWBUF_Pos 1\000"
 2432      72727570 
 2432      74547970 
 2432      655F4143 
 2432      544C525F 
 2433 6293 01       		.byte	0x1
 2434 6294 8B04     		.uleb128 0x20b
 2435 6296 496E7465 		.ascii	"InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << Interrup"
 2435      72727570 
 2435      74547970 
 2435      655F4143 
 2435      544C525F 
 2436 62c9 74547970 		.ascii	"tType_ACTLR_DISDEFWBUF_Pos)\000"
 2436      655F4143 
 2436      544C525F 
 2436      44495344 
 2436      45465742 
 2437 62e5 01       		.byte	0x1
 2438 62e6 8D04     		.uleb128 0x20d
 2439 62e8 496E7465 		.ascii	"InterruptType_ACTLR_DISMCYCINT_Pos 0\000"
 2439      72727570 
 2439      74547970 
 2439      655F4143 
 2439      544C525F 
 2440 630d 01       		.byte	0x1
 2441 630e 8E04     		.uleb128 0x20e
 2442 6310 496E7465 		.ascii	"InterruptType_ACTLR_DISMCYCINT_Msk (1ul << Interrup"
 2442      72727570 
 2442      74547970 
 2442      655F4143 
 2442      544C525F 
 2443 6343 74547970 		.ascii	"tType_ACTLR_DISMCYCINT_Pos)\000"
 2443      655F4143 
 2443      544C525F 
 2443      4449534D 
 2443      43594349 
 2444 635f 01       		.byte	0x1
 2445 6360 A704     		.uleb128 0x227
 2446 6362 4D50555F 		.ascii	"MPU_TYPE_IREGION_Pos 16\000"
 2446      54595045 
 2446      5F495245 
 2446      47494F4E 
 2446      5F506F73 
 2447 637a 01       		.byte	0x1
 2448 637b A804     		.uleb128 0x228
 2449 637d 4D50555F 		.ascii	"MPU_TYPE_IREGION_Msk (0xFFul << MPU_TYPE_IREGION_Po"
 2449      54595045 
 2449      5F495245 
 2449      47494F4E 
 2449      5F4D736B 
 2450 63b0 732900   		.ascii	"s)\000"
 2451 63b3 01       		.byte	0x1
 2452 63b4 AA04     		.uleb128 0x22a
 2453 63b6 4D50555F 		.ascii	"MPU_TYPE_DREGION_Pos 8\000"
 2453      54595045 
 2453      5F445245 
 2453      47494F4E 
ARM GAS  /tmp/cck0uY6y.s 			page 96


 2453      5F506F73 
 2454 63cd 01       		.byte	0x1
 2455 63ce AB04     		.uleb128 0x22b
 2456 63d0 4D50555F 		.ascii	"MPU_TYPE_DREGION_Msk (0xFFul << MPU_TYPE_DREGION_Po"
 2456      54595045 
 2456      5F445245 
 2456      47494F4E 
 2456      5F4D736B 
 2457 6403 732900   		.ascii	"s)\000"
 2458 6406 01       		.byte	0x1
 2459 6407 AD04     		.uleb128 0x22d
 2460 6409 4D50555F 		.ascii	"MPU_TYPE_SEPARATE_Pos 0\000"
 2460      54595045 
 2460      5F534550 
 2460      41524154 
 2460      455F506F 
 2461 6421 01       		.byte	0x1
 2462 6422 AE04     		.uleb128 0x22e
 2463 6424 4D50555F 		.ascii	"MPU_TYPE_SEPARATE_Msk (1ul << MPU_TYPE_SEPARATE_Pos"
 2463      54595045 
 2463      5F534550 
 2463      41524154 
 2463      455F4D73 
 2464 6457 2900     		.ascii	")\000"
 2465 6459 01       		.byte	0x1
 2466 645a B104     		.uleb128 0x231
 2467 645c 4D50555F 		.ascii	"MPU_CTRL_PRIVDEFENA_Pos 2\000"
 2467      4354524C 
 2467      5F505249 
 2467      56444546 
 2467      454E415F 
 2468 6476 01       		.byte	0x1
 2469 6477 B204     		.uleb128 0x232
 2470 6479 4D50555F 		.ascii	"MPU_CTRL_PRIVDEFENA_Msk (1ul << MPU_CTRL_PRIVDEFENA"
 2470      4354524C 
 2470      5F505249 
 2470      56444546 
 2470      454E415F 
 2471 64ac 5F506F73 		.ascii	"_Pos)\000"
 2471      2900
 2472 64b2 01       		.byte	0x1
 2473 64b3 B404     		.uleb128 0x234
 2474 64b5 4D50555F 		.ascii	"MPU_CTRL_HFNMIENA_Pos 1\000"
 2474      4354524C 
 2474      5F48464E 
 2474      4D49454E 
 2474      415F506F 
 2475 64cd 01       		.byte	0x1
 2476 64ce B504     		.uleb128 0x235
 2477 64d0 4D50555F 		.ascii	"MPU_CTRL_HFNMIENA_Msk (1ul << MPU_CTRL_HFNMIENA_Pos"
 2477      4354524C 
 2477      5F48464E 
 2477      4D49454E 
 2477      415F4D73 
 2478 6503 2900     		.ascii	")\000"
 2479 6505 01       		.byte	0x1
 2480 6506 B704     		.uleb128 0x237
ARM GAS  /tmp/cck0uY6y.s 			page 97


 2481 6508 4D50555F 		.ascii	"MPU_CTRL_ENABLE_Pos 0\000"
 2481      4354524C 
 2481      5F454E41 
 2481      424C455F 
 2481      506F7320 
 2482 651e 01       		.byte	0x1
 2483 651f B804     		.uleb128 0x238
 2484 6521 4D50555F 		.ascii	"MPU_CTRL_ENABLE_Msk (1ul << MPU_CTRL_ENABLE_Pos)\000"
 2484      4354524C 
 2484      5F454E41 
 2484      424C455F 
 2484      4D736B20 
 2485 6552 01       		.byte	0x1
 2486 6553 BB04     		.uleb128 0x23b
 2487 6555 4D50555F 		.ascii	"MPU_RNR_REGION_Pos 0\000"
 2487      524E525F 
 2487      52454749 
 2487      4F4E5F50 
 2487      6F732030 
 2488 656a 01       		.byte	0x1
 2489 656b BC04     		.uleb128 0x23c
 2490 656d 4D50555F 		.ascii	"MPU_RNR_REGION_Msk (0xFFul << MPU_RNR_REGION_Pos)\000"
 2490      524E525F 
 2490      52454749 
 2490      4F4E5F4D 
 2490      736B2028 
 2491 659f 01       		.byte	0x1
 2492 65a0 BF04     		.uleb128 0x23f
 2493 65a2 4D50555F 		.ascii	"MPU_RBAR_ADDR_Pos 5\000"
 2493      52424152 
 2493      5F414444 
 2493      525F506F 
 2493      73203500 
 2494 65b6 01       		.byte	0x1
 2495 65b7 C004     		.uleb128 0x240
 2496 65b9 4D50555F 		.ascii	"MPU_RBAR_ADDR_Msk (0x7FFFFFFul << MPU_RBAR_ADDR_Pos"
 2496      52424152 
 2496      5F414444 
 2496      525F4D73 
 2496      6B202830 
 2497 65ec 2900     		.ascii	")\000"
 2498 65ee 01       		.byte	0x1
 2499 65ef C204     		.uleb128 0x242
 2500 65f1 4D50555F 		.ascii	"MPU_RBAR_VALID_Pos 4\000"
 2500      52424152 
 2500      5F56414C 
 2500      49445F50 
 2500      6F732034 
 2501 6606 01       		.byte	0x1
 2502 6607 C304     		.uleb128 0x243
 2503 6609 4D50555F 		.ascii	"MPU_RBAR_VALID_Msk (1ul << MPU_RBAR_VALID_Pos)\000"
 2503      52424152 
 2503      5F56414C 
 2503      49445F4D 
 2503      736B2028 
 2504 6638 01       		.byte	0x1
 2505 6639 C504     		.uleb128 0x245
ARM GAS  /tmp/cck0uY6y.s 			page 98


 2506 663b 4D50555F 		.ascii	"MPU_RBAR_REGION_Pos 0\000"
 2506      52424152 
 2506      5F524547 
 2506      494F4E5F 
 2506      506F7320 
 2507 6651 01       		.byte	0x1
 2508 6652 C604     		.uleb128 0x246
 2509 6654 4D50555F 		.ascii	"MPU_RBAR_REGION_Msk (0xFul << MPU_RBAR_REGION_Pos)\000"
 2509      52424152 
 2509      5F524547 
 2509      494F4E5F 
 2509      4D736B20 
 2510 6687 01       		.byte	0x1
 2511 6688 C904     		.uleb128 0x249
 2512 668a 4D50555F 		.ascii	"MPU_RASR_XN_Pos 28\000"
 2512      52415352 
 2512      5F584E5F 
 2512      506F7320 
 2512      323800
 2513 669d 01       		.byte	0x1
 2514 669e CA04     		.uleb128 0x24a
 2515 66a0 4D50555F 		.ascii	"MPU_RASR_XN_Msk (1ul << MPU_RASR_XN_Pos)\000"
 2515      52415352 
 2515      5F584E5F 
 2515      4D736B20 
 2515      2831756C 
 2516 66c9 01       		.byte	0x1
 2517 66ca CC04     		.uleb128 0x24c
 2518 66cc 4D50555F 		.ascii	"MPU_RASR_AP_Pos 24\000"
 2518      52415352 
 2518      5F41505F 
 2518      506F7320 
 2518      323400
 2519 66df 01       		.byte	0x1
 2520 66e0 CD04     		.uleb128 0x24d
 2521 66e2 4D50555F 		.ascii	"MPU_RASR_AP_Msk (7ul << MPU_RASR_AP_Pos)\000"
 2521      52415352 
 2521      5F41505F 
 2521      4D736B20 
 2521      2837756C 
 2522 670b 01       		.byte	0x1
 2523 670c CF04     		.uleb128 0x24f
 2524 670e 4D50555F 		.ascii	"MPU_RASR_TEX_Pos 19\000"
 2524      52415352 
 2524      5F544558 
 2524      5F506F73 
 2524      20313900 
 2525 6722 01       		.byte	0x1
 2526 6723 D004     		.uleb128 0x250
 2527 6725 4D50555F 		.ascii	"MPU_RASR_TEX_Msk (7ul << MPU_RASR_TEX_Pos)\000"
 2527      52415352 
 2527      5F544558 
 2527      5F4D736B 
 2527      20283775 
 2528 6750 01       		.byte	0x1
 2529 6751 D204     		.uleb128 0x252
 2530 6753 4D50555F 		.ascii	"MPU_RASR_S_Pos 18\000"
ARM GAS  /tmp/cck0uY6y.s 			page 99


 2530      52415352 
 2530      5F535F50 
 2530      6F732031 
 2530      3800
 2531 6765 01       		.byte	0x1
 2532 6766 D304     		.uleb128 0x253
 2533 6768 4D50555F 		.ascii	"MPU_RASR_S_Msk (1ul << MPU_RASR_S_Pos)\000"
 2533      52415352 
 2533      5F535F4D 
 2533      736B2028 
 2533      31756C20 
 2534 678f 01       		.byte	0x1
 2535 6790 D504     		.uleb128 0x255
 2536 6792 4D50555F 		.ascii	"MPU_RASR_C_Pos 17\000"
 2536      52415352 
 2536      5F435F50 
 2536      6F732031 
 2536      3700
 2537 67a4 01       		.byte	0x1
 2538 67a5 D604     		.uleb128 0x256
 2539 67a7 4D50555F 		.ascii	"MPU_RASR_C_Msk (1ul << MPU_RASR_C_Pos)\000"
 2539      52415352 
 2539      5F435F4D 
 2539      736B2028 
 2539      31756C20 
 2540 67ce 01       		.byte	0x1
 2541 67cf D804     		.uleb128 0x258
 2542 67d1 4D50555F 		.ascii	"MPU_RASR_B_Pos 16\000"
 2542      52415352 
 2542      5F425F50 
 2542      6F732031 
 2542      3600
 2543 67e3 01       		.byte	0x1
 2544 67e4 D904     		.uleb128 0x259
 2545 67e6 4D50555F 		.ascii	"MPU_RASR_B_Msk (1ul << MPU_RASR_B_Pos)\000"
 2545      52415352 
 2545      5F425F4D 
 2545      736B2028 
 2545      31756C20 
 2546 680d 01       		.byte	0x1
 2547 680e DB04     		.uleb128 0x25b
 2548 6810 4D50555F 		.ascii	"MPU_RASR_SRD_Pos 8\000"
 2548      52415352 
 2548      5F535244 
 2548      5F506F73 
 2548      203800
 2549 6823 01       		.byte	0x1
 2550 6824 DC04     		.uleb128 0x25c
 2551 6826 4D50555F 		.ascii	"MPU_RASR_SRD_Msk (0xFFul << MPU_RASR_SRD_Pos)\000"
 2551      52415352 
 2551      5F535244 
 2551      5F4D736B 
 2551      20283078 
 2552 6854 01       		.byte	0x1
 2553 6855 DE04     		.uleb128 0x25e
 2554 6857 4D50555F 		.ascii	"MPU_RASR_SIZE_Pos 1\000"
 2554      52415352 
ARM GAS  /tmp/cck0uY6y.s 			page 100


 2554      5F53495A 
 2554      455F506F 
 2554      73203100 
 2555 686b 01       		.byte	0x1
 2556 686c DF04     		.uleb128 0x25f
 2557 686e 4D50555F 		.ascii	"MPU_RASR_SIZE_Msk (0x1Ful << MPU_RASR_SIZE_Pos)\000"
 2557      52415352 
 2557      5F53495A 
 2557      455F4D73 
 2557      6B202830 
 2558 689e 01       		.byte	0x1
 2559 689f E104     		.uleb128 0x261
 2560 68a1 4D50555F 		.ascii	"MPU_RASR_ENA_Pos 0\000"
 2560      52415352 
 2560      5F454E41 
 2560      5F506F73 
 2560      203000
 2561 68b4 01       		.byte	0x1
 2562 68b5 E204     		.uleb128 0x262
 2563 68b7 4D50555F 		.ascii	"MPU_RASR_ENA_Msk (0x1Ful << MPU_RASR_ENA_Pos)\000"
 2563      52415352 
 2563      5F454E41 
 2563      5F4D736B 
 2563      20283078 
 2564 68e5 01       		.byte	0x1
 2565 68e6 F504     		.uleb128 0x275
 2566 68e8 436F7265 		.ascii	"CoreDebug_DHCSR_DBGKEY_Pos 16\000"
 2566      44656275 
 2566      675F4448 
 2566      4353525F 
 2566      4442474B 
 2567 6906 01       		.byte	0x1
 2568 6907 F604     		.uleb128 0x276
 2569 6909 436F7265 		.ascii	"CoreDebug_DHCSR_DBGKEY_Msk (0xFFFFul << CoreDebug_D"
 2569      44656275 
 2569      675F4448 
 2569      4353525F 
 2569      4442474B 
 2570 693c 48435352 		.ascii	"HCSR_DBGKEY_Pos)\000"
 2570      5F444247 
 2570      4B45595F 
 2570      506F7329 
 2570      00
 2571 694d 01       		.byte	0x1
 2572 694e F804     		.uleb128 0x278
 2573 6950 436F7265 		.ascii	"CoreDebug_DHCSR_S_RESET_ST_Pos 25\000"
 2573      44656275 
 2573      675F4448 
 2573      4353525F 
 2573      535F5245 
 2574 6972 01       		.byte	0x1
 2575 6973 F904     		.uleb128 0x279
 2576 6975 436F7265 		.ascii	"CoreDebug_DHCSR_S_RESET_ST_Msk (1ul << CoreDebug_DH"
 2576      44656275 
 2576      675F4448 
 2576      4353525F 
 2576      535F5245 
ARM GAS  /tmp/cck0uY6y.s 			page 101


 2577 69a8 4353525F 		.ascii	"CSR_S_RESET_ST_Pos)\000"
 2577      535F5245 
 2577      5345545F 
 2577      53545F50 
 2577      6F732900 
 2578 69bc 01       		.byte	0x1
 2579 69bd FB04     		.uleb128 0x27b
 2580 69bf 436F7265 		.ascii	"CoreDebug_DHCSR_S_RETIRE_ST_Pos 24\000"
 2580      44656275 
 2580      675F4448 
 2580      4353525F 
 2580      535F5245 
 2581 69e2 01       		.byte	0x1
 2582 69e3 FC04     		.uleb128 0x27c
 2583 69e5 436F7265 		.ascii	"CoreDebug_DHCSR_S_RETIRE_ST_Msk (1ul << CoreDebug_D"
 2583      44656275 
 2583      675F4448 
 2583      4353525F 
 2583      535F5245 
 2584 6a18 48435352 		.ascii	"HCSR_S_RETIRE_ST_Pos)\000"
 2584      5F535F52 
 2584      45544952 
 2584      455F5354 
 2584      5F506F73 
 2585 6a2e 01       		.byte	0x1
 2586 6a2f FE04     		.uleb128 0x27e
 2587 6a31 436F7265 		.ascii	"CoreDebug_DHCSR_S_LOCKUP_Pos 19\000"
 2587      44656275 
 2587      675F4448 
 2587      4353525F 
 2587      535F4C4F 
 2588 6a51 01       		.byte	0x1
 2589 6a52 FF04     		.uleb128 0x27f
 2590 6a54 436F7265 		.ascii	"CoreDebug_DHCSR_S_LOCKUP_Msk (1ul << CoreDebug_DHCS"
 2590      44656275 
 2590      675F4448 
 2590      4353525F 
 2590      535F4C4F 
 2591 6a87 525F535F 		.ascii	"R_S_LOCKUP_Pos)\000"
 2591      4C4F434B 
 2591      55505F50 
 2591      6F732900 
 2592 6a97 01       		.byte	0x1
 2593 6a98 8105     		.uleb128 0x281
 2594 6a9a 436F7265 		.ascii	"CoreDebug_DHCSR_S_SLEEP_Pos 18\000"
 2594      44656275 
 2594      675F4448 
 2594      4353525F 
 2594      535F534C 
 2595 6ab9 01       		.byte	0x1
 2596 6aba 8205     		.uleb128 0x282
 2597 6abc 436F7265 		.ascii	"CoreDebug_DHCSR_S_SLEEP_Msk (1ul << CoreDebug_DHCSR"
 2597      44656275 
 2597      675F4448 
 2597      4353525F 
 2597      535F534C 
 2598 6aef 5F535F53 		.ascii	"_S_SLEEP_Pos)\000"
ARM GAS  /tmp/cck0uY6y.s 			page 102


 2598      4C454550 
 2598      5F506F73 
 2598      2900
 2599 6afd 01       		.byte	0x1
 2600 6afe 8405     		.uleb128 0x284
 2601 6b00 436F7265 		.ascii	"CoreDebug_DHCSR_S_HALT_Pos 17\000"
 2601      44656275 
 2601      675F4448 
 2601      4353525F 
 2601      535F4841 
 2602 6b1e 01       		.byte	0x1
 2603 6b1f 8505     		.uleb128 0x285
 2604 6b21 436F7265 		.ascii	"CoreDebug_DHCSR_S_HALT_Msk (1ul << CoreDebug_DHCSR_"
 2604      44656275 
 2604      675F4448 
 2604      4353525F 
 2604      535F4841 
 2605 6b54 535F4841 		.ascii	"S_HALT_Pos)\000"
 2605      4C545F50 
 2605      6F732900 
 2606 6b60 01       		.byte	0x1
 2607 6b61 8705     		.uleb128 0x287
 2608 6b63 436F7265 		.ascii	"CoreDebug_DHCSR_S_REGRDY_Pos 16\000"
 2608      44656275 
 2608      675F4448 
 2608      4353525F 
 2608      535F5245 
 2609 6b83 01       		.byte	0x1
 2610 6b84 8805     		.uleb128 0x288
 2611 6b86 436F7265 		.ascii	"CoreDebug_DHCSR_S_REGRDY_Msk (1ul << CoreDebug_DHCS"
 2611      44656275 
 2611      675F4448 
 2611      4353525F 
 2611      535F5245 
 2612 6bb9 525F535F 		.ascii	"R_S_REGRDY_Pos)\000"
 2612      52454752 
 2612      44595F50 
 2612      6F732900 
 2613 6bc9 01       		.byte	0x1
 2614 6bca 8A05     		.uleb128 0x28a
 2615 6bcc 436F7265 		.ascii	"CoreDebug_DHCSR_C_SNAPSTALL_Pos 5\000"
 2615      44656275 
 2615      675F4448 
 2615      4353525F 
 2615      435F534E 
 2616 6bee 01       		.byte	0x1
 2617 6bef 8B05     		.uleb128 0x28b
 2618 6bf1 436F7265 		.ascii	"CoreDebug_DHCSR_C_SNAPSTALL_Msk (1ul << CoreDebug_D"
 2618      44656275 
 2618      675F4448 
 2618      4353525F 
 2618      435F534E 
 2619 6c24 48435352 		.ascii	"HCSR_C_SNAPSTALL_Pos)\000"
 2619      5F435F53 
 2619      4E415053 
 2619      54414C4C 
 2619      5F506F73 
ARM GAS  /tmp/cck0uY6y.s 			page 103


 2620 6c3a 01       		.byte	0x1
 2621 6c3b 8D05     		.uleb128 0x28d
 2622 6c3d 436F7265 		.ascii	"CoreDebug_DHCSR_C_MASKINTS_Pos 3\000"
 2622      44656275 
 2622      675F4448 
 2622      4353525F 
 2622      435F4D41 
 2623 6c5e 01       		.byte	0x1
 2624 6c5f 8E05     		.uleb128 0x28e
 2625 6c61 436F7265 		.ascii	"CoreDebug_DHCSR_C_MASKINTS_Msk (1ul << CoreDebug_DH"
 2625      44656275 
 2625      675F4448 
 2625      4353525F 
 2625      435F4D41 
 2626 6c94 4353525F 		.ascii	"CSR_C_MASKINTS_Pos)\000"
 2626      435F4D41 
 2626      534B494E 
 2626      54535F50 
 2626      6F732900 
 2627 6ca8 01       		.byte	0x1
 2628 6ca9 9005     		.uleb128 0x290
 2629 6cab 436F7265 		.ascii	"CoreDebug_DHCSR_C_STEP_Pos 2\000"
 2629      44656275 
 2629      675F4448 
 2629      4353525F 
 2629      435F5354 
 2630 6cc8 01       		.byte	0x1
 2631 6cc9 9105     		.uleb128 0x291
 2632 6ccb 436F7265 		.ascii	"CoreDebug_DHCSR_C_STEP_Msk (1ul << CoreDebug_DHCSR_"
 2632      44656275 
 2632      675F4448 
 2632      4353525F 
 2632      435F5354 
 2633 6cfe 435F5354 		.ascii	"C_STEP_Pos)\000"
 2633      45505F50 
 2633      6F732900 
 2634 6d0a 01       		.byte	0x1
 2635 6d0b 9305     		.uleb128 0x293
 2636 6d0d 436F7265 		.ascii	"CoreDebug_DHCSR_C_HALT_Pos 1\000"
 2636      44656275 
 2636      675F4448 
 2636      4353525F 
 2636      435F4841 
 2637 6d2a 01       		.byte	0x1
 2638 6d2b 9405     		.uleb128 0x294
 2639 6d2d 436F7265 		.ascii	"CoreDebug_DHCSR_C_HALT_Msk (1ul << CoreDebug_DHCSR_"
 2639      44656275 
 2639      675F4448 
 2639      4353525F 
 2639      435F4841 
 2640 6d60 435F4841 		.ascii	"C_HALT_Pos)\000"
 2640      4C545F50 
 2640      6F732900 
 2641 6d6c 01       		.byte	0x1
 2642 6d6d 9605     		.uleb128 0x296
 2643 6d6f 436F7265 		.ascii	"CoreDebug_DHCSR_C_DEBUGEN_Pos 0\000"
 2643      44656275 
ARM GAS  /tmp/cck0uY6y.s 			page 104


 2643      675F4448 
 2643      4353525F 
 2643      435F4445 
 2644 6d8f 01       		.byte	0x1
 2645 6d90 9705     		.uleb128 0x297
 2646 6d92 436F7265 		.ascii	"CoreDebug_DHCSR_C_DEBUGEN_Msk (1ul << CoreDebug_DHC"
 2646      44656275 
 2646      675F4448 
 2646      4353525F 
 2646      435F4445 
 2647 6dc5 53525F43 		.ascii	"SR_C_DEBUGEN_Pos)\000"
 2647      5F444542 
 2647      5547454E 
 2647      5F506F73 
 2647      2900
 2648 6dd7 01       		.byte	0x1
 2649 6dd8 9A05     		.uleb128 0x29a
 2650 6dda 436F7265 		.ascii	"CoreDebug_DCRSR_REGWnR_Pos 16\000"
 2650      44656275 
 2650      675F4443 
 2650      5253525F 
 2650      52454757 
 2651 6df8 01       		.byte	0x1
 2652 6df9 9B05     		.uleb128 0x29b
 2653 6dfb 436F7265 		.ascii	"CoreDebug_DCRSR_REGWnR_Msk (1ul << CoreDebug_DCRSR_"
 2653      44656275 
 2653      675F4443 
 2653      5253525F 
 2653      52454757 
 2654 6e2e 52454757 		.ascii	"REGWnR_Pos)\000"
 2654      6E525F50 
 2654      6F732900 
 2655 6e3a 01       		.byte	0x1
 2656 6e3b 9D05     		.uleb128 0x29d
 2657 6e3d 436F7265 		.ascii	"CoreDebug_DCRSR_REGSEL_Pos 0\000"
 2657      44656275 
 2657      675F4443 
 2657      5253525F 
 2657      52454753 
 2658 6e5a 01       		.byte	0x1
 2659 6e5b 9E05     		.uleb128 0x29e
 2660 6e5d 436F7265 		.ascii	"CoreDebug_DCRSR_REGSEL_Msk (0x1Ful << CoreDebug_DCR"
 2660      44656275 
 2660      675F4443 
 2660      5253525F 
 2660      52454753 
 2661 6e90 53525F52 		.ascii	"SR_REGSEL_Pos)\000"
 2661      45475345 
 2661      4C5F506F 
 2661      732900
 2662 6e9f 01       		.byte	0x1
 2663 6ea0 A105     		.uleb128 0x2a1
 2664 6ea2 436F7265 		.ascii	"CoreDebug_DEMCR_TRCENA_Pos 24\000"
 2664      44656275 
 2664      675F4445 
 2664      4D43525F 
 2664      54524345 
ARM GAS  /tmp/cck0uY6y.s 			page 105


 2665 6ec0 01       		.byte	0x1
 2666 6ec1 A205     		.uleb128 0x2a2
 2667 6ec3 436F7265 		.ascii	"CoreDebug_DEMCR_TRCENA_Msk (1ul << CoreDebug_DEMCR_"
 2667      44656275 
 2667      675F4445 
 2667      4D43525F 
 2667      54524345 
 2668 6ef6 54524345 		.ascii	"TRCENA_Pos)\000"
 2668      4E415F50 
 2668      6F732900 
 2669 6f02 01       		.byte	0x1
 2670 6f03 A405     		.uleb128 0x2a4
 2671 6f05 436F7265 		.ascii	"CoreDebug_DEMCR_MON_REQ_Pos 19\000"
 2671      44656275 
 2671      675F4445 
 2671      4D43525F 
 2671      4D4F4E5F 
 2672 6f24 01       		.byte	0x1
 2673 6f25 A505     		.uleb128 0x2a5
 2674 6f27 436F7265 		.ascii	"CoreDebug_DEMCR_MON_REQ_Msk (1ul << CoreDebug_DEMCR"
 2674      44656275 
 2674      675F4445 
 2674      4D43525F 
 2674      4D4F4E5F 
 2675 6f5a 5F4D4F4E 		.ascii	"_MON_REQ_Pos)\000"
 2675      5F524551 
 2675      5F506F73 
 2675      2900
 2676 6f68 01       		.byte	0x1
 2677 6f69 A705     		.uleb128 0x2a7
 2678 6f6b 436F7265 		.ascii	"CoreDebug_DEMCR_MON_STEP_Pos 18\000"
 2678      44656275 
 2678      675F4445 
 2678      4D43525F 
 2678      4D4F4E5F 
 2679 6f8b 01       		.byte	0x1
 2680 6f8c A805     		.uleb128 0x2a8
 2681 6f8e 436F7265 		.ascii	"CoreDebug_DEMCR_MON_STEP_Msk (1ul << CoreDebug_DEMC"
 2681      44656275 
 2681      675F4445 
 2681      4D43525F 
 2681      4D4F4E5F 
 2682 6fc1 525F4D4F 		.ascii	"R_MON_STEP_Pos)\000"
 2682      4E5F5354 
 2682      45505F50 
 2682      6F732900 
 2683 6fd1 01       		.byte	0x1
 2684 6fd2 AA05     		.uleb128 0x2aa
 2685 6fd4 436F7265 		.ascii	"CoreDebug_DEMCR_MON_PEND_Pos 17\000"
 2685      44656275 
 2685      675F4445 
 2685      4D43525F 
 2685      4D4F4E5F 
 2686 6ff4 01       		.byte	0x1
 2687 6ff5 AB05     		.uleb128 0x2ab
 2688 6ff7 436F7265 		.ascii	"CoreDebug_DEMCR_MON_PEND_Msk (1ul << CoreDebug_DEMC"
 2688      44656275 
ARM GAS  /tmp/cck0uY6y.s 			page 106


 2688      675F4445 
 2688      4D43525F 
 2688      4D4F4E5F 
 2689 702a 525F4D4F 		.ascii	"R_MON_PEND_Pos)\000"
 2689      4E5F5045 
 2689      4E445F50 
 2689      6F732900 
 2690 703a 01       		.byte	0x1
 2691 703b AD05     		.uleb128 0x2ad
 2692 703d 436F7265 		.ascii	"CoreDebug_DEMCR_MON_EN_Pos 16\000"
 2692      44656275 
 2692      675F4445 
 2692      4D43525F 
 2692      4D4F4E5F 
 2693 705b 01       		.byte	0x1
 2694 705c AE05     		.uleb128 0x2ae
 2695 705e 436F7265 		.ascii	"CoreDebug_DEMCR_MON_EN_Msk (1ul << CoreDebug_DEMCR_"
 2695      44656275 
 2695      675F4445 
 2695      4D43525F 
 2695      4D4F4E5F 
 2696 7091 4D4F4E5F 		.ascii	"MON_EN_Pos)\000"
 2696      454E5F50 
 2696      6F732900 
 2697 709d 01       		.byte	0x1
 2698 709e B005     		.uleb128 0x2b0
 2699 70a0 436F7265 		.ascii	"CoreDebug_DEMCR_VC_HARDERR_Pos 10\000"
 2699      44656275 
 2699      675F4445 
 2699      4D43525F 
 2699      56435F48 
 2700 70c2 01       		.byte	0x1
 2701 70c3 B105     		.uleb128 0x2b1
 2702 70c5 436F7265 		.ascii	"CoreDebug_DEMCR_VC_HARDERR_Msk (1ul << CoreDebug_DE"
 2702      44656275 
 2702      675F4445 
 2702      4D43525F 
 2702      56435F48 
 2703 70f8 4D43525F 		.ascii	"MCR_VC_HARDERR_Pos)\000"
 2703      56435F48 
 2703      41524445 
 2703      52525F50 
 2703      6F732900 
 2704 710c 01       		.byte	0x1
 2705 710d B305     		.uleb128 0x2b3
 2706 710f 436F7265 		.ascii	"CoreDebug_DEMCR_VC_INTERR_Pos 9\000"
 2706      44656275 
 2706      675F4445 
 2706      4D43525F 
 2706      56435F49 
 2707 712f 01       		.byte	0x1
 2708 7130 B405     		.uleb128 0x2b4
 2709 7132 436F7265 		.ascii	"CoreDebug_DEMCR_VC_INTERR_Msk (1ul << CoreDebug_DEM"
 2709      44656275 
 2709      675F4445 
 2709      4D43525F 
 2709      56435F49 
ARM GAS  /tmp/cck0uY6y.s 			page 107


 2710 7165 43525F56 		.ascii	"CR_VC_INTERR_Pos)\000"
 2710      435F494E 
 2710      54455252 
 2710      5F506F73 
 2710      2900
 2711 7177 01       		.byte	0x1
 2712 7178 B605     		.uleb128 0x2b6
 2713 717a 436F7265 		.ascii	"CoreDebug_DEMCR_VC_BUSERR_Pos 8\000"
 2713      44656275 
 2713      675F4445 
 2713      4D43525F 
 2713      56435F42 
 2714 719a 01       		.byte	0x1
 2715 719b B705     		.uleb128 0x2b7
 2716 719d 436F7265 		.ascii	"CoreDebug_DEMCR_VC_BUSERR_Msk (1ul << CoreDebug_DEM"
 2716      44656275 
 2716      675F4445 
 2716      4D43525F 
 2716      56435F42 
 2717 71d0 43525F56 		.ascii	"CR_VC_BUSERR_Pos)\000"
 2717      435F4255 
 2717      53455252 
 2717      5F506F73 
 2717      2900
 2718 71e2 01       		.byte	0x1
 2719 71e3 B905     		.uleb128 0x2b9
 2720 71e5 436F7265 		.ascii	"CoreDebug_DEMCR_VC_STATERR_Pos 7\000"
 2720      44656275 
 2720      675F4445 
 2720      4D43525F 
 2720      56435F53 
 2721 7206 01       		.byte	0x1
 2722 7207 BA05     		.uleb128 0x2ba
 2723 7209 436F7265 		.ascii	"CoreDebug_DEMCR_VC_STATERR_Msk (1ul << CoreDebug_DE"
 2723      44656275 
 2723      675F4445 
 2723      4D43525F 
 2723      56435F53 
 2724 723c 4D43525F 		.ascii	"MCR_VC_STATERR_Pos)\000"
 2724      56435F53 
 2724      54415445 
 2724      52525F50 
 2724      6F732900 
 2725 7250 01       		.byte	0x1
 2726 7251 BC05     		.uleb128 0x2bc
 2727 7253 436F7265 		.ascii	"CoreDebug_DEMCR_VC_CHKERR_Pos 6\000"
 2727      44656275 
 2727      675F4445 
 2727      4D43525F 
 2727      56435F43 
 2728 7273 01       		.byte	0x1
 2729 7274 BD05     		.uleb128 0x2bd
 2730 7276 436F7265 		.ascii	"CoreDebug_DEMCR_VC_CHKERR_Msk (1ul << CoreDebug_DEM"
 2730      44656275 
 2730      675F4445 
 2730      4D43525F 
 2730      56435F43 
ARM GAS  /tmp/cck0uY6y.s 			page 108


 2731 72a9 43525F56 		.ascii	"CR_VC_CHKERR_Pos)\000"
 2731      435F4348 
 2731      4B455252 
 2731      5F506F73 
 2731      2900
 2732 72bb 01       		.byte	0x1
 2733 72bc BF05     		.uleb128 0x2bf
 2734 72be 436F7265 		.ascii	"CoreDebug_DEMCR_VC_NOCPERR_Pos 5\000"
 2734      44656275 
 2734      675F4445 
 2734      4D43525F 
 2734      56435F4E 
 2735 72df 01       		.byte	0x1
 2736 72e0 C005     		.uleb128 0x2c0
 2737 72e2 436F7265 		.ascii	"CoreDebug_DEMCR_VC_NOCPERR_Msk (1ul << CoreDebug_DE"
 2737      44656275 
 2737      675F4445 
 2737      4D43525F 
 2737      56435F4E 
 2738 7315 4D43525F 		.ascii	"MCR_VC_NOCPERR_Pos)\000"
 2738      56435F4E 
 2738      4F435045 
 2738      52525F50 
 2738      6F732900 
 2739 7329 01       		.byte	0x1
 2740 732a C205     		.uleb128 0x2c2
 2741 732c 436F7265 		.ascii	"CoreDebug_DEMCR_VC_MMERR_Pos 4\000"
 2741      44656275 
 2741      675F4445 
 2741      4D43525F 
 2741      56435F4D 
 2742 734b 01       		.byte	0x1
 2743 734c C305     		.uleb128 0x2c3
 2744 734e 436F7265 		.ascii	"CoreDebug_DEMCR_VC_MMERR_Msk (1ul << CoreDebug_DEMC"
 2744      44656275 
 2744      675F4445 
 2744      4D43525F 
 2744      56435F4D 
 2745 7381 525F5643 		.ascii	"R_VC_MMERR_Pos)\000"
 2745      5F4D4D45 
 2745      52525F50 
 2745      6F732900 
 2746 7391 01       		.byte	0x1
 2747 7392 C505     		.uleb128 0x2c5
 2748 7394 436F7265 		.ascii	"CoreDebug_DEMCR_VC_CORERESET_Pos 0\000"
 2748      44656275 
 2748      675F4445 
 2748      4D43525F 
 2748      56435F43 
 2749 73b7 01       		.byte	0x1
 2750 73b8 C605     		.uleb128 0x2c6
 2751 73ba 436F7265 		.ascii	"CoreDebug_DEMCR_VC_CORERESET_Msk (1ul << CoreDebug_"
 2751      44656275 
 2751      675F4445 
 2751      4D43525F 
 2751      56435F43 
 2752 73ed 44454D43 		.ascii	"DEMCR_VC_CORERESET_Pos)\000"
ARM GAS  /tmp/cck0uY6y.s 			page 109


 2752      525F5643 
 2752      5F434F52 
 2752      45524553 
 2752      45545F50 
 2753 7405 01       		.byte	0x1
 2754 7406 CB05     		.uleb128 0x2cb
 2755 7408 5343535F 		.ascii	"SCS_BASE (0xE000E000)\000"
 2755      42415345 
 2755      20283078 
 2755      45303030 
 2755      45303030 
 2756 741e 01       		.byte	0x1
 2757 741f CC05     		.uleb128 0x2cc
 2758 7421 49544D5F 		.ascii	"ITM_BASE (0xE0000000)\000"
 2758      42415345 
 2758      20283078 
 2758      45303030 
 2758      30303030 
 2759 7437 01       		.byte	0x1
 2760 7438 CD05     		.uleb128 0x2cd
 2761 743a 436F7265 		.ascii	"CoreDebug_BASE (0xE000EDF0)\000"
 2761      44656275 
 2761      675F4241 
 2761      53452028 
 2761      30784530 
 2762 7456 01       		.byte	0x1
 2763 7457 CE05     		.uleb128 0x2ce
 2764 7459 53797354 		.ascii	"SysTick_BASE (SCS_BASE + 0x0010)\000"
 2764      69636B5F 
 2764      42415345 
 2764      20285343 
 2764      535F4241 
 2765 747a 01       		.byte	0x1
 2766 747b CF05     		.uleb128 0x2cf
 2767 747d 4E564943 		.ascii	"NVIC_BASE (SCS_BASE + 0x0100)\000"
 2767      5F424153 
 2767      45202853 
 2767      43535F42 
 2767      41534520 
 2768 749b 01       		.byte	0x1
 2769 749c D005     		.uleb128 0x2d0
 2770 749e 5343425F 		.ascii	"SCB_BASE (SCS_BASE + 0x0D00)\000"
 2770      42415345 
 2770      20285343 
 2770      535F4241 
 2770      5345202B 
 2771 74bb 01       		.byte	0x1
 2772 74bc D205     		.uleb128 0x2d2
 2773 74be 496E7465 		.ascii	"InterruptType ((InterruptType_Type *) SCS_BASE)\000"
 2773      72727570 
 2773      74547970 
 2773      65202828 
 2773      496E7465 
 2774 74ee 01       		.byte	0x1
 2775 74ef D305     		.uleb128 0x2d3
 2776 74f1 53434220 		.ascii	"SCB ((SCB_Type *) SCB_BASE)\000"
 2776      28285343 
ARM GAS  /tmp/cck0uY6y.s 			page 110


 2776      425F5479 
 2776      7065202A 
 2776      29205343 
 2777 750d 01       		.byte	0x1
 2778 750e D405     		.uleb128 0x2d4
 2779 7510 53797354 		.ascii	"SysTick ((SysTick_Type *) SysTick_BASE)\000"
 2779      69636B20 
 2779      28285379 
 2779      73546963 
 2779      6B5F5479 
 2780 7538 01       		.byte	0x1
 2781 7539 D505     		.uleb128 0x2d5
 2782 753b 4E564943 		.ascii	"NVIC ((NVIC_Type *) NVIC_BASE)\000"
 2782      2028284E 
 2782      5649435F 
 2782      54797065 
 2782      202A2920 
 2783 755a 01       		.byte	0x1
 2784 755b D605     		.uleb128 0x2d6
 2785 755d 49544D20 		.ascii	"ITM ((ITM_Type *) ITM_BASE)\000"
 2785      28284954 
 2785      4D5F5479 
 2785      7065202A 
 2785      29204954 
 2786 7579 01       		.byte	0x1
 2787 757a D705     		.uleb128 0x2d7
 2788 757c 436F7265 		.ascii	"CoreDebug ((CoreDebug_Type *) CoreDebug_BASE)\000"
 2788      44656275 
 2788      67202828 
 2788      436F7265 
 2788      44656275 
 2789 75aa 01       		.byte	0x1
 2790 75ab DA05     		.uleb128 0x2da
 2791 75ad 4D50555F 		.ascii	"MPU_BASE (SCS_BASE + 0x0D90)\000"
 2791      42415345 
 2791      20285343 
 2791      535F4241 
 2791      5345202B 
 2792 75ca 01       		.byte	0x1
 2793 75cb DB05     		.uleb128 0x2db
 2794 75cd 4D505520 		.ascii	"MPU ((MPU_Type*) MPU_BASE)\000"
 2794      28284D50 
 2794      555F5479 
 2794      70652A29 
 2794      204D5055 
 2795 75e8 01       		.byte	0x1
 2796 75e9 EE05     		.uleb128 0x2ee
 2797 75eb 5F5F4153 		.ascii	"__ASM __asm\000"
 2797      4D205F5F 
 2797      61736D00 
 2798 75f7 01       		.byte	0x1
 2799 75f8 EF05     		.uleb128 0x2ef
 2800 75fa 5F5F494E 		.ascii	"__INLINE inline\000"
 2800      4C494E45 
 2800      20696E6C 
 2800      696E6500 
 2801 760a 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 111


 2802 760b CF0D     		.uleb128 0x6cf
 2803 760d 49544D5F 		.ascii	"ITM_RXBUFFER_EMPTY 0x5AA55AA5\000"
 2803      52584255 
 2803      46464552 
 2803      5F454D50 
 2803      54592030 
 2804 762b 04       		.byte	0x4
 2805              		.file 30 "../../libs/CMSIS/CM3/DeviceSupport/NXP/LPC17xx/system_LPC17xx.h"
 2806 762c 03       		.byte	0x3
 2807 762d 61       		.uleb128 0x61
 2808 762e 1E       		.uleb128 0x1e
 2809 762f 01       		.byte	0x1
 2810 7630 1B       		.uleb128 0x1b
 2811 7631 5F5F5359 		.ascii	"__SYSTEM_LPC17xx_H \000"
 2811      5354454D 
 2811      5F4C5043 
 2811      31377878 
 2811      5F482000 
 2812 7645 04       		.byte	0x4
 2813 7646 01       		.byte	0x1
 2814 7647 9107     		.uleb128 0x391
 2815 7649 4C50435F 		.ascii	"LPC_FLASH_BASE (0x00000000UL)\000"
 2815      464C4153 
 2815      485F4241 
 2815      53452028 
 2815      30783030 
 2816 7667 01       		.byte	0x1
 2817 7668 9207     		.uleb128 0x392
 2818 766a 4C50435F 		.ascii	"LPC_RAM_BASE (0x10000000UL)\000"
 2818      52414D5F 
 2818      42415345 
 2818      20283078 
 2818      31303030 
 2819 7686 01       		.byte	0x1
 2820 7687 9307     		.uleb128 0x393
 2821 7689 4C50435F 		.ascii	"LPC_GPIO_BASE (0x2009C000UL)\000"
 2821      4750494F 
 2821      5F424153 
 2821      45202830 
 2821      78323030 
 2822 76a6 01       		.byte	0x1
 2823 76a7 9407     		.uleb128 0x394
 2824 76a9 4C50435F 		.ascii	"LPC_APB0_BASE (0x40000000UL)\000"
 2824      41504230 
 2824      5F424153 
 2824      45202830 
 2824      78343030 
 2825 76c6 01       		.byte	0x1
 2826 76c7 9507     		.uleb128 0x395
 2827 76c9 4C50435F 		.ascii	"LPC_APB1_BASE (0x40080000UL)\000"
 2827      41504231 
 2827      5F424153 
 2827      45202830 
 2827      78343030 
 2828 76e6 01       		.byte	0x1
 2829 76e7 9607     		.uleb128 0x396
 2830 76e9 4C50435F 		.ascii	"LPC_AHB_BASE (0x50000000UL)\000"
ARM GAS  /tmp/cck0uY6y.s 			page 112


 2830      4148425F 
 2830      42415345 
 2830      20283078 
 2830      35303030 
 2831 7705 01       		.byte	0x1
 2832 7706 9707     		.uleb128 0x397
 2833 7708 4C50435F 		.ascii	"LPC_CM3_BASE (0xE0000000UL)\000"
 2833      434D335F 
 2833      42415345 
 2833      20283078 
 2833      45303030 
 2834 7724 01       		.byte	0x1
 2835 7725 9A07     		.uleb128 0x39a
 2836 7727 4C50435F 		.ascii	"LPC_WDT_BASE (LPC_APB0_BASE + 0x00000)\000"
 2836      5744545F 
 2836      42415345 
 2836      20284C50 
 2836      435F4150 
 2837 774e 01       		.byte	0x1
 2838 774f 9B07     		.uleb128 0x39b
 2839 7751 4C50435F 		.ascii	"LPC_TIM0_BASE (LPC_APB0_BASE + 0x04000)\000"
 2839      54494D30 
 2839      5F424153 
 2839      4520284C 
 2839      50435F41 
 2840 7779 01       		.byte	0x1
 2841 777a 9C07     		.uleb128 0x39c
 2842 777c 4C50435F 		.ascii	"LPC_TIM1_BASE (LPC_APB0_BASE + 0x08000)\000"
 2842      54494D31 
 2842      5F424153 
 2842      4520284C 
 2842      50435F41 
 2843 77a4 01       		.byte	0x1
 2844 77a5 9D07     		.uleb128 0x39d
 2845 77a7 4C50435F 		.ascii	"LPC_UART0_BASE (LPC_APB0_BASE + 0x0C000)\000"
 2845      55415254 
 2845      305F4241 
 2845      53452028 
 2845      4C50435F 
 2846 77d0 01       		.byte	0x1
 2847 77d1 9E07     		.uleb128 0x39e
 2848 77d3 4C50435F 		.ascii	"LPC_UART1_BASE (LPC_APB0_BASE + 0x10000)\000"
 2848      55415254 
 2848      315F4241 
 2848      53452028 
 2848      4C50435F 
 2849 77fc 01       		.byte	0x1
 2850 77fd 9F07     		.uleb128 0x39f
 2851 77ff 4C50435F 		.ascii	"LPC_PWM1_BASE (LPC_APB0_BASE + 0x18000)\000"
 2851      50574D31 
 2851      5F424153 
 2851      4520284C 
 2851      50435F41 
 2852 7827 01       		.byte	0x1
 2853 7828 A007     		.uleb128 0x3a0
 2854 782a 4C50435F 		.ascii	"LPC_I2C0_BASE (LPC_APB0_BASE + 0x1C000)\000"
 2854      49324330 
ARM GAS  /tmp/cck0uY6y.s 			page 113


 2854      5F424153 
 2854      4520284C 
 2854      50435F41 
 2855 7852 01       		.byte	0x1
 2856 7853 A107     		.uleb128 0x3a1
 2857 7855 4C50435F 		.ascii	"LPC_SPI_BASE (LPC_APB0_BASE + 0x20000)\000"
 2857      5350495F 
 2857      42415345 
 2857      20284C50 
 2857      435F4150 
 2858 787c 01       		.byte	0x1
 2859 787d A207     		.uleb128 0x3a2
 2860 787f 4C50435F 		.ascii	"LPC_RTC_BASE (LPC_APB0_BASE + 0x24000)\000"
 2860      5254435F 
 2860      42415345 
 2860      20284C50 
 2860      435F4150 
 2861 78a6 01       		.byte	0x1
 2862 78a7 A307     		.uleb128 0x3a3
 2863 78a9 4C50435F 		.ascii	"LPC_GPIOINT_BASE (LPC_APB0_BASE + 0x28080)\000"
 2863      4750494F 
 2863      494E545F 
 2863      42415345 
 2863      20284C50 
 2864 78d4 01       		.byte	0x1
 2865 78d5 A407     		.uleb128 0x3a4
 2866 78d7 4C50435F 		.ascii	"LPC_PINCON_BASE (LPC_APB0_BASE + 0x2C000)\000"
 2866      50494E43 
 2866      4F4E5F42 
 2866      41534520 
 2866      284C5043 
 2867 7901 01       		.byte	0x1
 2868 7902 A507     		.uleb128 0x3a5
 2869 7904 4C50435F 		.ascii	"LPC_SSP1_BASE (LPC_APB0_BASE + 0x30000)\000"
 2869      53535031 
 2869      5F424153 
 2869      4520284C 
 2869      50435F41 
 2870 792c 01       		.byte	0x1
 2871 792d A607     		.uleb128 0x3a6
 2872 792f 4C50435F 		.ascii	"LPC_ADC_BASE (LPC_APB0_BASE + 0x34000)\000"
 2872      4144435F 
 2872      42415345 
 2872      20284C50 
 2872      435F4150 
 2873 7956 01       		.byte	0x1
 2874 7957 A707     		.uleb128 0x3a7
 2875 7959 4C50435F 		.ascii	"LPC_CANAF_RAM_BASE (LPC_APB0_BASE + 0x38000)\000"
 2875      43414E41 
 2875      465F5241 
 2875      4D5F4241 
 2875      53452028 
 2876 7986 01       		.byte	0x1
 2877 7987 A807     		.uleb128 0x3a8
 2878 7989 4C50435F 		.ascii	"LPC_CANAF_BASE (LPC_APB0_BASE + 0x3C000)\000"
 2878      43414E41 
 2878      465F4241 
ARM GAS  /tmp/cck0uY6y.s 			page 114


 2878      53452028 
 2878      4C50435F 
 2879 79b2 01       		.byte	0x1
 2880 79b3 A907     		.uleb128 0x3a9
 2881 79b5 4C50435F 		.ascii	"LPC_CANCR_BASE (LPC_APB0_BASE + 0x40000)\000"
 2881      43414E43 
 2881      525F4241 
 2881      53452028 
 2881      4C50435F 
 2882 79de 01       		.byte	0x1
 2883 79df AA07     		.uleb128 0x3aa
 2884 79e1 4C50435F 		.ascii	"LPC_CAN1_BASE (LPC_APB0_BASE + 0x44000)\000"
 2884      43414E31 
 2884      5F424153 
 2884      4520284C 
 2884      50435F41 
 2885 7a09 01       		.byte	0x1
 2886 7a0a AB07     		.uleb128 0x3ab
 2887 7a0c 4C50435F 		.ascii	"LPC_CAN2_BASE (LPC_APB0_BASE + 0x48000)\000"
 2887      43414E32 
 2887      5F424153 
 2887      4520284C 
 2887      50435F41 
 2888 7a34 01       		.byte	0x1
 2889 7a35 AC07     		.uleb128 0x3ac
 2890 7a37 4C50435F 		.ascii	"LPC_I2C1_BASE (LPC_APB0_BASE + 0x5C000)\000"
 2890      49324331 
 2890      5F424153 
 2890      4520284C 
 2890      50435F41 
 2891 7a5f 01       		.byte	0x1
 2892 7a60 AF07     		.uleb128 0x3af
 2893 7a62 4C50435F 		.ascii	"LPC_SSP0_BASE (LPC_APB1_BASE + 0x08000)\000"
 2893      53535030 
 2893      5F424153 
 2893      4520284C 
 2893      50435F41 
 2894 7a8a 01       		.byte	0x1
 2895 7a8b B007     		.uleb128 0x3b0
 2896 7a8d 4C50435F 		.ascii	"LPC_DAC_BASE (LPC_APB1_BASE + 0x0C000)\000"
 2896      4441435F 
 2896      42415345 
 2896      20284C50 
 2896      435F4150 
 2897 7ab4 01       		.byte	0x1
 2898 7ab5 B107     		.uleb128 0x3b1
 2899 7ab7 4C50435F 		.ascii	"LPC_TIM2_BASE (LPC_APB1_BASE + 0x10000)\000"
 2899      54494D32 
 2899      5F424153 
 2899      4520284C 
 2899      50435F41 
 2900 7adf 01       		.byte	0x1
 2901 7ae0 B207     		.uleb128 0x3b2
 2902 7ae2 4C50435F 		.ascii	"LPC_TIM3_BASE (LPC_APB1_BASE + 0x14000)\000"
 2902      54494D33 
 2902      5F424153 
 2902      4520284C 
ARM GAS  /tmp/cck0uY6y.s 			page 115


 2902      50435F41 
 2903 7b0a 01       		.byte	0x1
 2904 7b0b B307     		.uleb128 0x3b3
 2905 7b0d 4C50435F 		.ascii	"LPC_UART2_BASE (LPC_APB1_BASE + 0x18000)\000"
 2905      55415254 
 2905      325F4241 
 2905      53452028 
 2905      4C50435F 
 2906 7b36 01       		.byte	0x1
 2907 7b37 B407     		.uleb128 0x3b4
 2908 7b39 4C50435F 		.ascii	"LPC_UART3_BASE (LPC_APB1_BASE + 0x1C000)\000"
 2908      55415254 
 2908      335F4241 
 2908      53452028 
 2908      4C50435F 
 2909 7b62 01       		.byte	0x1
 2910 7b63 B507     		.uleb128 0x3b5
 2911 7b65 4C50435F 		.ascii	"LPC_I2C2_BASE (LPC_APB1_BASE + 0x20000)\000"
 2911      49324332 
 2911      5F424153 
 2911      4520284C 
 2911      50435F41 
 2912 7b8d 01       		.byte	0x1
 2913 7b8e B607     		.uleb128 0x3b6
 2914 7b90 4C50435F 		.ascii	"LPC_I2S_BASE (LPC_APB1_BASE + 0x28000)\000"
 2914      4932535F 
 2914      42415345 
 2914      20284C50 
 2914      435F4150 
 2915 7bb7 01       		.byte	0x1
 2916 7bb8 B707     		.uleb128 0x3b7
 2917 7bba 4C50435F 		.ascii	"LPC_RIT_BASE (LPC_APB1_BASE + 0x30000)\000"
 2917      5249545F 
 2917      42415345 
 2917      20284C50 
 2917      435F4150 
 2918 7be1 01       		.byte	0x1
 2919 7be2 B807     		.uleb128 0x3b8
 2920 7be4 4C50435F 		.ascii	"LPC_MCPWM_BASE (LPC_APB1_BASE + 0x38000)\000"
 2920      4D435057 
 2920      4D5F4241 
 2920      53452028 
 2920      4C50435F 
 2921 7c0d 01       		.byte	0x1
 2922 7c0e B907     		.uleb128 0x3b9
 2923 7c10 4C50435F 		.ascii	"LPC_QEI_BASE (LPC_APB1_BASE + 0x3C000)\000"
 2923      5145495F 
 2923      42415345 
 2923      20284C50 
 2923      435F4150 
 2924 7c37 01       		.byte	0x1
 2925 7c38 BA07     		.uleb128 0x3ba
 2926 7c3a 4C50435F 		.ascii	"LPC_SC_BASE (LPC_APB1_BASE + 0x7C000)\000"
 2926      53435F42 
 2926      41534520 
 2926      284C5043 
 2926      5F415042 
ARM GAS  /tmp/cck0uY6y.s 			page 116


 2927 7c60 01       		.byte	0x1
 2928 7c61 BD07     		.uleb128 0x3bd
 2929 7c63 4C50435F 		.ascii	"LPC_EMAC_BASE (LPC_AHB_BASE + 0x00000)\000"
 2929      454D4143 
 2929      5F424153 
 2929      4520284C 
 2929      50435F41 
 2930 7c8a 01       		.byte	0x1
 2931 7c8b BE07     		.uleb128 0x3be
 2932 7c8d 4C50435F 		.ascii	"LPC_GPDMA_BASE (LPC_AHB_BASE + 0x04000)\000"
 2932      4750444D 
 2932      415F4241 
 2932      53452028 
 2932      4C50435F 
 2933 7cb5 01       		.byte	0x1
 2934 7cb6 BF07     		.uleb128 0x3bf
 2935 7cb8 4C50435F 		.ascii	"LPC_GPDMACH0_BASE (LPC_AHB_BASE + 0x04100)\000"
 2935      4750444D 
 2935      41434830 
 2935      5F424153 
 2935      4520284C 
 2936 7ce3 01       		.byte	0x1
 2937 7ce4 C007     		.uleb128 0x3c0
 2938 7ce6 4C50435F 		.ascii	"LPC_GPDMACH1_BASE (LPC_AHB_BASE + 0x04120)\000"
 2938      4750444D 
 2938      41434831 
 2938      5F424153 
 2938      4520284C 
 2939 7d11 01       		.byte	0x1
 2940 7d12 C107     		.uleb128 0x3c1
 2941 7d14 4C50435F 		.ascii	"LPC_GPDMACH2_BASE (LPC_AHB_BASE + 0x04140)\000"
 2941      4750444D 
 2941      41434832 
 2941      5F424153 
 2941      4520284C 
 2942 7d3f 01       		.byte	0x1
 2943 7d40 C207     		.uleb128 0x3c2
 2944 7d42 4C50435F 		.ascii	"LPC_GPDMACH3_BASE (LPC_AHB_BASE + 0x04160)\000"
 2944      4750444D 
 2944      41434833 
 2944      5F424153 
 2944      4520284C 
 2945 7d6d 01       		.byte	0x1
 2946 7d6e C307     		.uleb128 0x3c3
 2947 7d70 4C50435F 		.ascii	"LPC_GPDMACH4_BASE (LPC_AHB_BASE + 0x04180)\000"
 2947      4750444D 
 2947      41434834 
 2947      5F424153 
 2947      4520284C 
 2948 7d9b 01       		.byte	0x1
 2949 7d9c C407     		.uleb128 0x3c4
 2950 7d9e 4C50435F 		.ascii	"LPC_GPDMACH5_BASE (LPC_AHB_BASE + 0x041A0)\000"
 2950      4750444D 
 2950      41434835 
 2950      5F424153 
 2950      4520284C 
 2951 7dc9 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 117


 2952 7dca C507     		.uleb128 0x3c5
 2953 7dcc 4C50435F 		.ascii	"LPC_GPDMACH6_BASE (LPC_AHB_BASE + 0x041C0)\000"
 2953      4750444D 
 2953      41434836 
 2953      5F424153 
 2953      4520284C 
 2954 7df7 01       		.byte	0x1
 2955 7df8 C607     		.uleb128 0x3c6
 2956 7dfa 4C50435F 		.ascii	"LPC_GPDMACH7_BASE (LPC_AHB_BASE + 0x041E0)\000"
 2956      4750444D 
 2956      41434837 
 2956      5F424153 
 2956      4520284C 
 2957 7e25 01       		.byte	0x1
 2958 7e26 C707     		.uleb128 0x3c7
 2959 7e28 4C50435F 		.ascii	"LPC_USB_BASE (LPC_AHB_BASE + 0x0C000)\000"
 2959      5553425F 
 2959      42415345 
 2959      20284C50 
 2959      435F4148 
 2960 7e4e 01       		.byte	0x1
 2961 7e4f CA07     		.uleb128 0x3ca
 2962 7e51 4C50435F 		.ascii	"LPC_GPIO0_BASE (LPC_GPIO_BASE + 0x00000)\000"
 2962      4750494F 
 2962      305F4241 
 2962      53452028 
 2962      4C50435F 
 2963 7e7a 01       		.byte	0x1
 2964 7e7b CB07     		.uleb128 0x3cb
 2965 7e7d 4C50435F 		.ascii	"LPC_GPIO1_BASE (LPC_GPIO_BASE + 0x00020)\000"
 2965      4750494F 
 2965      315F4241 
 2965      53452028 
 2965      4C50435F 
 2966 7ea6 01       		.byte	0x1
 2967 7ea7 CC07     		.uleb128 0x3cc
 2968 7ea9 4C50435F 		.ascii	"LPC_GPIO2_BASE (LPC_GPIO_BASE + 0x00040)\000"
 2968      4750494F 
 2968      325F4241 
 2968      53452028 
 2968      4C50435F 
 2969 7ed2 01       		.byte	0x1
 2970 7ed3 CD07     		.uleb128 0x3cd
 2971 7ed5 4C50435F 		.ascii	"LPC_GPIO3_BASE (LPC_GPIO_BASE + 0x00060)\000"
 2971      4750494F 
 2971      335F4241 
 2971      53452028 
 2971      4C50435F 
 2972 7efe 01       		.byte	0x1
 2973 7eff CE07     		.uleb128 0x3ce
 2974 7f01 4C50435F 		.ascii	"LPC_GPIO4_BASE (LPC_GPIO_BASE + 0x00080)\000"
 2974      4750494F 
 2974      345F4241 
 2974      53452028 
 2974      4C50435F 
 2975 7f2a 01       		.byte	0x1
 2976 7f2b D407     		.uleb128 0x3d4
ARM GAS  /tmp/cck0uY6y.s 			page 118


 2977 7f2d 4C50435F 		.ascii	"LPC_SC ((LPC_SC_TypeDef *) LPC_SC_BASE )\000"
 2977      53432028 
 2977      284C5043 
 2977      5F53435F 
 2977      54797065 
 2978 7f56 01       		.byte	0x1
 2979 7f57 D507     		.uleb128 0x3d5
 2980 7f59 4C50435F 		.ascii	"LPC_GPIO0 ((LPC_GPIO_TypeDef *) LPC_GPIO0_BASE )\000"
 2980      4750494F 
 2980      30202828 
 2980      4C50435F 
 2980      4750494F 
 2981 7f8a 01       		.byte	0x1
 2982 7f8b D607     		.uleb128 0x3d6
 2983 7f8d 4C50435F 		.ascii	"LPC_GPIO1 ((LPC_GPIO_TypeDef *) LPC_GPIO1_BASE )\000"
 2983      4750494F 
 2983      31202828 
 2983      4C50435F 
 2983      4750494F 
 2984 7fbe 01       		.byte	0x1
 2985 7fbf D707     		.uleb128 0x3d7
 2986 7fc1 4C50435F 		.ascii	"LPC_GPIO2 ((LPC_GPIO_TypeDef *) LPC_GPIO2_BASE )\000"
 2986      4750494F 
 2986      32202828 
 2986      4C50435F 
 2986      4750494F 
 2987 7ff2 01       		.byte	0x1
 2988 7ff3 D807     		.uleb128 0x3d8
 2989 7ff5 4C50435F 		.ascii	"LPC_GPIO3 ((LPC_GPIO_TypeDef *) LPC_GPIO3_BASE )\000"
 2989      4750494F 
 2989      33202828 
 2989      4C50435F 
 2989      4750494F 
 2990 8026 01       		.byte	0x1
 2991 8027 D907     		.uleb128 0x3d9
 2992 8029 4C50435F 		.ascii	"LPC_GPIO4 ((LPC_GPIO_TypeDef *) LPC_GPIO4_BASE )\000"
 2992      4750494F 
 2992      34202828 
 2992      4C50435F 
 2992      4750494F 
 2993 805a 01       		.byte	0x1
 2994 805b DA07     		.uleb128 0x3da
 2995 805d 4C50435F 		.ascii	"LPC_WDT ((LPC_WDT_TypeDef *) LPC_WDT_BASE )\000"
 2995      57445420 
 2995      28284C50 
 2995      435F5744 
 2995      545F5479 
 2996 8089 01       		.byte	0x1
 2997 808a DB07     		.uleb128 0x3db
 2998 808c 4C50435F 		.ascii	"LPC_TIM0 ((LPC_TIM_TypeDef *) LPC_TIM0_BASE )\000"
 2998      54494D30 
 2998      2028284C 
 2998      50435F54 
 2998      494D5F54 
 2999 80ba 01       		.byte	0x1
 3000 80bb DC07     		.uleb128 0x3dc
 3001 80bd 4C50435F 		.ascii	"LPC_TIM1 ((LPC_TIM_TypeDef *) LPC_TIM1_BASE )\000"
ARM GAS  /tmp/cck0uY6y.s 			page 119


 3001      54494D31 
 3001      2028284C 
 3001      50435F54 
 3001      494D5F54 
 3002 80eb 01       		.byte	0x1
 3003 80ec DD07     		.uleb128 0x3dd
 3004 80ee 4C50435F 		.ascii	"LPC_TIM2 ((LPC_TIM_TypeDef *) LPC_TIM2_BASE )\000"
 3004      54494D32 
 3004      2028284C 
 3004      50435F54 
 3004      494D5F54 
 3005 811c 01       		.byte	0x1
 3006 811d DE07     		.uleb128 0x3de
 3007 811f 4C50435F 		.ascii	"LPC_TIM3 ((LPC_TIM_TypeDef *) LPC_TIM3_BASE )\000"
 3007      54494D33 
 3007      2028284C 
 3007      50435F54 
 3007      494D5F54 
 3008 814d 01       		.byte	0x1
 3009 814e DF07     		.uleb128 0x3df
 3010 8150 4C50435F 		.ascii	"LPC_RIT ((LPC_RIT_TypeDef *) LPC_RIT_BASE )\000"
 3010      52495420 
 3010      28284C50 
 3010      435F5249 
 3010      545F5479 
 3011 817c 01       		.byte	0x1
 3012 817d E007     		.uleb128 0x3e0
 3013 817f 4C50435F 		.ascii	"LPC_UART0 ((LPC_UART0_TypeDef *) LPC_UART0_BASE )\000"
 3013      55415254 
 3013      30202828 
 3013      4C50435F 
 3013      55415254 
 3014 81b1 01       		.byte	0x1
 3015 81b2 E107     		.uleb128 0x3e1
 3016 81b4 4C50435F 		.ascii	"LPC_UART1 ((LPC_UART1_TypeDef *) LPC_UART1_BASE )\000"
 3016      55415254 
 3016      31202828 
 3016      4C50435F 
 3016      55415254 
 3017 81e6 01       		.byte	0x1
 3018 81e7 E207     		.uleb128 0x3e2
 3019 81e9 4C50435F 		.ascii	"LPC_UART2 ((LPC_UART_TypeDef *) LPC_UART2_BASE )\000"
 3019      55415254 
 3019      32202828 
 3019      4C50435F 
 3019      55415254 
 3020 821a 01       		.byte	0x1
 3021 821b E307     		.uleb128 0x3e3
 3022 821d 4C50435F 		.ascii	"LPC_UART3 ((LPC_UART_TypeDef *) LPC_UART3_BASE )\000"
 3022      55415254 
 3022      33202828 
 3022      4C50435F 
 3022      55415254 
 3023 824e 01       		.byte	0x1
 3024 824f E407     		.uleb128 0x3e4
 3025 8251 4C50435F 		.ascii	"LPC_PWM1 ((LPC_PWM_TypeDef *) LPC_PWM1_BASE )\000"
 3025      50574D31 
ARM GAS  /tmp/cck0uY6y.s 			page 120


 3025      2028284C 
 3025      50435F50 
 3025      574D5F54 
 3026 827f 01       		.byte	0x1
 3027 8280 E507     		.uleb128 0x3e5
 3028 8282 4C50435F 		.ascii	"LPC_I2C0 ((LPC_I2C_TypeDef *) LPC_I2C0_BASE )\000"
 3028      49324330 
 3028      2028284C 
 3028      50435F49 
 3028      32435F54 
 3029 82b0 01       		.byte	0x1
 3030 82b1 E607     		.uleb128 0x3e6
 3031 82b3 4C50435F 		.ascii	"LPC_I2C1 ((LPC_I2C_TypeDef *) LPC_I2C1_BASE )\000"
 3031      49324331 
 3031      2028284C 
 3031      50435F49 
 3031      32435F54 
 3032 82e1 01       		.byte	0x1
 3033 82e2 E707     		.uleb128 0x3e7
 3034 82e4 4C50435F 		.ascii	"LPC_I2C2 ((LPC_I2C_TypeDef *) LPC_I2C2_BASE )\000"
 3034      49324332 
 3034      2028284C 
 3034      50435F49 
 3034      32435F54 
 3035 8312 01       		.byte	0x1
 3036 8313 E807     		.uleb128 0x3e8
 3037 8315 4C50435F 		.ascii	"LPC_I2S ((LPC_I2S_TypeDef *) LPC_I2S_BASE )\000"
 3037      49325320 
 3037      28284C50 
 3037      435F4932 
 3037      535F5479 
 3038 8341 01       		.byte	0x1
 3039 8342 E907     		.uleb128 0x3e9
 3040 8344 4C50435F 		.ascii	"LPC_SPI ((LPC_SPI_TypeDef *) LPC_SPI_BASE )\000"
 3040      53504920 
 3040      28284C50 
 3040      435F5350 
 3040      495F5479 
 3041 8370 01       		.byte	0x1
 3042 8371 EA07     		.uleb128 0x3ea
 3043 8373 4C50435F 		.ascii	"LPC_RTC ((LPC_RTC_TypeDef *) LPC_RTC_BASE )\000"
 3043      52544320 
 3043      28284C50 
 3043      435F5254 
 3043      435F5479 
 3044 839f 01       		.byte	0x1
 3045 83a0 EB07     		.uleb128 0x3eb
 3046 83a2 4C50435F 		.ascii	"LPC_GPIOINT ((LPC_GPIOINT_TypeDef *) LPC_GPIOINT_BA"
 3046      4750494F 
 3046      494E5420 
 3046      28284C50 
 3046      435F4750 
 3047 83d5 53452029 		.ascii	"SE )\000"
 3047      00
 3048 83da 01       		.byte	0x1
 3049 83db EC07     		.uleb128 0x3ec
 3050 83dd 4C50435F 		.ascii	"LPC_PINCON ((LPC_PINCON_TypeDef *) LPC_PINCON_BASE "
ARM GAS  /tmp/cck0uY6y.s 			page 121


 3050      50494E43 
 3050      4F4E2028 
 3050      284C5043 
 3050      5F50494E 
 3051 8410 2900     		.ascii	")\000"
 3052 8412 01       		.byte	0x1
 3053 8413 ED07     		.uleb128 0x3ed
 3054 8415 4C50435F 		.ascii	"LPC_SSP0 ((LPC_SSP_TypeDef *) LPC_SSP0_BASE )\000"
 3054      53535030 
 3054      2028284C 
 3054      50435F53 
 3054      53505F54 
 3055 8443 01       		.byte	0x1
 3056 8444 EE07     		.uleb128 0x3ee
 3057 8446 4C50435F 		.ascii	"LPC_SSP1 ((LPC_SSP_TypeDef *) LPC_SSP1_BASE )\000"
 3057      53535031 
 3057      2028284C 
 3057      50435F53 
 3057      53505F54 
 3058 8474 01       		.byte	0x1
 3059 8475 EF07     		.uleb128 0x3ef
 3060 8477 4C50435F 		.ascii	"LPC_ADC ((LPC_ADC_TypeDef *) LPC_ADC_BASE )\000"
 3060      41444320 
 3060      28284C50 
 3060      435F4144 
 3060      435F5479 
 3061 84a3 01       		.byte	0x1
 3062 84a4 F007     		.uleb128 0x3f0
 3063 84a6 4C50435F 		.ascii	"LPC_DAC ((LPC_DAC_TypeDef *) LPC_DAC_BASE )\000"
 3063      44414320 
 3063      28284C50 
 3063      435F4441 
 3063      435F5479 
 3064 84d2 01       		.byte	0x1
 3065 84d3 F107     		.uleb128 0x3f1
 3066 84d5 4C50435F 		.ascii	"LPC_CANAF_RAM ((LPC_CANAF_RAM_TypeDef *) LPC_CANAF_"
 3066      43414E41 
 3066      465F5241 
 3066      4D202828 
 3066      4C50435F 
 3067 8508 52414D5F 		.ascii	"RAM_BASE)\000"
 3067      42415345 
 3067      2900
 3068 8512 01       		.byte	0x1
 3069 8513 F207     		.uleb128 0x3f2
 3070 8515 4C50435F 		.ascii	"LPC_CANAF ((LPC_CANAF_TypeDef *) LPC_CANAF_BASE )\000"
 3070      43414E41 
 3070      46202828 
 3070      4C50435F 
 3070      43414E41 
 3071 8547 01       		.byte	0x1
 3072 8548 F307     		.uleb128 0x3f3
 3073 854a 4C50435F 		.ascii	"LPC_CANCR ((LPC_CANCR_TypeDef *) LPC_CANCR_BASE )\000"
 3073      43414E43 
 3073      52202828 
 3073      4C50435F 
 3073      43414E43 
ARM GAS  /tmp/cck0uY6y.s 			page 122


 3074 857c 01       		.byte	0x1
 3075 857d F407     		.uleb128 0x3f4
 3076 857f 4C50435F 		.ascii	"LPC_CAN1 ((LPC_CAN_TypeDef *) LPC_CAN1_BASE )\000"
 3076      43414E31 
 3076      2028284C 
 3076      50435F43 
 3076      414E5F54 
 3077 85ad 01       		.byte	0x1
 3078 85ae F507     		.uleb128 0x3f5
 3079 85b0 4C50435F 		.ascii	"LPC_CAN2 ((LPC_CAN_TypeDef *) LPC_CAN2_BASE )\000"
 3079      43414E32 
 3079      2028284C 
 3079      50435F43 
 3079      414E5F54 
 3080 85de 01       		.byte	0x1
 3081 85df F607     		.uleb128 0x3f6
 3082 85e1 4C50435F 		.ascii	"LPC_MCPWM ((LPC_MCPWM_TypeDef *) LPC_MCPWM_BASE )\000"
 3082      4D435057 
 3082      4D202828 
 3082      4C50435F 
 3082      4D435057 
 3083 8613 01       		.byte	0x1
 3084 8614 F707     		.uleb128 0x3f7
 3085 8616 4C50435F 		.ascii	"LPC_QEI ((LPC_QEI_TypeDef *) LPC_QEI_BASE )\000"
 3085      51454920 
 3085      28284C50 
 3085      435F5145 
 3085      495F5479 
 3086 8642 01       		.byte	0x1
 3087 8643 F807     		.uleb128 0x3f8
 3088 8645 4C50435F 		.ascii	"LPC_EMAC ((LPC_EMAC_TypeDef *) LPC_EMAC_BASE )\000"
 3088      454D4143 
 3088      2028284C 
 3088      50435F45 
 3088      4D41435F 
 3089 8674 01       		.byte	0x1
 3090 8675 F907     		.uleb128 0x3f9
 3091 8677 4C50435F 		.ascii	"LPC_GPDMA ((LPC_GPDMA_TypeDef *) LPC_GPDMA_BASE )\000"
 3091      4750444D 
 3091      41202828 
 3091      4C50435F 
 3091      4750444D 
 3092 86a9 01       		.byte	0x1
 3093 86aa FA07     		.uleb128 0x3fa
 3094 86ac 4C50435F 		.ascii	"LPC_GPDMACH0 ((LPC_GPDMACH_TypeDef *) LPC_GPDMACH0_"
 3094      4750444D 
 3094      41434830 
 3094      2028284C 
 3094      50435F47 
 3095 86df 42415345 		.ascii	"BASE )\000"
 3095      202900
 3096 86e6 01       		.byte	0x1
 3097 86e7 FB07     		.uleb128 0x3fb
 3098 86e9 4C50435F 		.ascii	"LPC_GPDMACH1 ((LPC_GPDMACH_TypeDef *) LPC_GPDMACH1_"
 3098      4750444D 
 3098      41434831 
 3098      2028284C 
ARM GAS  /tmp/cck0uY6y.s 			page 123


 3098      50435F47 
 3099 871c 42415345 		.ascii	"BASE )\000"
 3099      202900
 3100 8723 01       		.byte	0x1
 3101 8724 FC07     		.uleb128 0x3fc
 3102 8726 4C50435F 		.ascii	"LPC_GPDMACH2 ((LPC_GPDMACH_TypeDef *) LPC_GPDMACH2_"
 3102      4750444D 
 3102      41434832 
 3102      2028284C 
 3102      50435F47 
 3103 8759 42415345 		.ascii	"BASE )\000"
 3103      202900
 3104 8760 01       		.byte	0x1
 3105 8761 FD07     		.uleb128 0x3fd
 3106 8763 4C50435F 		.ascii	"LPC_GPDMACH3 ((LPC_GPDMACH_TypeDef *) LPC_GPDMACH3_"
 3106      4750444D 
 3106      41434833 
 3106      2028284C 
 3106      50435F47 
 3107 8796 42415345 		.ascii	"BASE )\000"
 3107      202900
 3108 879d 01       		.byte	0x1
 3109 879e FE07     		.uleb128 0x3fe
 3110 87a0 4C50435F 		.ascii	"LPC_GPDMACH4 ((LPC_GPDMACH_TypeDef *) LPC_GPDMACH4_"
 3110      4750444D 
 3110      41434834 
 3110      2028284C 
 3110      50435F47 
 3111 87d3 42415345 		.ascii	"BASE )\000"
 3111      202900
 3112 87da 01       		.byte	0x1
 3113 87db FF07     		.uleb128 0x3ff
 3114 87dd 4C50435F 		.ascii	"LPC_GPDMACH5 ((LPC_GPDMACH_TypeDef *) LPC_GPDMACH5_"
 3114      4750444D 
 3114      41434835 
 3114      2028284C 
 3114      50435F47 
 3115 8810 42415345 		.ascii	"BASE )\000"
 3115      202900
 3116 8817 01       		.byte	0x1
 3117 8818 8008     		.uleb128 0x400
 3118 881a 4C50435F 		.ascii	"LPC_GPDMACH6 ((LPC_GPDMACH_TypeDef *) LPC_GPDMACH6_"
 3118      4750444D 
 3118      41434836 
 3118      2028284C 
 3118      50435F47 
 3119 884d 42415345 		.ascii	"BASE )\000"
 3119      202900
 3120 8854 01       		.byte	0x1
 3121 8855 8108     		.uleb128 0x401
 3122 8857 4C50435F 		.ascii	"LPC_GPDMACH7 ((LPC_GPDMACH_TypeDef *) LPC_GPDMACH7_"
 3122      4750444D 
 3122      41434837 
 3122      2028284C 
 3122      50435F47 
 3123 888a 42415345 		.ascii	"BASE )\000"
 3123      202900
ARM GAS  /tmp/cck0uY6y.s 			page 124


 3124 8891 01       		.byte	0x1
 3125 8892 8208     		.uleb128 0x402
 3126 8894 4C50435F 		.ascii	"LPC_USB ((LPC_USB_TypeDef *) LPC_USB_BASE )\000"
 3126      55534220 
 3126      28284C50 
 3126      435F5553 
 3126      425F5479 
 3127 88c0 04       		.byte	0x4
 3128 88c1 01       		.byte	0x1
 3129 88c2 45       		.uleb128 0x45
 3130 88c3 636F6E66 		.ascii	"configUSE_PREEMPTION 1\000"
 3130      69675553 
 3130      455F5052 
 3130      45454D50 
 3130      54494F4E 
 3131 88da 01       		.byte	0x1
 3132 88db 46       		.uleb128 0x46
 3133 88dc 636F6E66 		.ascii	"configUSE_IDLE_HOOK 0\000"
 3133      69675553 
 3133      455F4944 
 3133      4C455F48 
 3133      4F4F4B20 
 3134 88f2 01       		.byte	0x1
 3135 88f3 47       		.uleb128 0x47
 3136 88f4 636F6E66 		.ascii	"configMAX_PRIORITIES ( ( unsigned portBASE_TYPE ) 5"
 3136      69674D41 
 3136      585F5052 
 3136      494F5249 
 3136      54494553 
 3137 8927 202900   		.ascii	" )\000"
 3138 892a 01       		.byte	0x1
 3139 892b 48       		.uleb128 0x48
 3140 892c 636F6E66 		.ascii	"configUSE_TICK_HOOK 1\000"
 3140      69675553 
 3140      455F5449 
 3140      434B5F48 
 3140      4F4F4B20 
 3141 8942 01       		.byte	0x1
 3142 8943 49       		.uleb128 0x49
 3143 8944 636F6E66 		.ascii	"configCPU_CLOCK_HZ ( ( unsigned long ) 99000000 )\000"
 3143      69674350 
 3143      555F434C 
 3143      4F434B5F 
 3143      485A2028 
 3144 8976 01       		.byte	0x1
 3145 8977 4A       		.uleb128 0x4a
 3146 8978 636F6E66 		.ascii	"configTICK_RATE_HZ ( ( portTickType ) 1000 )\000"
 3146      69675449 
 3146      434B5F52 
 3146      4154455F 
 3146      485A2028 
 3147 89a5 01       		.byte	0x1
 3148 89a6 4B       		.uleb128 0x4b
 3149 89a7 636F6E66 		.ascii	"configMINIMAL_STACK_SIZE ( ( unsigned short ) 80 )\000"
 3149      69674D49 
 3149      4E494D41 
 3149      4C5F5354 
ARM GAS  /tmp/cck0uY6y.s 			page 125


 3149      41434B5F 
 3150 89da 01       		.byte	0x1
 3151 89db 4C       		.uleb128 0x4c
 3152 89dc 636F6E66 		.ascii	"configTOTAL_HEAP_SIZE ( ( size_t ) ( 19 * 1024 ) )\000"
 3152      6967544F 
 3152      54414C5F 
 3152      48454150 
 3152      5F53495A 
 3153 8a0f 01       		.byte	0x1
 3154 8a10 4D       		.uleb128 0x4d
 3155 8a11 636F6E66 		.ascii	"configMAX_TASK_NAME_LEN ( 12 )\000"
 3155      69674D41 
 3155      585F5441 
 3155      534B5F4E 
 3155      414D455F 
 3156 8a30 01       		.byte	0x1
 3157 8a31 4E       		.uleb128 0x4e
 3158 8a32 636F6E66 		.ascii	"configUSE_TRACE_FACILITY 0\000"
 3158      69675553 
 3158      455F5452 
 3158      4143455F 
 3158      46414349 
 3159 8a4d 01       		.byte	0x1
 3160 8a4e 4F       		.uleb128 0x4f
 3161 8a4f 636F6E66 		.ascii	"configUSE_16_BIT_TICKS 0\000"
 3161      69675553 
 3161      455F3136 
 3161      5F424954 
 3161      5F544943 
 3162 8a68 01       		.byte	0x1
 3163 8a69 50       		.uleb128 0x50
 3164 8a6a 636F6E66 		.ascii	"configIDLE_SHOULD_YIELD 0\000"
 3164      69674944 
 3164      4C455F53 
 3164      484F554C 
 3164      445F5949 
 3165 8a84 01       		.byte	0x1
 3166 8a85 51       		.uleb128 0x51
 3167 8a86 636F6E66 		.ascii	"configUSE_CO_ROUTINES 0\000"
 3167      69675553 
 3167      455F434F 
 3167      5F524F55 
 3167      54494E45 
 3168 8a9e 01       		.byte	0x1
 3169 8a9f 52       		.uleb128 0x52
 3170 8aa0 636F6E66 		.ascii	"configUSE_MUTEXES 0\000"
 3170      69675553 
 3170      455F4D55 
 3170      54455845 
 3170      53203000 
 3171 8ab4 01       		.byte	0x1
 3172 8ab5 54       		.uleb128 0x54
 3173 8ab6 636F6E66 		.ascii	"configMAX_CO_ROUTINE_PRIORITIES ( 2 )\000"
 3173      69674D41 
 3173      585F434F 
 3173      5F524F55 
 3173      54494E45 
ARM GAS  /tmp/cck0uY6y.s 			page 126


 3174 8adc 01       		.byte	0x1
 3175 8add 56       		.uleb128 0x56
 3176 8ade 636F6E66 		.ascii	"configUSE_COUNTING_SEMAPHORES 0\000"
 3176      69675553 
 3176      455F434F 
 3176      554E5449 
 3176      4E475F53 
 3177 8afe 01       		.byte	0x1
 3178 8aff 57       		.uleb128 0x57
 3179 8b00 636F6E66 		.ascii	"configUSE_ALTERNATIVE_API 0\000"
 3179      69675553 
 3179      455F414C 
 3179      5445524E 
 3179      41544956 
 3180 8b1c 01       		.byte	0x1
 3181 8b1d 58       		.uleb128 0x58
 3182 8b1e 636F6E66 		.ascii	"configCHECK_FOR_STACK_OVERFLOW 0\000"
 3182      69674348 
 3182      45434B5F 
 3182      464F525F 
 3182      53544143 
 3183 8b3f 01       		.byte	0x1
 3184 8b40 59       		.uleb128 0x59
 3185 8b41 636F6E66 		.ascii	"configUSE_RECURSIVE_MUTEXES 0\000"
 3185      69675553 
 3185      455F5245 
 3185      43555253 
 3185      4956455F 
 3186 8b5f 01       		.byte	0x1
 3187 8b60 5A       		.uleb128 0x5a
 3188 8b61 636F6E66 		.ascii	"configQUEUE_REGISTRY_SIZE 10\000"
 3188      69675155 
 3188      4555455F 
 3188      52454749 
 3188      53545259 
 3189 8b7e 01       		.byte	0x1
 3190 8b7f 5B       		.uleb128 0x5b
 3191 8b80 636F6E66 		.ascii	"configGENERATE_RUN_TIME_STATS 0\000"
 3191      69674745 
 3191      4E455241 
 3191      54455F52 
 3191      554E5F54 
 3192 8ba0 01       		.byte	0x1
 3193 8ba1 60       		.uleb128 0x60
 3194 8ba2 494E434C 		.ascii	"INCLUDE_vTaskPrioritySet 1\000"
 3194      5544455F 
 3194      76546173 
 3194      6B507269 
 3194      6F726974 
 3195 8bbd 01       		.byte	0x1
 3196 8bbe 61       		.uleb128 0x61
 3197 8bbf 494E434C 		.ascii	"INCLUDE_uxTaskPriorityGet 0\000"
 3197      5544455F 
 3197      75785461 
 3197      736B5072 
 3197      696F7269 
 3198 8bdb 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 127


 3199 8bdc 62       		.uleb128 0x62
 3200 8bdd 494E434C 		.ascii	"INCLUDE_vTaskDelete 0\000"
 3200      5544455F 
 3200      76546173 
 3200      6B44656C 
 3200      65746520 
 3201 8bf3 01       		.byte	0x1
 3202 8bf4 63       		.uleb128 0x63
 3203 8bf5 494E434C 		.ascii	"INCLUDE_vTaskCleanUpResources 0\000"
 3203      5544455F 
 3203      76546173 
 3203      6B436C65 
 3203      616E5570 
 3204 8c15 01       		.byte	0x1
 3205 8c16 64       		.uleb128 0x64
 3206 8c17 494E434C 		.ascii	"INCLUDE_vTaskSuspend 1\000"
 3206      5544455F 
 3206      76546173 
 3206      6B537573 
 3206      70656E64 
 3207 8c2e 01       		.byte	0x1
 3208 8c2f 65       		.uleb128 0x65
 3209 8c30 494E434C 		.ascii	"INCLUDE_vTaskDelayUntil 1\000"
 3209      5544455F 
 3209      76546173 
 3209      6B44656C 
 3209      6179556E 
 3210 8c4a 01       		.byte	0x1
 3211 8c4b 66       		.uleb128 0x66
 3212 8c4c 494E434C 		.ascii	"INCLUDE_vTaskDelay 1\000"
 3212      5544455F 
 3212      76546173 
 3212      6B44656C 
 3212      61792031 
 3213 8c61 01       		.byte	0x1
 3214 8c62 67       		.uleb128 0x67
 3215 8c63 494E434C 		.ascii	"INCLUDE_uxTaskGetStackHighWaterMark 0\000"
 3215      5544455F 
 3215      75785461 
 3215      736B4765 
 3215      74537461 
 3216 8c89 01       		.byte	0x1
 3217 8c8a 6F       		.uleb128 0x6f
 3218 8c8b 636F6E66 		.ascii	"configPRIO_BITS __NVIC_PRIO_BITS\000"
 3218      69675052 
 3218      494F5F42 
 3218      49545320 
 3218      5F5F4E56 
 3219 8cac 01       		.byte	0x1
 3220 8cad 75       		.uleb128 0x75
 3221 8cae 636F6E66 		.ascii	"configKERNEL_INTERRUPT_PRIORITY ( 31 << (8 - config"
 3221      69674B45 
 3221      524E454C 
 3221      5F494E54 
 3221      45525255 
 3222 8ce1 5052494F 		.ascii	"PRIO_BITS) )\000"
 3222      5F424954 
ARM GAS  /tmp/cck0uY6y.s 			page 128


 3222      53292029 
 3222      00
 3223 8cee 01       		.byte	0x1
 3224 8cef 77       		.uleb128 0x77
 3225 8cf0 636F6E66 		.ascii	"configMAX_SYSCALL_INTERRUPT_PRIORITY ( 5 << (8 - co"
 3225      69674D41 
 3225      585F5359 
 3225      5343414C 
 3225      4C5F494E 
 3226 8d23 6E666967 		.ascii	"nfigPRIO_BITS) )\000"
 3226      5052494F 
 3226      5F424954 
 3226      53292029 
 3226      00
 3227 8d34 01       		.byte	0x1
 3228 8d35 7E       		.uleb128 0x7e
 3229 8d36 706F7274 		.ascii	"portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() vConfigure"
 3229      434F4E46 
 3229      49475552 
 3229      455F5449 
 3229      4D45525F 
 3230 8d69 54696D65 		.ascii	"TimerForRunTimeStats()\000"
 3230      72466F72 
 3230      52756E54 
 3230      696D6553 
 3230      74617473 
 3231 8d80 01       		.byte	0x1
 3232 8d81 7F       		.uleb128 0x7f
 3233 8d82 706F7274 		.ascii	"portGET_RUN_TIME_COUNTER_VALUE() LPC_TIM0->TC\000"
 3233      4745545F 
 3233      52554E5F 
 3233      54494D45 
 3233      5F434F55 
 3234 8db0 04       		.byte	0x4
 3235              		.file 31 "./FreeRTOS/include/portable.h"
 3236 8db1 03       		.byte	0x3
 3237 8db2 46       		.uleb128 0x46
 3238 8db3 1F       		.uleb128 0x1f
 3239 8db4 01       		.byte	0x1
 3240 8db5 3B       		.uleb128 0x3b
 3241 8db6 504F5254 		.ascii	"PORTABLE_H \000"
 3241      41424C45 
 3241      5F482000 
 3242              		.file 32 "./FreeRTOS/portable/GCC/ARM_CM3/portmacro.h"
 3243 8dc2 03       		.byte	0x3
 3244 8dc3 B302     		.uleb128 0x133
 3245 8dc5 20       		.uleb128 0x20
 3246 8dc6 01       		.byte	0x1
 3247 8dc7 38       		.uleb128 0x38
 3248 8dc8 504F5254 		.ascii	"PORTMACRO_H \000"
 3248      4D414352 
 3248      4F5F4820 
 3248      00
 3249 8dd5 01       		.byte	0x1
 3250 8dd6 49       		.uleb128 0x49
 3251 8dd7 706F7274 		.ascii	"portCHAR char\000"
 3251      43484152 
ARM GAS  /tmp/cck0uY6y.s 			page 129


 3251      20636861 
 3251      7200
 3252 8de5 01       		.byte	0x1
 3253 8de6 4A       		.uleb128 0x4a
 3254 8de7 706F7274 		.ascii	"portFLOAT float\000"
 3254      464C4F41 
 3254      5420666C 
 3254      6F617400 
 3255 8df7 01       		.byte	0x1
 3256 8df8 4B       		.uleb128 0x4b
 3257 8df9 706F7274 		.ascii	"portDOUBLE double\000"
 3257      444F5542 
 3257      4C452064 
 3257      6F75626C 
 3257      6500
 3258 8e0b 01       		.byte	0x1
 3259 8e0c 4C       		.uleb128 0x4c
 3260 8e0d 706F7274 		.ascii	"portLONG long\000"
 3260      4C4F4E47 
 3260      206C6F6E 
 3260      6700
 3261 8e1b 01       		.byte	0x1
 3262 8e1c 4D       		.uleb128 0x4d
 3263 8e1d 706F7274 		.ascii	"portSHORT short\000"
 3263      53484F52 
 3263      54207368 
 3263      6F727400 
 3264 8e2d 01       		.byte	0x1
 3265 8e2e 4E       		.uleb128 0x4e
 3266 8e2f 706F7274 		.ascii	"portSTACK_TYPE unsigned portLONG\000"
 3266      53544143 
 3266      4B5F5459 
 3266      50452075 
 3266      6E736967 
 3267 8e50 01       		.byte	0x1
 3268 8e51 4F       		.uleb128 0x4f
 3269 8e52 706F7274 		.ascii	"portBASE_TYPE long\000"
 3269      42415345 
 3269      5F545950 
 3269      45206C6F 
 3269      6E6700
 3270 8e65 01       		.byte	0x1
 3271 8e66 56       		.uleb128 0x56
 3272 8e67 706F7274 		.ascii	"portMAX_DELAY ( portTickType ) 0xffffffff\000"
 3272      4D41585F 
 3272      44454C41 
 3272      59202820 
 3272      706F7274 
 3273 8e91 01       		.byte	0x1
 3274 8e92 5B       		.uleb128 0x5b
 3275 8e93 706F7274 		.ascii	"portSTACK_GROWTH ( -1 )\000"
 3275      53544143 
 3275      4B5F4752 
 3275      4F575448 
 3275      2028202D 
 3276 8eab 01       		.byte	0x1
 3277 8eac 5C       		.uleb128 0x5c
ARM GAS  /tmp/cck0uY6y.s 			page 130


 3278 8ead 706F7274 		.ascii	"portTICK_RATE_MS ( ( portTickType ) 1000 / configTI"
 3278      5449434B 
 3278      5F524154 
 3278      455F4D53 
 3278      20282028 
 3279 8ee0 434B5F52 		.ascii	"CK_RATE_HZ )\000"
 3279      4154455F 
 3279      485A2029 
 3279      00
 3280 8eed 01       		.byte	0x1
 3281 8eee 5D       		.uleb128 0x5d
 3282 8eef 706F7274 		.ascii	"portBYTE_ALIGNMENT 8\000"
 3282      42595445 
 3282      5F414C49 
 3282      474E4D45 
 3282      4E542038 
 3283 8f04 01       		.byte	0x1
 3284 8f05 64       		.uleb128 0x64
 3285 8f06 706F7274 		.ascii	"portYIELD() vPortYieldFromISR()\000"
 3285      5949454C 
 3285      44282920 
 3285      76506F72 
 3285      74596965 
 3286 8f26 01       		.byte	0x1
 3287 8f27 66       		.uleb128 0x66
 3288 8f28 706F7274 		.ascii	"portEND_SWITCHING_ISR(xSwitchRequired) if( xSwitchR"
 3288      454E445F 
 3288      53574954 
 3288      4348494E 
 3288      475F4953 
 3289 8f5b 65717569 		.ascii	"equired ) vPortYieldFromISR()\000"
 3289      72656420 
 3289      29207650 
 3289      6F727459 
 3289      69656C64 
 3290 8f79 01       		.byte	0x1
 3291 8f7a 70       		.uleb128 0x70
 3292 8f7b 706F7274 		.ascii	"portSET_INTERRUPT_MASK() __asm volatile ( \"\011mov"
 3292      5345545F 
 3292      494E5445 
 3292      52525550 
 3292      545F4D41 
 3293 8faa 2072302C 		.ascii	" r0, %0\011\011\011\011\011\011\011\011\\n\" \"\011"
 3293      20253009 
 3293      09090909 
 3293      0909095C 
 3293      6E222022 
 3294 8fbf 6D737220 		.ascii	"msr basepri, r0\011\011\011\011\011\011\011\\n\" ::"
 3294      62617365 
 3294      7072692C 
 3294      20723009 
 3294      09090909 
 3295 8fdb 22692228 		.ascii	"\"i\"(configMAX_SYSCALL_INTERRUPT_PRIORITY):\"r0\" "
 3295      636F6E66 
 3295      69674D41 
 3295      585F5359 
 3295      5343414C 
ARM GAS  /tmp/cck0uY6y.s 			page 131


 3296 900a 2900     		.ascii	")\000"
 3297 900c 01       		.byte	0x1
 3298 900d 7C       		.uleb128 0x7c
 3299 900e 706F7274 		.ascii	"portCLEAR_INTERRUPT_MASK() __asm volatile ( \"\011m"
 3299      434C4541 
 3299      525F494E 
 3299      54455252 
 3299      5550545F 
 3300 903d 6F762072 		.ascii	"ov r0, #0\011\011\011\011\011\\n\" \"\011msr basepr"
 3300      302C2023 
 3300      30090909 
 3300      09095C6E 
 3300      22202209 
 3301 905b 692C2072 		.ascii	"i, r0\011\011\011\011\\n\" :::\"r0\" )\000"
 3301      30090909 
 3301      095C6E22 
 3301      203A3A3A 
 3301      22723022 
 3302 9072 01       		.byte	0x1
 3303 9073 8401     		.uleb128 0x84
 3304 9075 706F7274 		.ascii	"portSET_INTERRUPT_MASK_FROM_ISR() 0;portSET_INTERRU"
 3304      5345545F 
 3304      494E5445 
 3304      52525550 
 3304      545F4D41 
 3305 90a8 50545F4D 		.ascii	"PT_MASK()\000"
 3305      41534B28 
 3305      2900
 3306 90b2 01       		.byte	0x1
 3307 90b3 8501     		.uleb128 0x85
 3308 90b5 706F7274 		.ascii	"portCLEAR_INTERRUPT_MASK_FROM_ISR(x) portCLEAR_INTE"
 3308      434C4541 
 3308      525F494E 
 3308      54455252 
 3308      5550545F 
 3309 90e8 52525550 		.ascii	"RRUPT_MASK();(void)x\000"
 3309      545F4D41 
 3309      534B2829 
 3309      3B28766F 
 3309      69642978 
 3310 90fd 01       		.byte	0x1
 3311 90fe 8B01     		.uleb128 0x8b
 3312 9100 706F7274 		.ascii	"portDISABLE_INTERRUPTS() portSET_INTERRUPT_MASK()\000"
 3312      44495341 
 3312      424C455F 
 3312      494E5445 
 3312      52525550 
 3313 9132 01       		.byte	0x1
 3314 9133 8C01     		.uleb128 0x8c
 3315 9135 706F7274 		.ascii	"portENABLE_INTERRUPTS() portCLEAR_INTERRUPT_MASK()\000"
 3315      454E4142 
 3315      4C455F49 
 3315      4E544552 
 3315      52555054 
 3316 9168 01       		.byte	0x1
 3317 9169 8D01     		.uleb128 0x8d
 3318 916b 706F7274 		.ascii	"portENTER_CRITICAL() vPortEnterCritical()\000"
ARM GAS  /tmp/cck0uY6y.s 			page 132


 3318      454E5445 
 3318      525F4352 
 3318      49544943 
 3318      414C2829 
 3319 9195 01       		.byte	0x1
 3320 9196 8E01     		.uleb128 0x8e
 3321 9198 706F7274 		.ascii	"portEXIT_CRITICAL() vPortExitCritical()\000"
 3321      45584954 
 3321      5F435249 
 3321      54494341 
 3321      4C282920 
 3322 91c0 01       		.byte	0x1
 3323 91c1 9201     		.uleb128 0x92
 3324 91c3 706F7274 		.ascii	"portTASK_FUNCTION_PROTO(vFunction,pvParameters) voi"
 3324      5441534B 
 3324      5F46554E 
 3324      4354494F 
 3324      4E5F5052 
 3325 91f6 64207646 		.ascii	"d vFunction( void *pvParameters )\000"
 3325      756E6374 
 3325      696F6E28 
 3325      20766F69 
 3325      64202A70 
 3326 9218 01       		.byte	0x1
 3327 9219 9301     		.uleb128 0x93
 3328 921b 706F7274 		.ascii	"portTASK_FUNCTION(vFunction,pvParameters) void vFun"
 3328      5441534B 
 3328      5F46554E 
 3328      4354494F 
 3328      4E287646 
 3329 924e 6374696F 		.ascii	"ction( void *pvParameters )\000"
 3329      6E282076 
 3329      6F696420 
 3329      2A707650 
 3329      6172616D 
 3330 926a 01       		.byte	0x1
 3331 926b 9501     		.uleb128 0x95
 3332 926d 706F7274 		.ascii	"portNOP() \000"
 3332      4E4F5028 
 3332      292000
 3333 9278 04       		.byte	0x4
 3334 9279 01       		.byte	0x1
 3335 927a B702     		.uleb128 0x137
 3336 927c 706F7274 		.ascii	"portBYTE_ALIGNMENT_MASK ( 0x0007 )\000"
 3336      42595445 
 3336      5F414C49 
 3336      474E4D45 
 3336      4E545F4D 
 3337 929f 01       		.byte	0x1
 3338 92a0 CB02     		.uleb128 0x14b
 3339 92a2 706F7274 		.ascii	"portNUM_CONFIGURABLE_REGIONS 1\000"
 3339      4E554D5F 
 3339      434F4E46 
 3339      49475552 
 3339      41424C45 
 3340              		.file 33 "./FreeRTOS/include/mpu_wrappers.h"
 3341 92c1 03       		.byte	0x3
ARM GAS  /tmp/cck0uY6y.s 			page 133


 3342 92c2 D202     		.uleb128 0x152
 3343 92c4 21       		.uleb128 0x21
 3344 92c5 01       		.byte	0x1
 3345 92c6 37       		.uleb128 0x37
 3346 92c7 4D50555F 		.ascii	"MPU_WRAPPERS_H \000"
 3346      57524150 
 3346      50455253 
 3346      5F482000 
 3347 92d7 01       		.byte	0x1
 3348 92d8 7F       		.uleb128 0x7f
 3349 92d9 50524956 		.ascii	"PRIVILEGED_FUNCTION \000"
 3349      494C4547 
 3349      45445F46 
 3349      554E4354 
 3349      494F4E20 
 3350 92ee 01       		.byte	0x1
 3351 92ef 8001     		.uleb128 0x80
 3352 92f1 50524956 		.ascii	"PRIVILEGED_DATA \000"
 3352      494C4547 
 3352      45445F44 
 3352      41544120 
 3352      00
 3353 9302 01       		.byte	0x1
 3354 9303 8101     		.uleb128 0x81
 3355 9305 706F7274 		.ascii	"portUSING_MPU_WRAPPERS 0\000"
 3355      5553494E 
 3355      475F4D50 
 3355      555F5752 
 3355      41505045 
 3356 931e 04       		.byte	0x4
 3357 931f 04       		.byte	0x4
 3358 9320 01       		.byte	0x1
 3359 9321 8801     		.uleb128 0x88
 3360 9323 636F6E66 		.ascii	"configUSE_APPLICATION_TASK_TAG 0\000"
 3360      69675553 
 3360      455F4150 
 3360      504C4943 
 3360      4154494F 
 3361 9344 01       		.byte	0x1
 3362 9345 A001     		.uleb128 0xa0
 3363 9347 706F7274 		.ascii	"portCRITICAL_NESTING_IN_TCB 0\000"
 3363      43524954 
 3363      4943414C 
 3363      5F4E4553 
 3363      54494E47 
 3364 9365 01       		.byte	0x1
 3365 9366 B101     		.uleb128 0xb1
 3366 9368 494E434C 		.ascii	"INCLUDE_xTaskResumeFromISR 1\000"
 3366      5544455F 
 3366      78546173 
 3366      6B526573 
 3366      756D6546 
 3367 9385 01       		.byte	0x1
 3368 9386 B501     		.uleb128 0xb5
 3369 9388 494E434C 		.ascii	"INCLUDE_xTaskGetSchedulerState 0\000"
 3369      5544455F 
 3369      78546173 
ARM GAS  /tmp/cck0uY6y.s 			page 134


 3369      6B476574 
 3369      53636865 
 3370 93a9 01       		.byte	0x1
 3371 93aa BF01     		.uleb128 0xbf
 3372 93ac 494E434C 		.ascii	"INCLUDE_xTaskGetCurrentTaskHandle 0\000"
 3372      5544455F 
 3372      78546173 
 3372      6B476574 
 3372      43757272 
 3373 93d0 01       		.byte	0x1
 3374 93d1 DC01     		.uleb128 0xdc
 3375 93d3 74726163 		.ascii	"traceSTART() \000"
 3375      65535441 
 3375      52542829 
 3375      2000
 3376 93e1 01       		.byte	0x1
 3377 93e2 E201     		.uleb128 0xe2
 3378 93e4 74726163 		.ascii	"traceEND() \000"
 3378      65454E44 
 3378      28292000 
 3379 93f0 01       		.byte	0x1
 3380 93f1 E801     		.uleb128 0xe8
 3381 93f3 74726163 		.ascii	"traceTASK_SWITCHED_IN() \000"
 3381      65544153 
 3381      4B5F5357 
 3381      49544348 
 3381      45445F49 
 3382 940c 01       		.byte	0x1
 3383 940d EE01     		.uleb128 0xee
 3384 940f 74726163 		.ascii	"traceTASK_SWITCHED_OUT() \000"
 3384      65544153 
 3384      4B5F5357 
 3384      49544348 
 3384      45445F4F 
 3385 9429 01       		.byte	0x1
 3386 942a F601     		.uleb128 0xf6
 3387 942c 74726163 		.ascii	"traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue) \000"
 3387      65424C4F 
 3387      434B494E 
 3387      475F4F4E 
 3387      5F515545 
 3388 9455 01       		.byte	0x1
 3389 9456 FE01     		.uleb128 0xfe
 3390 9458 74726163 		.ascii	"traceBLOCKING_ON_QUEUE_SEND(pxQueue) \000"
 3390      65424C4F 
 3390      434B494E 
 3390      475F4F4E 
 3390      5F515545 
 3391 947e 01       		.byte	0x1
 3392 947f 8802     		.uleb128 0x108
 3393 9481 74726163 		.ascii	"traceQUEUE_CREATE(pxNewQueue) \000"
 3393      65515545 
 3393      55455F43 
 3393      52454154 
 3393      45287078 
 3394 94a0 01       		.byte	0x1
 3395 94a1 8C02     		.uleb128 0x10c
ARM GAS  /tmp/cck0uY6y.s 			page 135


 3396 94a3 74726163 		.ascii	"traceQUEUE_CREATE_FAILED() \000"
 3396      65515545 
 3396      55455F43 
 3396      52454154 
 3396      455F4641 
 3397 94bf 01       		.byte	0x1
 3398 94c0 9002     		.uleb128 0x110
 3399 94c2 74726163 		.ascii	"traceCREATE_MUTEX(pxNewQueue) \000"
 3399      65435245 
 3399      4154455F 
 3399      4D555445 
 3399      58287078 
 3400 94e1 01       		.byte	0x1
 3401 94e2 9402     		.uleb128 0x114
 3402 94e4 74726163 		.ascii	"traceCREATE_MUTEX_FAILED() \000"
 3402      65435245 
 3402      4154455F 
 3402      4D555445 
 3402      585F4641 
 3403 9500 01       		.byte	0x1
 3404 9501 9802     		.uleb128 0x118
 3405 9503 74726163 		.ascii	"traceGIVE_MUTEX_RECURSIVE(pxMutex) \000"
 3405      65474956 
 3405      455F4D55 
 3405      5445585F 
 3405      52454355 
 3406 9527 01       		.byte	0x1
 3407 9528 9C02     		.uleb128 0x11c
 3408 952a 74726163 		.ascii	"traceGIVE_MUTEX_RECURSIVE_FAILED(pxMutex) \000"
 3408      65474956 
 3408      455F4D55 
 3408      5445585F 
 3408      52454355 
 3409 9555 01       		.byte	0x1
 3410 9556 A002     		.uleb128 0x120
 3411 9558 74726163 		.ascii	"traceTAKE_MUTEX_RECURSIVE(pxMutex) \000"
 3411      6554414B 
 3411      455F4D55 
 3411      5445585F 
 3411      52454355 
 3412 957c 01       		.byte	0x1
 3413 957d A402     		.uleb128 0x124
 3414 957f 74726163 		.ascii	"traceCREATE_COUNTING_SEMAPHORE() \000"
 3414      65435245 
 3414      4154455F 
 3414      434F554E 
 3414      54494E47 
 3415 95a1 01       		.byte	0x1
 3416 95a2 A802     		.uleb128 0x128
 3417 95a4 74726163 		.ascii	"traceCREATE_COUNTING_SEMAPHORE_FAILED() \000"
 3417      65435245 
 3417      4154455F 
 3417      434F554E 
 3417      54494E47 
 3418 95cd 01       		.byte	0x1
 3419 95ce AC02     		.uleb128 0x12c
 3420 95d0 74726163 		.ascii	"traceQUEUE_SEND(pxQueue) \000"
ARM GAS  /tmp/cck0uY6y.s 			page 136


 3420      65515545 
 3420      55455F53 
 3420      454E4428 
 3420      70785175 
 3421 95ea 01       		.byte	0x1
 3422 95eb B002     		.uleb128 0x130
 3423 95ed 74726163 		.ascii	"traceQUEUE_SEND_FAILED(pxQueue) \000"
 3423      65515545 
 3423      55455F53 
 3423      454E445F 
 3423      4641494C 
 3424 960e 01       		.byte	0x1
 3425 960f B402     		.uleb128 0x134
 3426 9611 74726163 		.ascii	"traceQUEUE_RECEIVE(pxQueue) \000"
 3426      65515545 
 3426      55455F52 
 3426      45434549 
 3426      56452870 
 3427 962e 01       		.byte	0x1
 3428 962f B802     		.uleb128 0x138
 3429 9631 74726163 		.ascii	"traceQUEUE_PEEK(pxQueue) \000"
 3429      65515545 
 3429      55455F50 
 3429      45454B28 
 3429      70785175 
 3430 964b 01       		.byte	0x1
 3431 964c BC02     		.uleb128 0x13c
 3432 964e 74726163 		.ascii	"traceQUEUE_RECEIVE_FAILED(pxQueue) \000"
 3432      65515545 
 3432      55455F52 
 3432      45434549 
 3432      56455F46 
 3433 9672 01       		.byte	0x1
 3434 9673 C002     		.uleb128 0x140
 3435 9675 74726163 		.ascii	"traceQUEUE_SEND_FROM_ISR(pxQueue) \000"
 3435      65515545 
 3435      55455F53 
 3435      454E445F 
 3435      46524F4D 
 3436 9698 01       		.byte	0x1
 3437 9699 C402     		.uleb128 0x144
 3438 969b 74726163 		.ascii	"traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue) \000"
 3438      65515545 
 3438      55455F53 
 3438      454E445F 
 3438      46524F4D 
 3439 96c5 01       		.byte	0x1
 3440 96c6 C802     		.uleb128 0x148
 3441 96c8 74726163 		.ascii	"traceQUEUE_RECEIVE_FROM_ISR(pxQueue) \000"
 3441      65515545 
 3441      55455F52 
 3441      45434549 
 3441      56455F46 
 3442 96ee 01       		.byte	0x1
 3443 96ef CC02     		.uleb128 0x14c
 3444 96f1 74726163 		.ascii	"traceQUEUE_RECEIVE_FROM_ISR_FAILED(pxQueue) \000"
 3444      65515545 
ARM GAS  /tmp/cck0uY6y.s 			page 137


 3444      55455F52 
 3444      45434549 
 3444      56455F46 
 3445 971e 01       		.byte	0x1
 3446 971f D002     		.uleb128 0x150
 3447 9721 74726163 		.ascii	"traceQUEUE_DELETE(pxQueue) \000"
 3447      65515545 
 3447      55455F44 
 3447      454C4554 
 3447      45287078 
 3448 973d 01       		.byte	0x1
 3449 973e D402     		.uleb128 0x154
 3450 9740 74726163 		.ascii	"traceTASK_CREATE(pxNewTCB) \000"
 3450      65544153 
 3450      4B5F4352 
 3450      45415445 
 3450      2870784E 
 3451 975c 01       		.byte	0x1
 3452 975d D802     		.uleb128 0x158
 3453 975f 74726163 		.ascii	"traceTASK_CREATE_FAILED(pxNewTCB) \000"
 3453      65544153 
 3453      4B5F4352 
 3453      45415445 
 3453      5F464149 
 3454 9782 01       		.byte	0x1
 3455 9783 DC02     		.uleb128 0x15c
 3456 9785 74726163 		.ascii	"traceTASK_DELETE(pxTaskToDelete) \000"
 3456      65544153 
 3456      4B5F4445 
 3456      4C455445 
 3456      28707854 
 3457 97a7 01       		.byte	0x1
 3458 97a8 E002     		.uleb128 0x160
 3459 97aa 74726163 		.ascii	"traceTASK_DELAY_UNTIL() \000"
 3459      65544153 
 3459      4B5F4445 
 3459      4C41595F 
 3459      554E5449 
 3460 97c3 01       		.byte	0x1
 3461 97c4 E402     		.uleb128 0x164
 3462 97c6 74726163 		.ascii	"traceTASK_DELAY() \000"
 3462      65544153 
 3462      4B5F4445 
 3462      4C415928 
 3462      292000
 3463 97d9 01       		.byte	0x1
 3464 97da E802     		.uleb128 0x168
 3465 97dc 74726163 		.ascii	"traceTASK_PRIORITY_SET(pxTask,uxNewPriority) \000"
 3465      65544153 
 3465      4B5F5052 
 3465      494F5249 
 3465      54595F53 
 3466 980a 01       		.byte	0x1
 3467 980b EC02     		.uleb128 0x16c
 3468 980d 74726163 		.ascii	"traceTASK_SUSPEND(pxTaskToSuspend) \000"
 3468      65544153 
 3468      4B5F5355 
ARM GAS  /tmp/cck0uY6y.s 			page 138


 3468      5350454E 
 3468      44287078 
 3469 9831 01       		.byte	0x1
 3470 9832 F002     		.uleb128 0x170
 3471 9834 74726163 		.ascii	"traceTASK_RESUME(pxTaskToResume) \000"
 3471      65544153 
 3471      4B5F5245 
 3471      53554D45 
 3471      28707854 
 3472 9856 01       		.byte	0x1
 3473 9857 F402     		.uleb128 0x174
 3474 9859 74726163 		.ascii	"traceTASK_RESUME_FROM_ISR(pxTaskToResume) \000"
 3474      65544153 
 3474      4B5F5245 
 3474      53554D45 
 3474      5F46524F 
 3475 9884 01       		.byte	0x1
 3476 9885 F802     		.uleb128 0x178
 3477 9887 74726163 		.ascii	"traceTASK_INCREMENT_TICK(xTickCount) \000"
 3477      65544153 
 3477      4B5F494E 
 3477      4352454D 
 3477      454E545F 
 3478 98ad 01       		.byte	0x1
 3479 98ae 9003     		.uleb128 0x190
 3480 98b0 636F6E66 		.ascii	"configUSE_MALLOC_FAILED_HOOK 0\000"
 3480      69675553 
 3480      455F4D41 
 3480      4C4C4F43 
 3480      5F464149 
 3481 98cf 01       		.byte	0x1
 3482 98d0 9403     		.uleb128 0x194
 3483 98d2 706F7274 		.ascii	"portPRIVILEGE_BIT ( ( unsigned portBASE_TYPE ) 0x00"
 3483      50524956 
 3483      494C4547 
 3483      455F4249 
 3483      54202820 
 3484 9905 202900   		.ascii	" )\000"
 3485 9908 01       		.byte	0x1
 3486 9909 9803     		.uleb128 0x198
 3487 990b 706F7274 		.ascii	"portYIELD_WITHIN_API portYIELD\000"
 3487      5949454C 
 3487      445F5749 
 3487      5448494E 
 3487      5F415049 
 3488 992a 01       		.byte	0x1
 3489 992b 9C03     		.uleb128 0x19c
 3490 992d 7076506F 		.ascii	"pvPortMallocAligned(xSize,pvBuffer) pvPortMalloc( x"
 3490      72744D61 
 3490      6C6C6F63 
 3490      416C6967 
 3490      6E656428 
 3491 9960 53697A65 		.ascii	"Size ); ( void ) pvBuffer\000"
 3491      20293B20 
 3491      2820766F 
 3491      69642029 
 3491      20707642 
ARM GAS  /tmp/cck0uY6y.s 			page 139


 3492 997a 01       		.byte	0x1
 3493 997b A003     		.uleb128 0x1a0
 3494 997d 76506F72 		.ascii	"vPortFreeAligned(pvBlockToFree) vPortFree( pvBlockT"
 3494      74467265 
 3494      65416C69 
 3494      676E6564 
 3494      28707642 
 3495 99b0 6F467265 		.ascii	"oFree )\000"
 3495      65202900 
 3496 99b8 04       		.byte	0x4
 3497              		.file 34 "./FreeRTOS/include/task.h"
 3498 99b9 03       		.byte	0x3
 3499 99ba 41       		.uleb128 0x41
 3500 99bb 22       		.uleb128 0x22
 3501 99bc 01       		.byte	0x1
 3502 99bd 3E       		.uleb128 0x3e
 3503 99be 5441534B 		.ascii	"TASK_H \000"
 3503      5F482000 
 3504              		.file 35 "./FreeRTOS/include/list.h"
 3505 99c6 03       		.byte	0x3
 3506 99c7 41       		.uleb128 0x41
 3507 99c8 23       		.uleb128 0x23
 3508 99c9 01       		.byte	0x1
 3509 99ca 5A       		.uleb128 0x5a
 3510 99cb 4C495354 		.ascii	"LIST_H \000"
 3510      5F482000 
 3511 99d3 01       		.byte	0x1
 3512 99d4 8501     		.uleb128 0x85
 3513 99d6 6C697374 		.ascii	"listSET_LIST_ITEM_OWNER(pxListItem,pxOwner) ( pxLis"
 3513      5345545F 
 3513      4C495354 
 3513      5F495445 
 3513      4D5F4F57 
 3514 9a09 74497465 		.ascii	"tItem )->pvOwner = ( void * ) pxOwner\000"
 3514      6D20292D 
 3514      3E70764F 
 3514      776E6572 
 3514      203D2028 
 3515 9a2f 01       		.byte	0x1
 3516 9a30 8E01     		.uleb128 0x8e
 3517 9a32 6C697374 		.ascii	"listSET_LIST_ITEM_VALUE(pxListItem,xValue) ( pxList"
 3517      5345545F 
 3517      4C495354 
 3517      5F495445 
 3517      4D5F5641 
 3518 9a65 4974656D 		.ascii	"Item )->xItemValue = xValue\000"
 3518      20292D3E 
 3518      78497465 
 3518      6D56616C 
 3518      7565203D 
 3519 9a81 01       		.byte	0x1
 3520 9a82 9801     		.uleb128 0x98
 3521 9a84 6C697374 		.ascii	"listGET_LIST_ITEM_VALUE(pxListItem) ( ( pxListItem "
 3521      4745545F 
 3521      4C495354 
 3521      5F495445 
 3521      4D5F5641 
ARM GAS  /tmp/cck0uY6y.s 			page 140


 3522 9ab7 292D3E78 		.ascii	")->xItemValue )\000"
 3522      4974656D 
 3522      56616C75 
 3522      65202900 
 3523 9ac7 01       		.byte	0x1
 3524 9ac8 A101     		.uleb128 0xa1
 3525 9aca 6C697374 		.ascii	"listLIST_IS_EMPTY(pxList) ( ( pxList )->uxNumberOfI"
 3525      4C495354 
 3525      5F49535F 
 3525      454D5054 
 3525      59287078 
 3526 9afd 74656D73 		.ascii	"tems == ( unsigned portBASE_TYPE ) 0 )\000"
 3526      203D3D20 
 3526      2820756E 
 3526      7369676E 
 3526      65642070 
 3527 9b24 01       		.byte	0x1
 3528 9b25 A601     		.uleb128 0xa6
 3529 9b27 6C697374 		.ascii	"listCURRENT_LIST_LENGTH(pxList) ( ( pxList )->uxNum"
 3529      43555252 
 3529      454E545F 
 3529      4C495354 
 3529      5F4C454E 
 3530 9b5a 6265724F 		.ascii	"berOfItems )\000"
 3530      66497465 
 3530      6D732029 
 3530      00
 3531 9b67 01       		.byte	0x1
 3532 9b68 BB01     		.uleb128 0xbb
 3533 9b6a 6C697374 		.ascii	"listGET_OWNER_OF_NEXT_ENTRY(pxTCB,pxList) { xList *"
 3533      4745545F 
 3533      4F574E45 
 3533      525F4F46 
 3533      5F4E4558 
 3534 9b9d 20636F6E 		.ascii	" const pxConstList = pxList; ( pxConstList )->pxInd"
 3534      73742070 
 3534      78436F6E 
 3534      73744C69 
 3534      7374203D 
 3535 9bd0 6578203D 		.ascii	"ex = ( pxConstList )->pxIndex->pxNext; if( ( pxCons"
 3535      20282070 
 3535      78436F6E 
 3535      73744C69 
 3535      73742029 
 3536 9c03 744C6973 		.ascii	"tList )->pxIndex == ( xListItem * ) &( ( pxConstLis"
 3536      7420292D 
 3536      3E707849 
 3536      6E646578 
 3536      203D3D20 
 3537 9c36 7420292D 		.ascii	"t )->xListEnd ) ) { ( pxConstList )->pxIndex = ( px"
 3537      3E784C69 
 3537      7374456E 
 3537      64202920 
 3537      29207B20 
 3538 9c69 436F6E73 		.ascii	"ConstList )->pxIndex->pxNext; } pxTCB = ( pxConstLi"
 3538      744C6973 
 3538      7420292D 
ARM GAS  /tmp/cck0uY6y.s 			page 141


 3538      3E707849 
 3538      6E646578 
 3539 9c9c 73742029 		.ascii	"st )->pxIndex->pvOwner; }\000"
 3539      2D3E7078 
 3539      496E6465 
 3539      782D3E70 
 3539      764F776E 
 3540 9cb6 01       		.byte	0x1
 3541 9cb7 D901     		.uleb128 0xd9
 3542 9cb9 6C697374 		.ascii	"listGET_OWNER_OF_HEAD_ENTRY(pxList) ( ( pxList->uxN"
 3542      4745545F 
 3542      4F574E45 
 3542      525F4F46 
 3542      5F484541 
 3543 9cec 756D6265 		.ascii	"umberOfItems != ( unsigned portBASE_TYPE ) 0 ) ? ( "
 3543      724F6649 
 3543      74656D73 
 3543      20213D20 
 3543      2820756E 
 3544 9d1f 28262820 		.ascii	"(&( pxList->xListEnd ))->pxNext->pvOwner ) : ( NULL"
 3544      70784C69 
 3544      73742D3E 
 3544      784C6973 
 3544      74456E64 
 3545 9d52 20292029 		.ascii	" ) )\000"
 3545      00
 3546 9d57 01       		.byte	0x1
 3547 9d58 E501     		.uleb128 0xe5
 3548 9d5a 6C697374 		.ascii	"listIS_CONTAINED_WITHIN(pxList,pxListItem) ( ( pxLi"
 3548      49535F43 
 3548      4F4E5441 
 3548      494E4544 
 3548      5F574954 
 3549 9d8d 73744974 		.ascii	"stItem )->pvContainer == ( void * ) pxList )\000"
 3549      656D2029 
 3549      2D3E7076 
 3549      436F6E74 
 3549      61696E65 
 3550 9dba 04       		.byte	0x4
 3551 9dbb 01       		.byte	0x1
 3552 9dbc 4B       		.uleb128 0x4b
 3553 9dbd 74736B4B 		.ascii	"tskKERNEL_VERSION_NUMBER \"V6.0.0\"\000"
 3553      45524E45 
 3553      4C5F5645 
 3553      5253494F 
 3553      4E5F4E55 
 3554 9ddf 01       		.byte	0x1
 3555 9de0 7F       		.uleb128 0x7f
 3556 9de1 74736B49 		.ascii	"tskIDLE_PRIORITY ( ( unsigned portBASE_TYPE ) 0 )\000"
 3556      444C455F 
 3556      5052494F 
 3556      52495459 
 3556      20282028 
 3557 9e13 01       		.byte	0x1
 3558 9e14 8901     		.uleb128 0x89
 3559 9e16 7461736B 		.ascii	"taskYIELD() portYIELD()\000"
 3559      5949454C 
ARM GAS  /tmp/cck0uY6y.s 			page 142


 3559      44282920 
 3559      706F7274 
 3559      5949454C 
 3560 9e2e 01       		.byte	0x1
 3561 9e2f 9701     		.uleb128 0x97
 3562 9e31 7461736B 		.ascii	"taskENTER_CRITICAL() portENTER_CRITICAL()\000"
 3562      454E5445 
 3562      525F4352 
 3562      49544943 
 3562      414C2829 
 3563 9e5b 01       		.byte	0x1
 3564 9e5c A501     		.uleb128 0xa5
 3565 9e5e 7461736B 		.ascii	"taskEXIT_CRITICAL() portEXIT_CRITICAL()\000"
 3565      45584954 
 3565      5F435249 
 3565      54494341 
 3565      4C282920 
 3566 9e86 01       		.byte	0x1
 3567 9e87 AF01     		.uleb128 0xaf
 3568 9e89 7461736B 		.ascii	"taskDISABLE_INTERRUPTS() portDISABLE_INTERRUPTS()\000"
 3568      44495341 
 3568      424C455F 
 3568      494E5445 
 3568      52525550 
 3569 9ebb 01       		.byte	0x1
 3570 9ebc B901     		.uleb128 0xb9
 3571 9ebe 7461736B 		.ascii	"taskENABLE_INTERRUPTS() portENABLE_INTERRUPTS()\000"
 3571      454E4142 
 3571      4C455F49 
 3571      4E544552 
 3571      52555054 
 3572 9eee 01       		.byte	0x1
 3573 9eef BC01     		.uleb128 0xbc
 3574 9ef1 7461736B 		.ascii	"taskSCHEDULER_NOT_STARTED 0\000"
 3574      53434845 
 3574      44554C45 
 3574      525F4E4F 
 3574      545F5354 
 3575 9f0d 01       		.byte	0x1
 3576 9f0e BD01     		.uleb128 0xbd
 3577 9f10 7461736B 		.ascii	"taskSCHEDULER_RUNNING 1\000"
 3577      53434845 
 3577      44554C45 
 3577      525F5255 
 3577      4E4E494E 
 3578 9f28 01       		.byte	0x1
 3579 9f29 BE01     		.uleb128 0xbe
 3580 9f2b 7461736B 		.ascii	"taskSCHEDULER_SUSPENDED 2\000"
 3580      53434845 
 3580      44554C45 
 3580      525F5355 
 3580      5350454E 
 3581 9f45 01       		.byte	0x1
 3582 9f46 9002     		.uleb128 0x110
 3583 9f48 78546173 		.ascii	"xTaskCreate(pvTaskCode,pcName,usStackDepth,pvParame"
 3583      6B437265 
 3583      61746528 
ARM GAS  /tmp/cck0uY6y.s 			page 143


 3583      70765461 
 3583      736B436F 
 3584 9f7b 74657273 		.ascii	"ters,uxPriority,pxCreatedTask) xTaskGenericCreate( "
 3584      2C757850 
 3584      72696F72 
 3584      6974792C 
 3584      70784372 
 3585 9fae 28207076 		.ascii	"( pvTaskCode ), ( pcName ), ( usStackDepth ), ( pvP"
 3585      5461736B 
 3585      436F6465 
 3585      20292C20 
 3585      28207063 
 3586 9fe1 6172616D 		.ascii	"arameters ), ( uxPriority ), ( pxCreatedTask ), ( N"
 3586      65746572 
 3586      7320292C 
 3586      20282075 
 3586      78507269 
 3587 a014 554C4C20 		.ascii	"ULL ), ( NULL ) )\000"
 3587      292C2028 
 3587      204E554C 
 3587      4C202920 
 3587      2900
 3588 a026 01       		.byte	0x1
 3589 a027 D902     		.uleb128 0x159
 3590 a029 78546173 		.ascii	"xTaskCreateRestricted(x,pxCreatedTask) xTaskGeneric"
 3590      6B437265 
 3590      61746552 
 3590      65737472 
 3590      69637465 
 3591 a05c 43726561 		.ascii	"Create( ((x)->pvTaskCode), ((x)->pcName), ((x)->usS"
 3591      74652820 
 3591      28287829 
 3591      2D3E7076 
 3591      5461736B 
 3592 a08f 7461636B 		.ascii	"tackDepth), ((x)->pvParameters), ((x)->uxPriority),"
 3592      44657074 
 3592      68292C20 
 3592      28287829 
 3592      2D3E7076 
 3593 a0c2 20287078 		.ascii	" (pxCreatedTask), ((x)->puxStackBuffer), ((x)->xReg"
 3593      43726561 
 3593      74656454 
 3593      61736B29 
 3593      2C202828 
 3594 a0f5 696F6E73 		.ascii	"ions) )\000"
 3594      29202900 
 3595 a0fd 04       		.byte	0x4
 3596              		.file 36 "./FreeRTOS/include/StackMacros.h"
 3597 a0fe 03       		.byte	0x3
 3598 a0ff 42       		.uleb128 0x42
 3599 a100 24       		.uleb128 0x24
 3600 a101 01       		.byte	0x1
 3601 a102 37       		.uleb128 0x37
 3602 a103 53544143 		.ascii	"STACK_MACROS_H \000"
 3602      4B5F4D41 
 3602      43524F53 
 3602      5F482000 
ARM GAS  /tmp/cck0uY6y.s 			page 144


 3603 a113 01       		.byte	0x1
 3604 a114 4C       		.uleb128 0x4c
 3605 a115 7461736B 		.ascii	"taskFIRST_CHECK_FOR_STACK_OVERFLOW() \000"
 3605      46495253 
 3605      545F4348 
 3605      45434B5F 
 3605      464F525F 
 3606 a13b 01       		.byte	0x1
 3607 a13c 4D       		.uleb128 0x4d
 3608 a13d 7461736B 		.ascii	"taskSECOND_CHECK_FOR_STACK_OVERFLOW() \000"
 3608      5345434F 
 3608      4E445F43 
 3608      4845434B 
 3608      5F464F52 
 3609 a164 04       		.byte	0x4
 3610 a165 02       		.byte	0x2
 3611 a166 44       		.uleb128 0x44
 3612 a167 4D50555F 		.ascii	"MPU_WRAPPERS_INCLUDED_FROM_API_FILE\000"
 3612      57524150 
 3612      50455253 
 3612      5F494E43 
 3612      4C554445 
 3613 a18b 01       		.byte	0x1
 3614 a18c 49       		.uleb128 0x49
 3615 a18d 74736B49 		.ascii	"tskIDLE_STACK_SIZE configMINIMAL_STACK_SIZE\000"
 3615      444C455F 
 3615      53544143 
 3615      4B5F5349 
 3615      5A452063 
 3616 a1b9 01       		.byte	0x1
 3617 a1ba 4B       		.uleb128 0x4b
 3618 a1bb 74736B49 		.ascii	"tskIDLE_PRIORITY ( ( unsigned portBASE_TYPE ) 0 )\000"
 3618      444C455F 
 3618      5052494F 
 3618      52495459 
 3618      20282028 
 3619 a1ed 01       		.byte	0x1
 3620 a1ee B501     		.uleb128 0xb5
 3621 a1f0 74736B53 		.ascii	"tskSTACK_FILL_BYTE ( 0xa5 )\000"
 3621      5441434B 
 3621      5F46494C 
 3621      4C5F4259 
 3621      54452028 
 3622 a20c 01       		.byte	0x1
 3623 a20d BA01     		.uleb128 0xba
 3624 a20f 74736B42 		.ascii	"tskBLOCKED_CHAR ( ( signed char ) 'B' )\000"
 3624      4C4F434B 
 3624      45445F43 
 3624      48415220 
 3624      28202820 
 3625 a237 01       		.byte	0x1
 3626 a238 BB01     		.uleb128 0xbb
 3627 a23a 74736B52 		.ascii	"tskREADY_CHAR ( ( signed char ) 'R' )\000"
 3627      45414459 
 3627      5F434841 
 3627      52202820 
 3627      28207369 
ARM GAS  /tmp/cck0uY6y.s 			page 145


 3628 a260 01       		.byte	0x1
 3629 a261 BC01     		.uleb128 0xbc
 3630 a263 74736B44 		.ascii	"tskDELETED_CHAR ( ( signed char ) 'D' )\000"
 3630      454C4554 
 3630      45445F43 
 3630      48415220 
 3630      28202820 
 3631 a28b 01       		.byte	0x1
 3632 a28c BD01     		.uleb128 0xbd
 3633 a28e 74736B53 		.ascii	"tskSUSPENDED_CHAR ( ( signed char ) 'S' )\000"
 3633      55535045 
 3633      4E444544 
 3633      5F434841 
 3633      52202820 
 3634 a2b8 01       		.byte	0x1
 3635 a2b9 F001     		.uleb128 0xf0
 3636 a2bb 76577269 		.ascii	"vWriteTraceToBuffer() \000"
 3636      74655472 
 3636      61636554 
 3636      6F427566 
 3636      66657228 
 3637 a2d2 01       		.byte	0x1
 3638 a2d3 FC01     		.uleb128 0xfc
 3639 a2d5 70727641 		.ascii	"prvAddTaskToReadyQueue(pxTCB) { if( pxTCB->uxPriori"
 3639      64645461 
 3639      736B546F 
 3639      52656164 
 3639      79517565 
 3640 a308 7479203E 		.ascii	"ty > uxTopReadyPriority ) { uxTopReadyPriority = px"
 3640      20757854 
 3640      6F705265 
 3640      61647950 
 3640      72696F72 
 3641 a33b 5443422D 		.ascii	"TCB->uxPriority; } vListInsertEnd( ( xList * ) &( p"
 3641      3E757850 
 3641      72696F72 
 3641      6974793B 
 3641      207D2076 
 3642 a36e 78526561 		.ascii	"xReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->"
 3642      64795461 
 3642      736B734C 
 3642      69737473 
 3642      5B207078 
 3643 a3a1 7847656E 		.ascii	"xGenericListItem ) ); }\000"
 3643      65726963 
 3643      4C697374 
 3643      4974656D 
 3643      20292029 
 3644 a3b9 01       		.byte	0x1
 3645 a3ba 8E02     		.uleb128 0x10e
 3646 a3bc 70727643 		.ascii	"prvCheckDelayedTasks() { register tskTCB *pxTCB; wh"
 3646      6865636B 
 3646      44656C61 
 3646      79656454 
 3646      61736B73 
 3647 a3ef 696C6528 		.ascii	"ile( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_E"
 3647      20282070 
ARM GAS  /tmp/cck0uY6y.s 			page 146


 3647      78544342 
 3647      203D2028 
 3647      2074736B 
 3648 a422 4E545259 		.ascii	"NTRY( pxDelayedTaskList ) ) != NULL ) { if( xTickCo"
 3648      28207078 
 3648      44656C61 
 3648      79656454 
 3648      61736B4C 
 3649 a455 756E7420 		.ascii	"unt < listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericLi"
 3649      3C206C69 
 3649      73744745 
 3649      545F4C49 
 3649      53545F49 
 3650 a488 73744974 		.ascii	"stItem ) ) ) { break; } vListRemove( &( pxTCB->xGen"
 3650      656D2029 
 3650      20292029 
 3650      207B2062 
 3650      7265616B 
 3651 a4bb 65726963 		.ascii	"ericListItem ) ); if( pxTCB->xEventListItem.pvConta"
 3651      4C697374 
 3651      4974656D 
 3651      20292029 
 3651      3B206966 
 3652 a4ee 696E6572 		.ascii	"iner ) { vListRemove( &( pxTCB->xEventListItem ) );"
 3652      2029207B 
 3652      20764C69 
 3652      73745265 
 3652      6D6F7665 
 3653 a521 207D2070 		.ascii	" } prvAddTaskToReadyQueue( pxTCB ); } }\000"
 3653      72764164 
 3653      64546173 
 3653      6B546F52 
 3653      65616479 
 3654 a549 01       		.byte	0x1
 3655 a54a A902     		.uleb128 0x129
 3656 a54c 70727647 		.ascii	"prvGetTCBFromHandle(pxHandle) ( ( pxHandle == NULL "
 3656      65745443 
 3656      4246726F 
 3656      6D48616E 
 3656      646C6528 
 3657 a57f 29203F20 		.ascii	") ? ( tskTCB * ) pxCurrentTCB : ( tskTCB * ) pxHand"
 3657      28207473 
 3657      6B544342 
 3657      202A2029 
 3657      20707843 
 3658 a5b2 6C652029 		.ascii	"le )\000"
 3658      00
 3659 a5b7 04       		.byte	0x4
 3660              		.global	pxCurrentTCB
 3661              		.bss
 3662              		.align	2
 3663              		.type	pxCurrentTCB, %object
 3664              		.size	pxCurrentTCB, 4
 3665              	pxCurrentTCB:
 3666 0000 00000000 		.space	4
 3667              		.align	2
 3668              	pxReadyTasksLists:
ARM GAS  /tmp/cck0uY6y.s 			page 147


 3669 0004 00000000 		.space	100
 3669      00000000 
 3669      00000000 
 3669      00000000 
 3669      00000000 
 3670              		.align	2
 3671              	xDelayedTaskList1:
 3672 0068 00000000 		.space	20
 3672      00000000 
 3672      00000000 
 3672      00000000 
 3672      00000000 
 3673              		.align	2
 3674              	xDelayedTaskList2:
 3675 007c 00000000 		.space	20
 3675      00000000 
 3675      00000000 
 3675      00000000 
 3675      00000000 
 3676              		.align	2
 3677              	pxDelayedTaskList:
 3678 0090 00000000 		.space	4
 3679              		.align	2
 3680              	pxOverflowDelayedTaskList:
 3681 0094 00000000 		.space	4
 3682              		.align	2
 3683              	xPendingReadyList:
 3684 0098 00000000 		.space	20
 3684      00000000 
 3684      00000000 
 3684      00000000 
 3684      00000000 
 3685              		.align	2
 3686              	xSuspendedTaskList:
 3687 00ac 00000000 		.space	20
 3687      00000000 
 3687      00000000 
 3687      00000000 
 3687      00000000 
 3688              		.align	2
 3689              	uxCurrentNumberOfTasks:
 3690 00c0 00000000 		.space	4
 3691              		.align	2
 3692              	xTickCount:
 3693 00c4 00000000 		.space	4
 3694              		.align	2
 3695              	uxTopUsedPriority:
 3696 00c8 00000000 		.space	4
 3697              		.align	2
 3698              	uxTopReadyPriority:
 3699 00cc 00000000 		.space	4
 3700              		.align	2
 3701              	xSchedulerRunning:
 3702 00d0 00000000 		.space	4
 3703              		.align	2
 3704              	uxSchedulerSuspended:
 3705 00d4 00000000 		.space	4
ARM GAS  /tmp/cck0uY6y.s 			page 148


 3706              		.align	2
 3707              	uxMissedTicks:
 3708 00d8 00000000 		.space	4
 3709              		.align	2
 3710              	xMissedYield:
 3711 00dc 00000000 		.space	4
 3712              		.align	2
 3713              	xNumOfOverflows:
 3714 00e0 00000000 		.space	4
 3715              		.align	2
 3716              	uxTaskNumber:
 3717 00e4 00000000 		.space	4
 3718              		.section	.text.xTaskGenericCreate,"ax",%progbits
 3719              		.align	2
 3720              		.global	xTaskGenericCreate
 3721              		.thumb
 3722              		.thumb_func
 3723              		.type	xTaskGenericCreate, %function
 3724              	xTaskGenericCreate:
 3725              	.LFB29:
   1:FreeRTOS/tasks.c **** /*
   2:FreeRTOS/tasks.c ****     FreeRTOS V6.0.1 - Copyright (C) 2009 Real Time Engineers Ltd.
   3:FreeRTOS/tasks.c **** 
   4:FreeRTOS/tasks.c ****     ***************************************************************************
   5:FreeRTOS/tasks.c ****     *                                                                         *
   6:FreeRTOS/tasks.c ****     * If you are:                                                             *
   7:FreeRTOS/tasks.c ****     *                                                                         *
   8:FreeRTOS/tasks.c ****     *    + New to FreeRTOS,                                                   *
   9:FreeRTOS/tasks.c ****     *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
  10:FreeRTOS/tasks.c ****     *    + Looking for basic training,                                        *
  11:FreeRTOS/tasks.c ****     *    + Wanting to improve your FreeRTOS skills and productivity           *
  12:FreeRTOS/tasks.c ****     *                                                                         *
  13:FreeRTOS/tasks.c ****     * then take a look at the FreeRTOS eBook                                  *
  14:FreeRTOS/tasks.c ****     *                                                                         *
  15:FreeRTOS/tasks.c ****     *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
  16:FreeRTOS/tasks.c ****     *                  http://www.FreeRTOS.org/Documentation                  *
  17:FreeRTOS/tasks.c ****     *                                                                         *
  18:FreeRTOS/tasks.c ****     * A pdf reference manual is also available.  Both are usually delivered   *
  19:FreeRTOS/tasks.c ****     * to your inbox within 20 minutes to two hours when purchased between 8am *
  20:FreeRTOS/tasks.c ****     * and 8pm GMT (although please allow up to 24 hours in case of            *
  21:FreeRTOS/tasks.c ****     * exceptional circumstances).  Thank you for your support!                *
  22:FreeRTOS/tasks.c ****     *                                                                         *
  23:FreeRTOS/tasks.c ****     ***************************************************************************
  24:FreeRTOS/tasks.c **** 
  25:FreeRTOS/tasks.c ****     This file is part of the FreeRTOS distribution.
  26:FreeRTOS/tasks.c **** 
  27:FreeRTOS/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:FreeRTOS/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:FreeRTOS/tasks.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:FreeRTOS/tasks.c ****     ***NOTE*** The exception to the GPL is included to allow you to distribute
  31:FreeRTOS/tasks.c ****     a combined work that includes FreeRTOS without being obliged to provide the
  32:FreeRTOS/tasks.c ****     source code for proprietary components outside of the FreeRTOS kernel.
  33:FreeRTOS/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
  34:FreeRTOS/tasks.c ****     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  35:FreeRTOS/tasks.c ****     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:FreeRTOS/tasks.c ****     more details. You should have received a copy of the GNU General Public 
  37:FreeRTOS/tasks.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it 
ARM GAS  /tmp/cck0uY6y.s 			page 149


  38:FreeRTOS/tasks.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained 
  39:FreeRTOS/tasks.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:FreeRTOS/tasks.c ****     FreeRTOS WEB site.
  41:FreeRTOS/tasks.c **** 
  42:FreeRTOS/tasks.c ****     1 tab == 4 spaces!
  43:FreeRTOS/tasks.c **** 
  44:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:FreeRTOS/tasks.c ****     contact details.
  46:FreeRTOS/tasks.c **** 
  47:FreeRTOS/tasks.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:FreeRTOS/tasks.c ****     critical systems.
  49:FreeRTOS/tasks.c **** 
  50:FreeRTOS/tasks.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:FreeRTOS/tasks.c ****     licensing and training services.
  52:FreeRTOS/tasks.c **** */
  53:FreeRTOS/tasks.c **** 
  54:FreeRTOS/tasks.c **** 
  55:FreeRTOS/tasks.c **** #include <stdio.h>
  56:FreeRTOS/tasks.c **** #include <stdlib.h>
  57:FreeRTOS/tasks.c **** #include <string.h>
  58:FreeRTOS/tasks.c **** 
  59:FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  60:FreeRTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  61:FreeRTOS/tasks.c **** task.h is included from an application file. */
  62:FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  63:FreeRTOS/tasks.c **** 
  64:FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  65:FreeRTOS/tasks.c **** #include "task.h"
  66:FreeRTOS/tasks.c **** #include "StackMacros.h"
  67:FreeRTOS/tasks.c **** 
  68:FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  69:FreeRTOS/tasks.c **** 
  70:FreeRTOS/tasks.c **** /*
  71:FreeRTOS/tasks.c ****  * Macro to define the amount of stack available to the idle task.
  72:FreeRTOS/tasks.c ****  */
  73:FreeRTOS/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
  74:FreeRTOS/tasks.c **** 
  75:FreeRTOS/tasks.c **** #define tskIDLE_PRIORITY			( ( unsigned portBASE_TYPE ) 0 )
  76:FreeRTOS/tasks.c **** 
  77:FreeRTOS/tasks.c **** /*
  78:FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated to each task,
  79:FreeRTOS/tasks.c ****  * and stores the context of the task.
  80:FreeRTOS/tasks.c ****  */
  81:FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock
  82:FreeRTOS/tasks.c **** {
  83:FreeRTOS/tasks.c **** 	volatile portSTACK_TYPE	*pxTopOfStack;		/*< Points to the location of the last item placed on the 
  84:FreeRTOS/tasks.c **** 
  85:FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
  86:FreeRTOS/tasks.c **** 		xMPU_SETTINGS xMPUSettings;				/*< The MPU settings are defined as part of the port layer.  THIS 
  87:FreeRTOS/tasks.c **** 	#endif	
  88:FreeRTOS/tasks.c **** 	
  89:FreeRTOS/tasks.c **** 	xListItem				xGenericListItem;	/*< List item used to place the TCB in ready and blocked queues. */
  90:FreeRTOS/tasks.c **** 	xListItem				xEventListItem;		/*< List item used to place the TCB in event lists. */
  91:FreeRTOS/tasks.c **** 	unsigned portBASE_TYPE	uxPriority;			/*< The priority of the task where 0 is the lowest priority. 
  92:FreeRTOS/tasks.c **** 	portSTACK_TYPE			*pxStack;			/*< Points to the start of the stack. */
  93:FreeRTOS/tasks.c **** 	signed char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when c
  94:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/cck0uY6y.s 			page 150


  95:FreeRTOS/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
  96:FreeRTOS/tasks.c **** 		portSTACK_TYPE *pxEndOfStack;			/*< Used for stack overflow checking on architectures where the s
  97:FreeRTOS/tasks.c **** 	#endif
  98:FreeRTOS/tasks.c **** 
  99:FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 100:FreeRTOS/tasks.c **** 		unsigned portBASE_TYPE uxCriticalNesting;
 101:FreeRTOS/tasks.c **** 	#endif
 102:FreeRTOS/tasks.c **** 
 103:FreeRTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 104:FreeRTOS/tasks.c **** 		unsigned portBASE_TYPE	uxTCBNumber;	/*< This is used for tracing the scheduler and making debuggi
 105:FreeRTOS/tasks.c **** 	#endif
 106:FreeRTOS/tasks.c **** 
 107:FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 108:FreeRTOS/tasks.c **** 		unsigned portBASE_TYPE uxBasePriority;	/*< The priority last assigned to the task - used by the p
 109:FreeRTOS/tasks.c **** 	#endif
 110:FreeRTOS/tasks.c **** 
 111:FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 112:FreeRTOS/tasks.c **** 		pdTASK_HOOK_CODE pxTaskTag;
 113:FreeRTOS/tasks.c **** 	#endif
 114:FreeRTOS/tasks.c **** 
 115:FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 116:FreeRTOS/tasks.c **** 		unsigned long ulRunTimeCounter;		/*< Used for calculating how much CPU time each task is utilisin
 117:FreeRTOS/tasks.c **** 	#endif
 118:FreeRTOS/tasks.c **** 
 119:FreeRTOS/tasks.c **** } tskTCB;
 120:FreeRTOS/tasks.c **** 
 121:FreeRTOS/tasks.c **** 
 122:FreeRTOS/tasks.c **** /*
 123:FreeRTOS/tasks.c ****  * Some kernel aware debuggers require data to be viewed to be global, rather
 124:FreeRTOS/tasks.c ****  * than file scope.
 125:FreeRTOS/tasks.c ****  */
 126:FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 127:FreeRTOS/tasks.c **** 	#define static
 128:FreeRTOS/tasks.c **** #endif
 129:FreeRTOS/tasks.c **** 
 130:FreeRTOS/tasks.c **** /*lint -e956 */
 131:FreeRTOS/tasks.c **** PRIVILEGED_DATA tskTCB * volatile pxCurrentTCB = NULL;
 132:FreeRTOS/tasks.c **** 
 133:FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 134:FreeRTOS/tasks.c **** 
 135:FreeRTOS/tasks.c **** PRIVILEGED_DATA static xList pxReadyTasksLists[ configMAX_PRIORITIES ];	/*< Prioritised ready tasks
 136:FreeRTOS/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList1;							/*< Delayed tasks. */
 137:FreeRTOS/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList2;							/*< Delayed tasks (two lists are used - one f
 138:FreeRTOS/tasks.c **** PRIVILEGED_DATA static xList * volatile pxDelayedTaskList ;				/*< Points to the delayed task list 
 139:FreeRTOS/tasks.c **** PRIVILEGED_DATA static xList * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task 
 140:FreeRTOS/tasks.c **** PRIVILEGED_DATA static xList xPendingReadyList;							/*< Tasks that have been readied while the sc
 141:FreeRTOS/tasks.c **** 
 142:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 143:FreeRTOS/tasks.c **** 
 144:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static volatile xList xTasksWaitingTermination;		/*< Tasks that have been deleted 
 145:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTasksDeleted = ( unsigned portBASE_TYPE )
 146:FreeRTOS/tasks.c **** 
 147:FreeRTOS/tasks.c **** #endif
 148:FreeRTOS/tasks.c **** 
 149:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 150:FreeRTOS/tasks.c **** 
 151:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static xList xSuspendedTaskList;					/*< Tasks that are currently suspended. */
ARM GAS  /tmp/cck0uY6y.s 			page 151


 152:FreeRTOS/tasks.c **** 
 153:FreeRTOS/tasks.c **** #endif
 154:FreeRTOS/tasks.c **** 
 155:FreeRTOS/tasks.c **** /* File private variables. --------------------------------*/
 156:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxCurrentNumberOfTasks 	= ( unsigned portBAS
 157:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile portTickType xTickCount 						= ( portTickType ) 0;
 158:FreeRTOS/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTopUsedPriority	 				= tskIDLE_PRIORITY;
 159:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTopReadyPriority 		= tskIDLE_PRIORITY;
 160:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile signed portBASE_TYPE xSchedulerRunning 			= pdFALSE;
 161:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxSchedulerSuspended	 	= ( unsigned portBASE
 162:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxMissedTicks 			= ( unsigned portBASE_TYPE 
 163:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xMissedYield 						= ( portBASE_TYPE ) pdFALSE;
 164:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xNumOfOverflows 					= ( portBASE_TYPE ) 0;
 165:FreeRTOS/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTaskNumber 						= ( unsigned portBASE_TYPE ) 0;
 166:FreeRTOS/tasks.c **** 
 167:FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 168:FreeRTOS/tasks.c **** 
 169:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static char pcStatsString[ 50 ] ;
 170:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static unsigned long ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/co
 171:FreeRTOS/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList
 172:FreeRTOS/tasks.c **** 
 173:FreeRTOS/tasks.c **** #endif
 174:FreeRTOS/tasks.c **** 
 175:FreeRTOS/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 176:FreeRTOS/tasks.c **** 
 177:FreeRTOS/tasks.c **** /*
 178:FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 179:FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
 180:FreeRTOS/tasks.c ****  */
 181:FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5 )
 182:FreeRTOS/tasks.c **** 
 183:FreeRTOS/tasks.c **** /*
 184:FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 185:FreeRTOS/tasks.c ****  */
 186:FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR		( ( signed char ) 'B' )
 187:FreeRTOS/tasks.c **** #define tskREADY_CHAR		( ( signed char ) 'R' )
 188:FreeRTOS/tasks.c **** #define tskDELETED_CHAR		( ( signed char ) 'D' )
 189:FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR	( ( signed char ) 'S' )
 190:FreeRTOS/tasks.c **** 
 191:FreeRTOS/tasks.c **** /*
 192:FreeRTOS/tasks.c ****  * Macros and private variables used by the trace facility.
 193:FreeRTOS/tasks.c ****  */
 194:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 195:FreeRTOS/tasks.c **** 
 196:FreeRTOS/tasks.c **** 	#define tskSIZE_OF_EACH_TRACE_LINE			( ( unsigned long ) ( sizeof( unsigned long ) + sizeof( unsig
 197:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static volatile signed char * volatile pcTraceBuffer;
 198:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static signed char *pcTraceBufferStart;
 199:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static signed char *pcTraceBufferEnd;
 200:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static signed portBASE_TYPE xTracing = pdFALSE;
 201:FreeRTOS/tasks.c **** 	static unsigned portBASE_TYPE uxPreviousTask = 255;
 202:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static char pcStatusString[ 50 ];
 203:FreeRTOS/tasks.c **** 
 204:FreeRTOS/tasks.c **** #endif
 205:FreeRTOS/tasks.c **** 
 206:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 207:FreeRTOS/tasks.c **** 
 208:FreeRTOS/tasks.c **** /*
ARM GAS  /tmp/cck0uY6y.s 			page 152


 209:FreeRTOS/tasks.c ****  * Macro that writes a trace of scheduler activity to a buffer.  This trace
 210:FreeRTOS/tasks.c ****  * shows which task is running when and is very useful as a debugging tool.
 211:FreeRTOS/tasks.c ****  * As this macro is called each context switch it is a good idea to undefine
 212:FreeRTOS/tasks.c ****  * it if not using the facility.
 213:FreeRTOS/tasks.c ****  */
 214:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 215:FreeRTOS/tasks.c **** 
 216:FreeRTOS/tasks.c **** 	#define vWriteTraceToBuffer()																	\
 217:FreeRTOS/tasks.c **** 	{																								\
 218:FreeRTOS/tasks.c **** 		if( xTracing )																				\
 219:FreeRTOS/tasks.c **** 		{																							\
 220:FreeRTOS/tasks.c **** 			if( uxPreviousTask != pxCurrentTCB->uxTCBNumber )										\
 221:FreeRTOS/tasks.c **** 			{																						\
 222:FreeRTOS/tasks.c **** 				if( ( pcTraceBuffer + tskSIZE_OF_EACH_TRACE_LINE ) < pcTraceBufferEnd )				\
 223:FreeRTOS/tasks.c **** 				{																					\
 224:FreeRTOS/tasks.c **** 					uxPreviousTask = pxCurrentTCB->uxTCBNumber;										\
 225:FreeRTOS/tasks.c **** 					*( unsigned long * ) pcTraceBuffer = ( unsigned long ) xTickCount;		\
 226:FreeRTOS/tasks.c **** 					pcTraceBuffer += sizeof( unsigned long );									\
 227:FreeRTOS/tasks.c **** 					*( unsigned long * ) pcTraceBuffer = ( unsigned long ) uxPreviousTask;	\
 228:FreeRTOS/tasks.c **** 					pcTraceBuffer += sizeof( unsigned long );									\
 229:FreeRTOS/tasks.c **** 				}																					\
 230:FreeRTOS/tasks.c **** 				else																				\
 231:FreeRTOS/tasks.c **** 				{																					\
 232:FreeRTOS/tasks.c **** 					xTracing = pdFALSE;																\
 233:FreeRTOS/tasks.c **** 				}																					\
 234:FreeRTOS/tasks.c **** 			}																						\
 235:FreeRTOS/tasks.c **** 		}																							\
 236:FreeRTOS/tasks.c **** 	}
 237:FreeRTOS/tasks.c **** 
 238:FreeRTOS/tasks.c **** #else
 239:FreeRTOS/tasks.c **** 
 240:FreeRTOS/tasks.c **** 	#define vWriteTraceToBuffer()
 241:FreeRTOS/tasks.c **** 
 242:FreeRTOS/tasks.c **** #endif
 243:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 244:FreeRTOS/tasks.c **** 
 245:FreeRTOS/tasks.c **** /*
 246:FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready queue for
 247:FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.  One quirk of this is
 248:FreeRTOS/tasks.c ****  * that if the task being inserted is at the same priority as the currently
 249:FreeRTOS/tasks.c ****  * executing task, then it will only be rescheduled after the currently
 250:FreeRTOS/tasks.c ****  * executing task has been rescheduled.
 251:FreeRTOS/tasks.c ****  */
 252:FreeRTOS/tasks.c **** #define prvAddTaskToReadyQueue( pxTCB )																			\
 253:FreeRTOS/tasks.c **** {																												\
 254:FreeRTOS/tasks.c **** 	if( pxTCB->uxPriority > uxTopReadyPriority )																\
 255:FreeRTOS/tasks.c **** 	{																											\
 256:FreeRTOS/tasks.c **** 		uxTopReadyPriority = pxTCB->uxPriority;																	\
 257:FreeRTOS/tasks.c **** 	}																											\
 258:FreeRTOS/tasks.c **** 	vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListIte
 259:FreeRTOS/tasks.c **** }
 260:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 261:FreeRTOS/tasks.c **** 
 262:FreeRTOS/tasks.c **** /*
 263:FreeRTOS/tasks.c ****  * Macro that looks at the list of tasks that are currently delayed to see if
 264:FreeRTOS/tasks.c ****  * any require waking.
 265:FreeRTOS/tasks.c ****  *
ARM GAS  /tmp/cck0uY6y.s 			page 153


 266:FreeRTOS/tasks.c ****  * Tasks are stored in the queue in the order of their wake time - meaning
 267:FreeRTOS/tasks.c ****  * once one tasks has been found whose timer has not expired we need not look
 268:FreeRTOS/tasks.c ****  * any further down the list.
 269:FreeRTOS/tasks.c ****  */
 270:FreeRTOS/tasks.c **** #define prvCheckDelayedTasks()																						\
 271:FreeRTOS/tasks.c **** {																													\
 272:FreeRTOS/tasks.c **** register tskTCB *pxTCB;																								\
 273:FreeRTOS/tasks.c **** 																													\
 274:FreeRTOS/tasks.c **** 	while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ) ) != NULL )						\
 275:FreeRTOS/tasks.c **** 	{																												\
 276:FreeRTOS/tasks.c **** 		if( xTickCount < listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) ) )									\
 277:FreeRTOS/tasks.c **** 		{																											\
 278:FreeRTOS/tasks.c **** 			break;																									\
 279:FreeRTOS/tasks.c **** 		}																											\
 280:FreeRTOS/tasks.c **** 		vListRemove( &( pxTCB->xGenericListItem ) );																\
 281:FreeRTOS/tasks.c **** 		/* Is the task waiting on an event also? */																	\
 282:FreeRTOS/tasks.c **** 		if( pxTCB->xEventListItem.pvContainer )																		\
 283:FreeRTOS/tasks.c **** 		{																											\
 284:FreeRTOS/tasks.c **** 			vListRemove( &( pxTCB->xEventListItem ) );																\
 285:FreeRTOS/tasks.c **** 		}																											\
 286:FreeRTOS/tasks.c **** 		prvAddTaskToReadyQueue( pxTCB );																			\
 287:FreeRTOS/tasks.c **** 	}																												\
 288:FreeRTOS/tasks.c **** }
 289:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 290:FreeRTOS/tasks.c **** 
 291:FreeRTOS/tasks.c **** /*
 292:FreeRTOS/tasks.c ****  * Several functions take an xTaskHandle parameter that can optionally be NULL,
 293:FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 294:FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 295:FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 296:FreeRTOS/tasks.c ****  */
 297:FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( pxHandle == NULL ) ? ( tskTCB * ) pxCurrentTCB : ( tskT
 298:FreeRTOS/tasks.c **** 
 299:FreeRTOS/tasks.c **** 
 300:FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 301:FreeRTOS/tasks.c **** 
 302:FreeRTOS/tasks.c **** /*
 303:FreeRTOS/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 304:FreeRTOS/tasks.c ****  * into the TCB structure.
 305:FreeRTOS/tasks.c ****  */
 306:FreeRTOS/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
 307:FreeRTOS/tasks.c **** 
 308:FreeRTOS/tasks.c **** /*
 309:FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 310:FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 311:FreeRTOS/tasks.c ****  */
 312:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 313:FreeRTOS/tasks.c **** 
 314:FreeRTOS/tasks.c **** /*
 315:FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 316:FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 317:FreeRTOS/tasks.c ****  * creation of the first user task.
 318:FreeRTOS/tasks.c ****  *
 319:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 320:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 321:FreeRTOS/tasks.c ****  *
 322:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
ARM GAS  /tmp/cck0uY6y.s 			page 154


 323:FreeRTOS/tasks.c ****  *
 324:FreeRTOS/tasks.c ****  */
 325:FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 326:FreeRTOS/tasks.c **** 
 327:FreeRTOS/tasks.c **** /*
 328:FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 329:FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 330:FreeRTOS/tasks.c ****  *
 331:FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 332:FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 333:FreeRTOS/tasks.c ****  */
 334:FreeRTOS/tasks.c **** #if ( ( INCLUDE_vTaskDelete == 1 ) || ( INCLUDE_vTaskCleanUpResources == 1 ) )
 335:FreeRTOS/tasks.c **** 
 336:FreeRTOS/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB ) PRIVILEGED_FUNCTION;
 337:FreeRTOS/tasks.c **** 
 338:FreeRTOS/tasks.c **** #endif
 339:FreeRTOS/tasks.c **** 
 340:FreeRTOS/tasks.c **** /*
 341:FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 342:FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 343:FreeRTOS/tasks.c ****  * and its TCB deleted.
 344:FreeRTOS/tasks.c ****  */
 345:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 346:FreeRTOS/tasks.c **** 
 347:FreeRTOS/tasks.c **** /*
 348:FreeRTOS/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 349:FreeRTOS/tasks.c ****  * allocation was successful.
 350:FreeRTOS/tasks.c ****  */
 351:FreeRTOS/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
 352:FreeRTOS/tasks.c **** 
 353:FreeRTOS/tasks.c **** /*
 354:FreeRTOS/tasks.c ****  * Called from vTaskList.  vListTasks details all the tasks currently under
 355:FreeRTOS/tasks.c ****  * control of the scheduler.  The tasks may be in one of a number of lists.
 356:FreeRTOS/tasks.c ****  * prvListTaskWithinSingleList accepts a list and details the tasks from
 357:FreeRTOS/tasks.c ****  * within just that list.
 358:FreeRTOS/tasks.c ****  *
 359:FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 360:FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 361:FreeRTOS/tasks.c ****  */
 362:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 363:FreeRTOS/tasks.c **** 
 364:FreeRTOS/tasks.c **** 	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed c
 365:FreeRTOS/tasks.c **** 
 366:FreeRTOS/tasks.c **** #endif
 367:FreeRTOS/tasks.c **** 
 368:FreeRTOS/tasks.c **** /*
 369:FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 370:FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 371:FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 372:FreeRTOS/tasks.c ****  */
 373:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 374:FreeRTOS/tasks.c **** 
 375:FreeRTOS/tasks.c **** 	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte ) PRIVILEGED_F
 376:FreeRTOS/tasks.c **** 
 377:FreeRTOS/tasks.c **** #endif
 378:FreeRTOS/tasks.c **** 
 379:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/cck0uY6y.s 			page 155


 380:FreeRTOS/tasks.c **** /*lint +e956 */
 381:FreeRTOS/tasks.c **** 
 382:FreeRTOS/tasks.c **** 
 383:FreeRTOS/tasks.c **** 
 384:FreeRTOS/tasks.c **** /*-----------------------------------------------------------
 385:FreeRTOS/tasks.c ****  * TASK CREATION API documented in task.h
 386:FreeRTOS/tasks.c ****  *----------------------------------------------------------*/
 387:FreeRTOS/tasks.c **** 
 388:FreeRTOS/tasks.c **** signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, 
 389:FreeRTOS/tasks.c **** {
 3726              		.loc 1 389 0
 3727              		@ args = 16, pretend = 0, frame = 32
 3728              		@ frame_needed = 1, uses_anonymous_args = 0
 3729 0000 80B5     		push	{r7, lr}
 3730              	.LCFI0:
 3731 0002 8AB0     		sub	sp, sp, #40
 3732              	.LCFI1:
 3733 0004 02AF     		add	r7, sp, #8
 3734              	.LCFI2:
 3735 0006 F860     		str	r0, [r7, #12]
 3736 0008 B960     		str	r1, [r7, #8]
 3737 000a 3B60     		str	r3, [r7, #0]
 3738 000c 1346     		mov	r3, r2	@ movhi
 3739 000e FB80     		strh	r3, [r7, #6]	@ movhi
 390:FreeRTOS/tasks.c **** signed portBASE_TYPE xReturn;
 391:FreeRTOS/tasks.c **** tskTCB * pxNewTCB;
 392:FreeRTOS/tasks.c **** 
 393:FreeRTOS/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 394:FreeRTOS/tasks.c **** 	checking that the allocation was successful. */
 395:FreeRTOS/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 3740              		.loc 1 395 0
 3741 0010 FB88     		ldrh	r3, [r7, #6]
 3742 0012 1846     		mov	r0, r3
 3743 0014 396B     		ldr	r1, [r7, #48]
 3744 0016 FFF7FEFF 		bl	prvAllocateTCBAndStack
 3745 001a 0346     		mov	r3, r0
 3746 001c BB61     		str	r3, [r7, #24]
 396:FreeRTOS/tasks.c **** 
 397:FreeRTOS/tasks.c **** 	if( pxNewTCB != NULL )
 3747              		.loc 1 397 0
 3748 001e BB69     		ldr	r3, [r7, #24]
 3749 0020 002B     		cmp	r3, #0
 3750 0022 00F09980 		beq	.L2
 3751              	.LBB2:
 398:FreeRTOS/tasks.c **** 	{
 399:FreeRTOS/tasks.c **** 		portSTACK_TYPE *pxTopOfStack;
 400:FreeRTOS/tasks.c **** 
 401:FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 402:FreeRTOS/tasks.c **** 			/* Should the task be created in privileged mode? */
 403:FreeRTOS/tasks.c **** 			portBASE_TYPE xRunPrivileged;
 404:FreeRTOS/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0x00 )
 405:FreeRTOS/tasks.c **** 			{
 406:FreeRTOS/tasks.c **** 				xRunPrivileged = pdTRUE;
 407:FreeRTOS/tasks.c **** 			}
 408:FreeRTOS/tasks.c **** 			else
 409:FreeRTOS/tasks.c **** 			{
 410:FreeRTOS/tasks.c **** 				xRunPrivileged = pdFALSE;
ARM GAS  /tmp/cck0uY6y.s 			page 156


 411:FreeRTOS/tasks.c **** 			}
 412:FreeRTOS/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 413:FreeRTOS/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 414:FreeRTOS/tasks.c **** 
 415:FreeRTOS/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 416:FreeRTOS/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or visa versa.
 417:FreeRTOS/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 418:FreeRTOS/tasks.c **** 		required by the port. */
 419:FreeRTOS/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 420:FreeRTOS/tasks.c **** 		{
 421:FreeRTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 3752              		.loc 1 421 0
 3753 0026 BB69     		ldr	r3, [r7, #24]
 3754 0028 1A6B     		ldr	r2, [r3, #48]
 3755 002a FB88     		ldrh	r3, [r7, #6]
 3756 002c 03F1FF33 		add	r3, r3, #-1
 3757 0030 4FEA8303 		lsl	r3, r3, #2
 3758 0034 1344     		add	r3, r2, r3
 3759 0036 FB61     		str	r3, [r7, #28]
 422:FreeRTOS/tasks.c **** 			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~
 3760              		.loc 1 422 0
 3761 0038 FB69     		ldr	r3, [r7, #28]
 3762 003a 23F00703 		bic	r3, r3, #7
 3763 003e FB61     		str	r3, [r7, #28]
 423:FreeRTOS/tasks.c **** 		}
 424:FreeRTOS/tasks.c **** 		#else
 425:FreeRTOS/tasks.c **** 		{
 426:FreeRTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 427:FreeRTOS/tasks.c **** 
 428:FreeRTOS/tasks.c **** 			/* If we want to use stack checking on architectures that use
 429:FreeRTOS/tasks.c **** 			a positive stack growth direction then we also need to store the
 430:FreeRTOS/tasks.c **** 			other extreme of the stack space. */
 431:FreeRTOS/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 432:FreeRTOS/tasks.c **** 		}
 433:FreeRTOS/tasks.c **** 		#endif
 434:FreeRTOS/tasks.c **** 
 435:FreeRTOS/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 436:FreeRTOS/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 3764              		.loc 1 436 0
 3765 0040 FB88     		ldrh	r3, [r7, #6]
 3766 0042 0093     		str	r3, [sp, #0]
 3767 0044 B869     		ldr	r0, [r7, #24]
 3768 0046 B968     		ldr	r1, [r7, #8]
 3769 0048 BA6A     		ldr	r2, [r7, #40]
 3770 004a 7B6B     		ldr	r3, [r7, #52]
 3771 004c FFF7FEFF 		bl	prvInitialiseTCBVariables
 437:FreeRTOS/tasks.c **** 
 438:FreeRTOS/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 439:FreeRTOS/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 440:FreeRTOS/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 441:FreeRTOS/tasks.c **** 		the	top of stack variable is updated. */
 442:FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 443:FreeRTOS/tasks.c **** 		{
 444:FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 445:FreeRTOS/tasks.c **** 		}
 446:FreeRTOS/tasks.c **** 		#else
 447:FreeRTOS/tasks.c **** 		{
ARM GAS  /tmp/cck0uY6y.s 			page 157


 448:FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 3772              		.loc 1 448 0
 3773 0050 F869     		ldr	r0, [r7, #28]
 3774 0052 F968     		ldr	r1, [r7, #12]
 3775 0054 3A68     		ldr	r2, [r7, #0]
 3776 0056 FFF7FEFF 		bl	pxPortInitialiseStack
 3777 005a 0346     		mov	r3, r0
 3778 005c 1A46     		mov	r2, r3
 3779 005e BB69     		ldr	r3, [r7, #24]
 3780 0060 1A60     		str	r2, [r3, #0]
 449:FreeRTOS/tasks.c **** 		}
 450:FreeRTOS/tasks.c **** 		#endif
 451:FreeRTOS/tasks.c **** 
 452:FreeRTOS/tasks.c **** 		/* We are going to manipulate the task queues to add this task to a
 453:FreeRTOS/tasks.c **** 		ready list, so must make sure no interrupts occur. */
 454:FreeRTOS/tasks.c **** 		portENTER_CRITICAL();
 3781              		.loc 1 454 0
 3782 0062 FFF7FEFF 		bl	vPortEnterCritical
 455:FreeRTOS/tasks.c **** 		{
 456:FreeRTOS/tasks.c **** 			uxCurrentNumberOfTasks++;
 3783              		.loc 1 456 0
 3784 0066 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 3785 006a C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 3786 006e 1B68     		ldr	r3, [r3, #0]
 3787 0070 03F10102 		add	r2, r3, #1
 3788 0074 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 3789 0078 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 3790 007c 1A60     		str	r2, [r3, #0]
 457:FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 3791              		.loc 1 457 0
 3792 007e 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 3793 0082 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 3794 0086 1B68     		ldr	r3, [r3, #0]
 3795 0088 012B     		cmp	r3, #1
 3796 008a 08D1     		bne	.L3
 458:FreeRTOS/tasks.c **** 			{
 459:FreeRTOS/tasks.c **** 				/* As this is the first task it must also be the current task. */
 460:FreeRTOS/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 3797              		.loc 1 460 0
 3798 008c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3799 0090 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3800 0094 BA69     		ldr	r2, [r7, #24]
 3801 0096 1A60     		str	r2, [r3, #0]
 461:FreeRTOS/tasks.c **** 
 462:FreeRTOS/tasks.c **** 				/* This is the first task to be created so do the preliminary
 463:FreeRTOS/tasks.c **** 				initialisation required.  We will not recover if this call
 464:FreeRTOS/tasks.c **** 				fails, but we will report the failure. */
 465:FreeRTOS/tasks.c **** 				prvInitialiseTaskLists();
 3802              		.loc 1 465 0
 3803 0098 FFF7FEFF 		bl	prvInitialiseTaskLists
 3804 009c 15E0     		b	.L4
 3805              	.L3:
 466:FreeRTOS/tasks.c **** 			}
 467:FreeRTOS/tasks.c **** 			else
 468:FreeRTOS/tasks.c **** 			{
 469:FreeRTOS/tasks.c **** 				/* If the scheduler is not already running, make this task the
 470:FreeRTOS/tasks.c **** 				current task if it is the highest priority task to be created
ARM GAS  /tmp/cck0uY6y.s 			page 158


 471:FreeRTOS/tasks.c **** 				so far. */
 472:FreeRTOS/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 3806              		.loc 1 472 0
 3807 009e 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 3808 00a2 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 3809 00a6 1B68     		ldr	r3, [r3, #0]
 3810 00a8 002B     		cmp	r3, #0
 3811 00aa 0ED1     		bne	.L4
 473:FreeRTOS/tasks.c **** 				{
 474:FreeRTOS/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 3812              		.loc 1 474 0
 3813 00ac 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3814 00b0 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3815 00b4 1B68     		ldr	r3, [r3, #0]
 3816 00b6 DA6A     		ldr	r2, [r3, #44]
 3817 00b8 BB6A     		ldr	r3, [r7, #40]
 3818 00ba 9A42     		cmp	r2, r3
 3819 00bc 05D8     		bhi	.L4
 475:FreeRTOS/tasks.c **** 					{
 476:FreeRTOS/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 3820              		.loc 1 476 0
 3821 00be 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3822 00c2 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3823 00c6 BA69     		ldr	r2, [r7, #24]
 3824 00c8 1A60     		str	r2, [r3, #0]
 3825              	.L4:
 477:FreeRTOS/tasks.c **** 					}
 478:FreeRTOS/tasks.c **** 				}
 479:FreeRTOS/tasks.c **** 			}
 480:FreeRTOS/tasks.c **** 
 481:FreeRTOS/tasks.c **** 			/* Remember the top priority to make context switching faster.  Use
 482:FreeRTOS/tasks.c **** 			the priority in pxNewTCB as this has been capped to a valid value. */
 483:FreeRTOS/tasks.c **** 			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 3826              		.loc 1 483 0
 3827 00ca BB69     		ldr	r3, [r7, #24]
 3828 00cc DA6A     		ldr	r2, [r3, #44]
 3829 00ce 40F20003 		movw	r3, #:lower16:uxTopUsedPriority
 3830 00d2 C0F20003 		movt	r3, #:upper16:uxTopUsedPriority
 3831 00d6 1B68     		ldr	r3, [r3, #0]
 3832 00d8 9A42     		cmp	r2, r3
 3833 00da 06D9     		bls	.L5
 484:FreeRTOS/tasks.c **** 			{
 485:FreeRTOS/tasks.c **** 				uxTopUsedPriority = pxNewTCB->uxPriority;
 3834              		.loc 1 485 0
 3835 00dc BB69     		ldr	r3, [r7, #24]
 3836 00de DA6A     		ldr	r2, [r3, #44]
 3837 00e0 40F20003 		movw	r3, #:lower16:uxTopUsedPriority
 3838 00e4 C0F20003 		movt	r3, #:upper16:uxTopUsedPriority
 3839 00e8 1A60     		str	r2, [r3, #0]
 3840              	.L5:
 486:FreeRTOS/tasks.c **** 			}
 487:FreeRTOS/tasks.c **** 
 488:FreeRTOS/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 489:FreeRTOS/tasks.c **** 			{
 490:FreeRTOS/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 491:FreeRTOS/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 492:FreeRTOS/tasks.c **** 			}
ARM GAS  /tmp/cck0uY6y.s 			page 159


 493:FreeRTOS/tasks.c **** 			#endif
 494:FreeRTOS/tasks.c **** 			uxTaskNumber++;
 3841              		.loc 1 494 0
 3842 00ea 40F20003 		movw	r3, #:lower16:uxTaskNumber
 3843 00ee C0F20003 		movt	r3, #:upper16:uxTaskNumber
 3844 00f2 1B68     		ldr	r3, [r3, #0]
 3845 00f4 03F10102 		add	r2, r3, #1
 3846 00f8 40F20003 		movw	r3, #:lower16:uxTaskNumber
 3847 00fc C0F20003 		movt	r3, #:upper16:uxTaskNumber
 3848 0100 1A60     		str	r2, [r3, #0]
 495:FreeRTOS/tasks.c **** 
 496:FreeRTOS/tasks.c **** 			prvAddTaskToReadyQueue( pxNewTCB );
 3849              		.loc 1 496 0
 3850 0102 BB69     		ldr	r3, [r7, #24]
 3851 0104 DA6A     		ldr	r2, [r3, #44]
 3852 0106 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3853 010a C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3854 010e 1B68     		ldr	r3, [r3, #0]
 3855 0110 9A42     		cmp	r2, r3
 3856 0112 06D9     		bls	.L6
 3857 0114 BB69     		ldr	r3, [r7, #24]
 3858 0116 DA6A     		ldr	r2, [r3, #44]
 3859 0118 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3860 011c C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3861 0120 1A60     		str	r2, [r3, #0]
 3862              	.L6:
 3863 0122 BB69     		ldr	r3, [r7, #24]
 3864 0124 DA6A     		ldr	r2, [r3, #44]
 3865 0126 1346     		mov	r3, r2
 3866 0128 4FEA8303 		lsl	r3, r3, #2
 3867 012c 1344     		add	r3, r3, r2
 3868 012e 4FEA8303 		lsl	r3, r3, #2
 3869 0132 1A46     		mov	r2, r3
 3870 0134 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 3871 0138 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 3872 013c 1A44     		add	r2, r2, r3
 3873 013e BB69     		ldr	r3, [r7, #24]
 3874 0140 03F10403 		add	r3, r3, #4
 3875 0144 1046     		mov	r0, r2
 3876 0146 1946     		mov	r1, r3
 3877 0148 FFF7FEFF 		bl	vListInsertEnd
 497:FreeRTOS/tasks.c **** 
 498:FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 3878              		.loc 1 498 0
 3879 014c 4FF00103 		mov	r3, #1
 3880 0150 7B61     		str	r3, [r7, #20]
 499:FreeRTOS/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 500:FreeRTOS/tasks.c **** 		}
 501:FreeRTOS/tasks.c **** 		portEXIT_CRITICAL();
 3881              		.loc 1 501 0
 3882 0152 FFF7FEFF 		bl	vPortExitCritical
 3883 0156 02E0     		b	.L7
 3884              	.L2:
 3885              	.LBE2:
 502:FreeRTOS/tasks.c **** 	}
 503:FreeRTOS/tasks.c **** 	else
 504:FreeRTOS/tasks.c **** 	{
ARM GAS  /tmp/cck0uY6y.s 			page 160


 505:FreeRTOS/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 3886              		.loc 1 505 0
 3887 0158 4FF0FF33 		mov	r3, #-1
 3888 015c 7B61     		str	r3, [r7, #20]
 3889              	.L7:
 506:FreeRTOS/tasks.c **** 		traceTASK_CREATE_FAILED( pxNewTCB );
 507:FreeRTOS/tasks.c **** 	}
 508:FreeRTOS/tasks.c **** 
 509:FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
 3890              		.loc 1 509 0
 3891 015e 7B69     		ldr	r3, [r7, #20]
 3892 0160 012B     		cmp	r3, #1
 3893 0162 17D1     		bne	.L8
 510:FreeRTOS/tasks.c **** 	{
 511:FreeRTOS/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 3894              		.loc 1 511 0
 3895 0164 FB6A     		ldr	r3, [r7, #44]
 3896 0166 002B     		cmp	r3, #0
 3897 0168 02D0     		beq	.L9
 512:FreeRTOS/tasks.c **** 		{
 513:FreeRTOS/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 514:FreeRTOS/tasks.c **** 			task can use this as a handle to delete the task later if
 515:FreeRTOS/tasks.c **** 			required.*/
 516:FreeRTOS/tasks.c **** 			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 3898              		.loc 1 516 0
 3899 016a FB6A     		ldr	r3, [r7, #44]
 3900 016c BA69     		ldr	r2, [r7, #24]
 3901 016e 1A60     		str	r2, [r3, #0]
 3902              	.L9:
 517:FreeRTOS/tasks.c **** 		}
 518:FreeRTOS/tasks.c **** 
 519:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 3903              		.loc 1 519 0
 3904 0170 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 3905 0174 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 3906 0178 1B68     		ldr	r3, [r3, #0]
 3907 017a 002B     		cmp	r3, #0
 3908 017c 0AD0     		beq	.L8
 520:FreeRTOS/tasks.c **** 		{
 521:FreeRTOS/tasks.c **** 			/* If the created task is of a higher priority than the current task
 522:FreeRTOS/tasks.c **** 			then it should run now. */
 523:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 3909              		.loc 1 523 0
 3910 017e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3911 0182 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3912 0186 1B68     		ldr	r3, [r3, #0]
 3913 0188 DA6A     		ldr	r2, [r3, #44]
 3914 018a BB6A     		ldr	r3, [r7, #40]
 3915 018c 9A42     		cmp	r2, r3
 3916 018e 01D2     		bcs	.L8
 524:FreeRTOS/tasks.c **** 			{
 525:FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 3917              		.loc 1 525 0
 3918 0190 FFF7FEFF 		bl	vPortYieldFromISR
 3919              	.L8:
 526:FreeRTOS/tasks.c **** 			}
 527:FreeRTOS/tasks.c **** 		}
ARM GAS  /tmp/cck0uY6y.s 			page 161


 528:FreeRTOS/tasks.c **** 	}
 529:FreeRTOS/tasks.c **** 
 530:FreeRTOS/tasks.c **** 	return xReturn;
 3920              		.loc 1 530 0
 3921 0194 7B69     		ldr	r3, [r7, #20]
 531:FreeRTOS/tasks.c **** }
 3922              		.loc 1 531 0
 3923 0196 1846     		mov	r0, r3
 3924 0198 07F12007 		add	r7, r7, #32
 3925 019c BD46     		mov	sp, r7
 3926 019e 80BD     		pop	{r7, pc}
 3927              	.LFE29:
 3928              		.size	xTaskGenericCreate, .-xTaskGenericCreate
 3929              		.section	.text.vTaskDelayUntil,"ax",%progbits
 3930              		.align	2
 3931              		.global	vTaskDelayUntil
 3932              		.thumb
 3933              		.thumb_func
 3934              		.type	vTaskDelayUntil, %function
 3935              	vTaskDelayUntil:
 3936              	.LFB30:
 532:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 533:FreeRTOS/tasks.c **** 
 534:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 535:FreeRTOS/tasks.c **** 
 536:FreeRTOS/tasks.c **** 	void vTaskDelete( xTaskHandle pxTaskToDelete )
 537:FreeRTOS/tasks.c **** 	{
 538:FreeRTOS/tasks.c **** 	tskTCB *pxTCB;
 539:FreeRTOS/tasks.c **** 
 540:FreeRTOS/tasks.c **** 		portENTER_CRITICAL();
 541:FreeRTOS/tasks.c **** 		{
 542:FreeRTOS/tasks.c **** 			/* Ensure a yield is performed if the current task is being
 543:FreeRTOS/tasks.c **** 			deleted. */
 544:FreeRTOS/tasks.c **** 			if( pxTaskToDelete == pxCurrentTCB )
 545:FreeRTOS/tasks.c **** 			{
 546:FreeRTOS/tasks.c **** 				pxTaskToDelete = NULL;
 547:FreeRTOS/tasks.c **** 			}
 548:FreeRTOS/tasks.c **** 
 549:FreeRTOS/tasks.c **** 			/* If null is passed in here then we are deleting ourselves. */
 550:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
 551:FreeRTOS/tasks.c **** 
 552:FreeRTOS/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 553:FreeRTOS/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 554:FreeRTOS/tasks.c **** 			the termination list and free up any memory allocated by the
 555:FreeRTOS/tasks.c **** 			scheduler for the TCB and stack. */
 556:FreeRTOS/tasks.c **** 			vListRemove( &( pxTCB->xGenericListItem ) );
 557:FreeRTOS/tasks.c **** 
 558:FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
 559:FreeRTOS/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer )
 560:FreeRTOS/tasks.c **** 			{
 561:FreeRTOS/tasks.c **** 				vListRemove( &( pxTCB->xEventListItem ) );
 562:FreeRTOS/tasks.c **** 			}
 563:FreeRTOS/tasks.c **** 
 564:FreeRTOS/tasks.c **** 			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 565:FreeRTOS/tasks.c **** 
 566:FreeRTOS/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 567:FreeRTOS/tasks.c **** 			there is a task that has been deleted and that it should therefore
ARM GAS  /tmp/cck0uY6y.s 			page 162


 568:FreeRTOS/tasks.c **** 			check the xTasksWaitingTermination list. */
 569:FreeRTOS/tasks.c **** 			++uxTasksDeleted;
 570:FreeRTOS/tasks.c **** 
 571:FreeRTOS/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 572:FreeRTOS/tasks.c **** 			can detect that the task lists need re-generating. */
 573:FreeRTOS/tasks.c **** 			uxTaskNumber++;
 574:FreeRTOS/tasks.c **** 
 575:FreeRTOS/tasks.c **** 			traceTASK_DELETE( pxTCB );
 576:FreeRTOS/tasks.c **** 		}
 577:FreeRTOS/tasks.c **** 		portEXIT_CRITICAL();
 578:FreeRTOS/tasks.c **** 
 579:FreeRTOS/tasks.c **** 		/* Force a reschedule if we have just deleted the current task. */
 580:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 581:FreeRTOS/tasks.c **** 		{
 582:FreeRTOS/tasks.c **** 			if( ( void * ) pxTaskToDelete == NULL )
 583:FreeRTOS/tasks.c **** 			{
 584:FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 585:FreeRTOS/tasks.c **** 			}
 586:FreeRTOS/tasks.c **** 		}
 587:FreeRTOS/tasks.c **** 	}
 588:FreeRTOS/tasks.c **** 
 589:FreeRTOS/tasks.c **** #endif
 590:FreeRTOS/tasks.c **** 
 591:FreeRTOS/tasks.c **** 
 592:FreeRTOS/tasks.c **** 
 593:FreeRTOS/tasks.c **** 
 594:FreeRTOS/tasks.c **** 
 595:FreeRTOS/tasks.c **** 
 596:FreeRTOS/tasks.c **** /*-----------------------------------------------------------
 597:FreeRTOS/tasks.c ****  * TASK CONTROL API documented in task.h
 598:FreeRTOS/tasks.c ****  *----------------------------------------------------------*/
 599:FreeRTOS/tasks.c **** 
 600:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 601:FreeRTOS/tasks.c **** 
 602:FreeRTOS/tasks.c **** 	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
 603:FreeRTOS/tasks.c **** 	{
 3937              		.loc 1 603 0
 3938              		@ args = 0, pretend = 0, frame = 24
 3939              		@ frame_needed = 1, uses_anonymous_args = 0
 3940 0000 80B5     		push	{r7, lr}
 3941              	.LCFI3:
 3942 0002 86B0     		sub	sp, sp, #24
 3943              	.LCFI4:
 3944 0004 00AF     		add	r7, sp, #0
 3945              	.LCFI5:
 3946 0006 7860     		str	r0, [r7, #4]
 3947 0008 3960     		str	r1, [r7, #0]
 604:FreeRTOS/tasks.c **** 	portTickType xTimeToWake;
 605:FreeRTOS/tasks.c **** 	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 3948              		.loc 1 605 0
 3949 000a 4FF00003 		mov	r3, #0
 3950 000e 7B61     		str	r3, [r7, #20]
 606:FreeRTOS/tasks.c **** 
 607:FreeRTOS/tasks.c **** 		vTaskSuspendAll();
 3951              		.loc 1 607 0
 3952 0010 FFF7FEFF 		bl	vTaskSuspendAll
 608:FreeRTOS/tasks.c **** 		{
ARM GAS  /tmp/cck0uY6y.s 			page 163


 609:FreeRTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 610:FreeRTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 3953              		.loc 1 610 0
 3954 0014 7B68     		ldr	r3, [r7, #4]
 3955 0016 1A68     		ldr	r2, [r3, #0]
 3956 0018 3B68     		ldr	r3, [r7, #0]
 3957 001a 1344     		add	r3, r2, r3
 3958 001c FB60     		str	r3, [r7, #12]
 611:FreeRTOS/tasks.c **** 
 612:FreeRTOS/tasks.c **** 			if( xTickCount < *pxPreviousWakeTime )
 3959              		.loc 1 612 0
 3960 001e 7B68     		ldr	r3, [r7, #4]
 3961 0020 1A68     		ldr	r2, [r3, #0]
 3962 0022 40F20003 		movw	r3, #:lower16:xTickCount
 3963 0026 C0F20003 		movt	r3, #:upper16:xTickCount
 3964 002a 1B68     		ldr	r3, [r3, #0]
 3965 002c 9A42     		cmp	r2, r3
 3966 002e 10D9     		bls	.L12
 613:FreeRTOS/tasks.c **** 			{
 614:FreeRTOS/tasks.c **** 				/* The tick count has overflowed since this function was
 615:FreeRTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
 616:FreeRTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 617:FreeRTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
 618:FreeRTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
 619:FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 3967              		.loc 1 619 0
 3968 0030 7B68     		ldr	r3, [r7, #4]
 3969 0032 1A68     		ldr	r2, [r3, #0]
 3970 0034 FB68     		ldr	r3, [r7, #12]
 3971 0036 9A42     		cmp	r2, r3
 3972 0038 1CD9     		bls	.L20
 3973 003a 40F20003 		movw	r3, #:lower16:xTickCount
 3974 003e C0F20003 		movt	r3, #:upper16:xTickCount
 3975 0042 1B68     		ldr	r3, [r3, #0]
 3976 0044 FA68     		ldr	r2, [r7, #12]
 3977 0046 9A42     		cmp	r2, r3
 3978 0048 16D9     		bls	.L21
 620:FreeRTOS/tasks.c **** 				{
 621:FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 3979              		.loc 1 621 0
 3980 004a 4FF00103 		mov	r3, #1
 3981 004e 7B61     		str	r3, [r7, #20]
 3982 0050 13E0     		b	.L14
 3983              	.L12:
 622:FreeRTOS/tasks.c **** 				}
 623:FreeRTOS/tasks.c **** 			}
 624:FreeRTOS/tasks.c **** 			else
 625:FreeRTOS/tasks.c **** 			{
 626:FreeRTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 627:FreeRTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 628:FreeRTOS/tasks.c **** 				tick time is less than the wake time. */
 629:FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 3984              		.loc 1 629 0
 3985 0052 7B68     		ldr	r3, [r7, #4]
 3986 0054 1A68     		ldr	r2, [r3, #0]
 3987 0056 FB68     		ldr	r3, [r7, #12]
 3988 0058 9A42     		cmp	r2, r3
ARM GAS  /tmp/cck0uY6y.s 			page 164


 3989 005a 07D8     		bhi	.L15
 3990 005c 40F20003 		movw	r3, #:lower16:xTickCount
 3991 0060 C0F20003 		movt	r3, #:upper16:xTickCount
 3992 0064 1B68     		ldr	r3, [r3, #0]
 3993 0066 FA68     		ldr	r2, [r7, #12]
 3994 0068 9A42     		cmp	r2, r3
 3995 006a 06D9     		bls	.L14
 3996              	.L15:
 630:FreeRTOS/tasks.c **** 				{
 631:FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 3997              		.loc 1 631 0
 3998 006c 4FF00103 		mov	r3, #1
 3999 0070 7B61     		str	r3, [r7, #20]
 4000 0072 02E0     		b	.L14
 4001              	.L20:
 4002              		.loc 1 621 0
 4003 0074 00BF     		nop
 4004 0076 00E0     		b	.L14
 4005              	.L21:
 4006 0078 00BF     		nop
 4007              	.L14:
 632:FreeRTOS/tasks.c **** 				}
 633:FreeRTOS/tasks.c **** 			}
 634:FreeRTOS/tasks.c **** 
 635:FreeRTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
 636:FreeRTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 4008              		.loc 1 636 0
 4009 007a 7B68     		ldr	r3, [r7, #4]
 4010 007c FA68     		ldr	r2, [r7, #12]
 4011 007e 1A60     		str	r2, [r3, #0]
 637:FreeRTOS/tasks.c **** 
 638:FreeRTOS/tasks.c **** 			if( xShouldDelay )
 4012              		.loc 1 638 0
 4013 0080 7B69     		ldr	r3, [r7, #20]
 4014 0082 002B     		cmp	r3, #0
 4015 0084 39D0     		beq	.L16
 639:FreeRTOS/tasks.c **** 			{
 640:FreeRTOS/tasks.c **** 				traceTASK_DELAY_UNTIL();
 641:FreeRTOS/tasks.c **** 
 642:FreeRTOS/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 643:FreeRTOS/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 644:FreeRTOS/tasks.c **** 				both lists. */
 645:FreeRTOS/tasks.c **** 				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 4016              		.loc 1 645 0
 4017 0086 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 4018 008a C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 4019 008e 1B68     		ldr	r3, [r3, #0]
 4020 0090 03F10403 		add	r3, r3, #4
 4021 0094 1846     		mov	r0, r3
 4022 0096 FFF7FEFF 		bl	vListRemove
 646:FreeRTOS/tasks.c **** 
 647:FreeRTOS/tasks.c **** 				/* The list item will be inserted in wake time order. */
 648:FreeRTOS/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 4023              		.loc 1 648 0
 4024 009a 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 4025 009e C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 4026 00a2 1B68     		ldr	r3, [r3, #0]
ARM GAS  /tmp/cck0uY6y.s 			page 165


 4027 00a4 FA68     		ldr	r2, [r7, #12]
 4028 00a6 5A60     		str	r2, [r3, #4]
 649:FreeRTOS/tasks.c **** 
 650:FreeRTOS/tasks.c **** 				if( xTimeToWake < xTickCount )
 4029              		.loc 1 650 0
 4030 00a8 40F20003 		movw	r3, #:lower16:xTickCount
 4031 00ac C0F20003 		movt	r3, #:upper16:xTickCount
 4032 00b0 1B68     		ldr	r3, [r3, #0]
 4033 00b2 FA68     		ldr	r2, [r7, #12]
 4034 00b4 9A42     		cmp	r2, r3
 4035 00b6 10D2     		bcs	.L17
 651:FreeRTOS/tasks.c **** 				{
 652:FreeRTOS/tasks.c **** 					/* Wake time has overflowed.  Place this item in the
 653:FreeRTOS/tasks.c **** 					overflow list. */
 654:FreeRTOS/tasks.c **** 					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericL
 4036              		.loc 1 654 0
 4037 00b8 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 4038 00bc C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 4039 00c0 1A68     		ldr	r2, [r3, #0]
 4040 00c2 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 4041 00c6 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 4042 00ca 1B68     		ldr	r3, [r3, #0]
 4043 00cc 03F10403 		add	r3, r3, #4
 4044 00d0 1046     		mov	r0, r2
 4045 00d2 1946     		mov	r1, r3
 4046 00d4 FFF7FEFF 		bl	vListInsert
 4047 00d8 0FE0     		b	.L16
 4048              	.L17:
 655:FreeRTOS/tasks.c **** 				}
 656:FreeRTOS/tasks.c **** 				else
 657:FreeRTOS/tasks.c **** 				{
 658:FreeRTOS/tasks.c **** 					/* The wake time has not overflowed, so we can use the
 659:FreeRTOS/tasks.c **** 					current block list. */
 660:FreeRTOS/tasks.c **** 					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem 
 4049              		.loc 1 660 0
 4050 00da 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 4051 00de C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 4052 00e2 1A68     		ldr	r2, [r3, #0]
 4053 00e4 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 4054 00e8 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 4055 00ec 1B68     		ldr	r3, [r3, #0]
 4056 00ee 03F10403 		add	r3, r3, #4
 4057 00f2 1046     		mov	r0, r2
 4058 00f4 1946     		mov	r1, r3
 4059 00f6 FFF7FEFF 		bl	vListInsert
 4060              	.L16:
 661:FreeRTOS/tasks.c **** 				}
 662:FreeRTOS/tasks.c **** 			}
 663:FreeRTOS/tasks.c **** 		}
 664:FreeRTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 4061              		.loc 1 664 0
 4062 00fa FFF7FEFF 		bl	xTaskResumeAll
 4063 00fe 0346     		mov	r3, r0
 4064 0100 3B61     		str	r3, [r7, #16]
 665:FreeRTOS/tasks.c **** 
 666:FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 667:FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
ARM GAS  /tmp/cck0uY6y.s 			page 166


 668:FreeRTOS/tasks.c **** 		if( !xAlreadyYielded )
 4065              		.loc 1 668 0
 4066 0102 3B69     		ldr	r3, [r7, #16]
 4067 0104 002B     		cmp	r3, #0
 4068 0106 01D1     		bne	.L19
 669:FreeRTOS/tasks.c **** 		{
 670:FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
 4069              		.loc 1 670 0
 4070 0108 FFF7FEFF 		bl	vPortYieldFromISR
 4071              	.L19:
 671:FreeRTOS/tasks.c **** 		}
 672:FreeRTOS/tasks.c **** 	}
 4072              		.loc 1 672 0
 4073 010c 07F11807 		add	r7, r7, #24
 4074 0110 BD46     		mov	sp, r7
 4075 0112 80BD     		pop	{r7, pc}
 4076              	.LFE30:
 4077              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 4078              		.section	.text.vTaskDelay,"ax",%progbits
 4079              		.align	2
 4080              		.global	vTaskDelay
 4081              		.thumb
 4082              		.thumb_func
 4083              		.type	vTaskDelay, %function
 4084              	vTaskDelay:
 4085              	.LFB31:
 673:FreeRTOS/tasks.c **** 
 674:FreeRTOS/tasks.c **** #endif
 675:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 676:FreeRTOS/tasks.c **** 
 677:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 678:FreeRTOS/tasks.c **** 
 679:FreeRTOS/tasks.c **** 	void vTaskDelay( portTickType xTicksToDelay )
 680:FreeRTOS/tasks.c **** 	{
 4086              		.loc 1 680 0
 4087              		@ args = 0, pretend = 0, frame = 16
 4088              		@ frame_needed = 1, uses_anonymous_args = 0
 4089 0000 80B5     		push	{r7, lr}
 4090              	.LCFI6:
 4091 0002 84B0     		sub	sp, sp, #16
 4092              	.LCFI7:
 4093 0004 00AF     		add	r7, sp, #0
 4094              	.LCFI8:
 4095 0006 7860     		str	r0, [r7, #4]
 681:FreeRTOS/tasks.c **** 	portTickType xTimeToWake;
 682:FreeRTOS/tasks.c **** 	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 4096              		.loc 1 682 0
 4097 0008 4FF00003 		mov	r3, #0
 4098 000c FB60     		str	r3, [r7, #12]
 683:FreeRTOS/tasks.c **** 
 684:FreeRTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 685:FreeRTOS/tasks.c **** 		if( xTicksToDelay > ( portTickType ) 0 )
 4099              		.loc 1 685 0
 4100 000e 7B68     		ldr	r3, [r7, #4]
 4101 0010 002B     		cmp	r3, #0
 4102 0012 47D0     		beq	.L23
 686:FreeRTOS/tasks.c **** 		{
ARM GAS  /tmp/cck0uY6y.s 			page 167


 687:FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 4103              		.loc 1 687 0
 4104 0014 FFF7FEFF 		bl	vTaskSuspendAll
 688:FreeRTOS/tasks.c **** 			{
 689:FreeRTOS/tasks.c **** 				traceTASK_DELAY();
 690:FreeRTOS/tasks.c **** 
 691:FreeRTOS/tasks.c **** 				/* A task that is removed from the event list while the
 692:FreeRTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
 693:FreeRTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
 694:FreeRTOS/tasks.c **** 				is resumed.
 695:FreeRTOS/tasks.c **** 
 696:FreeRTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
 697:FreeRTOS/tasks.c **** 				executing task. */
 698:FreeRTOS/tasks.c **** 
 699:FreeRTOS/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 700:FreeRTOS/tasks.c **** 				not a problem. */
 701:FreeRTOS/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 4105              		.loc 1 701 0
 4106 0018 40F20003 		movw	r3, #:lower16:xTickCount
 4107 001c C0F20003 		movt	r3, #:upper16:xTickCount
 4108 0020 1A68     		ldr	r2, [r3, #0]
 4109 0022 7B68     		ldr	r3, [r7, #4]
 4110 0024 1344     		add	r3, r2, r3
 4111 0026 BB60     		str	r3, [r7, #8]
 702:FreeRTOS/tasks.c **** 
 703:FreeRTOS/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 704:FreeRTOS/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 705:FreeRTOS/tasks.c **** 				both lists. */
 706:FreeRTOS/tasks.c **** 				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 4112              		.loc 1 706 0
 4113 0028 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 4114 002c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 4115 0030 1B68     		ldr	r3, [r3, #0]
 4116 0032 03F10403 		add	r3, r3, #4
 4117 0036 1846     		mov	r0, r3
 4118 0038 FFF7FEFF 		bl	vListRemove
 707:FreeRTOS/tasks.c **** 
 708:FreeRTOS/tasks.c **** 				/* The list item will be inserted in wake time order. */
 709:FreeRTOS/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 4119              		.loc 1 709 0
 4120 003c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 4121 0040 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 4122 0044 1B68     		ldr	r3, [r3, #0]
 4123 0046 BA68     		ldr	r2, [r7, #8]
 4124 0048 5A60     		str	r2, [r3, #4]
 710:FreeRTOS/tasks.c **** 
 711:FreeRTOS/tasks.c **** 				if( xTimeToWake < xTickCount )
 4125              		.loc 1 711 0
 4126 004a 40F20003 		movw	r3, #:lower16:xTickCount
 4127 004e C0F20003 		movt	r3, #:upper16:xTickCount
 4128 0052 1B68     		ldr	r3, [r3, #0]
 4129 0054 BA68     		ldr	r2, [r7, #8]
 4130 0056 9A42     		cmp	r2, r3
 4131 0058 10D2     		bcs	.L24
 712:FreeRTOS/tasks.c **** 				{
 713:FreeRTOS/tasks.c **** 					/* Wake time has overflowed.  Place this item in the
 714:FreeRTOS/tasks.c **** 					overflow list. */
ARM GAS  /tmp/cck0uY6y.s 			page 168


 715:FreeRTOS/tasks.c **** 					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericL
 4132              		.loc 1 715 0
 4133 005a 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 4134 005e C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 4135 0062 1A68     		ldr	r2, [r3, #0]
 4136 0064 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 4137 0068 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 4138 006c 1B68     		ldr	r3, [r3, #0]
 4139 006e 03F10403 		add	r3, r3, #4
 4140 0072 1046     		mov	r0, r2
 4141 0074 1946     		mov	r1, r3
 4142 0076 FFF7FEFF 		bl	vListInsert
 4143 007a 0FE0     		b	.L25
 4144              	.L24:
 716:FreeRTOS/tasks.c **** 				}
 717:FreeRTOS/tasks.c **** 				else
 718:FreeRTOS/tasks.c **** 				{
 719:FreeRTOS/tasks.c **** 					/* The wake time has not overflowed, so we can use the
 720:FreeRTOS/tasks.c **** 					current block list. */
 721:FreeRTOS/tasks.c **** 					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem 
 4145              		.loc 1 721 0
 4146 007c 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 4147 0080 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 4148 0084 1A68     		ldr	r2, [r3, #0]
 4149 0086 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 4150 008a C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 4151 008e 1B68     		ldr	r3, [r3, #0]
 4152 0090 03F10403 		add	r3, r3, #4
 4153 0094 1046     		mov	r0, r2
 4154 0096 1946     		mov	r1, r3
 4155 0098 FFF7FEFF 		bl	vListInsert
 4156              	.L25:
 722:FreeRTOS/tasks.c **** 				}
 723:FreeRTOS/tasks.c **** 			}
 724:FreeRTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 4157              		.loc 1 724 0
 4158 009c FFF7FEFF 		bl	xTaskResumeAll
 4159 00a0 0346     		mov	r3, r0
 4160 00a2 FB60     		str	r3, [r7, #12]
 4161              	.L23:
 725:FreeRTOS/tasks.c **** 		}
 726:FreeRTOS/tasks.c **** 
 727:FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 728:FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
 729:FreeRTOS/tasks.c **** 		if( !xAlreadyYielded )
 4162              		.loc 1 729 0
 4163 00a4 FB68     		ldr	r3, [r7, #12]
 4164 00a6 002B     		cmp	r3, #0
 4165 00a8 01D1     		bne	.L27
 730:FreeRTOS/tasks.c **** 		{
 731:FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
 4166              		.loc 1 731 0
 4167 00aa FFF7FEFF 		bl	vPortYieldFromISR
 4168              	.L27:
 732:FreeRTOS/tasks.c **** 		}
 733:FreeRTOS/tasks.c **** 	}
 4169              		.loc 1 733 0
ARM GAS  /tmp/cck0uY6y.s 			page 169


 4170 00ae 07F11007 		add	r7, r7, #16
 4171 00b2 BD46     		mov	sp, r7
 4172 00b4 80BD     		pop	{r7, pc}
 4173              	.LFE31:
 4174              		.size	vTaskDelay, .-vTaskDelay
 4175 00b6 00BF     		.section	.text.vTaskPrioritySet,"ax",%progbits
 4176              		.align	2
 4177              		.global	vTaskPrioritySet
 4178              		.thumb
 4179              		.thumb_func
 4180              		.type	vTaskPrioritySet, %function
 4181              	vTaskPrioritySet:
 4182              	.LFB32:
 734:FreeRTOS/tasks.c **** 
 735:FreeRTOS/tasks.c **** #endif
 736:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 737:FreeRTOS/tasks.c **** 
 738:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 739:FreeRTOS/tasks.c **** 
 740:FreeRTOS/tasks.c **** 	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
 741:FreeRTOS/tasks.c **** 	{
 742:FreeRTOS/tasks.c **** 	tskTCB *pxTCB;
 743:FreeRTOS/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
 744:FreeRTOS/tasks.c **** 
 745:FreeRTOS/tasks.c **** 		portENTER_CRITICAL();
 746:FreeRTOS/tasks.c **** 		{
 747:FreeRTOS/tasks.c **** 			/* If null is passed in here then we are changing the
 748:FreeRTOS/tasks.c **** 			priority of the calling function. */
 749:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 750:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 751:FreeRTOS/tasks.c **** 		}
 752:FreeRTOS/tasks.c **** 		portEXIT_CRITICAL();
 753:FreeRTOS/tasks.c **** 
 754:FreeRTOS/tasks.c **** 		return uxReturn;
 755:FreeRTOS/tasks.c **** 	}
 756:FreeRTOS/tasks.c **** 
 757:FreeRTOS/tasks.c **** #endif
 758:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 759:FreeRTOS/tasks.c **** 
 760:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 761:FreeRTOS/tasks.c **** 
 762:FreeRTOS/tasks.c **** 	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
 763:FreeRTOS/tasks.c **** 	{
 4183              		.loc 1 763 0
 4184              		@ args = 0, pretend = 0, frame = 24
 4185              		@ frame_needed = 1, uses_anonymous_args = 0
 4186 0000 80B5     		push	{r7, lr}
 4187              	.LCFI9:
 4188 0002 86B0     		sub	sp, sp, #24
 4189              	.LCFI10:
 4190 0004 00AF     		add	r7, sp, #0
 4191              	.LCFI11:
 4192 0006 7860     		str	r0, [r7, #4]
 4193 0008 3960     		str	r1, [r7, #0]
 764:FreeRTOS/tasks.c **** 	tskTCB *pxTCB;
 765:FreeRTOS/tasks.c **** 	unsigned portBASE_TYPE uxCurrentPriority, xYieldRequired = pdFALSE;
 4194              		.loc 1 765 0
ARM GAS  /tmp/cck0uY6y.s 			page 170


 4195 000a 4FF00003 		mov	r3, #0
 4196 000e 7B61     		str	r3, [r7, #20]
 766:FreeRTOS/tasks.c **** 
 767:FreeRTOS/tasks.c **** 		/* Ensure the new priority is valid. */
 768:FreeRTOS/tasks.c **** 		if( uxNewPriority >= configMAX_PRIORITIES )
 4197              		.loc 1 768 0
 4198 0010 3B68     		ldr	r3, [r7, #0]
 4199 0012 042B     		cmp	r3, #4
 4200 0014 02D9     		bls	.L29
 769:FreeRTOS/tasks.c **** 		{
 770:FreeRTOS/tasks.c **** 			uxNewPriority = configMAX_PRIORITIES - 1;
 4201              		.loc 1 770 0
 4202 0016 4FF00403 		mov	r3, #4
 4203 001a 3B60     		str	r3, [r7, #0]
 4204              	.L29:
 771:FreeRTOS/tasks.c **** 		}
 772:FreeRTOS/tasks.c **** 
 773:FreeRTOS/tasks.c **** 		portENTER_CRITICAL();
 4205              		.loc 1 773 0
 4206 001c FFF7FEFF 		bl	vPortEnterCritical
 774:FreeRTOS/tasks.c **** 		{
 775:FreeRTOS/tasks.c **** 			if( pxTask == pxCurrentTCB )
 4207              		.loc 1 775 0
 4208 0020 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 4209 0024 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 4210 0028 1B68     		ldr	r3, [r3, #0]
 4211 002a 7A68     		ldr	r2, [r7, #4]
 4212 002c 9A42     		cmp	r2, r3
 4213 002e 02D1     		bne	.L30
 776:FreeRTOS/tasks.c **** 			{
 777:FreeRTOS/tasks.c **** 				pxTask = NULL;
 4214              		.loc 1 777 0
 4215 0030 4FF00003 		mov	r3, #0
 4216 0034 7B60     		str	r3, [r7, #4]
 4217              	.L30:
 778:FreeRTOS/tasks.c **** 			}
 779:FreeRTOS/tasks.c **** 
 780:FreeRTOS/tasks.c **** 			/* If null is passed in here then we are changing the
 781:FreeRTOS/tasks.c **** 			priority of the calling function. */
 782:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 4218              		.loc 1 782 0
 4219 0036 7B68     		ldr	r3, [r7, #4]
 4220 0038 002B     		cmp	r3, #0
 4221 003a 05D1     		bne	.L31
 4222 003c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 4223 0040 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 4224 0044 1B68     		ldr	r3, [r3, #0]
 4225 0046 00E0     		b	.L32
 4226              	.L31:
 4227 0048 7B68     		ldr	r3, [r7, #4]
 4228              	.L32:
 4229 004a FB60     		str	r3, [r7, #12]
 783:FreeRTOS/tasks.c **** 
 784:FreeRTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTask, uxNewPriority );
 785:FreeRTOS/tasks.c **** 
 786:FreeRTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
 787:FreeRTOS/tasks.c **** 			{
ARM GAS  /tmp/cck0uY6y.s 			page 171


 788:FreeRTOS/tasks.c **** 				uxCurrentPriority = pxTCB->uxBasePriority;
 789:FreeRTOS/tasks.c **** 			}
 790:FreeRTOS/tasks.c **** 			#else
 791:FreeRTOS/tasks.c **** 			{
 792:FreeRTOS/tasks.c **** 				uxCurrentPriority = pxTCB->uxPriority;
 4230              		.loc 1 792 0
 4231 004c FB68     		ldr	r3, [r7, #12]
 4232 004e DB6A     		ldr	r3, [r3, #44]
 4233 0050 3B61     		str	r3, [r7, #16]
 793:FreeRTOS/tasks.c **** 			}
 794:FreeRTOS/tasks.c **** 			#endif
 795:FreeRTOS/tasks.c **** 
 796:FreeRTOS/tasks.c **** 			if( uxCurrentPriority != uxNewPriority )
 4234              		.loc 1 796 0
 4235 0052 3A69     		ldr	r2, [r7, #16]
 4236 0054 3B68     		ldr	r3, [r7, #0]
 4237 0056 9A42     		cmp	r2, r3
 4238 0058 5BD0     		beq	.L33
 797:FreeRTOS/tasks.c **** 			{
 798:FreeRTOS/tasks.c **** 				/* The priority change may have readied a task of higher
 799:FreeRTOS/tasks.c **** 				priority than the calling task. */
 800:FreeRTOS/tasks.c **** 				if( uxNewPriority > uxCurrentPriority )
 4239              		.loc 1 800 0
 4240 005a 3A68     		ldr	r2, [r7, #0]
 4241 005c 3B69     		ldr	r3, [r7, #16]
 4242 005e 9A42     		cmp	r2, r3
 4243 0060 06D9     		bls	.L34
 801:FreeRTOS/tasks.c **** 				{
 802:FreeRTOS/tasks.c **** 					if( pxTask != NULL )
 4244              		.loc 1 802 0
 4245 0062 7B68     		ldr	r3, [r7, #4]
 4246 0064 002B     		cmp	r3, #0
 4247 0066 0AD0     		beq	.L40
 803:FreeRTOS/tasks.c **** 					{
 804:FreeRTOS/tasks.c **** 						/* The priority of another task is being raised.  If we
 805:FreeRTOS/tasks.c **** 						were raising the priority of the currently running task
 806:FreeRTOS/tasks.c **** 						there would be no need to switch as it must have already
 807:FreeRTOS/tasks.c **** 						been the highest priority task. */
 808:FreeRTOS/tasks.c **** 						xYieldRequired = pdTRUE;
 4248              		.loc 1 808 0
 4249 0068 4FF00103 		mov	r3, #1
 4250 006c 7B61     		str	r3, [r7, #20]
 4251 006e 07E0     		b	.L36
 4252              	.L34:
 809:FreeRTOS/tasks.c **** 					}
 810:FreeRTOS/tasks.c **** 				}
 811:FreeRTOS/tasks.c **** 				else if( pxTask == NULL )
 4253              		.loc 1 811 0
 4254 0070 7B68     		ldr	r3, [r7, #4]
 4255 0072 002B     		cmp	r3, #0
 4256 0074 04D1     		bne	.L36
 812:FreeRTOS/tasks.c **** 				{
 813:FreeRTOS/tasks.c **** 					/* Setting our own priority down means there may now be another
 814:FreeRTOS/tasks.c **** 					task of higher priority that is ready to execute. */
 815:FreeRTOS/tasks.c **** 					xYieldRequired = pdTRUE;
 4257              		.loc 1 815 0
 4258 0076 4FF00103 		mov	r3, #1
ARM GAS  /tmp/cck0uY6y.s 			page 172


 4259 007a 7B61     		str	r3, [r7, #20]
 4260 007c 00E0     		b	.L36
 4261              	.L40:
 4262              		.loc 1 808 0
 4263 007e 00BF     		nop
 4264              	.L36:
 816:FreeRTOS/tasks.c **** 				}
 817:FreeRTOS/tasks.c **** 
 818:FreeRTOS/tasks.c **** 
 819:FreeRTOS/tasks.c **** 
 820:FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
 821:FreeRTOS/tasks.c **** 				{
 822:FreeRTOS/tasks.c **** 					/* Only change the priority being used if the task is not
 823:FreeRTOS/tasks.c **** 					currently using an inherited priority. */
 824:FreeRTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 825:FreeRTOS/tasks.c **** 					{
 826:FreeRTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 827:FreeRTOS/tasks.c **** 					}
 828:FreeRTOS/tasks.c **** 
 829:FreeRTOS/tasks.c **** 					/* The base priority gets set whatever. */
 830:FreeRTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 831:FreeRTOS/tasks.c **** 				}
 832:FreeRTOS/tasks.c **** 				#else
 833:FreeRTOS/tasks.c **** 				{
 834:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
 4265              		.loc 1 834 0
 4266 0080 FB68     		ldr	r3, [r7, #12]
 4267 0082 3A68     		ldr	r2, [r7, #0]
 4268 0084 DA62     		str	r2, [r3, #44]
 835:FreeRTOS/tasks.c **** 				}
 836:FreeRTOS/tasks.c **** 				#endif
 837:FreeRTOS/tasks.c **** 
 838:FreeRTOS/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) 
 4269              		.loc 1 838 0
 4270 0086 3B68     		ldr	r3, [r7, #0]
 4271 0088 C3F10502 		rsb	r2, r3, #5
 4272 008c FB68     		ldr	r3, [r7, #12]
 4273 008e 9A61     		str	r2, [r3, #24]
 839:FreeRTOS/tasks.c **** 
 840:FreeRTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
 841:FreeRTOS/tasks.c **** 				nothing more than change it's priority variable. However, if
 842:FreeRTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
 843:FreeRTOS/tasks.c **** 				in the queue appropriate to its new priority. */
 844:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericLis
 4274              		.loc 1 844 0
 4275 0090 FB68     		ldr	r3, [r7, #12]
 4276 0092 5969     		ldr	r1, [r3, #20]
 4277 0094 3A69     		ldr	r2, [r7, #16]
 4278 0096 1346     		mov	r3, r2
 4279 0098 4FEA8303 		lsl	r3, r3, #2
 4280 009c 1344     		add	r3, r3, r2
 4281 009e 4FEA8303 		lsl	r3, r3, #2
 4282 00a2 1A46     		mov	r2, r3
 4283 00a4 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 4284 00a8 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 4285 00ac 1344     		add	r3, r2, r3
 4286 00ae 9942     		cmp	r1, r3
ARM GAS  /tmp/cck0uY6y.s 			page 173


 4287 00b0 2AD1     		bne	.L37
 845:FreeRTOS/tasks.c **** 				{
 846:FreeRTOS/tasks.c **** 					/* The task is currently in its ready list - remove before adding
 847:FreeRTOS/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
 848:FreeRTOS/tasks.c **** 					can do this even if the scheduler is suspended. */
 849:FreeRTOS/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 4288              		.loc 1 849 0
 4289 00b2 FB68     		ldr	r3, [r7, #12]
 4290 00b4 03F10403 		add	r3, r3, #4
 4291 00b8 1846     		mov	r0, r3
 4292 00ba FFF7FEFF 		bl	vListRemove
 850:FreeRTOS/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 4293              		.loc 1 850 0
 4294 00be FB68     		ldr	r3, [r7, #12]
 4295 00c0 DA6A     		ldr	r2, [r3, #44]
 4296 00c2 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 4297 00c6 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 4298 00ca 1B68     		ldr	r3, [r3, #0]
 4299 00cc 9A42     		cmp	r2, r3
 4300 00ce 06D9     		bls	.L38
 4301 00d0 FB68     		ldr	r3, [r7, #12]
 4302 00d2 DA6A     		ldr	r2, [r3, #44]
 4303 00d4 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 4304 00d8 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 4305 00dc 1A60     		str	r2, [r3, #0]
 4306              	.L38:
 4307 00de FB68     		ldr	r3, [r7, #12]
 4308 00e0 DA6A     		ldr	r2, [r3, #44]
 4309 00e2 1346     		mov	r3, r2
 4310 00e4 4FEA8303 		lsl	r3, r3, #2
 4311 00e8 1344     		add	r3, r3, r2
 4312 00ea 4FEA8303 		lsl	r3, r3, #2
 4313 00ee 1A46     		mov	r2, r3
 4314 00f0 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 4315 00f4 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 4316 00f8 1A44     		add	r2, r2, r3
 4317 00fa FB68     		ldr	r3, [r7, #12]
 4318 00fc 03F10403 		add	r3, r3, #4
 4319 0100 1046     		mov	r0, r2
 4320 0102 1946     		mov	r1, r3
 4321 0104 FFF7FEFF 		bl	vListInsertEnd
 4322              	.L37:
 851:FreeRTOS/tasks.c **** 				}
 852:FreeRTOS/tasks.c **** 
 853:FreeRTOS/tasks.c **** 				if( xYieldRequired == pdTRUE )
 4323              		.loc 1 853 0
 4324 0108 7B69     		ldr	r3, [r7, #20]
 4325 010a 012B     		cmp	r3, #1
 4326 010c 01D1     		bne	.L33
 854:FreeRTOS/tasks.c **** 				{
 855:FreeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
 4327              		.loc 1 855 0
 4328 010e FFF7FEFF 		bl	vPortYieldFromISR
 4329              	.L33:
 856:FreeRTOS/tasks.c **** 				}
 857:FreeRTOS/tasks.c **** 			}
 858:FreeRTOS/tasks.c **** 		}
ARM GAS  /tmp/cck0uY6y.s 			page 174


 859:FreeRTOS/tasks.c **** 		portEXIT_CRITICAL();
 4330              		.loc 1 859 0
 4331 0112 FFF7FEFF 		bl	vPortExitCritical
 860:FreeRTOS/tasks.c **** 	}
 4332              		.loc 1 860 0
 4333 0116 07F11807 		add	r7, r7, #24
 4334 011a BD46     		mov	sp, r7
 4335 011c 80BD     		pop	{r7, pc}
 4336              	.LFE32:
 4337              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 4338 011e 00BF     		.section	.text.vTaskSuspend,"ax",%progbits
 4339              		.align	2
 4340              		.global	vTaskSuspend
 4341              		.thumb
 4342              		.thumb_func
 4343              		.type	vTaskSuspend, %function
 4344              	vTaskSuspend:
 4345              	.LFB33:
 861:FreeRTOS/tasks.c **** 
 862:FreeRTOS/tasks.c **** #endif
 863:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 864:FreeRTOS/tasks.c **** 
 865:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 866:FreeRTOS/tasks.c **** 
 867:FreeRTOS/tasks.c **** 	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
 868:FreeRTOS/tasks.c **** 	{
 4346              		.loc 1 868 0
 4347              		@ args = 0, pretend = 0, frame = 16
 4348              		@ frame_needed = 1, uses_anonymous_args = 0
 4349 0000 80B5     		push	{r7, lr}
 4350              	.LCFI12:
 4351 0002 84B0     		sub	sp, sp, #16
 4352              	.LCFI13:
 4353 0004 00AF     		add	r7, sp, #0
 4354              	.LCFI14:
 4355 0006 7860     		str	r0, [r7, #4]
 869:FreeRTOS/tasks.c **** 	tskTCB *pxTCB;
 870:FreeRTOS/tasks.c **** 
 871:FreeRTOS/tasks.c **** 		portENTER_CRITICAL();
 4356              		.loc 1 871 0
 4357 0008 FFF7FEFF 		bl	vPortEnterCritical
 872:FreeRTOS/tasks.c **** 		{
 873:FreeRTOS/tasks.c **** 			/* Ensure a yield is performed if the current task is being
 874:FreeRTOS/tasks.c **** 			suspended. */
 875:FreeRTOS/tasks.c **** 			if( pxTaskToSuspend == pxCurrentTCB )
 4358              		.loc 1 875 0
 4359 000c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 4360 0010 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 4361 0014 1B68     		ldr	r3, [r3, #0]
 4362 0016 7A68     		ldr	r2, [r7, #4]
 4363 0018 9A42     		cmp	r2, r3
 4364 001a 02D1     		bne	.L42
 876:FreeRTOS/tasks.c **** 			{
 877:FreeRTOS/tasks.c **** 				pxTaskToSuspend = NULL;
 4365              		.loc 1 877 0
 4366 001c 4FF00003 		mov	r3, #0
 4367 0020 7B60     		str	r3, [r7, #4]
ARM GAS  /tmp/cck0uY6y.s 			page 175


 4368              	.L42:
 878:FreeRTOS/tasks.c **** 			}
 879:FreeRTOS/tasks.c **** 
 880:FreeRTOS/tasks.c **** 			/* If null is passed in here then we are suspending ourselves. */
 881:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
 4369              		.loc 1 881 0
 4370 0022 7B68     		ldr	r3, [r7, #4]
 4371 0024 002B     		cmp	r3, #0
 4372 0026 05D1     		bne	.L43
 4373 0028 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 4374 002c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 4375 0030 1B68     		ldr	r3, [r3, #0]
 4376 0032 00E0     		b	.L44
 4377              	.L43:
 4378 0034 7B68     		ldr	r3, [r7, #4]
 4379              	.L44:
 4380 0036 FB60     		str	r3, [r7, #12]
 882:FreeRTOS/tasks.c **** 
 883:FreeRTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
 884:FreeRTOS/tasks.c **** 
 885:FreeRTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the	suspended list. */
 886:FreeRTOS/tasks.c **** 			vListRemove( &( pxTCB->xGenericListItem ) );
 4381              		.loc 1 886 0
 4382 0038 FB68     		ldr	r3, [r7, #12]
 4383 003a 03F10403 		add	r3, r3, #4
 4384 003e 1846     		mov	r0, r3
 4385 0040 FFF7FEFF 		bl	vListRemove
 887:FreeRTOS/tasks.c **** 
 888:FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
 889:FreeRTOS/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer )
 4386              		.loc 1 889 0
 4387 0044 FB68     		ldr	r3, [r7, #12]
 4388 0046 9B6A     		ldr	r3, [r3, #40]
 4389 0048 002B     		cmp	r3, #0
 4390 004a 05D0     		beq	.L45
 890:FreeRTOS/tasks.c **** 			{
 891:FreeRTOS/tasks.c **** 				vListRemove( &( pxTCB->xEventListItem ) );
 4391              		.loc 1 891 0
 4392 004c FB68     		ldr	r3, [r7, #12]
 4393 004e 03F11803 		add	r3, r3, #24
 4394 0052 1846     		mov	r0, r3
 4395 0054 FFF7FEFF 		bl	vListRemove
 4396              	.L45:
 892:FreeRTOS/tasks.c **** 			}
 893:FreeRTOS/tasks.c **** 
 894:FreeRTOS/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 4397              		.loc 1 894 0
 4398 0058 FB68     		ldr	r3, [r7, #12]
 4399 005a 03F10403 		add	r3, r3, #4
 4400 005e 40F20000 		movw	r0, #:lower16:xSuspendedTaskList
 4401 0062 C0F20000 		movt	r0, #:upper16:xSuspendedTaskList
 4402 0066 1946     		mov	r1, r3
 4403 0068 FFF7FEFF 		bl	vListInsertEnd
 895:FreeRTOS/tasks.c **** 		}
 896:FreeRTOS/tasks.c **** 		portEXIT_CRITICAL();
 4404              		.loc 1 896 0
 4405 006c FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/cck0uY6y.s 			page 176


 897:FreeRTOS/tasks.c **** 
 898:FreeRTOS/tasks.c **** 		/* We may have just suspended the current task. */
 899:FreeRTOS/tasks.c **** 		if( ( void * ) pxTaskToSuspend == NULL )
 4406              		.loc 1 899 0
 4407 0070 7B68     		ldr	r3, [r7, #4]
 4408 0072 002B     		cmp	r3, #0
 4409 0074 01D1     		bne	.L47
 900:FreeRTOS/tasks.c **** 		{
 901:FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
 4410              		.loc 1 901 0
 4411 0076 FFF7FEFF 		bl	vPortYieldFromISR
 4412              	.L47:
 902:FreeRTOS/tasks.c **** 		}
 903:FreeRTOS/tasks.c **** 	}
 4413              		.loc 1 903 0
 4414 007a 07F11007 		add	r7, r7, #16
 4415 007e BD46     		mov	sp, r7
 4416 0080 80BD     		pop	{r7, pc}
 4417              	.LFE33:
 4418              		.size	vTaskSuspend, .-vTaskSuspend
 4419 0082 00BF     		.section	.text.xTaskIsTaskSuspended,"ax",%progbits
 4420              		.align	2
 4421              		.global	xTaskIsTaskSuspended
 4422              		.thumb
 4423              		.thumb_func
 4424              		.type	xTaskIsTaskSuspended, %function
 4425              	xTaskIsTaskSuspended:
 4426              	.LFB34:
 904:FreeRTOS/tasks.c **** 
 905:FreeRTOS/tasks.c **** #endif
 906:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 907:FreeRTOS/tasks.c **** 
 908:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 909:FreeRTOS/tasks.c **** 
 910:FreeRTOS/tasks.c **** 	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
 911:FreeRTOS/tasks.c **** 	{
 4427              		.loc 1 911 0
 4428              		@ args = 0, pretend = 0, frame = 16
 4429              		@ frame_needed = 1, uses_anonymous_args = 0
 4430              		@ link register save eliminated.
 4431 0000 80B4     		push	{r7}
 4432              	.LCFI15:
 4433 0002 85B0     		sub	sp, sp, #20
 4434              	.LCFI16:
 4435 0004 00AF     		add	r7, sp, #0
 4436              	.LCFI17:
 4437 0006 7860     		str	r0, [r7, #4]
 912:FreeRTOS/tasks.c **** 	portBASE_TYPE xReturn = pdFALSE;
 4438              		.loc 1 912 0
 4439 0008 4FF00003 		mov	r3, #0
 4440 000c BB60     		str	r3, [r7, #8]
 913:FreeRTOS/tasks.c **** 	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 4441              		.loc 1 913 0
 4442 000e 7B68     		ldr	r3, [r7, #4]
 4443 0010 FB60     		str	r3, [r7, #12]
 914:FreeRTOS/tasks.c **** 
 915:FreeRTOS/tasks.c **** 		/* Is the task we are attempting to resume actually in the
ARM GAS  /tmp/cck0uY6y.s 			page 177


 916:FreeRTOS/tasks.c **** 		suspended list? */
 917:FreeRTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 4444              		.loc 1 917 0
 4445 0012 FB68     		ldr	r3, [r7, #12]
 4446 0014 5A69     		ldr	r2, [r3, #20]
 4447 0016 40F20003 		movw	r3, #:lower16:xSuspendedTaskList
 4448 001a C0F20003 		movt	r3, #:upper16:xSuspendedTaskList
 4449 001e 9A42     		cmp	r2, r3
 4450 0020 0ED1     		bne	.L49
 918:FreeRTOS/tasks.c **** 		{
 919:FreeRTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
 920:FreeRTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
 4451              		.loc 1 920 0
 4452 0022 FB68     		ldr	r3, [r7, #12]
 4453 0024 9A6A     		ldr	r2, [r3, #40]
 4454 0026 40F20003 		movw	r3, #:lower16:xPendingReadyList
 4455 002a C0F20003 		movt	r3, #:upper16:xPendingReadyList
 4456 002e 9A42     		cmp	r2, r3
 4457 0030 06D0     		beq	.L49
 921:FreeRTOS/tasks.c **** 			{
 922:FreeRTOS/tasks.c **** 				/* Is it in the suspended list because it is in the
 923:FreeRTOS/tasks.c **** 				Suspended state?  It is possible to be in the suspended
 924:FreeRTOS/tasks.c **** 				list because it is blocked on a task with no timeout
 925:FreeRTOS/tasks.c **** 				specified. */
 926:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
 4458              		.loc 1 926 0
 4459 0032 FB68     		ldr	r3, [r7, #12]
 4460 0034 9B6A     		ldr	r3, [r3, #40]
 4461 0036 002B     		cmp	r3, #0
 4462 0038 02D1     		bne	.L49
 927:FreeRTOS/tasks.c **** 				{
 928:FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
 4463              		.loc 1 928 0
 4464 003a 4FF00103 		mov	r3, #1
 4465 003e BB60     		str	r3, [r7, #8]
 4466              	.L49:
 929:FreeRTOS/tasks.c **** 				}
 930:FreeRTOS/tasks.c **** 			}
 931:FreeRTOS/tasks.c **** 		}
 932:FreeRTOS/tasks.c **** 
 933:FreeRTOS/tasks.c **** 		return xReturn;
 4467              		.loc 1 933 0
 4468 0040 BB68     		ldr	r3, [r7, #8]
 934:FreeRTOS/tasks.c **** 	}
 4469              		.loc 1 934 0
 4470 0042 1846     		mov	r0, r3
 4471 0044 07F11407 		add	r7, r7, #20
 4472 0048 BD46     		mov	sp, r7
 4473 004a 80BC     		pop	{r7}
 4474 004c 7047     		bx	lr
 4475              	.LFE34:
 4476              		.size	xTaskIsTaskSuspended, .-xTaskIsTaskSuspended
 4477 004e 00BF     		.section	.text.vTaskResume,"ax",%progbits
 4478              		.align	2
 4479              		.global	vTaskResume
 4480              		.thumb
 4481              		.thumb_func
ARM GAS  /tmp/cck0uY6y.s 			page 178


 4482              		.type	vTaskResume, %function
 4483              	vTaskResume:
 4484              	.LFB35:
 935:FreeRTOS/tasks.c **** 
 936:FreeRTOS/tasks.c **** #endif
 937:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 938:FreeRTOS/tasks.c **** 
 939:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 940:FreeRTOS/tasks.c **** 
 941:FreeRTOS/tasks.c **** 	void vTaskResume( xTaskHandle pxTaskToResume )
 942:FreeRTOS/tasks.c **** 	{
 4485              		.loc 1 942 0
 4486              		@ args = 0, pretend = 0, frame = 16
 4487              		@ frame_needed = 1, uses_anonymous_args = 0
 4488 0000 80B5     		push	{r7, lr}
 4489              	.LCFI18:
 4490 0002 84B0     		sub	sp, sp, #16
 4491              	.LCFI19:
 4492 0004 00AF     		add	r7, sp, #0
 4493              	.LCFI20:
 4494 0006 7860     		str	r0, [r7, #4]
 943:FreeRTOS/tasks.c **** 	tskTCB *pxTCB;
 944:FreeRTOS/tasks.c **** 
 945:FreeRTOS/tasks.c **** 		/* Remove the task from whichever list it is currently in, and place
 946:FreeRTOS/tasks.c **** 		it in the ready list. */
 947:FreeRTOS/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
 4495              		.loc 1 947 0
 4496 0008 7B68     		ldr	r3, [r7, #4]
 4497 000a FB60     		str	r3, [r7, #12]
 948:FreeRTOS/tasks.c **** 
 949:FreeRTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
 950:FreeRTOS/tasks.c **** 		currently executing task. */
 951:FreeRTOS/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 4498              		.loc 1 951 0
 4499 000c FB68     		ldr	r3, [r7, #12]
 4500 000e 002B     		cmp	r3, #0
 4501 0010 48D0     		beq	.L55
 4502 0012 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 4503 0016 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 4504 001a 1B68     		ldr	r3, [r3, #0]
 4505 001c FA68     		ldr	r2, [r7, #12]
 4506 001e 9A42     		cmp	r2, r3
 4507 0020 40D0     		beq	.L55
 952:FreeRTOS/tasks.c **** 		{
 953:FreeRTOS/tasks.c **** 			portENTER_CRITICAL();
 4508              		.loc 1 953 0
 4509 0022 FFF7FEFF 		bl	vPortEnterCritical
 954:FreeRTOS/tasks.c **** 			{
 955:FreeRTOS/tasks.c **** 				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 4510              		.loc 1 955 0
 4511 0026 F868     		ldr	r0, [r7, #12]
 4512 0028 FFF7FEFF 		bl	xTaskIsTaskSuspended
 4513 002c 0346     		mov	r3, r0
 4514 002e 012B     		cmp	r3, #1
 4515 0030 36D1     		bne	.L53
 956:FreeRTOS/tasks.c **** 				{
 957:FreeRTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
ARM GAS  /tmp/cck0uY6y.s 			page 179


 958:FreeRTOS/tasks.c **** 
 959:FreeRTOS/tasks.c **** 					/* As we are in a critical section we can access the ready
 960:FreeRTOS/tasks.c **** 					lists even if the scheduler is suspended. */
 961:FreeRTOS/tasks.c **** 					vListRemove(  &( pxTCB->xGenericListItem ) );
 4516              		.loc 1 961 0
 4517 0032 FB68     		ldr	r3, [r7, #12]
 4518 0034 03F10403 		add	r3, r3, #4
 4519 0038 1846     		mov	r0, r3
 4520 003a FFF7FEFF 		bl	vListRemove
 962:FreeRTOS/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 4521              		.loc 1 962 0
 4522 003e FB68     		ldr	r3, [r7, #12]
 4523 0040 DA6A     		ldr	r2, [r3, #44]
 4524 0042 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 4525 0046 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 4526 004a 1B68     		ldr	r3, [r3, #0]
 4527 004c 9A42     		cmp	r2, r3
 4528 004e 06D9     		bls	.L54
 4529 0050 FB68     		ldr	r3, [r7, #12]
 4530 0052 DA6A     		ldr	r2, [r3, #44]
 4531 0054 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 4532 0058 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 4533 005c 1A60     		str	r2, [r3, #0]
 4534              	.L54:
 4535 005e FB68     		ldr	r3, [r7, #12]
 4536 0060 DA6A     		ldr	r2, [r3, #44]
 4537 0062 1346     		mov	r3, r2
 4538 0064 4FEA8303 		lsl	r3, r3, #2
 4539 0068 1344     		add	r3, r3, r2
 4540 006a 4FEA8303 		lsl	r3, r3, #2
 4541 006e 1A46     		mov	r2, r3
 4542 0070 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 4543 0074 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 4544 0078 1A44     		add	r2, r2, r3
 4545 007a FB68     		ldr	r3, [r7, #12]
 4546 007c 03F10403 		add	r3, r3, #4
 4547 0080 1046     		mov	r0, r2
 4548 0082 1946     		mov	r1, r3
 4549 0084 FFF7FEFF 		bl	vListInsertEnd
 963:FreeRTOS/tasks.c **** 
 964:FreeRTOS/tasks.c **** 					/* We may have just resumed a higher priority task. */
 965:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 4550              		.loc 1 965 0
 4551 0088 FB68     		ldr	r3, [r7, #12]
 4552 008a DA6A     		ldr	r2, [r3, #44]
 4553 008c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 4554 0090 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 4555 0094 1B68     		ldr	r3, [r3, #0]
 4556 0096 DB6A     		ldr	r3, [r3, #44]
 4557 0098 9A42     		cmp	r2, r3
 4558 009a 01D3     		bcc	.L53
 966:FreeRTOS/tasks.c **** 					{
 967:FreeRTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run, but
 968:FreeRTOS/tasks.c **** 						will leave the lists in the correct state for the next yield. */
 969:FreeRTOS/tasks.c **** 						portYIELD_WITHIN_API();
 4559              		.loc 1 969 0
 4560 009c FFF7FEFF 		bl	vPortYieldFromISR
ARM GAS  /tmp/cck0uY6y.s 			page 180


 4561              	.L53:
 970:FreeRTOS/tasks.c **** 					}
 971:FreeRTOS/tasks.c **** 				}
 972:FreeRTOS/tasks.c **** 			}
 973:FreeRTOS/tasks.c **** 			portEXIT_CRITICAL();
 4562              		.loc 1 973 0
 4563 00a0 FFF7FEFF 		bl	vPortExitCritical
 4564              	.L55:
 974:FreeRTOS/tasks.c **** 		}
 975:FreeRTOS/tasks.c **** 	}
 4565              		.loc 1 975 0
 4566 00a4 07F11007 		add	r7, r7, #16
 4567 00a8 BD46     		mov	sp, r7
 4568 00aa 80BD     		pop	{r7, pc}
 4569              	.LFE35:
 4570              		.size	vTaskResume, .-vTaskResume
 4571              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 4572              		.align	2
 4573              		.global	xTaskResumeFromISR
 4574              		.thumb
 4575              		.thumb_func
 4576              		.type	xTaskResumeFromISR, %function
 4577              	xTaskResumeFromISR:
 4578              	.LFB36:
 976:FreeRTOS/tasks.c **** 
 977:FreeRTOS/tasks.c **** #endif
 978:FreeRTOS/tasks.c **** 
 979:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 980:FreeRTOS/tasks.c **** 
 981:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
 982:FreeRTOS/tasks.c **** 
 983:FreeRTOS/tasks.c **** 	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
 984:FreeRTOS/tasks.c **** 	{
 4579              		.loc 1 984 0
 4580              		@ args = 0, pretend = 0, frame = 16
 4581              		@ frame_needed = 1, uses_anonymous_args = 0
 4582 0000 80B5     		push	{r7, lr}
 4583              	.LCFI21:
 4584 0002 84B0     		sub	sp, sp, #16
 4585              	.LCFI22:
 4586 0004 00AF     		add	r7, sp, #0
 4587              	.LCFI23:
 4588 0006 7860     		str	r0, [r7, #4]
 985:FreeRTOS/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 4589              		.loc 1 985 0
 4590 0008 4FF00003 		mov	r3, #0
 4591 000c BB60     		str	r3, [r7, #8]
 986:FreeRTOS/tasks.c **** 	tskTCB *pxTCB;
 987:FreeRTOS/tasks.c **** 
 988:FreeRTOS/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
 4592              		.loc 1 988 0
 4593 000e 7B68     		ldr	r3, [r7, #4]
 4594 0010 FB60     		str	r3, [r7, #12]
 989:FreeRTOS/tasks.c **** 
 990:FreeRTOS/tasks.c **** 		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 4595              		.loc 1 990 0
 4596 0012 F868     		ldr	r0, [r7, #12]
ARM GAS  /tmp/cck0uY6y.s 			page 181


 4597 0014 FFF7FEFF 		bl	xTaskIsTaskSuspended
 4598 0018 0346     		mov	r3, r0
 4599 001a 012B     		cmp	r3, #1
 4600 001c 49D1     		bne	.L57
 991:FreeRTOS/tasks.c **** 		{
 992:FreeRTOS/tasks.c **** 			traceTASK_RESUME_FROM_ISR( pxTCB );
 993:FreeRTOS/tasks.c **** 
 994:FreeRTOS/tasks.c **** 			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 4601              		.loc 1 994 0
 4602 001e 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 4603 0022 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 4604 0026 1B68     		ldr	r3, [r3, #0]
 4605 0028 002B     		cmp	r3, #0
 4606 002a 38D1     		bne	.L58
 995:FreeRTOS/tasks.c **** 			{
 996:FreeRTOS/tasks.c **** 				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
 4607              		.loc 1 996 0
 4608 002c FB68     		ldr	r3, [r7, #12]
 4609 002e DA6A     		ldr	r2, [r3, #44]
 4610 0030 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 4611 0034 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 4612 0038 1B68     		ldr	r3, [r3, #0]
 4613 003a DB6A     		ldr	r3, [r3, #44]
 4614 003c 9A42     		cmp	r2, r3
 4615 003e 34BF     		ite	cc
 4616 0040 0023     		movcc	r3, #0
 4617 0042 0123     		movcs	r3, #1
 4618 0044 BB60     		str	r3, [r7, #8]
 997:FreeRTOS/tasks.c **** 				vListRemove(  &( pxTCB->xGenericListItem ) );
 4619              		.loc 1 997 0
 4620 0046 FB68     		ldr	r3, [r7, #12]
 4621 0048 03F10403 		add	r3, r3, #4
 4622 004c 1846     		mov	r0, r3
 4623 004e FFF7FEFF 		bl	vListRemove
 998:FreeRTOS/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 4624              		.loc 1 998 0
 4625 0052 FB68     		ldr	r3, [r7, #12]
 4626 0054 DA6A     		ldr	r2, [r3, #44]
 4627 0056 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 4628 005a C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 4629 005e 1B68     		ldr	r3, [r3, #0]
 4630 0060 9A42     		cmp	r2, r3
 4631 0062 06D9     		bls	.L59
 4632 0064 FB68     		ldr	r3, [r7, #12]
 4633 0066 DA6A     		ldr	r2, [r3, #44]
 4634 0068 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 4635 006c C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 4636 0070 1A60     		str	r2, [r3, #0]
 4637              	.L59:
 4638 0072 FB68     		ldr	r3, [r7, #12]
 4639 0074 DA6A     		ldr	r2, [r3, #44]
 4640 0076 1346     		mov	r3, r2
 4641 0078 4FEA8303 		lsl	r3, r3, #2
 4642 007c 1344     		add	r3, r3, r2
 4643 007e 4FEA8303 		lsl	r3, r3, #2
 4644 0082 1A46     		mov	r2, r3
 4645 0084 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
ARM GAS  /tmp/cck0uY6y.s 			page 182


 4646 0088 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 4647 008c 1A44     		add	r2, r2, r3
 4648 008e FB68     		ldr	r3, [r7, #12]
 4649 0090 03F10403 		add	r3, r3, #4
 4650 0094 1046     		mov	r0, r2
 4651 0096 1946     		mov	r1, r3
 4652 0098 FFF7FEFF 		bl	vListInsertEnd
 4653 009c 09E0     		b	.L57
 4654              	.L58:
 999:FreeRTOS/tasks.c **** 			}
1000:FreeRTOS/tasks.c **** 			else
1001:FreeRTOS/tasks.c **** 			{
1002:FreeRTOS/tasks.c **** 				/* We cannot access the delayed or ready lists, so will hold this
1003:FreeRTOS/tasks.c **** 				task pending until the scheduler is resumed, at which point a
1004:FreeRTOS/tasks.c **** 				yield will be performed if necessary. */
1005:FreeRTOS/tasks.c **** 				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 4655              		.loc 1 1005 0
 4656 009e FB68     		ldr	r3, [r7, #12]
 4657 00a0 03F11803 		add	r3, r3, #24
 4658 00a4 40F20000 		movw	r0, #:lower16:xPendingReadyList
 4659 00a8 C0F20000 		movt	r0, #:upper16:xPendingReadyList
 4660 00ac 1946     		mov	r1, r3
 4661 00ae FFF7FEFF 		bl	vListInsertEnd
 4662              	.L57:
1006:FreeRTOS/tasks.c **** 			}
1007:FreeRTOS/tasks.c **** 		}
1008:FreeRTOS/tasks.c **** 
1009:FreeRTOS/tasks.c **** 		return xYieldRequired;
 4663              		.loc 1 1009 0
 4664 00b2 BB68     		ldr	r3, [r7, #8]
1010:FreeRTOS/tasks.c **** 	}
 4665              		.loc 1 1010 0
 4666 00b4 1846     		mov	r0, r3
 4667 00b6 07F11007 		add	r7, r7, #16
 4668 00ba BD46     		mov	sp, r7
 4669 00bc 80BD     		pop	{r7, pc}
 4670              	.LFE36:
 4671              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 4672 00be 00BF     		.section	.rodata
 4673              		.align	2
 4674              	.LC0:
 4675 0000 49444C45 		.ascii	"IDLE\000"
 4675      00
 4676 0005 000000   		.section	.text.vTaskStartScheduler,"ax",%progbits
 4677              		.align	2
 4678              		.global	vTaskStartScheduler
 4679              		.thumb
 4680              		.thumb_func
 4681              		.type	vTaskStartScheduler, %function
 4682              	vTaskStartScheduler:
 4683              	.LFB37:
1011:FreeRTOS/tasks.c **** 
1012:FreeRTOS/tasks.c **** #endif
1013:FreeRTOS/tasks.c **** 
1014:FreeRTOS/tasks.c **** 
1015:FreeRTOS/tasks.c **** 
1016:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/cck0uY6y.s 			page 183


1017:FreeRTOS/tasks.c **** /*-----------------------------------------------------------
1018:FreeRTOS/tasks.c ****  * PUBLIC SCHEDULER CONTROL documented in task.h
1019:FreeRTOS/tasks.c ****  *----------------------------------------------------------*/
1020:FreeRTOS/tasks.c **** 
1021:FreeRTOS/tasks.c **** 
1022:FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1023:FreeRTOS/tasks.c **** {
 4684              		.loc 1 1023 0
 4685              		@ args = 0, pretend = 0, frame = 8
 4686              		@ frame_needed = 1, uses_anonymous_args = 0
 4687 0000 80B5     		push	{r7, lr}
 4688              	.LCFI24:
 4689 0002 86B0     		sub	sp, sp, #24
 4690              	.LCFI25:
 4691 0004 04AF     		add	r7, sp, #16
 4692              	.LCFI26:
1024:FreeRTOS/tasks.c **** portBASE_TYPE xReturn;
1025:FreeRTOS/tasks.c **** 
1026:FreeRTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1027:FreeRTOS/tasks.c **** 	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL,
 4693              		.loc 1 1027 0
 4694 0006 40F20003 		movw	r3, #:lower16:.LC0
 4695 000a C0F20003 		movt	r3, #:upper16:.LC0
 4696 000e 4FF00002 		mov	r2, #0
 4697 0012 0092     		str	r2, [sp, #0]
 4698 0014 4FF00002 		mov	r2, #0
 4699 0018 0192     		str	r2, [sp, #4]
 4700 001a 4FF00002 		mov	r2, #0
 4701 001e 0292     		str	r2, [sp, #8]
 4702 0020 4FF00002 		mov	r2, #0
 4703 0024 0392     		str	r2, [sp, #12]
 4704 0026 40F20000 		movw	r0, #:lower16:prvIdleTask
 4705 002a C0F20000 		movt	r0, #:upper16:prvIdleTask
 4706 002e 1946     		mov	r1, r3
 4707 0030 4FF05002 		mov	r2, #80
 4708 0034 4FF00003 		mov	r3, #0
 4709 0038 FFF7FEFF 		bl	xTaskGenericCreate
 4710 003c 0346     		mov	r3, r0
 4711 003e 7B60     		str	r3, [r7, #4]
1028:FreeRTOS/tasks.c **** 
1029:FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
 4712              		.loc 1 1029 0
 4713 0040 7B68     		ldr	r3, [r7, #4]
 4714 0042 012B     		cmp	r3, #1
 4715 0044 15D1     		bne	.L63
1030:FreeRTOS/tasks.c **** 	{
1031:FreeRTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1032:FreeRTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1033:FreeRTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1034:FreeRTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1035:FreeRTOS/tasks.c **** 		starts to run.
1036:FreeRTOS/tasks.c **** 
1037:FreeRTOS/tasks.c **** 		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
1038:FreeRTOS/tasks.c **** 		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
1039:FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
 4716              		.loc 1 1039 0
 4717              	@ 1039 "FreeRTOS/tasks.c" 1
ARM GAS  /tmp/cck0uY6y.s 			page 184


 4718 0046 4FF02800 			mov r0, #40								
 4719 004a 80F31188 		msr basepri, r0							
 4720              	
 4721              	@ 0 "" 2
1040:FreeRTOS/tasks.c **** 
1041:FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 4722              		.loc 1 1041 0
 4723              		.thumb
 4724 004e 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 4725 0052 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 4726 0056 4FF00102 		mov	r2, #1
 4727 005a 1A60     		str	r2, [r3, #0]
1042:FreeRTOS/tasks.c **** 		xTickCount = ( portTickType ) 0;
 4728              		.loc 1 1042 0
 4729 005c 40F20003 		movw	r3, #:lower16:xTickCount
 4730 0060 C0F20003 		movt	r3, #:upper16:xTickCount
 4731 0064 4FF00002 		mov	r2, #0
 4732 0068 1A60     		str	r2, [r3, #0]
1043:FreeRTOS/tasks.c **** 
1044:FreeRTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1045:FreeRTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1046:FreeRTOS/tasks.c **** 		the run time counter time base. */
1047:FreeRTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 4733              		.loc 1 1047 0
 4734 006a FFF7FEFF 		bl	vConfigureTimerForRunTimeStats
1048:FreeRTOS/tasks.c **** 
1049:FreeRTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1050:FreeRTOS/tasks.c **** 		portable interface. */
1051:FreeRTOS/tasks.c **** 		if( xPortStartScheduler() )
 4735              		.loc 1 1051 0
 4736 006e FFF7FEFF 		bl	xPortStartScheduler
 4737              	.L63:
1052:FreeRTOS/tasks.c **** 		{
1053:FreeRTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1054:FreeRTOS/tasks.c **** 			function will not return. */
1055:FreeRTOS/tasks.c **** 		}
1056:FreeRTOS/tasks.c **** 		else
1057:FreeRTOS/tasks.c **** 		{
1058:FreeRTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1059:FreeRTOS/tasks.c **** 		}
1060:FreeRTOS/tasks.c **** 	}
1061:FreeRTOS/tasks.c **** }
 4738              		.loc 1 1061 0
 4739 0072 07F10807 		add	r7, r7, #8
 4740 0076 BD46     		mov	sp, r7
 4741 0078 80BD     		pop	{r7, pc}
 4742              	.LFE37:
 4743              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 4744 007a 00BF     		.section	.text.vTaskEndScheduler,"ax",%progbits
 4745              		.align	2
 4746              		.global	vTaskEndScheduler
 4747              		.thumb
 4748              		.thumb_func
 4749              		.type	vTaskEndScheduler, %function
 4750              	vTaskEndScheduler:
 4751              	.LFB38:
1062:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cck0uY6y.s 			page 185


1063:FreeRTOS/tasks.c **** 
1064:FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
1065:FreeRTOS/tasks.c **** {
 4752              		.loc 1 1065 0
 4753              		@ args = 0, pretend = 0, frame = 0
 4754              		@ frame_needed = 1, uses_anonymous_args = 0
 4755 0000 80B5     		push	{r7, lr}
 4756              	.LCFI27:
 4757 0002 00AF     		add	r7, sp, #0
 4758              	.LCFI28:
1066:FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1067:FreeRTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1068:FreeRTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1069:FreeRTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
 4759              		.loc 1 1069 0
 4760              	@ 1069 "FreeRTOS/tasks.c" 1
 4761 0004 4FF02800 			mov r0, #40								
 4762 0008 80F31188 		msr basepri, r0							
 4763              	
 4764              	@ 0 "" 2
1070:FreeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
 4765              		.loc 1 1070 0
 4766              		.thumb
 4767 000c 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 4768 0010 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 4769 0014 4FF00002 		mov	r2, #0
 4770 0018 1A60     		str	r2, [r3, #0]
1071:FreeRTOS/tasks.c **** 	vPortEndScheduler();
 4771              		.loc 1 1071 0
 4772 001a FFF7FEFF 		bl	vPortEndScheduler
1072:FreeRTOS/tasks.c **** }
 4773              		.loc 1 1072 0
 4774 001e BD46     		mov	sp, r7
 4775 0020 80BD     		pop	{r7, pc}
 4776              	.LFE38:
 4777              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 4778 0022 00BF     		.section	.text.vTaskSuspendAll,"ax",%progbits
 4779              		.align	2
 4780              		.global	vTaskSuspendAll
 4781              		.thumb
 4782              		.thumb_func
 4783              		.type	vTaskSuspendAll, %function
 4784              	vTaskSuspendAll:
 4785              	.LFB39:
1073:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1074:FreeRTOS/tasks.c **** 
1075:FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
1076:FreeRTOS/tasks.c **** {
 4786              		.loc 1 1076 0
 4787              		@ args = 0, pretend = 0, frame = 0
 4788              		@ frame_needed = 1, uses_anonymous_args = 0
 4789              		@ link register save eliminated.
 4790 0000 80B4     		push	{r7}
 4791              	.LCFI29:
 4792 0002 00AF     		add	r7, sp, #0
 4793              	.LCFI30:
1077:FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
ARM GAS  /tmp/cck0uY6y.s 			page 186


1078:FreeRTOS/tasks.c **** 	portBASE_TYPE. */
1079:FreeRTOS/tasks.c **** 	++uxSchedulerSuspended;
 4794              		.loc 1 1079 0
 4795 0004 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 4796 0008 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 4797 000c 1B68     		ldr	r3, [r3, #0]
 4798 000e 03F10102 		add	r2, r3, #1
 4799 0012 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 4800 0016 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 4801 001a 1A60     		str	r2, [r3, #0]
1080:FreeRTOS/tasks.c **** }
 4802              		.loc 1 1080 0
 4803 001c BD46     		mov	sp, r7
 4804 001e 80BC     		pop	{r7}
 4805 0020 7047     		bx	lr
 4806              	.LFE39:
 4807              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 4808 0022 00BF     		.section	.text.xTaskResumeAll,"ax",%progbits
 4809              		.align	2
 4810              		.global	xTaskResumeAll
 4811              		.thumb
 4812              		.thumb_func
 4813              		.type	xTaskResumeAll, %function
 4814              	xTaskResumeAll:
 4815              	.LFB40:
1081:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1082:FreeRTOS/tasks.c **** 
1083:FreeRTOS/tasks.c **** signed portBASE_TYPE xTaskResumeAll( void )
1084:FreeRTOS/tasks.c **** {
 4816              		.loc 1 1084 0
 4817              		@ args = 0, pretend = 0, frame = 8
 4818              		@ frame_needed = 1, uses_anonymous_args = 0
 4819 0000 90B5     		push	{r4, r7, lr}
 4820              	.LCFI31:
 4821 0002 83B0     		sub	sp, sp, #12
 4822              	.LCFI32:
 4823 0004 00AF     		add	r7, sp, #0
 4824              	.LCFI33:
1085:FreeRTOS/tasks.c **** register tskTCB *pxTCB;
1086:FreeRTOS/tasks.c **** signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 4825              		.loc 1 1086 0
 4826 0006 4FF00003 		mov	r3, #0
 4827 000a 3B60     		str	r3, [r7, #0]
1087:FreeRTOS/tasks.c **** 
1088:FreeRTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1089:FreeRTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1090:FreeRTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1091:FreeRTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1092:FreeRTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
1093:FreeRTOS/tasks.c **** 	portENTER_CRITICAL();
 4828              		.loc 1 1093 0
 4829 000c FFF7FEFF 		bl	vPortEnterCritical
1094:FreeRTOS/tasks.c **** 	{
1095:FreeRTOS/tasks.c **** 		--uxSchedulerSuspended;
 4830              		.loc 1 1095 0
 4831 0010 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 4832 0014 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
ARM GAS  /tmp/cck0uY6y.s 			page 187


 4833 0018 1B68     		ldr	r3, [r3, #0]
 4834 001a 03F1FF32 		add	r2, r3, #-1
 4835 001e 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 4836 0022 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 4837 0026 1A60     		str	r2, [r3, #0]
1096:FreeRTOS/tasks.c **** 
1097:FreeRTOS/tasks.c **** 		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 4838              		.loc 1 1097 0
 4839 0028 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 4840 002c C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 4841 0030 1B68     		ldr	r3, [r3, #0]
 4842 0032 002B     		cmp	r3, #0
 4843 0034 40F08C80 		bne	.L69
1098:FreeRTOS/tasks.c **** 		{
1099:FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
 4844              		.loc 1 1099 0
 4845 0038 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 4846 003c C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 4847 0040 1B68     		ldr	r3, [r3, #0]
 4848 0042 002B     		cmp	r3, #0
 4849 0044 00F08480 		beq	.L69
 4850              	.LBB3:
1100:FreeRTOS/tasks.c **** 			{
1101:FreeRTOS/tasks.c **** 				portBASE_TYPE xYieldRequired = pdFALSE;
 4851              		.loc 1 1101 0
 4852 0048 4FF00003 		mov	r3, #0
 4853 004c 7B60     		str	r3, [r7, #4]
1102:FreeRTOS/tasks.c **** 
1103:FreeRTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
1104:FreeRTOS/tasks.c **** 				appropriate ready list. */
1105:FreeRTOS/tasks.c **** 				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) 
 4854              		.loc 1 1105 0
 4855 004e 36E0     		b	.L70
 4856              	.L74:
1106:FreeRTOS/tasks.c **** 				{
1107:FreeRTOS/tasks.c **** 					vListRemove( &( pxTCB->xEventListItem ) );
 4857              		.loc 1 1107 0
 4858 0050 04F11803 		add	r3, r4, #24
 4859 0054 1846     		mov	r0, r3
 4860 0056 FFF7FEFF 		bl	vListRemove
1108:FreeRTOS/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 4861              		.loc 1 1108 0
 4862 005a 04F10403 		add	r3, r4, #4
 4863 005e 1846     		mov	r0, r3
 4864 0060 FFF7FEFF 		bl	vListRemove
1109:FreeRTOS/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 4865              		.loc 1 1109 0
 4866 0064 E26A     		ldr	r2, [r4, #44]
 4867 0066 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 4868 006a C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 4869 006e 1B68     		ldr	r3, [r3, #0]
 4870 0070 9A42     		cmp	r2, r3
 4871 0072 05D9     		bls	.L71
 4872 0074 E26A     		ldr	r2, [r4, #44]
 4873 0076 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 4874 007a C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 4875 007e 1A60     		str	r2, [r3, #0]
ARM GAS  /tmp/cck0uY6y.s 			page 188


 4876              	.L71:
 4877 0080 E26A     		ldr	r2, [r4, #44]
 4878 0082 1346     		mov	r3, r2
 4879 0084 4FEA8303 		lsl	r3, r3, #2
 4880 0088 1344     		add	r3, r3, r2
 4881 008a 4FEA8303 		lsl	r3, r3, #2
 4882 008e 1A46     		mov	r2, r3
 4883 0090 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 4884 0094 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 4885 0098 1A44     		add	r2, r2, r3
 4886 009a 04F10403 		add	r3, r4, #4
 4887 009e 1046     		mov	r0, r2
 4888 00a0 1946     		mov	r1, r3
 4889 00a2 FFF7FEFF 		bl	vListInsertEnd
1110:FreeRTOS/tasks.c **** 
1111:FreeRTOS/tasks.c **** 					/* If we have moved a task that has a priority higher than
1112:FreeRTOS/tasks.c **** 					the current task then we should yield. */
1113:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 4890              		.loc 1 1113 0
 4891 00a6 E26A     		ldr	r2, [r4, #44]
 4892 00a8 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 4893 00ac C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 4894 00b0 1B68     		ldr	r3, [r3, #0]
 4895 00b2 DB6A     		ldr	r3, [r3, #44]
 4896 00b4 9A42     		cmp	r2, r3
 4897 00b6 02D3     		bcc	.L70
1114:FreeRTOS/tasks.c **** 					{
1115:FreeRTOS/tasks.c **** 						xYieldRequired = pdTRUE;
 4898              		.loc 1 1115 0
 4899 00b8 4FF00103 		mov	r3, #1
 4900 00bc 7B60     		str	r3, [r7, #4]
 4901              	.L70:
 4902              		.loc 1 1105 0
 4903 00be 40F20003 		movw	r3, #:lower16:xPendingReadyList
 4904 00c2 C0F20003 		movt	r3, #:upper16:xPendingReadyList
 4905 00c6 1B68     		ldr	r3, [r3, #0]
 4906 00c8 002B     		cmp	r3, #0
 4907 00ca 06D0     		beq	.L72
 4908 00cc 40F20003 		movw	r3, #:lower16:xPendingReadyList
 4909 00d0 C0F20003 		movt	r3, #:upper16:xPendingReadyList
 4910 00d4 DB68     		ldr	r3, [r3, #12]
 4911 00d6 DB68     		ldr	r3, [r3, #12]
 4912 00d8 01E0     		b	.L73
 4913              	.L72:
 4914 00da 4FF00003 		mov	r3, #0
 4915              	.L73:
 4916 00de 1C46     		mov	r4, r3
 4917 00e0 002C     		cmp	r4, #0
 4918 00e2 B5D1     		bne	.L74
1116:FreeRTOS/tasks.c **** 					}
1117:FreeRTOS/tasks.c **** 				}
1118:FreeRTOS/tasks.c **** 
1119:FreeRTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1120:FreeRTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does not
1121:FreeRTOS/tasks.c **** 				slip, and that any delayed tasks are resumed at the correct time. */
1122:FreeRTOS/tasks.c **** 				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
 4919              		.loc 1 1122 0
ARM GAS  /tmp/cck0uY6y.s 			page 189


 4920 00e4 40F20003 		movw	r3, #:lower16:uxMissedTicks
 4921 00e8 C0F20003 		movt	r3, #:upper16:uxMissedTicks
 4922 00ec 1B68     		ldr	r3, [r3, #0]
 4923 00ee 002B     		cmp	r3, #0
 4924 00f0 18D0     		beq	.L75
1123:FreeRTOS/tasks.c **** 				{
1124:FreeRTOS/tasks.c **** 					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
 4925              		.loc 1 1124 0
 4926 00f2 0DE0     		b	.L76
 4927              	.L77:
1125:FreeRTOS/tasks.c **** 					{
1126:FreeRTOS/tasks.c **** 						vTaskIncrementTick();
 4928              		.loc 1 1126 0
 4929 00f4 FFF7FEFF 		bl	vTaskIncrementTick
1127:FreeRTOS/tasks.c **** 						--uxMissedTicks;
 4930              		.loc 1 1127 0
 4931 00f8 40F20003 		movw	r3, #:lower16:uxMissedTicks
 4932 00fc C0F20003 		movt	r3, #:upper16:uxMissedTicks
 4933 0100 1B68     		ldr	r3, [r3, #0]
 4934 0102 03F1FF32 		add	r2, r3, #-1
 4935 0106 40F20003 		movw	r3, #:lower16:uxMissedTicks
 4936 010a C0F20003 		movt	r3, #:upper16:uxMissedTicks
 4937 010e 1A60     		str	r2, [r3, #0]
 4938              	.L76:
 4939              		.loc 1 1124 0
 4940 0110 40F20003 		movw	r3, #:lower16:uxMissedTicks
 4941 0114 C0F20003 		movt	r3, #:upper16:uxMissedTicks
 4942 0118 1B68     		ldr	r3, [r3, #0]
 4943 011a 002B     		cmp	r3, #0
 4944 011c EAD1     		bne	.L77
1128:FreeRTOS/tasks.c **** 					}
1129:FreeRTOS/tasks.c **** 
1130:FreeRTOS/tasks.c **** 					/* As we have processed some ticks it is appropriate to yield
1131:FreeRTOS/tasks.c **** 					to ensure the highest priority task that is ready to run is
1132:FreeRTOS/tasks.c **** 					the task actually running. */
1133:FreeRTOS/tasks.c **** 					#if configUSE_PREEMPTION == 1
1134:FreeRTOS/tasks.c **** 					{
1135:FreeRTOS/tasks.c **** 						xYieldRequired = pdTRUE;
 4945              		.loc 1 1135 0
 4946 011e 4FF00103 		mov	r3, #1
 4947 0122 7B60     		str	r3, [r7, #4]
 4948              	.L75:
1136:FreeRTOS/tasks.c **** 					}
1137:FreeRTOS/tasks.c **** 					#endif
1138:FreeRTOS/tasks.c **** 				}
1139:FreeRTOS/tasks.c **** 
1140:FreeRTOS/tasks.c **** 				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 4949              		.loc 1 1140 0
 4950 0124 7B68     		ldr	r3, [r7, #4]
 4951 0126 012B     		cmp	r3, #1
 4952 0128 06D0     		beq	.L78
 4953 012a 40F20003 		movw	r3, #:lower16:xMissedYield
 4954 012e C0F20003 		movt	r3, #:upper16:xMissedYield
 4955 0132 1B68     		ldr	r3, [r3, #0]
 4956 0134 012B     		cmp	r3, #1
 4957 0136 0BD1     		bne	.L69
 4958              	.L78:
ARM GAS  /tmp/cck0uY6y.s 			page 190


1141:FreeRTOS/tasks.c **** 				{
1142:FreeRTOS/tasks.c **** 					xAlreadyYielded = pdTRUE;
 4959              		.loc 1 1142 0
 4960 0138 4FF00103 		mov	r3, #1
 4961 013c 3B60     		str	r3, [r7, #0]
1143:FreeRTOS/tasks.c **** 					xMissedYield = pdFALSE;
 4962              		.loc 1 1143 0
 4963 013e 40F20003 		movw	r3, #:lower16:xMissedYield
 4964 0142 C0F20003 		movt	r3, #:upper16:xMissedYield
 4965 0146 4FF00002 		mov	r2, #0
 4966 014a 1A60     		str	r2, [r3, #0]
1144:FreeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
 4967              		.loc 1 1144 0
 4968 014c FFF7FEFF 		bl	vPortYieldFromISR
 4969              	.L69:
 4970              	.LBE3:
1145:FreeRTOS/tasks.c **** 				}
1146:FreeRTOS/tasks.c **** 			}
1147:FreeRTOS/tasks.c **** 		}
1148:FreeRTOS/tasks.c **** 	}
1149:FreeRTOS/tasks.c **** 	portEXIT_CRITICAL();
 4971              		.loc 1 1149 0
 4972 0150 FFF7FEFF 		bl	vPortExitCritical
1150:FreeRTOS/tasks.c **** 
1151:FreeRTOS/tasks.c **** 	return xAlreadyYielded;
 4973              		.loc 1 1151 0
 4974 0154 3B68     		ldr	r3, [r7, #0]
1152:FreeRTOS/tasks.c **** }
 4975              		.loc 1 1152 0
 4976 0156 1846     		mov	r0, r3
 4977 0158 07F10C07 		add	r7, r7, #12
 4978 015c BD46     		mov	sp, r7
 4979 015e 90BD     		pop	{r4, r7, pc}
 4980              	.LFE40:
 4981              		.size	xTaskResumeAll, .-xTaskResumeAll
 4982              		.section	.text.xTaskGetTickCount,"ax",%progbits
 4983              		.align	2
 4984              		.global	xTaskGetTickCount
 4985              		.thumb
 4986              		.thumb_func
 4987              		.type	xTaskGetTickCount, %function
 4988              	xTaskGetTickCount:
 4989              	.LFB41:
1153:FreeRTOS/tasks.c **** 
1154:FreeRTOS/tasks.c **** 
1155:FreeRTOS/tasks.c **** 
1156:FreeRTOS/tasks.c **** 
1157:FreeRTOS/tasks.c **** 
1158:FreeRTOS/tasks.c **** 
1159:FreeRTOS/tasks.c **** /*-----------------------------------------------------------
1160:FreeRTOS/tasks.c ****  * PUBLIC TASK UTILITIES documented in task.h
1161:FreeRTOS/tasks.c ****  *----------------------------------------------------------*/
1162:FreeRTOS/tasks.c **** 
1163:FreeRTOS/tasks.c **** 
1164:FreeRTOS/tasks.c **** 
1165:FreeRTOS/tasks.c **** portTickType xTaskGetTickCount( void )
1166:FreeRTOS/tasks.c **** {
ARM GAS  /tmp/cck0uY6y.s 			page 191


 4990              		.loc 1 1166 0
 4991              		@ args = 0, pretend = 0, frame = 8
 4992              		@ frame_needed = 1, uses_anonymous_args = 0
 4993 0000 80B5     		push	{r7, lr}
 4994              	.LCFI34:
 4995 0002 82B0     		sub	sp, sp, #8
 4996              	.LCFI35:
 4997 0004 00AF     		add	r7, sp, #0
 4998              	.LCFI36:
1167:FreeRTOS/tasks.c **** portTickType xTicks;
1168:FreeRTOS/tasks.c **** 
1169:FreeRTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1170:FreeRTOS/tasks.c **** 	portENTER_CRITICAL();
 4999              		.loc 1 1170 0
 5000 0006 FFF7FEFF 		bl	vPortEnterCritical
1171:FreeRTOS/tasks.c **** 	{
1172:FreeRTOS/tasks.c **** 		xTicks = xTickCount;
 5001              		.loc 1 1172 0
 5002 000a 40F20003 		movw	r3, #:lower16:xTickCount
 5003 000e C0F20003 		movt	r3, #:upper16:xTickCount
 5004 0012 1B68     		ldr	r3, [r3, #0]
 5005 0014 7B60     		str	r3, [r7, #4]
1173:FreeRTOS/tasks.c **** 	}
1174:FreeRTOS/tasks.c **** 	portEXIT_CRITICAL();
 5006              		.loc 1 1174 0
 5007 0016 FFF7FEFF 		bl	vPortExitCritical
1175:FreeRTOS/tasks.c **** 
1176:FreeRTOS/tasks.c **** 	return xTicks;
 5008              		.loc 1 1176 0
 5009 001a 7B68     		ldr	r3, [r7, #4]
1177:FreeRTOS/tasks.c **** }
 5010              		.loc 1 1177 0
 5011 001c 1846     		mov	r0, r3
 5012 001e 07F10807 		add	r7, r7, #8
 5013 0022 BD46     		mov	sp, r7
 5014 0024 80BD     		pop	{r7, pc}
 5015              	.LFE41:
 5016              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 5017 0026 00BF     		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 5018              		.align	2
 5019              		.global	uxTaskGetNumberOfTasks
 5020              		.thumb
 5021              		.thumb_func
 5022              		.type	uxTaskGetNumberOfTasks, %function
 5023              	uxTaskGetNumberOfTasks:
 5024              	.LFB42:
1178:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1179:FreeRTOS/tasks.c **** 
1180:FreeRTOS/tasks.c **** unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
1181:FreeRTOS/tasks.c **** {
 5025              		.loc 1 1181 0
 5026              		@ args = 0, pretend = 0, frame = 0
 5027              		@ frame_needed = 1, uses_anonymous_args = 0
 5028              		@ link register save eliminated.
 5029 0000 80B4     		push	{r7}
 5030              	.LCFI37:
 5031 0002 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cck0uY6y.s 			page 192


 5032              	.LCFI38:
1182:FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
1183:FreeRTOS/tasks.c **** 	portBASE_TYPE. */
1184:FreeRTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
 5033              		.loc 1 1184 0
 5034 0004 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 5035 0008 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 5036 000c 1B68     		ldr	r3, [r3, #0]
1185:FreeRTOS/tasks.c **** }
 5037              		.loc 1 1185 0
 5038 000e 1846     		mov	r0, r3
 5039 0010 BD46     		mov	sp, r7
 5040 0012 80BC     		pop	{r7}
 5041 0014 7047     		bx	lr
 5042              	.LFE42:
 5043              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 5044 0016 00BF     		.section	.text.vTaskIncrementTick,"ax",%progbits
 5045              		.align	2
 5046              		.global	vTaskIncrementTick
 5047              		.thumb
 5048              		.thumb_func
 5049              		.type	vTaskIncrementTick, %function
 5050              	vTaskIncrementTick:
 5051              	.LFB43:
1186:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1187:FreeRTOS/tasks.c **** 
1188:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1189:FreeRTOS/tasks.c **** 
1190:FreeRTOS/tasks.c **** 	void vTaskList( signed char *pcWriteBuffer )
1191:FreeRTOS/tasks.c **** 	{
1192:FreeRTOS/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1193:FreeRTOS/tasks.c **** 
1194:FreeRTOS/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1195:FreeRTOS/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1196:FreeRTOS/tasks.c **** 
1197:FreeRTOS/tasks.c **** 		vTaskSuspendAll();
1198:FreeRTOS/tasks.c **** 		{
1199:FreeRTOS/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB and
1200:FreeRTOS/tasks.c **** 			report the task name, state and stack high water mark. */
1201:FreeRTOS/tasks.c **** 
1202:FreeRTOS/tasks.c **** 			pcWriteBuffer[ 0 ] = ( signed char ) 0x00;
1203:FreeRTOS/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
1204:FreeRTOS/tasks.c **** 
1205:FreeRTOS/tasks.c **** 			uxQueue = uxTopUsedPriority + 1;
1206:FreeRTOS/tasks.c **** 
1207:FreeRTOS/tasks.c **** 			do
1208:FreeRTOS/tasks.c **** 			{
1209:FreeRTOS/tasks.c **** 				uxQueue--;
1210:FreeRTOS/tasks.c **** 
1211:FreeRTOS/tasks.c **** 				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
1212:FreeRTOS/tasks.c **** 				{
1213:FreeRTOS/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tsk
1214:FreeRTOS/tasks.c **** 				}
1215:FreeRTOS/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
1216:FreeRTOS/tasks.c **** 
1217:FreeRTOS/tasks.c **** 			if( !listLIST_IS_EMPTY( pxDelayedTaskList ) )
1218:FreeRTOS/tasks.c **** 			{
ARM GAS  /tmp/cck0uY6y.s 			page 193


1219:FreeRTOS/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
1220:FreeRTOS/tasks.c **** 			}
1221:FreeRTOS/tasks.c **** 
1222:FreeRTOS/tasks.c **** 			if( !listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) )
1223:FreeRTOS/tasks.c **** 			{
1224:FreeRTOS/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_C
1225:FreeRTOS/tasks.c **** 			}
1226:FreeRTOS/tasks.c **** 
1227:FreeRTOS/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
1228:FreeRTOS/tasks.c **** 			{
1229:FreeRTOS/tasks.c **** 				if( !listLIST_IS_EMPTY( &xTasksWaitingTermination ) )
1230:FreeRTOS/tasks.c **** 				{
1231:FreeRTOS/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &xTasksWaitingTermination, tskDELETED_
1232:FreeRTOS/tasks.c **** 				}
1233:FreeRTOS/tasks.c **** 			}
1234:FreeRTOS/tasks.c **** 			#endif
1235:FreeRTOS/tasks.c **** 
1236:FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1237:FreeRTOS/tasks.c **** 			{
1238:FreeRTOS/tasks.c **** 				if( !listLIST_IS_EMPTY( &xSuspendedTaskList ) )
1239:FreeRTOS/tasks.c **** 				{
1240:FreeRTOS/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &xSuspendedTaskList, tskSUSPENDED_CHAR
1241:FreeRTOS/tasks.c **** 				}
1242:FreeRTOS/tasks.c **** 			}
1243:FreeRTOS/tasks.c **** 			#endif
1244:FreeRTOS/tasks.c **** 		}
1245:FreeRTOS/tasks.c **** 		xTaskResumeAll();
1246:FreeRTOS/tasks.c **** 	}
1247:FreeRTOS/tasks.c **** 
1248:FreeRTOS/tasks.c **** #endif
1249:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1250:FreeRTOS/tasks.c **** 
1251:FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
1252:FreeRTOS/tasks.c **** 
1253:FreeRTOS/tasks.c **** 	void vTaskGetRunTimeStats( signed char *pcWriteBuffer )
1254:FreeRTOS/tasks.c **** 	{
1255:FreeRTOS/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1256:FreeRTOS/tasks.c **** 	unsigned long ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1257:FreeRTOS/tasks.c **** 
1258:FreeRTOS/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1259:FreeRTOS/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1260:FreeRTOS/tasks.c **** 
1261:FreeRTOS/tasks.c **** 		vTaskSuspendAll();
1262:FreeRTOS/tasks.c **** 		{
1263:FreeRTOS/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB,
1264:FreeRTOS/tasks.c **** 			generating a table of run timer percentages in the provided
1265:FreeRTOS/tasks.c **** 			buffer. */
1266:FreeRTOS/tasks.c **** 
1267:FreeRTOS/tasks.c **** 			pcWriteBuffer[ 0 ] = ( signed char ) 0x00;
1268:FreeRTOS/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
1269:FreeRTOS/tasks.c **** 
1270:FreeRTOS/tasks.c **** 			uxQueue = uxTopUsedPriority + 1;
1271:FreeRTOS/tasks.c **** 
1272:FreeRTOS/tasks.c **** 			do
1273:FreeRTOS/tasks.c **** 			{
1274:FreeRTOS/tasks.c **** 				uxQueue--;
1275:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/cck0uY6y.s 			page 194


1276:FreeRTOS/tasks.c **** 				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
1277:FreeRTOS/tasks.c **** 				{
1278:FreeRTOS/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueu
1279:FreeRTOS/tasks.c **** 				}
1280:FreeRTOS/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
1281:FreeRTOS/tasks.c **** 
1282:FreeRTOS/tasks.c **** 			if( !listLIST_IS_EMPTY( pxDelayedTaskList ) )
1283:FreeRTOS/tasks.c **** 			{
1284:FreeRTOS/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, ulTotalRun
1285:FreeRTOS/tasks.c **** 			}
1286:FreeRTOS/tasks.c **** 
1287:FreeRTOS/tasks.c **** 			if( !listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) )
1288:FreeRTOS/tasks.c **** 			{
1289:FreeRTOS/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, ul
1290:FreeRTOS/tasks.c **** 			}
1291:FreeRTOS/tasks.c **** 
1292:FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1293:FreeRTOS/tasks.c **** 			{
1294:FreeRTOS/tasks.c **** 				if( !listLIST_IS_EMPTY( &xTasksWaitingTermination ) )
1295:FreeRTOS/tasks.c **** 				{
1296:FreeRTOS/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &xTasksWaitingTermination, u
1297:FreeRTOS/tasks.c **** 				}
1298:FreeRTOS/tasks.c **** 			}
1299:FreeRTOS/tasks.c **** 			#endif
1300:FreeRTOS/tasks.c **** 
1301:FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1302:FreeRTOS/tasks.c **** 			{
1303:FreeRTOS/tasks.c **** 				if( !listLIST_IS_EMPTY( &xSuspendedTaskList ) )
1304:FreeRTOS/tasks.c **** 				{
1305:FreeRTOS/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &xSuspendedTaskList, ulTotal
1306:FreeRTOS/tasks.c **** 				}
1307:FreeRTOS/tasks.c **** 			}
1308:FreeRTOS/tasks.c **** 			#endif
1309:FreeRTOS/tasks.c **** 		}
1310:FreeRTOS/tasks.c **** 		xTaskResumeAll();
1311:FreeRTOS/tasks.c **** 	}
1312:FreeRTOS/tasks.c **** 
1313:FreeRTOS/tasks.c **** #endif
1314:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1315:FreeRTOS/tasks.c **** 
1316:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1317:FreeRTOS/tasks.c **** 
1318:FreeRTOS/tasks.c **** 	void vTaskStartTrace( signed char * pcBuffer, unsigned long ulBufferSize )
1319:FreeRTOS/tasks.c **** 	{
1320:FreeRTOS/tasks.c **** 		portENTER_CRITICAL();
1321:FreeRTOS/tasks.c **** 		{
1322:FreeRTOS/tasks.c **** 			pcTraceBuffer = ( signed char * )pcBuffer;
1323:FreeRTOS/tasks.c **** 			pcTraceBufferStart = pcBuffer;
1324:FreeRTOS/tasks.c **** 			pcTraceBufferEnd = pcBuffer + ( ulBufferSize - tskSIZE_OF_EACH_TRACE_LINE );
1325:FreeRTOS/tasks.c **** 			xTracing = pdTRUE;
1326:FreeRTOS/tasks.c **** 		}
1327:FreeRTOS/tasks.c **** 		portEXIT_CRITICAL();
1328:FreeRTOS/tasks.c **** 	}
1329:FreeRTOS/tasks.c **** 
1330:FreeRTOS/tasks.c **** #endif
1331:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1332:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/cck0uY6y.s 			page 195


1333:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1334:FreeRTOS/tasks.c **** 
1335:FreeRTOS/tasks.c **** 	unsigned long ulTaskEndTrace( void )
1336:FreeRTOS/tasks.c **** 	{
1337:FreeRTOS/tasks.c **** 	unsigned long ulBufferLength;
1338:FreeRTOS/tasks.c **** 
1339:FreeRTOS/tasks.c **** 		portENTER_CRITICAL();
1340:FreeRTOS/tasks.c **** 			xTracing = pdFALSE;
1341:FreeRTOS/tasks.c **** 		portEXIT_CRITICAL();
1342:FreeRTOS/tasks.c **** 
1343:FreeRTOS/tasks.c **** 		ulBufferLength = ( unsigned long ) ( pcTraceBuffer - pcTraceBufferStart );
1344:FreeRTOS/tasks.c **** 
1345:FreeRTOS/tasks.c **** 		return ulBufferLength;
1346:FreeRTOS/tasks.c **** 	}
1347:FreeRTOS/tasks.c **** 
1348:FreeRTOS/tasks.c **** #endif
1349:FreeRTOS/tasks.c **** 
1350:FreeRTOS/tasks.c **** 
1351:FreeRTOS/tasks.c **** 
1352:FreeRTOS/tasks.c **** /*-----------------------------------------------------------
1353:FreeRTOS/tasks.c ****  * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
1354:FreeRTOS/tasks.c ****  * documented in task.h
1355:FreeRTOS/tasks.c ****  *----------------------------------------------------------*/
1356:FreeRTOS/tasks.c **** 
1357:FreeRTOS/tasks.c **** 
1358:FreeRTOS/tasks.c **** void vTaskIncrementTick( void )
1359:FreeRTOS/tasks.c **** {
 5052              		.loc 1 1359 0
 5053              		@ args = 0, pretend = 0, frame = 8
 5054              		@ frame_needed = 1, uses_anonymous_args = 0
 5055 0000 90B5     		push	{r4, r7, lr}
 5056              	.LCFI39:
 5057 0002 83B0     		sub	sp, sp, #12
 5058              	.LCFI40:
 5059 0004 00AF     		add	r7, sp, #0
 5060              	.LCFI41:
1360:FreeRTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1361:FreeRTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1362:FreeRTOS/tasks.c **** 	tasks to be unblocked. */
1363:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 5061              		.loc 1 1363 0
 5062 0006 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 5063 000a C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 5064 000e 1B68     		ldr	r3, [r3, #0]
 5065 0010 002B     		cmp	r3, #0
 5066 0012 40F08280 		bne	.L85
1364:FreeRTOS/tasks.c **** 	{
1365:FreeRTOS/tasks.c **** 		++xTickCount;
 5067              		.loc 1 1365 0
 5068 0016 40F20003 		movw	r3, #:lower16:xTickCount
 5069 001a C0F20003 		movt	r3, #:upper16:xTickCount
 5070 001e 1B68     		ldr	r3, [r3, #0]
 5071 0020 03F10102 		add	r2, r3, #1
 5072 0024 40F20003 		movw	r3, #:lower16:xTickCount
 5073 0028 C0F20003 		movt	r3, #:upper16:xTickCount
 5074 002c 1A60     		str	r2, [r3, #0]
1366:FreeRTOS/tasks.c **** 		if( xTickCount == ( portTickType ) 0 )
ARM GAS  /tmp/cck0uY6y.s 			page 196


 5075              		.loc 1 1366 0
 5076 002e 40F20003 		movw	r3, #:lower16:xTickCount
 5077 0032 C0F20003 		movt	r3, #:upper16:xTickCount
 5078 0036 1B68     		ldr	r3, [r3, #0]
 5079 0038 002B     		cmp	r3, #0
 5080 003a 58D1     		bne	.L87
 5081              	.LBB4:
1367:FreeRTOS/tasks.c **** 		{
1368:FreeRTOS/tasks.c **** 			xList *pxTemp;
1369:FreeRTOS/tasks.c **** 
1370:FreeRTOS/tasks.c **** 			/* Tick count has overflowed so we need to swap the delay lists.
1371:FreeRTOS/tasks.c **** 			If there are any items in pxDelayedTaskList here then there is
1372:FreeRTOS/tasks.c **** 			an error! */
1373:FreeRTOS/tasks.c **** 			pxTemp = pxDelayedTaskList;
 5082              		.loc 1 1373 0
 5083 003c 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 5084 0040 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 5085 0044 1B68     		ldr	r3, [r3, #0]
 5086 0046 7B60     		str	r3, [r7, #4]
1374:FreeRTOS/tasks.c **** 			pxDelayedTaskList = pxOverflowDelayedTaskList;
 5087              		.loc 1 1374 0
 5088 0048 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 5089 004c C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 5090 0050 1A68     		ldr	r2, [r3, #0]
 5091 0052 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 5092 0056 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 5093 005a 1A60     		str	r2, [r3, #0]
1375:FreeRTOS/tasks.c **** 			pxOverflowDelayedTaskList = pxTemp;
 5094              		.loc 1 1375 0
 5095 005c 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 5096 0060 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 5097 0064 7A68     		ldr	r2, [r7, #4]
 5098 0066 1A60     		str	r2, [r3, #0]
1376:FreeRTOS/tasks.c **** 			xNumOfOverflows++;
 5099              		.loc 1 1376 0
 5100 0068 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 5101 006c C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 5102 0070 1B68     		ldr	r3, [r3, #0]
 5103 0072 03F10102 		add	r2, r3, #1
 5104 0076 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 5105 007a C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 5106 007e 1A60     		str	r2, [r3, #0]
 5107              	.LBE4:
 5108              	.LBB5:
1377:FreeRTOS/tasks.c **** 		}
1378:FreeRTOS/tasks.c **** 
1379:FreeRTOS/tasks.c **** 		/* See if this tick has made a timeout expire. */
1380:FreeRTOS/tasks.c **** 		prvCheckDelayedTasks();
 5109              		.loc 1 1380 0
 5110 0080 35E0     		b	.L87
 5111              	.L93:
 5112 0082 6268     		ldr	r2, [r4, #4]
 5113 0084 40F20003 		movw	r3, #:lower16:xTickCount
 5114 0088 C0F20003 		movt	r3, #:upper16:xTickCount
 5115 008c 1B68     		ldr	r3, [r3, #0]
 5116 008e 9A42     		cmp	r2, r3
 5117 0090 51D8     		bhi	.L94
ARM GAS  /tmp/cck0uY6y.s 			page 197


 5118 0092 04F10403 		add	r3, r4, #4
 5119 0096 1846     		mov	r0, r3
 5120 0098 FFF7FEFF 		bl	vListRemove
 5121 009c A36A     		ldr	r3, [r4, #40]
 5122 009e 002B     		cmp	r3, #0
 5123 00a0 04D0     		beq	.L89
 5124 00a2 04F11803 		add	r3, r4, #24
 5125 00a6 1846     		mov	r0, r3
 5126 00a8 FFF7FEFF 		bl	vListRemove
 5127              	.L89:
 5128 00ac E26A     		ldr	r2, [r4, #44]
 5129 00ae 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 5130 00b2 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 5131 00b6 1B68     		ldr	r3, [r3, #0]
 5132 00b8 9A42     		cmp	r2, r3
 5133 00ba 05D9     		bls	.L90
 5134 00bc E26A     		ldr	r2, [r4, #44]
 5135 00be 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 5136 00c2 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 5137 00c6 1A60     		str	r2, [r3, #0]
 5138              	.L90:
 5139 00c8 E26A     		ldr	r2, [r4, #44]
 5140 00ca 1346     		mov	r3, r2
 5141 00cc 4FEA8303 		lsl	r3, r3, #2
 5142 00d0 1344     		add	r3, r3, r2
 5143 00d2 4FEA8303 		lsl	r3, r3, #2
 5144 00d6 1A46     		mov	r2, r3
 5145 00d8 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 5146 00dc C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 5147 00e0 1A44     		add	r2, r2, r3
 5148 00e2 04F10403 		add	r3, r4, #4
 5149 00e6 1046     		mov	r0, r2
 5150 00e8 1946     		mov	r1, r3
 5151 00ea FFF7FEFF 		bl	vListInsertEnd
 5152              	.L87:
 5153 00ee 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 5154 00f2 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 5155 00f6 1B68     		ldr	r3, [r3, #0]
 5156 00f8 1B68     		ldr	r3, [r3, #0]
 5157 00fa 002B     		cmp	r3, #0
 5158 00fc 07D0     		beq	.L91
 5159 00fe 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 5160 0102 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 5161 0106 1B68     		ldr	r3, [r3, #0]
 5162 0108 DB68     		ldr	r3, [r3, #12]
 5163 010a DB68     		ldr	r3, [r3, #12]
 5164 010c 01E0     		b	.L92
 5165              	.L91:
 5166 010e 4FF00003 		mov	r3, #0
 5167              	.L92:
 5168 0112 1C46     		mov	r4, r3
 5169 0114 002C     		cmp	r4, #0
 5170 0116 B4D1     		bne	.L93
 5171 0118 0DE0     		b	.L94
 5172              	.L85:
 5173              	.LBE5:
1381:FreeRTOS/tasks.c **** 	}
ARM GAS  /tmp/cck0uY6y.s 			page 198


1382:FreeRTOS/tasks.c **** 	else
1383:FreeRTOS/tasks.c **** 	{
1384:FreeRTOS/tasks.c **** 		++uxMissedTicks;
 5174              		.loc 1 1384 0
 5175 011a 40F20003 		movw	r3, #:lower16:uxMissedTicks
 5176 011e C0F20003 		movt	r3, #:upper16:uxMissedTicks
 5177 0122 1B68     		ldr	r3, [r3, #0]
 5178 0124 03F10102 		add	r2, r3, #1
 5179 0128 40F20003 		movw	r3, #:lower16:uxMissedTicks
 5180 012c C0F20003 		movt	r3, #:upper16:uxMissedTicks
 5181 0130 1A60     		str	r2, [r3, #0]
1385:FreeRTOS/tasks.c **** 
1386:FreeRTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
1387:FreeRTOS/tasks.c **** 		scheduler is locked. */
1388:FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1389:FreeRTOS/tasks.c **** 		{
1390:FreeRTOS/tasks.c **** 			extern void vApplicationTickHook( void );
1391:FreeRTOS/tasks.c **** 
1392:FreeRTOS/tasks.c **** 			vApplicationTickHook();
 5182              		.loc 1 1392 0
 5183 0132 FFF7FEFF 		bl	vApplicationTickHook
 5184              	.L94:
1393:FreeRTOS/tasks.c **** 		}
1394:FreeRTOS/tasks.c **** 		#endif
1395:FreeRTOS/tasks.c **** 	}
1396:FreeRTOS/tasks.c **** 
1397:FreeRTOS/tasks.c **** 	#if ( configUSE_TICK_HOOK == 1 )
1398:FreeRTOS/tasks.c **** 	{
1399:FreeRTOS/tasks.c **** 		extern void vApplicationTickHook( void );
1400:FreeRTOS/tasks.c **** 
1401:FreeRTOS/tasks.c **** 		/* Guard against the tick hook being called when the missed tick
1402:FreeRTOS/tasks.c **** 		count is being unwound (when the scheduler is being unlocked. */
1403:FreeRTOS/tasks.c **** 		if( uxMissedTicks == 0 )
 5185              		.loc 1 1403 0
 5186 0136 40F20003 		movw	r3, #:lower16:uxMissedTicks
 5187 013a C0F20003 		movt	r3, #:upper16:uxMissedTicks
 5188 013e 1B68     		ldr	r3, [r3, #0]
 5189 0140 002B     		cmp	r3, #0
 5190 0142 01D1     		bne	.L96
1404:FreeRTOS/tasks.c **** 		{
1405:FreeRTOS/tasks.c **** 			vApplicationTickHook();
 5191              		.loc 1 1405 0
 5192 0144 FFF7FEFF 		bl	vApplicationTickHook
 5193              	.L96:
1406:FreeRTOS/tasks.c **** 		}
1407:FreeRTOS/tasks.c **** 	}
1408:FreeRTOS/tasks.c **** 	#endif
1409:FreeRTOS/tasks.c **** 
1410:FreeRTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1411:FreeRTOS/tasks.c **** }
 5194              		.loc 1 1411 0
 5195 0148 07F10C07 		add	r7, r7, #12
 5196 014c BD46     		mov	sp, r7
 5197 014e 90BD     		pop	{r4, r7, pc}
 5198              	.LFE43:
 5199              		.size	vTaskIncrementTick, .-vTaskIncrementTick
 5200              		.section	.text.vTaskSwitchContext,"ax",%progbits
ARM GAS  /tmp/cck0uY6y.s 			page 199


 5201              		.align	2
 5202              		.global	vTaskSwitchContext
 5203              		.thumb
 5204              		.thumb_func
 5205              		.type	vTaskSwitchContext, %function
 5206              	vTaskSwitchContext:
 5207              	.LFB44:
1412:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1413:FreeRTOS/tasks.c **** 
1414:FreeRTOS/tasks.c **** #if ( ( INCLUDE_vTaskCleanUpResources == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1415:FreeRTOS/tasks.c **** 
1416:FreeRTOS/tasks.c **** 	void vTaskCleanUpResources( void )
1417:FreeRTOS/tasks.c **** 	{
1418:FreeRTOS/tasks.c **** 	unsigned short usQueue;
1419:FreeRTOS/tasks.c **** 	volatile tskTCB *pxTCB;
1420:FreeRTOS/tasks.c **** 
1421:FreeRTOS/tasks.c **** 		usQueue = ( unsigned short ) uxTopUsedPriority + ( unsigned short ) 1;
1422:FreeRTOS/tasks.c **** 
1423:FreeRTOS/tasks.c **** 		/* Remove any TCB's from the ready queues. */
1424:FreeRTOS/tasks.c **** 		do
1425:FreeRTOS/tasks.c **** 		{
1426:FreeRTOS/tasks.c **** 			usQueue--;
1427:FreeRTOS/tasks.c **** 
1428:FreeRTOS/tasks.c **** 			while( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ usQueue ] ) ) )
1429:FreeRTOS/tasks.c **** 			{
1430:FreeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxTCB, &( pxReadyTasksLists[ usQueue ] ) );
1431:FreeRTOS/tasks.c **** 				vListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) );
1432:FreeRTOS/tasks.c **** 
1433:FreeRTOS/tasks.c **** 				prvDeleteTCB( ( tskTCB * ) pxTCB );
1434:FreeRTOS/tasks.c **** 			}
1435:FreeRTOS/tasks.c **** 		}while( usQueue > ( unsigned short ) tskIDLE_PRIORITY );
1436:FreeRTOS/tasks.c **** 
1437:FreeRTOS/tasks.c **** 		/* Remove any TCB's from the delayed queue. */
1438:FreeRTOS/tasks.c **** 		while( !listLIST_IS_EMPTY( &xDelayedTaskList1 ) )
1439:FreeRTOS/tasks.c **** 		{
1440:FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxTCB, &xDelayedTaskList1 );
1441:FreeRTOS/tasks.c **** 			vListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) );
1442:FreeRTOS/tasks.c **** 
1443:FreeRTOS/tasks.c **** 			prvDeleteTCB( ( tskTCB * ) pxTCB );
1444:FreeRTOS/tasks.c **** 		}
1445:FreeRTOS/tasks.c **** 
1446:FreeRTOS/tasks.c **** 		/* Remove any TCB's from the overflow delayed queue. */
1447:FreeRTOS/tasks.c **** 		while( !listLIST_IS_EMPTY( &xDelayedTaskList2 ) )
1448:FreeRTOS/tasks.c **** 		{
1449:FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxTCB, &xDelayedTaskList2 );
1450:FreeRTOS/tasks.c **** 			vListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) );
1451:FreeRTOS/tasks.c **** 
1452:FreeRTOS/tasks.c **** 			prvDeleteTCB( ( tskTCB * ) pxTCB );
1453:FreeRTOS/tasks.c **** 		}
1454:FreeRTOS/tasks.c **** 
1455:FreeRTOS/tasks.c **** 		while( !listLIST_IS_EMPTY( &xSuspendedTaskList ) )
1456:FreeRTOS/tasks.c **** 		{
1457:FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxTCB, &xSuspendedTaskList );
1458:FreeRTOS/tasks.c **** 			vListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) );
1459:FreeRTOS/tasks.c **** 
1460:FreeRTOS/tasks.c **** 			prvDeleteTCB( ( tskTCB * ) pxTCB );
1461:FreeRTOS/tasks.c **** 		}
ARM GAS  /tmp/cck0uY6y.s 			page 200


1462:FreeRTOS/tasks.c **** 	}
1463:FreeRTOS/tasks.c **** 
1464:FreeRTOS/tasks.c **** #endif
1465:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1466:FreeRTOS/tasks.c **** 
1467:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1468:FreeRTOS/tasks.c **** 
1469:FreeRTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxTagValue )
1470:FreeRTOS/tasks.c **** 	{
1471:FreeRTOS/tasks.c **** 	tskTCB *xTCB;
1472:FreeRTOS/tasks.c **** 
1473:FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1474:FreeRTOS/tasks.c **** 		if( xTask == NULL )
1475:FreeRTOS/tasks.c **** 		{
1476:FreeRTOS/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1477:FreeRTOS/tasks.c **** 		}
1478:FreeRTOS/tasks.c **** 		else
1479:FreeRTOS/tasks.c **** 		{
1480:FreeRTOS/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1481:FreeRTOS/tasks.c **** 		}
1482:FreeRTOS/tasks.c **** 
1483:FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1484:FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
1485:FreeRTOS/tasks.c **** 		portENTER_CRITICAL();
1486:FreeRTOS/tasks.c **** 			xTCB->pxTaskTag = pxTagValue;
1487:FreeRTOS/tasks.c **** 		portEXIT_CRITICAL();
1488:FreeRTOS/tasks.c **** 	}
1489:FreeRTOS/tasks.c **** 
1490:FreeRTOS/tasks.c **** #endif
1491:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1492:FreeRTOS/tasks.c **** 
1493:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1494:FreeRTOS/tasks.c **** 
1495:FreeRTOS/tasks.c **** 	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
1496:FreeRTOS/tasks.c **** 	{
1497:FreeRTOS/tasks.c **** 	tskTCB *xTCB;
1498:FreeRTOS/tasks.c **** 	pdTASK_HOOK_CODE xReturn;
1499:FreeRTOS/tasks.c **** 
1500:FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1501:FreeRTOS/tasks.c **** 		if( xTask == NULL )
1502:FreeRTOS/tasks.c **** 		{
1503:FreeRTOS/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1504:FreeRTOS/tasks.c **** 		}
1505:FreeRTOS/tasks.c **** 		else
1506:FreeRTOS/tasks.c **** 		{
1507:FreeRTOS/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1508:FreeRTOS/tasks.c **** 		}
1509:FreeRTOS/tasks.c **** 
1510:FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1511:FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
1512:FreeRTOS/tasks.c **** 		portENTER_CRITICAL();
1513:FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag;
1514:FreeRTOS/tasks.c **** 		portEXIT_CRITICAL();
1515:FreeRTOS/tasks.c **** 
1516:FreeRTOS/tasks.c **** 		return xReturn;
1517:FreeRTOS/tasks.c **** 	}
1518:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/cck0uY6y.s 			page 201


1519:FreeRTOS/tasks.c **** #endif
1520:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1521:FreeRTOS/tasks.c **** 
1522:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1523:FreeRTOS/tasks.c **** 
1524:FreeRTOS/tasks.c **** 	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
1525:FreeRTOS/tasks.c **** 	{
1526:FreeRTOS/tasks.c **** 	tskTCB *xTCB;
1527:FreeRTOS/tasks.c **** 	portBASE_TYPE xReturn;
1528:FreeRTOS/tasks.c **** 
1529:FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
1530:FreeRTOS/tasks.c **** 		if( xTask == NULL )
1531:FreeRTOS/tasks.c **** 		{
1532:FreeRTOS/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1533:FreeRTOS/tasks.c **** 		}
1534:FreeRTOS/tasks.c **** 		else
1535:FreeRTOS/tasks.c **** 		{
1536:FreeRTOS/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1537:FreeRTOS/tasks.c **** 		}
1538:FreeRTOS/tasks.c **** 
1539:FreeRTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
1540:FreeRTOS/tasks.c **** 		{
1541:FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
1542:FreeRTOS/tasks.c **** 		}
1543:FreeRTOS/tasks.c **** 		else
1544:FreeRTOS/tasks.c **** 		{
1545:FreeRTOS/tasks.c **** 			xReturn = pdFAIL;
1546:FreeRTOS/tasks.c **** 		}
1547:FreeRTOS/tasks.c **** 
1548:FreeRTOS/tasks.c **** 		return xReturn;
1549:FreeRTOS/tasks.c **** 	}
1550:FreeRTOS/tasks.c **** 
1551:FreeRTOS/tasks.c **** #endif
1552:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1553:FreeRTOS/tasks.c **** 
1554:FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
1555:FreeRTOS/tasks.c **** {
 5208              		.loc 1 1555 0
 5209              		@ args = 0, pretend = 0, frame = 8
 5210              		@ frame_needed = 1, uses_anonymous_args = 0
 5211              		@ link register save eliminated.
 5212 0000 80B4     		push	{r7}
 5213              	.LCFI42:
 5214 0002 83B0     		sub	sp, sp, #12
 5215              	.LCFI43:
 5216 0004 00AF     		add	r7, sp, #0
 5217              	.LCFI44:
1556:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 5218              		.loc 1 1556 0
 5219 0006 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 5220 000a C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 5221 000e 1B68     		ldr	r3, [r3, #0]
 5222 0010 002B     		cmp	r3, #0
 5223 0012 14D0     		beq	.L104
1557:FreeRTOS/tasks.c **** 	{
1558:FreeRTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
1559:FreeRTOS/tasks.c **** 		switch. */
ARM GAS  /tmp/cck0uY6y.s 			page 202


1560:FreeRTOS/tasks.c **** 		xMissedYield = pdTRUE;
 5224              		.loc 1 1560 0
 5225 0014 40F20003 		movw	r3, #:lower16:xMissedYield
 5226 0018 C0F20003 		movt	r3, #:upper16:xMissedYield
 5227 001c 4FF00102 		mov	r2, #1
 5228 0020 1A60     		str	r2, [r3, #0]
1561:FreeRTOS/tasks.c **** 		return;
 5229              		.loc 1 1561 0
 5230 0022 4DE0     		b	.L103
 5231              	.L101:
1562:FreeRTOS/tasks.c **** 	}
1563:FreeRTOS/tasks.c **** 
1564:FreeRTOS/tasks.c **** 	traceTASK_SWITCHED_OUT();
1565:FreeRTOS/tasks.c **** 
1566:FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
1567:FreeRTOS/tasks.c **** 	{
1568:FreeRTOS/tasks.c **** 		unsigned long ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
1569:FreeRTOS/tasks.c **** 
1570:FreeRTOS/tasks.c **** 			/* Add the amount of time the task has been running to the accumulated
1571:FreeRTOS/tasks.c **** 			time so far.  The time the task started running was stored in
1572:FreeRTOS/tasks.c **** 			ulTaskSwitchedInTime.  Note that there is no overflow protection here
1573:FreeRTOS/tasks.c **** 			so count values are only valid until the timer overflows.  Generally
1574:FreeRTOS/tasks.c **** 			this will be about 1 hour assuming a 1uS timer increment. */
1575:FreeRTOS/tasks.c **** 			pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
1576:FreeRTOS/tasks.c **** 			ulTaskSwitchedInTime = ulTempCounter;
1577:FreeRTOS/tasks.c **** 	}
1578:FreeRTOS/tasks.c **** 	#endif
1579:FreeRTOS/tasks.c **** 
1580:FreeRTOS/tasks.c **** 	taskFIRST_CHECK_FOR_STACK_OVERFLOW();
1581:FreeRTOS/tasks.c **** 	taskSECOND_CHECK_FOR_STACK_OVERFLOW();
1582:FreeRTOS/tasks.c **** 
1583:FreeRTOS/tasks.c **** 	/* Find the highest priority queue that contains ready tasks. */
1584:FreeRTOS/tasks.c **** 	while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
1585:FreeRTOS/tasks.c **** 	{
1586:FreeRTOS/tasks.c **** 		--uxTopReadyPriority;
 5232              		.loc 1 1586 0
 5233 0024 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 5234 0028 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 5235 002c 1B68     		ldr	r3, [r3, #0]
 5236 002e 03F1FF32 		add	r2, r3, #-1
 5237 0032 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 5238 0036 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 5239 003a 1A60     		str	r2, [r3, #0]
 5240 003c 00E0     		b	.L100
 5241              	.L104:
 5242              		.loc 1 1584 0
 5243 003e 00BF     		nop
 5244              	.L100:
 5245 0040 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 5246 0044 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 5247 0048 1A68     		ldr	r2, [r3, #0]
 5248 004a 1346     		mov	r3, r2
 5249 004c 4FEA8303 		lsl	r3, r3, #2
 5250 0050 1344     		add	r3, r3, r2
 5251 0052 4FEA8303 		lsl	r3, r3, #2
 5252 0056 1A46     		mov	r2, r3
 5253 0058 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
ARM GAS  /tmp/cck0uY6y.s 			page 203


 5254 005c C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 5255 0060 1344     		add	r3, r2, r3
 5256 0062 1B68     		ldr	r3, [r3, #0]
 5257 0064 002B     		cmp	r3, #0
 5258 0066 DDD0     		beq	.L101
 5259              	.LBB6:
1587:FreeRTOS/tasks.c **** 	}
1588:FreeRTOS/tasks.c **** 
1589:FreeRTOS/tasks.c **** 	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
1590:FreeRTOS/tasks.c **** 	same priority get an equal share of the processor time. */
1591:FreeRTOS/tasks.c **** 	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 5260              		.loc 1 1591 0
 5261 0068 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 5262 006c C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 5263 0070 1A68     		ldr	r2, [r3, #0]
 5264 0072 1346     		mov	r3, r2
 5265 0074 4FEA8303 		lsl	r3, r3, #2
 5266 0078 1344     		add	r3, r3, r2
 5267 007a 4FEA8303 		lsl	r3, r3, #2
 5268 007e 1A46     		mov	r2, r3
 5269 0080 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 5270 0084 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 5271 0088 1344     		add	r3, r2, r3
 5272 008a 7B60     		str	r3, [r7, #4]
 5273 008c 7B68     		ldr	r3, [r7, #4]
 5274 008e 5B68     		ldr	r3, [r3, #4]
 5275 0090 5A68     		ldr	r2, [r3, #4]
 5276 0092 7B68     		ldr	r3, [r7, #4]
 5277 0094 5A60     		str	r2, [r3, #4]
 5278 0096 7B68     		ldr	r3, [r7, #4]
 5279 0098 5A68     		ldr	r2, [r3, #4]
 5280 009a 7B68     		ldr	r3, [r7, #4]
 5281 009c 03F10803 		add	r3, r3, #8
 5282 00a0 9A42     		cmp	r2, r3
 5283 00a2 04D1     		bne	.L102
 5284 00a4 7B68     		ldr	r3, [r7, #4]
 5285 00a6 5B68     		ldr	r3, [r3, #4]
 5286 00a8 5A68     		ldr	r2, [r3, #4]
 5287 00aa 7B68     		ldr	r3, [r7, #4]
 5288 00ac 5A60     		str	r2, [r3, #4]
 5289              	.L102:
 5290 00ae 7B68     		ldr	r3, [r7, #4]
 5291 00b0 5B68     		ldr	r3, [r3, #4]
 5292 00b2 DB68     		ldr	r3, [r3, #12]
 5293 00b4 1A46     		mov	r2, r3
 5294 00b6 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 5295 00ba C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 5296 00be 1A60     		str	r2, [r3, #0]
 5297              	.L103:
 5298              	.LBE6:
1592:FreeRTOS/tasks.c **** 
1593:FreeRTOS/tasks.c **** 	traceTASK_SWITCHED_IN();
1594:FreeRTOS/tasks.c **** 	vWriteTraceToBuffer();
1595:FreeRTOS/tasks.c **** }
 5299              		.loc 1 1595 0
 5300 00c0 07F10C07 		add	r7, r7, #12
 5301 00c4 BD46     		mov	sp, r7
ARM GAS  /tmp/cck0uY6y.s 			page 204


 5302 00c6 80BC     		pop	{r7}
 5303 00c8 7047     		bx	lr
 5304              	.LFE44:
 5305              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 5306 00ca 00BF     		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 5307              		.align	2
 5308              		.global	vTaskPlaceOnEventList
 5309              		.thumb
 5310              		.thumb_func
 5311              		.type	vTaskPlaceOnEventList, %function
 5312              	vTaskPlaceOnEventList:
 5313              	.LFB45:
1596:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1597:FreeRTOS/tasks.c **** 
1598:FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
1599:FreeRTOS/tasks.c **** {
 5314              		.loc 1 1599 0
 5315              		@ args = 0, pretend = 0, frame = 16
 5316              		@ frame_needed = 1, uses_anonymous_args = 0
 5317 0000 80B5     		push	{r7, lr}
 5318              	.LCFI45:
 5319 0002 84B0     		sub	sp, sp, #16
 5320              	.LCFI46:
 5321 0004 00AF     		add	r7, sp, #0
 5322              	.LCFI47:
 5323 0006 7860     		str	r0, [r7, #4]
 5324 0008 3960     		str	r1, [r7, #0]
1600:FreeRTOS/tasks.c **** portTickType xTimeToWake;
1601:FreeRTOS/tasks.c **** 
1602:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1603:FreeRTOS/tasks.c **** 	SCHEDULER SUSPENDED. */
1604:FreeRTOS/tasks.c **** 
1605:FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
1606:FreeRTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
1607:FreeRTOS/tasks.c **** 	is the first to be woken by the event. */
1608:FreeRTOS/tasks.c **** 	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 5325              		.loc 1 1608 0
 5326 000a 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 5327 000e C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 5328 0012 1B68     		ldr	r3, [r3, #0]
 5329 0014 03F11803 		add	r3, r3, #24
 5330 0018 7868     		ldr	r0, [r7, #4]
 5331 001a 1946     		mov	r1, r3
 5332 001c FFF7FEFF 		bl	vListInsert
1609:FreeRTOS/tasks.c **** 
1610:FreeRTOS/tasks.c **** 	/* We must remove ourselves from the ready list before adding ourselves
1611:FreeRTOS/tasks.c **** 	to the blocked list as the same list item is used for both lists.  We have
1612:FreeRTOS/tasks.c **** 	exclusive access to the ready lists as the scheduler is locked. */
1613:FreeRTOS/tasks.c **** 	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 5333              		.loc 1 1613 0
 5334 0020 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 5335 0024 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 5336 0028 1B68     		ldr	r3, [r3, #0]
 5337 002a 03F10403 		add	r3, r3, #4
 5338 002e 1846     		mov	r0, r3
 5339 0030 FFF7FEFF 		bl	vListRemove
1614:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/cck0uY6y.s 			page 205


1615:FreeRTOS/tasks.c **** 
1616:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
1617:FreeRTOS/tasks.c **** 	{
1618:FreeRTOS/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 5340              		.loc 1 1618 0
 5341 0034 3B68     		ldr	r3, [r7, #0]
 5342 0036 B3F1FF3F 		cmp	r3, #-1
 5343 003a 0ED1     		bne	.L106
1619:FreeRTOS/tasks.c **** 		{
1620:FreeRTOS/tasks.c **** 			/* Add ourselves to the suspended task list instead of a delayed task
1621:FreeRTOS/tasks.c **** 			list to ensure we are not woken by a timing event.  We will block
1622:FreeRTOS/tasks.c **** 			indefinitely. */
1623:FreeRTOS/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListIt
 5344              		.loc 1 1623 0
 5345 003c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 5346 0040 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 5347 0044 1B68     		ldr	r3, [r3, #0]
 5348 0046 03F10403 		add	r3, r3, #4
 5349 004a 40F20000 		movw	r0, #:lower16:xSuspendedTaskList
 5350 004e C0F20000 		movt	r0, #:upper16:xSuspendedTaskList
 5351 0052 1946     		mov	r1, r3
 5352 0054 FFF7FEFF 		bl	vListInsertEnd
 5353 0058 37E0     		b	.L109
 5354              	.L106:
1624:FreeRTOS/tasks.c **** 		}
1625:FreeRTOS/tasks.c **** 		else
1626:FreeRTOS/tasks.c **** 		{
1627:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1628:FreeRTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1629:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
 5355              		.loc 1 1629 0
 5356 005a 40F20003 		movw	r3, #:lower16:xTickCount
 5357 005e C0F20003 		movt	r3, #:upper16:xTickCount
 5358 0062 1A68     		ldr	r2, [r3, #0]
 5359 0064 3B68     		ldr	r3, [r7, #0]
 5360 0066 1344     		add	r3, r2, r3
 5361 0068 FB60     		str	r3, [r7, #12]
1630:FreeRTOS/tasks.c **** 
1631:FreeRTOS/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 5362              		.loc 1 1631 0
 5363 006a 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 5364 006e C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 5365 0072 1B68     		ldr	r3, [r3, #0]
 5366 0074 FA68     		ldr	r2, [r7, #12]
 5367 0076 5A60     		str	r2, [r3, #4]
1632:FreeRTOS/tasks.c **** 
1633:FreeRTOS/tasks.c **** 			if( xTimeToWake < xTickCount )
 5368              		.loc 1 1633 0
 5369 0078 40F20003 		movw	r3, #:lower16:xTickCount
 5370 007c C0F20003 		movt	r3, #:upper16:xTickCount
 5371 0080 1B68     		ldr	r3, [r3, #0]
 5372 0082 FA68     		ldr	r2, [r7, #12]
 5373 0084 9A42     		cmp	r2, r3
 5374 0086 10D2     		bcs	.L108
1634:FreeRTOS/tasks.c **** 			{
1635:FreeRTOS/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow list. */
1636:FreeRTOS/tasks.c **** 				vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericLi
ARM GAS  /tmp/cck0uY6y.s 			page 206


 5375              		.loc 1 1636 0
 5376 0088 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 5377 008c C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 5378 0090 1A68     		ldr	r2, [r3, #0]
 5379 0092 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 5380 0096 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 5381 009a 1B68     		ldr	r3, [r3, #0]
 5382 009c 03F10403 		add	r3, r3, #4
 5383 00a0 1046     		mov	r0, r2
 5384 00a2 1946     		mov	r1, r3
 5385 00a4 FFF7FEFF 		bl	vListInsert
 5386 00a8 0FE0     		b	.L109
 5387              	.L108:
1637:FreeRTOS/tasks.c **** 			}
1638:FreeRTOS/tasks.c **** 			else
1639:FreeRTOS/tasks.c **** 			{
1640:FreeRTOS/tasks.c **** 				/* The wake time has not overflowed, so we can use the current block list. */
1641:FreeRTOS/tasks.c **** 				vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem )
 5388              		.loc 1 1641 0
 5389 00aa 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 5390 00ae C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 5391 00b2 1A68     		ldr	r2, [r3, #0]
 5392 00b4 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 5393 00b8 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 5394 00bc 1B68     		ldr	r3, [r3, #0]
 5395 00be 03F10403 		add	r3, r3, #4
 5396 00c2 1046     		mov	r0, r2
 5397 00c4 1946     		mov	r1, r3
 5398 00c6 FFF7FEFF 		bl	vListInsert
 5399              	.L109:
1642:FreeRTOS/tasks.c **** 			}
1643:FreeRTOS/tasks.c **** 		}
1644:FreeRTOS/tasks.c **** 	}
1645:FreeRTOS/tasks.c **** 	#else
1646:FreeRTOS/tasks.c **** 	{
1647:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1648:FreeRTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1649:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
1650:FreeRTOS/tasks.c **** 
1651:FreeRTOS/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
1652:FreeRTOS/tasks.c **** 
1653:FreeRTOS/tasks.c **** 			if( xTimeToWake < xTickCount )
1654:FreeRTOS/tasks.c **** 			{
1655:FreeRTOS/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow list. */
1656:FreeRTOS/tasks.c **** 				vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericLi
1657:FreeRTOS/tasks.c **** 			}
1658:FreeRTOS/tasks.c **** 			else
1659:FreeRTOS/tasks.c **** 			{
1660:FreeRTOS/tasks.c **** 				/* The wake time has not overflowed, so we can use the current block list. */
1661:FreeRTOS/tasks.c **** 				vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem )
1662:FreeRTOS/tasks.c **** 			}
1663:FreeRTOS/tasks.c **** 	}
1664:FreeRTOS/tasks.c **** 	#endif
1665:FreeRTOS/tasks.c **** }
 5400              		.loc 1 1665 0
 5401 00ca 07F11007 		add	r7, r7, #16
 5402 00ce BD46     		mov	sp, r7
ARM GAS  /tmp/cck0uY6y.s 			page 207


 5403 00d0 80BD     		pop	{r7, pc}
 5404              	.LFE45:
 5405              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 5406 00d2 00BF     		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 5407              		.align	2
 5408              		.global	xTaskRemoveFromEventList
 5409              		.thumb
 5410              		.thumb_func
 5411              		.type	xTaskRemoveFromEventList, %function
 5412              	xTaskRemoveFromEventList:
 5413              	.LFB46:
1666:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1667:FreeRTOS/tasks.c **** 
1668:FreeRTOS/tasks.c **** signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
1669:FreeRTOS/tasks.c **** {
 5414              		.loc 1 1669 0
 5415              		@ args = 0, pretend = 0, frame = 16
 5416              		@ frame_needed = 1, uses_anonymous_args = 0
 5417 0000 80B5     		push	{r7, lr}
 5418              	.LCFI48:
 5419 0002 84B0     		sub	sp, sp, #16
 5420              	.LCFI49:
 5421 0004 00AF     		add	r7, sp, #0
 5422              	.LCFI50:
 5423 0006 7860     		str	r0, [r7, #4]
1670:FreeRTOS/tasks.c **** tskTCB *pxUnblockedTCB;
1671:FreeRTOS/tasks.c **** portBASE_TYPE xReturn;
1672:FreeRTOS/tasks.c **** 
1673:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1674:FreeRTOS/tasks.c **** 	SCHEDULER SUSPENDED.  It can also be called from within an ISR. */
1675:FreeRTOS/tasks.c **** 
1676:FreeRTOS/tasks.c **** 	/* The event list is sorted in priority order, so we can remove the
1677:FreeRTOS/tasks.c **** 	first in the list, remove the TCB from the delayed list, and add
1678:FreeRTOS/tasks.c **** 	it to the ready list.
1679:FreeRTOS/tasks.c **** 
1680:FreeRTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
1681:FreeRTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
1682:FreeRTOS/tasks.c **** 	means we can always expect exclusive access to the event list here. */
1683:FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 5424              		.loc 1 1683 0
 5425 0008 7B68     		ldr	r3, [r7, #4]
 5426 000a 1B68     		ldr	r3, [r3, #0]
 5427 000c 002B     		cmp	r3, #0
 5428 000e 03D0     		beq	.L111
 5429 0010 7B68     		ldr	r3, [r7, #4]
 5430 0012 DB68     		ldr	r3, [r3, #12]
 5431 0014 DB68     		ldr	r3, [r3, #12]
 5432 0016 01E0     		b	.L112
 5433              	.L111:
 5434 0018 4FF00003 		mov	r3, #0
 5435              	.L112:
 5436 001c BB60     		str	r3, [r7, #8]
1684:FreeRTOS/tasks.c **** 	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 5437              		.loc 1 1684 0
 5438 001e BB68     		ldr	r3, [r7, #8]
 5439 0020 03F11803 		add	r3, r3, #24
 5440 0024 1846     		mov	r0, r3
ARM GAS  /tmp/cck0uY6y.s 			page 208


 5441 0026 FFF7FEFF 		bl	vListRemove
1685:FreeRTOS/tasks.c **** 
1686:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 5442              		.loc 1 1686 0
 5443 002a 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 5444 002e C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 5445 0032 1B68     		ldr	r3, [r3, #0]
 5446 0034 002B     		cmp	r3, #0
 5447 0036 2BD1     		bne	.L113
1687:FreeRTOS/tasks.c **** 	{
1688:FreeRTOS/tasks.c **** 		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 5448              		.loc 1 1688 0
 5449 0038 BB68     		ldr	r3, [r7, #8]
 5450 003a 03F10403 		add	r3, r3, #4
 5451 003e 1846     		mov	r0, r3
 5452 0040 FFF7FEFF 		bl	vListRemove
1689:FreeRTOS/tasks.c **** 		prvAddTaskToReadyQueue( pxUnblockedTCB );
 5453              		.loc 1 1689 0
 5454 0044 BB68     		ldr	r3, [r7, #8]
 5455 0046 DA6A     		ldr	r2, [r3, #44]
 5456 0048 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 5457 004c C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 5458 0050 1B68     		ldr	r3, [r3, #0]
 5459 0052 9A42     		cmp	r2, r3
 5460 0054 06D9     		bls	.L114
 5461 0056 BB68     		ldr	r3, [r7, #8]
 5462 0058 DA6A     		ldr	r2, [r3, #44]
 5463 005a 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 5464 005e C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 5465 0062 1A60     		str	r2, [r3, #0]
 5466              	.L114:
 5467 0064 BB68     		ldr	r3, [r7, #8]
 5468 0066 DA6A     		ldr	r2, [r3, #44]
 5469 0068 1346     		mov	r3, r2
 5470 006a 4FEA8303 		lsl	r3, r3, #2
 5471 006e 1344     		add	r3, r3, r2
 5472 0070 4FEA8303 		lsl	r3, r3, #2
 5473 0074 1A46     		mov	r2, r3
 5474 0076 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 5475 007a C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 5476 007e 1A44     		add	r2, r2, r3
 5477 0080 BB68     		ldr	r3, [r7, #8]
 5478 0082 03F10403 		add	r3, r3, #4
 5479 0086 1046     		mov	r0, r2
 5480 0088 1946     		mov	r1, r3
 5481 008a FFF7FEFF 		bl	vListInsertEnd
 5482 008e 09E0     		b	.L115
 5483              	.L113:
1690:FreeRTOS/tasks.c **** 	}
1691:FreeRTOS/tasks.c **** 	else
1692:FreeRTOS/tasks.c **** 	{
1693:FreeRTOS/tasks.c **** 		/* We cannot access the delayed or ready lists, so will hold this
1694:FreeRTOS/tasks.c **** 		task pending until the scheduler is resumed. */
1695:FreeRTOS/tasks.c **** 		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 5484              		.loc 1 1695 0
 5485 0090 BB68     		ldr	r3, [r7, #8]
 5486 0092 03F11803 		add	r3, r3, #24
ARM GAS  /tmp/cck0uY6y.s 			page 209


 5487 0096 40F20000 		movw	r0, #:lower16:xPendingReadyList
 5488 009a C0F20000 		movt	r0, #:upper16:xPendingReadyList
 5489 009e 1946     		mov	r1, r3
 5490 00a0 FFF7FEFF 		bl	vListInsertEnd
 5491              	.L115:
1696:FreeRTOS/tasks.c **** 	}
1697:FreeRTOS/tasks.c **** 
1698:FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 5492              		.loc 1 1698 0
 5493 00a4 BB68     		ldr	r3, [r7, #8]
 5494 00a6 DA6A     		ldr	r2, [r3, #44]
 5495 00a8 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 5496 00ac C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 5497 00b0 1B68     		ldr	r3, [r3, #0]
 5498 00b2 DB6A     		ldr	r3, [r3, #44]
 5499 00b4 9A42     		cmp	r2, r3
 5500 00b6 03D3     		bcc	.L116
1699:FreeRTOS/tasks.c **** 	{
1700:FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has
1701:FreeRTOS/tasks.c **** 		a higher priority than the calling task.  This allows
1702:FreeRTOS/tasks.c **** 		the calling task to know if it should force a context
1703:FreeRTOS/tasks.c **** 		switch now. */
1704:FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
 5501              		.loc 1 1704 0
 5502 00b8 4FF00103 		mov	r3, #1
 5503 00bc FB60     		str	r3, [r7, #12]
 5504 00be 02E0     		b	.L117
 5505              	.L116:
1705:FreeRTOS/tasks.c **** 	}
1706:FreeRTOS/tasks.c **** 	else
1707:FreeRTOS/tasks.c **** 	{
1708:FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
 5506              		.loc 1 1708 0
 5507 00c0 4FF00003 		mov	r3, #0
 5508 00c4 FB60     		str	r3, [r7, #12]
 5509              	.L117:
1709:FreeRTOS/tasks.c **** 	}
1710:FreeRTOS/tasks.c **** 
1711:FreeRTOS/tasks.c **** 	return xReturn;
 5510              		.loc 1 1711 0
 5511 00c6 FB68     		ldr	r3, [r7, #12]
1712:FreeRTOS/tasks.c **** }
 5512              		.loc 1 1712 0
 5513 00c8 1846     		mov	r0, r3
 5514 00ca 07F11007 		add	r7, r7, #16
 5515 00ce BD46     		mov	sp, r7
 5516 00d0 80BD     		pop	{r7, pc}
 5517              	.LFE46:
 5518              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 5519              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 5520              		.align	2
 5521              		.global	vTaskSetTimeOutState
 5522              		.thumb
 5523              		.thumb_func
 5524              		.type	vTaskSetTimeOutState, %function
 5525              	vTaskSetTimeOutState:
 5526              	.LFB47:
ARM GAS  /tmp/cck0uY6y.s 			page 210


1713:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1714:FreeRTOS/tasks.c **** 
1715:FreeRTOS/tasks.c **** void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
1716:FreeRTOS/tasks.c **** {
 5527              		.loc 1 1716 0
 5528              		@ args = 0, pretend = 0, frame = 8
 5529              		@ frame_needed = 1, uses_anonymous_args = 0
 5530              		@ link register save eliminated.
 5531 0000 80B4     		push	{r7}
 5532              	.LCFI51:
 5533 0002 83B0     		sub	sp, sp, #12
 5534              	.LCFI52:
 5535 0004 00AF     		add	r7, sp, #0
 5536              	.LCFI53:
 5537 0006 7860     		str	r0, [r7, #4]
1717:FreeRTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 5538              		.loc 1 1717 0
 5539 0008 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 5540 000c C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 5541 0010 1A68     		ldr	r2, [r3, #0]
 5542 0012 7B68     		ldr	r3, [r7, #4]
 5543 0014 1A60     		str	r2, [r3, #0]
1718:FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 5544              		.loc 1 1718 0
 5545 0016 40F20003 		movw	r3, #:lower16:xTickCount
 5546 001a C0F20003 		movt	r3, #:upper16:xTickCount
 5547 001e 1A68     		ldr	r2, [r3, #0]
 5548 0020 7B68     		ldr	r3, [r7, #4]
 5549 0022 5A60     		str	r2, [r3, #4]
1719:FreeRTOS/tasks.c **** }
 5550              		.loc 1 1719 0
 5551 0024 07F10C07 		add	r7, r7, #12
 5552 0028 BD46     		mov	sp, r7
 5553 002a 80BC     		pop	{r7}
 5554 002c 7047     		bx	lr
 5555              	.LFE47:
 5556              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 5557 002e 00BF     		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 5558              		.align	2
 5559              		.global	xTaskCheckForTimeOut
 5560              		.thumb
 5561              		.thumb_func
 5562              		.type	xTaskCheckForTimeOut, %function
 5563              	xTaskCheckForTimeOut:
 5564              	.LFB48:
1720:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1721:FreeRTOS/tasks.c **** 
1722:FreeRTOS/tasks.c **** portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToW
1723:FreeRTOS/tasks.c **** {
 5565              		.loc 1 1723 0
 5566              		@ args = 0, pretend = 0, frame = 16
 5567              		@ frame_needed = 1, uses_anonymous_args = 0
 5568 0000 80B5     		push	{r7, lr}
 5569              	.LCFI54:
 5570 0002 84B0     		sub	sp, sp, #16
 5571              	.LCFI55:
 5572 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cck0uY6y.s 			page 211


 5573              	.LCFI56:
 5574 0006 7860     		str	r0, [r7, #4]
 5575 0008 3960     		str	r1, [r7, #0]
1724:FreeRTOS/tasks.c **** portBASE_TYPE xReturn;
1725:FreeRTOS/tasks.c **** 
1726:FreeRTOS/tasks.c **** 	portENTER_CRITICAL();
 5576              		.loc 1 1726 0
 5577 000a FFF7FEFF 		bl	vPortEnterCritical
1727:FreeRTOS/tasks.c **** 	{
1728:FreeRTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
1729:FreeRTOS/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
1730:FreeRTOS/tasks.c **** 			the maximum block time then the task should block indefinitely, and
1731:FreeRTOS/tasks.c **** 			therefore never time out. */
1732:FreeRTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 5578              		.loc 1 1732 0
 5579 000e 3B68     		ldr	r3, [r7, #0]
 5580 0010 1B68     		ldr	r3, [r3, #0]
 5581 0012 B3F1FF3F 		cmp	r3, #-1
 5582 0016 03D1     		bne	.L122
1733:FreeRTOS/tasks.c **** 			{
1734:FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
 5583              		.loc 1 1734 0
 5584 0018 4FF00003 		mov	r3, #0
 5585 001c FB60     		str	r3, [r7, #12]
 5586 001e 3AE0     		b	.L123
 5587              	.L122:
1735:FreeRTOS/tasks.c **** 			}
1736:FreeRTOS/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
1737:FreeRTOS/tasks.c **** 		#endif
1738:FreeRTOS/tasks.c **** 
1739:FreeRTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTi
 5588              		.loc 1 1739 0
 5589 0020 7B68     		ldr	r3, [r7, #4]
 5590 0022 1A68     		ldr	r2, [r3, #0]
 5591 0024 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 5592 0028 C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 5593 002c 1B68     		ldr	r3, [r3, #0]
 5594 002e 9A42     		cmp	r2, r3
 5595 0030 0CD0     		beq	.L124
 5596 0032 7B68     		ldr	r3, [r7, #4]
 5597 0034 5A68     		ldr	r2, [r3, #4]
 5598 0036 40F20003 		movw	r3, #:lower16:xTickCount
 5599 003a C0F20003 		movt	r3, #:upper16:xTickCount
 5600 003e 1B68     		ldr	r3, [r3, #0]
 5601 0040 9A42     		cmp	r2, r3
 5602 0042 03D8     		bhi	.L124
1740:FreeRTOS/tasks.c **** 		{
1741:FreeRTOS/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
1742:FreeRTOS/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
1743:FreeRTOS/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
1744:FreeRTOS/tasks.c **** 			passed since vTaskSetTimeout() was called. */
1745:FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
 5603              		.loc 1 1745 0
 5604 0044 4FF00103 		mov	r3, #1
 5605 0048 FB60     		str	r3, [r7, #12]
 5606              		.loc 1 1739 0
 5607 004a 24E0     		b	.L123
ARM GAS  /tmp/cck0uY6y.s 			page 212


 5608              	.L124:
1746:FreeRTOS/tasks.c **** 		}
1747:FreeRTOS/tasks.c **** 		else if( ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) < ( portTi
 5609              		.loc 1 1747 0
 5610 004c 40F20003 		movw	r3, #:lower16:xTickCount
 5611 0050 C0F20003 		movt	r3, #:upper16:xTickCount
 5612 0054 1A68     		ldr	r2, [r3, #0]
 5613 0056 7B68     		ldr	r3, [r7, #4]
 5614 0058 5B68     		ldr	r3, [r3, #4]
 5615 005a C3EB0202 		rsb	r2, r3, r2
 5616 005e 3B68     		ldr	r3, [r7, #0]
 5617 0060 1B68     		ldr	r3, [r3, #0]
 5618 0062 9A42     		cmp	r2, r3
 5619 0064 14D2     		bcs	.L125
1748:FreeRTOS/tasks.c **** 		{
1749:FreeRTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
1750:FreeRTOS/tasks.c **** 			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 5620              		.loc 1 1750 0
 5621 0066 3B68     		ldr	r3, [r7, #0]
 5622 0068 1A68     		ldr	r2, [r3, #0]
 5623 006a 7B68     		ldr	r3, [r7, #4]
 5624 006c 5968     		ldr	r1, [r3, #4]
 5625 006e 40F20003 		movw	r3, #:lower16:xTickCount
 5626 0072 C0F20003 		movt	r3, #:upper16:xTickCount
 5627 0076 1B68     		ldr	r3, [r3, #0]
 5628 0078 C3EB0103 		rsb	r3, r3, r1
 5629 007c 1A44     		add	r2, r2, r3
 5630 007e 3B68     		ldr	r3, [r7, #0]
 5631 0080 1A60     		str	r2, [r3, #0]
1751:FreeRTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 5632              		.loc 1 1751 0
 5633 0082 7868     		ldr	r0, [r7, #4]
 5634 0084 FFF7FEFF 		bl	vTaskSetTimeOutState
1752:FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
 5635              		.loc 1 1752 0
 5636 0088 4FF00003 		mov	r3, #0
 5637 008c FB60     		str	r3, [r7, #12]
 5638 008e 02E0     		b	.L123
 5639              	.L125:
1753:FreeRTOS/tasks.c **** 		}
1754:FreeRTOS/tasks.c **** 		else
1755:FreeRTOS/tasks.c **** 		{
1756:FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
 5640              		.loc 1 1756 0
 5641 0090 4FF00103 		mov	r3, #1
 5642 0094 FB60     		str	r3, [r7, #12]
 5643              	.L123:
1757:FreeRTOS/tasks.c **** 		}
1758:FreeRTOS/tasks.c **** 	}
1759:FreeRTOS/tasks.c **** 	portEXIT_CRITICAL();
 5644              		.loc 1 1759 0
 5645 0096 FFF7FEFF 		bl	vPortExitCritical
1760:FreeRTOS/tasks.c **** 
1761:FreeRTOS/tasks.c **** 	return xReturn;
 5646              		.loc 1 1761 0
 5647 009a FB68     		ldr	r3, [r7, #12]
1762:FreeRTOS/tasks.c **** }
ARM GAS  /tmp/cck0uY6y.s 			page 213


 5648              		.loc 1 1762 0
 5649 009c 1846     		mov	r0, r3
 5650 009e 07F11007 		add	r7, r7, #16
 5651 00a2 BD46     		mov	sp, r7
 5652 00a4 80BD     		pop	{r7, pc}
 5653              	.LFE48:
 5654              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 5655 00a6 00BF     		.section	.text.vTaskMissedYield,"ax",%progbits
 5656              		.align	2
 5657              		.global	vTaskMissedYield
 5658              		.thumb
 5659              		.thumb_func
 5660              		.type	vTaskMissedYield, %function
 5661              	vTaskMissedYield:
 5662              	.LFB49:
1763:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1764:FreeRTOS/tasks.c **** 
1765:FreeRTOS/tasks.c **** void vTaskMissedYield( void )
1766:FreeRTOS/tasks.c **** {
 5663              		.loc 1 1766 0
 5664              		@ args = 0, pretend = 0, frame = 0
 5665              		@ frame_needed = 1, uses_anonymous_args = 0
 5666              		@ link register save eliminated.
 5667 0000 80B4     		push	{r7}
 5668              	.LCFI57:
 5669 0002 00AF     		add	r7, sp, #0
 5670              	.LCFI58:
1767:FreeRTOS/tasks.c **** 	xMissedYield = pdTRUE;
 5671              		.loc 1 1767 0
 5672 0004 40F20003 		movw	r3, #:lower16:xMissedYield
 5673 0008 C0F20003 		movt	r3, #:upper16:xMissedYield
 5674 000c 4FF00102 		mov	r2, #1
 5675 0010 1A60     		str	r2, [r3, #0]
1768:FreeRTOS/tasks.c **** }
 5676              		.loc 1 1768 0
 5677 0012 BD46     		mov	sp, r7
 5678 0014 80BC     		pop	{r7}
 5679 0016 7047     		bx	lr
 5680              	.LFE49:
 5681              		.size	vTaskMissedYield, .-vTaskMissedYield
 5682              		.section	.text.prvIdleTask,"ax",%progbits
 5683              		.align	2
 5684              		.thumb
 5685              		.thumb_func
 5686              		.type	prvIdleTask, %function
 5687              	prvIdleTask:
 5688              	.LFB50:
1769:FreeRTOS/tasks.c **** 
1770:FreeRTOS/tasks.c **** /*
1771:FreeRTOS/tasks.c ****  * -----------------------------------------------------------
1772:FreeRTOS/tasks.c ****  * The Idle task.
1773:FreeRTOS/tasks.c ****  * ----------------------------------------------------------
1774:FreeRTOS/tasks.c ****  *
1775:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
1776:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
1777:FreeRTOS/tasks.c ****  *
1778:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
ARM GAS  /tmp/cck0uY6y.s 			page 214


1779:FreeRTOS/tasks.c ****  *
1780:FreeRTOS/tasks.c ****  */
1781:FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
1782:FreeRTOS/tasks.c **** {
 5689              		.loc 1 1782 0
 5690              		@ args = 0, pretend = 0, frame = 8
 5691              		@ frame_needed = 1, uses_anonymous_args = 0
 5692 0000 80B5     		push	{r7, lr}
 5693              	.LCFI59:
 5694 0002 82B0     		sub	sp, sp, #8
 5695              	.LCFI60:
 5696 0004 00AF     		add	r7, sp, #0
 5697              	.LCFI61:
 5698 0006 7860     		str	r0, [r7, #4]
 5699              	.L130:
1783:FreeRTOS/tasks.c **** 	/* Stop warnings. */
1784:FreeRTOS/tasks.c **** 	( void ) pvParameters;
1785:FreeRTOS/tasks.c **** 
1786:FreeRTOS/tasks.c **** 	for( ;; )
1787:FreeRTOS/tasks.c **** 	{
1788:FreeRTOS/tasks.c **** 		/* See if any tasks have been deleted. */
1789:FreeRTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
 5700              		.loc 1 1789 0
 5701 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
1790:FreeRTOS/tasks.c **** 
1791:FreeRTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
1792:FreeRTOS/tasks.c **** 		{
1793:FreeRTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
1794:FreeRTOS/tasks.c **** 			see if any other task has become available.  If we are using
1795:FreeRTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
1796:FreeRTOS/tasks.c **** 			will automatically get the processor anyway. */
1797:FreeRTOS/tasks.c **** 			taskYIELD();
1798:FreeRTOS/tasks.c **** 		}
1799:FreeRTOS/tasks.c **** 		#endif
1800:FreeRTOS/tasks.c **** 
1801:FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
1802:FreeRTOS/tasks.c **** 		{
1803:FreeRTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
1804:FreeRTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
1805:FreeRTOS/tasks.c **** 			to run then the idle task should yield before the end of the
1806:FreeRTOS/tasks.c **** 			timeslice.
1807:FreeRTOS/tasks.c **** 
1808:FreeRTOS/tasks.c **** 			A critical region is not required here as we are just reading from
1809:FreeRTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
1810:FreeRTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
1811:FreeRTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
1812:FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
1813:FreeRTOS/tasks.c **** 			{
1814:FreeRTOS/tasks.c **** 				taskYIELD();
1815:FreeRTOS/tasks.c **** 			}
1816:FreeRTOS/tasks.c **** 		}
1817:FreeRTOS/tasks.c **** 		#endif
1818:FreeRTOS/tasks.c **** 
1819:FreeRTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
1820:FreeRTOS/tasks.c **** 		{
1821:FreeRTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
1822:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/cck0uY6y.s 			page 215


1823:FreeRTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
1824:FreeRTOS/tasks.c **** 			allows the application designer to add background functionality
1825:FreeRTOS/tasks.c **** 			without the overhead of a separate task.
1826:FreeRTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
1827:FreeRTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
1828:FreeRTOS/tasks.c **** 			vApplicationIdleHook();
1829:FreeRTOS/tasks.c **** 		}
1830:FreeRTOS/tasks.c **** 		#endif
1831:FreeRTOS/tasks.c **** 	}
 5702              		.loc 1 1831 0
 5703 000c FCE7     		b	.L130
 5704              	.LFE50:
 5705              		.size	prvIdleTask, .-prvIdleTask
 5706 000e 00BF     		.section	.text.prvInitialiseTCBVariables,"ax",%progbits
 5707              		.align	2
 5708              		.thumb
 5709              		.thumb_func
 5710              		.type	prvInitialiseTCBVariables, %function
 5711              	prvInitialiseTCBVariables:
 5712              	.LFB51:
1832:FreeRTOS/tasks.c **** } /*lint !e715 pvParameters is not accessed but all task functions require the same prototype. */
1833:FreeRTOS/tasks.c **** 
1834:FreeRTOS/tasks.c **** 
1835:FreeRTOS/tasks.c **** 
1836:FreeRTOS/tasks.c **** 
1837:FreeRTOS/tasks.c **** 
1838:FreeRTOS/tasks.c **** 
1839:FreeRTOS/tasks.c **** 
1840:FreeRTOS/tasks.c **** /*-----------------------------------------------------------
1841:FreeRTOS/tasks.c ****  * File private functions documented at the top of the file.
1842:FreeRTOS/tasks.c ****  *----------------------------------------------------------*/
1843:FreeRTOS/tasks.c **** 
1844:FreeRTOS/tasks.c **** 
1845:FreeRTOS/tasks.c **** 
1846:FreeRTOS/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
1847:FreeRTOS/tasks.c **** {
 5713              		.loc 1 1847 0
 5714              		@ args = 4, pretend = 0, frame = 16
 5715              		@ frame_needed = 1, uses_anonymous_args = 0
 5716 0000 80B5     		push	{r7, lr}
 5717              	.LCFI62:
 5718 0002 84B0     		sub	sp, sp, #16
 5719              	.LCFI63:
 5720 0004 00AF     		add	r7, sp, #0
 5721              	.LCFI64:
 5722 0006 F860     		str	r0, [r7, #12]
 5723 0008 B960     		str	r1, [r7, #8]
 5724 000a 7A60     		str	r2, [r7, #4]
 5725 000c 3B60     		str	r3, [r7, #0]
1848:FreeRTOS/tasks.c **** 	/* Store the function name in the TCB. */
1849:FreeRTOS/tasks.c **** 	#if configMAX_TASK_NAME_LEN > 1
1850:FreeRTOS/tasks.c **** 	{
1851:FreeRTOS/tasks.c **** 		/* Don't bring strncpy into the build unnecessarily. */
1852:FreeRTOS/tasks.c **** 		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK
 5726              		.loc 1 1852 0
 5727 000e FB68     		ldr	r3, [r7, #12]
 5728 0010 03F13403 		add	r3, r3, #52
ARM GAS  /tmp/cck0uY6y.s 			page 216


 5729 0014 1A46     		mov	r2, r3
 5730 0016 BB68     		ldr	r3, [r7, #8]
 5731 0018 1046     		mov	r0, r2
 5732 001a 1946     		mov	r1, r3
 5733 001c 4FF00C02 		mov	r2, #12
 5734 0020 FFF7FEFF 		bl	strncpy
1853:FreeRTOS/tasks.c **** 	}
1854:FreeRTOS/tasks.c **** 	#endif
1855:FreeRTOS/tasks.c **** 	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = '\0';
 5735              		.loc 1 1855 0
 5736 0024 FB68     		ldr	r3, [r7, #12]
 5737 0026 4FF00002 		mov	r2, #0
 5738 002a 83F83F20 		strb	r2, [r3, #63]
1856:FreeRTOS/tasks.c **** 
1857:FreeRTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
1858:FreeRTOS/tasks.c **** 	remove the privilege bit if one is present. */
1859:FreeRTOS/tasks.c **** 	if( uxPriority >= configMAX_PRIORITIES )
 5739              		.loc 1 1859 0
 5740 002e 7B68     		ldr	r3, [r7, #4]
 5741 0030 042B     		cmp	r3, #4
 5742 0032 02D9     		bls	.L133
1860:FreeRTOS/tasks.c **** 	{
1861:FreeRTOS/tasks.c **** 		uxPriority = configMAX_PRIORITIES - 1;
 5743              		.loc 1 1861 0
 5744 0034 4FF00403 		mov	r3, #4
 5745 0038 7B60     		str	r3, [r7, #4]
 5746              	.L133:
1862:FreeRTOS/tasks.c **** 	}
1863:FreeRTOS/tasks.c **** 
1864:FreeRTOS/tasks.c **** 	pxTCB->uxPriority = uxPriority;
 5747              		.loc 1 1864 0
 5748 003a FB68     		ldr	r3, [r7, #12]
 5749 003c 7A68     		ldr	r2, [r7, #4]
 5750 003e DA62     		str	r2, [r3, #44]
1865:FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
1866:FreeRTOS/tasks.c **** 	{
1867:FreeRTOS/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
1868:FreeRTOS/tasks.c **** 	}
1869:FreeRTOS/tasks.c **** 	#endif
1870:FreeRTOS/tasks.c **** 
1871:FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 5751              		.loc 1 1871 0
 5752 0040 FB68     		ldr	r3, [r7, #12]
 5753 0042 03F10403 		add	r3, r3, #4
 5754 0046 1846     		mov	r0, r3
 5755 0048 FFF7FEFF 		bl	vListInitialiseItem
1872:FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 5756              		.loc 1 1872 0
 5757 004c FB68     		ldr	r3, [r7, #12]
 5758 004e 03F11803 		add	r3, r3, #24
 5759 0052 1846     		mov	r0, r3
 5760 0054 FFF7FEFF 		bl	vListInitialiseItem
1873:FreeRTOS/tasks.c **** 
1874:FreeRTOS/tasks.c **** 	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
1875:FreeRTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
1876:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 5761              		.loc 1 1876 0
ARM GAS  /tmp/cck0uY6y.s 			page 217


 5762 0058 FB68     		ldr	r3, [r7, #12]
 5763 005a FA68     		ldr	r2, [r7, #12]
 5764 005c 1A61     		str	r2, [r3, #16]
1877:FreeRTOS/tasks.c **** 
1878:FreeRTOS/tasks.c **** 	/* Event lists are always in priority order. */
1879:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPri
 5765              		.loc 1 1879 0
 5766 005e 7B68     		ldr	r3, [r7, #4]
 5767 0060 C3F10502 		rsb	r2, r3, #5
 5768 0064 FB68     		ldr	r3, [r7, #12]
 5769 0066 9A61     		str	r2, [r3, #24]
1880:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 5770              		.loc 1 1880 0
 5771 0068 FB68     		ldr	r3, [r7, #12]
 5772 006a FA68     		ldr	r2, [r7, #12]
 5773 006c 5A62     		str	r2, [r3, #36]
1881:FreeRTOS/tasks.c **** 
1882:FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
1883:FreeRTOS/tasks.c **** 	{
1884:FreeRTOS/tasks.c **** 		pxTCB->uxCriticalNesting = ( unsigned portBASE_TYPE ) 0;
1885:FreeRTOS/tasks.c **** 	}
1886:FreeRTOS/tasks.c **** 	#endif
1887:FreeRTOS/tasks.c **** 
1888:FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
1889:FreeRTOS/tasks.c **** 	{
1890:FreeRTOS/tasks.c **** 		pxTCB->pxTaskTag = NULL;
1891:FreeRTOS/tasks.c **** 	}
1892:FreeRTOS/tasks.c **** 	#endif
1893:FreeRTOS/tasks.c **** 
1894:FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
1895:FreeRTOS/tasks.c **** 	{
1896:FreeRTOS/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
1897:FreeRTOS/tasks.c **** 	}
1898:FreeRTOS/tasks.c **** 	#endif
1899:FreeRTOS/tasks.c **** 
1900:FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
1901:FreeRTOS/tasks.c **** 	{
1902:FreeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
1903:FreeRTOS/tasks.c **** 	}
1904:FreeRTOS/tasks.c **** 	#else
1905:FreeRTOS/tasks.c **** 	{
1906:FreeRTOS/tasks.c **** 		( void ) xRegions;
1907:FreeRTOS/tasks.c **** 		( void ) usStackDepth;
1908:FreeRTOS/tasks.c **** 	}
1909:FreeRTOS/tasks.c **** 	#endif
1910:FreeRTOS/tasks.c **** }
 5774              		.loc 1 1910 0
 5775 006e 07F11007 		add	r7, r7, #16
 5776 0072 BD46     		mov	sp, r7
 5777 0074 80BD     		pop	{r7, pc}
 5778              	.LFE51:
 5779              		.size	prvInitialiseTCBVariables, .-prvInitialiseTCBVariables
 5780 0076 00BF     		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 5781              		.align	2
 5782              		.thumb
 5783              		.thumb_func
 5784              		.type	prvInitialiseTaskLists, %function
ARM GAS  /tmp/cck0uY6y.s 			page 218


 5785              	prvInitialiseTaskLists:
 5786              	.LFB52:
1911:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1912:FreeRTOS/tasks.c **** 
1913:FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
1914:FreeRTOS/tasks.c **** 
1915:FreeRTOS/tasks.c **** 	void vTaskAllocateMPURegions( xTaskHandle xTaskToModify, const xMemoryRegion * const xRegions )
1916:FreeRTOS/tasks.c **** 	{
1917:FreeRTOS/tasks.c **** 	tskTCB *pxTCB;
1918:FreeRTOS/tasks.c **** 	
1919:FreeRTOS/tasks.c **** 		if( xTaskToModify == pxCurrentTCB )
1920:FreeRTOS/tasks.c **** 		{
1921:FreeRTOS/tasks.c **** 			xTaskToModify = NULL;
1922:FreeRTOS/tasks.c **** 		}
1923:FreeRTOS/tasks.c **** 
1924:FreeRTOS/tasks.c **** 		/* If null is passed in here then we are deleting ourselves. */
1925:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
1926:FreeRTOS/tasks.c **** 
1927:FreeRTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
1928:FreeRTOS/tasks.c **** 	}
1929:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
1930:FreeRTOS/tasks.c **** #endif
1931:FreeRTOS/tasks.c **** 
1932:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
1933:FreeRTOS/tasks.c **** {
 5787              		.loc 1 1933 0
 5788              		@ args = 0, pretend = 0, frame = 8
 5789              		@ frame_needed = 1, uses_anonymous_args = 0
 5790 0000 80B5     		push	{r7, lr}
 5791              	.LCFI65:
 5792 0002 82B0     		sub	sp, sp, #8
 5793              	.LCFI66:
 5794 0004 00AF     		add	r7, sp, #0
 5795              	.LCFI67:
1934:FreeRTOS/tasks.c **** unsigned portBASE_TYPE uxPriority;
1935:FreeRTOS/tasks.c **** 
1936:FreeRTOS/tasks.c **** 	for( uxPriority = 0; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 5796              		.loc 1 1936 0
 5797 0006 4FF00003 		mov	r3, #0
 5798 000a 7B60     		str	r3, [r7, #4]
 5799 000c 13E0     		b	.L136
 5800              	.L137:
1937:FreeRTOS/tasks.c **** 	{
1938:FreeRTOS/tasks.c **** 		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 5801              		.loc 1 1938 0
 5802 000e 7A68     		ldr	r2, [r7, #4]
 5803 0010 1346     		mov	r3, r2
 5804 0012 4FEA8303 		lsl	r3, r3, #2
 5805 0016 1344     		add	r3, r3, r2
 5806 0018 4FEA8303 		lsl	r3, r3, #2
 5807 001c 1A46     		mov	r2, r3
 5808 001e 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 5809 0022 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 5810 0026 1344     		add	r3, r2, r3
 5811 0028 1846     		mov	r0, r3
 5812 002a FFF7FEFF 		bl	vListInitialise
 5813              		.loc 1 1936 0
ARM GAS  /tmp/cck0uY6y.s 			page 219


 5814 002e 7B68     		ldr	r3, [r7, #4]
 5815 0030 03F10103 		add	r3, r3, #1
 5816 0034 7B60     		str	r3, [r7, #4]
 5817              	.L136:
 5818 0036 7B68     		ldr	r3, [r7, #4]
 5819 0038 042B     		cmp	r3, #4
 5820 003a E8D9     		bls	.L137
1939:FreeRTOS/tasks.c **** 	}
1940:FreeRTOS/tasks.c **** 
1941:FreeRTOS/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 5821              		.loc 1 1941 0
 5822 003c 40F20000 		movw	r0, #:lower16:xDelayedTaskList1
 5823 0040 C0F20000 		movt	r0, #:upper16:xDelayedTaskList1
 5824 0044 FFF7FEFF 		bl	vListInitialise
1942:FreeRTOS/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 5825              		.loc 1 1942 0
 5826 0048 40F20000 		movw	r0, #:lower16:xDelayedTaskList2
 5827 004c C0F20000 		movt	r0, #:upper16:xDelayedTaskList2
 5828 0050 FFF7FEFF 		bl	vListInitialise
1943:FreeRTOS/tasks.c **** 	vListInitialise( ( xList * ) &xPendingReadyList );
 5829              		.loc 1 1943 0
 5830 0054 40F20000 		movw	r0, #:lower16:xPendingReadyList
 5831 0058 C0F20000 		movt	r0, #:upper16:xPendingReadyList
 5832 005c FFF7FEFF 		bl	vListInitialise
1944:FreeRTOS/tasks.c **** 
1945:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
1946:FreeRTOS/tasks.c **** 	{
1947:FreeRTOS/tasks.c **** 		vListInitialise( ( xList * ) &xTasksWaitingTermination );
1948:FreeRTOS/tasks.c **** 	}
1949:FreeRTOS/tasks.c **** 	#endif
1950:FreeRTOS/tasks.c **** 
1951:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
1952:FreeRTOS/tasks.c **** 	{
1953:FreeRTOS/tasks.c **** 		vListInitialise( ( xList * ) &xSuspendedTaskList );
 5833              		.loc 1 1953 0
 5834 0060 40F20000 		movw	r0, #:lower16:xSuspendedTaskList
 5835 0064 C0F20000 		movt	r0, #:upper16:xSuspendedTaskList
 5836 0068 FFF7FEFF 		bl	vListInitialise
1954:FreeRTOS/tasks.c **** 	}
1955:FreeRTOS/tasks.c **** 	#endif
1956:FreeRTOS/tasks.c **** 
1957:FreeRTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
1958:FreeRTOS/tasks.c **** 	using list2. */
1959:FreeRTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 5837              		.loc 1 1959 0
 5838 006c 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 5839 0070 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 5840 0074 40F20002 		movw	r2, #:lower16:xDelayedTaskList1
 5841 0078 C0F20002 		movt	r2, #:upper16:xDelayedTaskList1
 5842 007c 1A60     		str	r2, [r3, #0]
1960:FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5843              		.loc 1 1960 0
 5844 007e 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 5845 0082 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 5846 0086 40F20002 		movw	r2, #:lower16:xDelayedTaskList2
 5847 008a C0F20002 		movt	r2, #:upper16:xDelayedTaskList2
 5848 008e 1A60     		str	r2, [r3, #0]
ARM GAS  /tmp/cck0uY6y.s 			page 220


1961:FreeRTOS/tasks.c **** }
 5849              		.loc 1 1961 0
 5850 0090 07F10807 		add	r7, r7, #8
 5851 0094 BD46     		mov	sp, r7
 5852 0096 80BD     		pop	{r7, pc}
 5853              	.LFE52:
 5854              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 5855              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 5856              		.align	2
 5857              		.thumb
 5858              		.thumb_func
 5859              		.type	prvCheckTasksWaitingTermination, %function
 5860              	prvCheckTasksWaitingTermination:
 5861              	.LFB53:
1962:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1963:FreeRTOS/tasks.c **** 
1964:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
1965:FreeRTOS/tasks.c **** {
 5862              		.loc 1 1965 0
 5863              		@ args = 0, pretend = 0, frame = 0
 5864              		@ frame_needed = 1, uses_anonymous_args = 0
 5865              		@ link register save eliminated.
 5866 0000 80B4     		push	{r7}
 5867              	.LCFI68:
 5868 0002 00AF     		add	r7, sp, #0
 5869              	.LCFI69:
1966:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
1967:FreeRTOS/tasks.c **** 	{
1968:FreeRTOS/tasks.c **** 		portBASE_TYPE xListIsEmpty;
1969:FreeRTOS/tasks.c **** 
1970:FreeRTOS/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
1971:FreeRTOS/tasks.c **** 		too often in the idle task. */
1972:FreeRTOS/tasks.c **** 		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
1973:FreeRTOS/tasks.c **** 		{
1974:FreeRTOS/tasks.c **** 			vTaskSuspendAll();
1975:FreeRTOS/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
1976:FreeRTOS/tasks.c **** 			xTaskResumeAll();
1977:FreeRTOS/tasks.c **** 
1978:FreeRTOS/tasks.c **** 			if( !xListIsEmpty )
1979:FreeRTOS/tasks.c **** 			{
1980:FreeRTOS/tasks.c **** 				tskTCB *pxTCB;
1981:FreeRTOS/tasks.c **** 
1982:FreeRTOS/tasks.c **** 				portENTER_CRITICAL();
1983:FreeRTOS/tasks.c **** 				{
1984:FreeRTOS/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
1985:FreeRTOS/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
1986:FreeRTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
1987:FreeRTOS/tasks.c **** 					--uxTasksDeleted;
1988:FreeRTOS/tasks.c **** 				}
1989:FreeRTOS/tasks.c **** 				portEXIT_CRITICAL();
1990:FreeRTOS/tasks.c **** 
1991:FreeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
1992:FreeRTOS/tasks.c **** 			}
1993:FreeRTOS/tasks.c **** 		}
1994:FreeRTOS/tasks.c **** 	}
1995:FreeRTOS/tasks.c **** 	#endif
1996:FreeRTOS/tasks.c **** }
ARM GAS  /tmp/cck0uY6y.s 			page 221


 5870              		.loc 1 1996 0
 5871 0004 BD46     		mov	sp, r7
 5872 0006 80BC     		pop	{r7}
 5873 0008 7047     		bx	lr
 5874              	.LFE53:
 5875              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 5876 000a 00BF     		.section	.text.prvAllocateTCBAndStack,"ax",%progbits
 5877              		.align	2
 5878              		.thumb
 5879              		.thumb_func
 5880              		.type	prvAllocateTCBAndStack, %function
 5881              	prvAllocateTCBAndStack:
 5882              	.LFB54:
1997:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1998:FreeRTOS/tasks.c **** 
1999:FreeRTOS/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
2000:FreeRTOS/tasks.c **** {
 5883              		.loc 1 2000 0
 5884              		@ args = 0, pretend = 0, frame = 16
 5885              		@ frame_needed = 1, uses_anonymous_args = 0
 5886 0000 80B5     		push	{r7, lr}
 5887              	.LCFI70:
 5888 0002 84B0     		sub	sp, sp, #16
 5889              	.LCFI71:
 5890 0004 00AF     		add	r7, sp, #0
 5891              	.LCFI72:
 5892 0006 0346     		mov	r3, r0
 5893 0008 3960     		str	r1, [r7, #0]
 5894 000a FB80     		strh	r3, [r7, #6]	@ movhi
2001:FreeRTOS/tasks.c **** tskTCB *pxNewTCB;
2002:FreeRTOS/tasks.c **** 
2003:FreeRTOS/tasks.c **** 	/* Allocate space for the TCB.  Where the memory comes from depends on
2004:FreeRTOS/tasks.c **** 	the implementation of the port malloc function. */
2005:FreeRTOS/tasks.c **** 	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 5895              		.loc 1 2005 0
 5896 000c 4FF04000 		mov	r0, #64
 5897 0010 FFF7FEFF 		bl	pvPortMalloc
 5898 0014 0346     		mov	r3, r0
 5899 0016 FB60     		str	r3, [r7, #12]
2006:FreeRTOS/tasks.c **** 
2007:FreeRTOS/tasks.c **** 	if( pxNewTCB != NULL )
 5900              		.loc 1 2007 0
 5901 0018 FB68     		ldr	r3, [r7, #12]
 5902 001a 002B     		cmp	r3, #0
 5903 001c 1FD0     		beq	.L142
2008:FreeRTOS/tasks.c **** 	{
2009:FreeRTOS/tasks.c **** 		/* Allocate space for the stack used by the task being created.
2010:FreeRTOS/tasks.c **** 		The base of the stack memory stored in the TCB so the task can
2011:FreeRTOS/tasks.c **** 		be deleted later if required. */
2012:FreeRTOS/tasks.c **** 		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * size
 5904              		.loc 1 2012 0
 5905 001e FB88     		ldrh	r3, [r7, #6]
 5906 0020 4FEA8303 		lsl	r3, r3, #2
 5907 0024 1846     		mov	r0, r3
 5908 0026 FFF7FEFF 		bl	pvPortMalloc
 5909 002a 0346     		mov	r3, r0
 5910 002c 1A46     		mov	r2, r3
ARM GAS  /tmp/cck0uY6y.s 			page 222


 5911 002e FB68     		ldr	r3, [r7, #12]
 5912 0030 1A63     		str	r2, [r3, #48]
2013:FreeRTOS/tasks.c **** 
2014:FreeRTOS/tasks.c **** 		if( pxNewTCB->pxStack == NULL )
 5913              		.loc 1 2014 0
 5914 0032 FB68     		ldr	r3, [r7, #12]
 5915 0034 1B6B     		ldr	r3, [r3, #48]
 5916 0036 002B     		cmp	r3, #0
 5917 0038 06D1     		bne	.L143
2015:FreeRTOS/tasks.c **** 		{
2016:FreeRTOS/tasks.c **** 			/* Could not allocate the stack.  Delete the allocated TCB. */
2017:FreeRTOS/tasks.c **** 			vPortFree( pxNewTCB );
 5918              		.loc 1 2017 0
 5919 003a F868     		ldr	r0, [r7, #12]
 5920 003c FFF7FEFF 		bl	vPortFree
2018:FreeRTOS/tasks.c **** 			pxNewTCB = NULL;
 5921              		.loc 1 2018 0
 5922 0040 4FF00003 		mov	r3, #0
 5923 0044 FB60     		str	r3, [r7, #12]
 5924 0046 0AE0     		b	.L142
 5925              	.L143:
2019:FreeRTOS/tasks.c **** 		}
2020:FreeRTOS/tasks.c **** 		else
2021:FreeRTOS/tasks.c **** 		{
2022:FreeRTOS/tasks.c **** 			/* Just to help debugging. */
2023:FreeRTOS/tasks.c **** 			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
 5926              		.loc 1 2023 0
 5927 0048 FB68     		ldr	r3, [r7, #12]
 5928 004a 1A6B     		ldr	r2, [r3, #48]
 5929 004c FB88     		ldrh	r3, [r7, #6]
 5930 004e 4FEA8303 		lsl	r3, r3, #2
 5931 0052 1046     		mov	r0, r2
 5932 0054 4FF0A501 		mov	r1, #165
 5933 0058 1A46     		mov	r2, r3
 5934 005a FFF7FEFF 		bl	memset
 5935              	.L142:
2024:FreeRTOS/tasks.c **** 		}
2025:FreeRTOS/tasks.c **** 	}
2026:FreeRTOS/tasks.c **** 
2027:FreeRTOS/tasks.c **** 	return pxNewTCB;
 5936              		.loc 1 2027 0
 5937 005e FB68     		ldr	r3, [r7, #12]
2028:FreeRTOS/tasks.c **** }
 5938              		.loc 1 2028 0
 5939 0060 1846     		mov	r0, r3
 5940 0062 07F11007 		add	r7, r7, #16
 5941 0066 BD46     		mov	sp, r7
 5942 0068 80BD     		pop	{r7, pc}
 5943              	.LFE54:
 5944              		.size	prvAllocateTCBAndStack, .-prvAllocateTCBAndStack
 5945 006a 00BF     		.section	.debug_frame,"",%progbits
 5946              	.Lframe0:
 5947 0000 0C000000 		.4byte	.LECIE0-.LSCIE0
 5948              	.LSCIE0:
 5949 0004 FFFFFFFF 		.4byte	0xffffffff
 5950 0008 01       		.byte	0x1
 5951 0009 00       		.ascii	"\000"
ARM GAS  /tmp/cck0uY6y.s 			page 223


 5952 000a 01       		.uleb128 0x1
 5953 000b 7C       		.sleb128 -4
 5954 000c 0E       		.byte	0xe
 5955 000d 0C       		.byte	0xc
 5956 000e 0D       		.uleb128 0xd
 5957 000f 00       		.uleb128 0x0
 5958              		.align	2
 5959              	.LECIE0:
 5960              	.LSFDE0:
 5961 0010 1C000000 		.4byte	.LEFDE0-.LASFDE0
 5962              	.LASFDE0:
 5963 0014 00000000 		.4byte	.Lframe0
 5964 0018 00000000 		.4byte	.LFB29
 5965 001c A0010000 		.4byte	.LFE29-.LFB29
 5966 0020 42       		.byte	0x4
 5967              		.4byte	.LCFI0-.LFB29
 5968 0021 0E       		.byte	0xe
 5969 0022 08       		.uleb128 0x8
 5970 0023 42       		.byte	0x4
 5971              		.4byte	.LCFI1-.LCFI0
 5972 0024 0E       		.byte	0xe
 5973 0025 30       		.uleb128 0x30
 5974 0026 11       		.byte	0x11
 5975 0027 0E       		.uleb128 0xe
 5976 0028 01       		.sleb128 1
 5977 0029 11       		.byte	0x11
 5978 002a 07       		.uleb128 0x7
 5979 002b 02       		.sleb128 2
 5980 002c 42       		.byte	0x4
 5981              		.4byte	.LCFI2-.LCFI1
 5982 002d 0C       		.byte	0xc
 5983 002e 07       		.uleb128 0x7
 5984 002f 28       		.uleb128 0x28
 5985              		.align	2
 5986              	.LEFDE0:
 5987              	.LSFDE2:
 5988 0030 1C000000 		.4byte	.LEFDE2-.LASFDE2
 5989              	.LASFDE2:
 5990 0034 00000000 		.4byte	.Lframe0
 5991 0038 00000000 		.4byte	.LFB30
 5992 003c 14010000 		.4byte	.LFE30-.LFB30
 5993 0040 42       		.byte	0x4
 5994              		.4byte	.LCFI3-.LFB30
 5995 0041 0E       		.byte	0xe
 5996 0042 08       		.uleb128 0x8
 5997 0043 42       		.byte	0x4
 5998              		.4byte	.LCFI4-.LCFI3
 5999 0044 0E       		.byte	0xe
 6000 0045 20       		.uleb128 0x20
 6001 0046 11       		.byte	0x11
 6002 0047 0E       		.uleb128 0xe
 6003 0048 01       		.sleb128 1
 6004 0049 11       		.byte	0x11
 6005 004a 07       		.uleb128 0x7
 6006 004b 02       		.sleb128 2
 6007 004c 42       		.byte	0x4
 6008              		.4byte	.LCFI5-.LCFI4
ARM GAS  /tmp/cck0uY6y.s 			page 224


 6009 004d 0D       		.byte	0xd
 6010 004e 07       		.uleb128 0x7
 6011 004f 00       		.align	2
 6012              	.LEFDE2:
 6013              	.LSFDE4:
 6014 0050 1C000000 		.4byte	.LEFDE4-.LASFDE4
 6015              	.LASFDE4:
 6016 0054 00000000 		.4byte	.Lframe0
 6017 0058 00000000 		.4byte	.LFB31
 6018 005c B6000000 		.4byte	.LFE31-.LFB31
 6019 0060 42       		.byte	0x4
 6020              		.4byte	.LCFI6-.LFB31
 6021 0061 0E       		.byte	0xe
 6022 0062 08       		.uleb128 0x8
 6023 0063 42       		.byte	0x4
 6024              		.4byte	.LCFI7-.LCFI6
 6025 0064 0E       		.byte	0xe
 6026 0065 18       		.uleb128 0x18
 6027 0066 11       		.byte	0x11
 6028 0067 0E       		.uleb128 0xe
 6029 0068 01       		.sleb128 1
 6030 0069 11       		.byte	0x11
 6031 006a 07       		.uleb128 0x7
 6032 006b 02       		.sleb128 2
 6033 006c 42       		.byte	0x4
 6034              		.4byte	.LCFI8-.LCFI7
 6035 006d 0D       		.byte	0xd
 6036 006e 07       		.uleb128 0x7
 6037 006f 00       		.align	2
 6038              	.LEFDE4:
 6039              	.LSFDE6:
 6040 0070 1C000000 		.4byte	.LEFDE6-.LASFDE6
 6041              	.LASFDE6:
 6042 0074 00000000 		.4byte	.Lframe0
 6043 0078 00000000 		.4byte	.LFB32
 6044 007c 1E010000 		.4byte	.LFE32-.LFB32
 6045 0080 42       		.byte	0x4
 6046              		.4byte	.LCFI9-.LFB32
 6047 0081 0E       		.byte	0xe
 6048 0082 08       		.uleb128 0x8
 6049 0083 42       		.byte	0x4
 6050              		.4byte	.LCFI10-.LCFI9
 6051 0084 0E       		.byte	0xe
 6052 0085 20       		.uleb128 0x20
 6053 0086 11       		.byte	0x11
 6054 0087 0E       		.uleb128 0xe
 6055 0088 01       		.sleb128 1
 6056 0089 11       		.byte	0x11
 6057 008a 07       		.uleb128 0x7
 6058 008b 02       		.sleb128 2
 6059 008c 42       		.byte	0x4
 6060              		.4byte	.LCFI11-.LCFI10
 6061 008d 0D       		.byte	0xd
 6062 008e 07       		.uleb128 0x7
 6063 008f 00       		.align	2
 6064              	.LEFDE6:
 6065              	.LSFDE8:
ARM GAS  /tmp/cck0uY6y.s 			page 225


 6066 0090 1C000000 		.4byte	.LEFDE8-.LASFDE8
 6067              	.LASFDE8:
 6068 0094 00000000 		.4byte	.Lframe0
 6069 0098 00000000 		.4byte	.LFB33
 6070 009c 82000000 		.4byte	.LFE33-.LFB33
 6071 00a0 42       		.byte	0x4
 6072              		.4byte	.LCFI12-.LFB33
 6073 00a1 0E       		.byte	0xe
 6074 00a2 08       		.uleb128 0x8
 6075 00a3 42       		.byte	0x4
 6076              		.4byte	.LCFI13-.LCFI12
 6077 00a4 0E       		.byte	0xe
 6078 00a5 18       		.uleb128 0x18
 6079 00a6 11       		.byte	0x11
 6080 00a7 0E       		.uleb128 0xe
 6081 00a8 01       		.sleb128 1
 6082 00a9 11       		.byte	0x11
 6083 00aa 07       		.uleb128 0x7
 6084 00ab 02       		.sleb128 2
 6085 00ac 42       		.byte	0x4
 6086              		.4byte	.LCFI14-.LCFI13
 6087 00ad 0D       		.byte	0xd
 6088 00ae 07       		.uleb128 0x7
 6089 00af 00       		.align	2
 6090              	.LEFDE8:
 6091              	.LSFDE10:
 6092 00b0 18000000 		.4byte	.LEFDE10-.LASFDE10
 6093              	.LASFDE10:
 6094 00b4 00000000 		.4byte	.Lframe0
 6095 00b8 00000000 		.4byte	.LFB34
 6096 00bc 4E000000 		.4byte	.LFE34-.LFB34
 6097 00c0 42       		.byte	0x4
 6098              		.4byte	.LCFI15-.LFB34
 6099 00c1 0E       		.byte	0xe
 6100 00c2 04       		.uleb128 0x4
 6101 00c3 42       		.byte	0x4
 6102              		.4byte	.LCFI16-.LCFI15
 6103 00c4 0E       		.byte	0xe
 6104 00c5 18       		.uleb128 0x18
 6105 00c6 11       		.byte	0x11
 6106 00c7 07       		.uleb128 0x7
 6107 00c8 01       		.sleb128 1
 6108 00c9 42       		.byte	0x4
 6109              		.4byte	.LCFI17-.LCFI16
 6110 00ca 0D       		.byte	0xd
 6111 00cb 07       		.uleb128 0x7
 6112              		.align	2
 6113              	.LEFDE10:
 6114              	.LSFDE12:
 6115 00cc 1C000000 		.4byte	.LEFDE12-.LASFDE12
 6116              	.LASFDE12:
 6117 00d0 00000000 		.4byte	.Lframe0
 6118 00d4 00000000 		.4byte	.LFB35
 6119 00d8 AC000000 		.4byte	.LFE35-.LFB35
 6120 00dc 42       		.byte	0x4
 6121              		.4byte	.LCFI18-.LFB35
 6122 00dd 0E       		.byte	0xe
ARM GAS  /tmp/cck0uY6y.s 			page 226


 6123 00de 08       		.uleb128 0x8
 6124 00df 42       		.byte	0x4
 6125              		.4byte	.LCFI19-.LCFI18
 6126 00e0 0E       		.byte	0xe
 6127 00e1 18       		.uleb128 0x18
 6128 00e2 11       		.byte	0x11
 6129 00e3 0E       		.uleb128 0xe
 6130 00e4 01       		.sleb128 1
 6131 00e5 11       		.byte	0x11
 6132 00e6 07       		.uleb128 0x7
 6133 00e7 02       		.sleb128 2
 6134 00e8 42       		.byte	0x4
 6135              		.4byte	.LCFI20-.LCFI19
 6136 00e9 0D       		.byte	0xd
 6137 00ea 07       		.uleb128 0x7
 6138 00eb 00       		.align	2
 6139              	.LEFDE12:
 6140              	.LSFDE14:
 6141 00ec 1C000000 		.4byte	.LEFDE14-.LASFDE14
 6142              	.LASFDE14:
 6143 00f0 00000000 		.4byte	.Lframe0
 6144 00f4 00000000 		.4byte	.LFB36
 6145 00f8 BE000000 		.4byte	.LFE36-.LFB36
 6146 00fc 42       		.byte	0x4
 6147              		.4byte	.LCFI21-.LFB36
 6148 00fd 0E       		.byte	0xe
 6149 00fe 08       		.uleb128 0x8
 6150 00ff 42       		.byte	0x4
 6151              		.4byte	.LCFI22-.LCFI21
 6152 0100 0E       		.byte	0xe
 6153 0101 18       		.uleb128 0x18
 6154 0102 11       		.byte	0x11
 6155 0103 0E       		.uleb128 0xe
 6156 0104 01       		.sleb128 1
 6157 0105 11       		.byte	0x11
 6158 0106 07       		.uleb128 0x7
 6159 0107 02       		.sleb128 2
 6160 0108 42       		.byte	0x4
 6161              		.4byte	.LCFI23-.LCFI22
 6162 0109 0D       		.byte	0xd
 6163 010a 07       		.uleb128 0x7
 6164 010b 00       		.align	2
 6165              	.LEFDE14:
 6166              	.LSFDE16:
 6167 010c 1C000000 		.4byte	.LEFDE16-.LASFDE16
 6168              	.LASFDE16:
 6169 0110 00000000 		.4byte	.Lframe0
 6170 0114 00000000 		.4byte	.LFB37
 6171 0118 7A000000 		.4byte	.LFE37-.LFB37
 6172 011c 42       		.byte	0x4
 6173              		.4byte	.LCFI24-.LFB37
 6174 011d 0E       		.byte	0xe
 6175 011e 08       		.uleb128 0x8
 6176 011f 42       		.byte	0x4
 6177              		.4byte	.LCFI25-.LCFI24
 6178 0120 0E       		.byte	0xe
 6179 0121 20       		.uleb128 0x20
ARM GAS  /tmp/cck0uY6y.s 			page 227


 6180 0122 11       		.byte	0x11
 6181 0123 0E       		.uleb128 0xe
 6182 0124 01       		.sleb128 1
 6183 0125 11       		.byte	0x11
 6184 0126 07       		.uleb128 0x7
 6185 0127 02       		.sleb128 2
 6186 0128 42       		.byte	0x4
 6187              		.4byte	.LCFI26-.LCFI25
 6188 0129 0C       		.byte	0xc
 6189 012a 07       		.uleb128 0x7
 6190 012b 10       		.uleb128 0x10
 6191              		.align	2
 6192              	.LEFDE16:
 6193              	.LSFDE18:
 6194 012c 18000000 		.4byte	.LEFDE18-.LASFDE18
 6195              	.LASFDE18:
 6196 0130 00000000 		.4byte	.Lframe0
 6197 0134 00000000 		.4byte	.LFB38
 6198 0138 22000000 		.4byte	.LFE38-.LFB38
 6199 013c 42       		.byte	0x4
 6200              		.4byte	.LCFI27-.LFB38
 6201 013d 0E       		.byte	0xe
 6202 013e 08       		.uleb128 0x8
 6203 013f 11       		.byte	0x11
 6204 0140 0E       		.uleb128 0xe
 6205 0141 01       		.sleb128 1
 6206 0142 11       		.byte	0x11
 6207 0143 07       		.uleb128 0x7
 6208 0144 02       		.sleb128 2
 6209 0145 42       		.byte	0x4
 6210              		.4byte	.LCFI28-.LCFI27
 6211 0146 0D       		.byte	0xd
 6212 0147 07       		.uleb128 0x7
 6213              		.align	2
 6214              	.LEFDE18:
 6215              	.LSFDE20:
 6216 0148 18000000 		.4byte	.LEFDE20-.LASFDE20
 6217              	.LASFDE20:
 6218 014c 00000000 		.4byte	.Lframe0
 6219 0150 00000000 		.4byte	.LFB39
 6220 0154 22000000 		.4byte	.LFE39-.LFB39
 6221 0158 42       		.byte	0x4
 6222              		.4byte	.LCFI29-.LFB39
 6223 0159 0E       		.byte	0xe
 6224 015a 04       		.uleb128 0x4
 6225 015b 11       		.byte	0x11
 6226 015c 07       		.uleb128 0x7
 6227 015d 01       		.sleb128 1
 6228 015e 42       		.byte	0x4
 6229              		.4byte	.LCFI30-.LCFI29
 6230 015f 0D       		.byte	0xd
 6231 0160 07       		.uleb128 0x7
 6232 0161 000000   		.align	2
 6233              	.LEFDE20:
 6234              	.LSFDE22:
 6235 0164 20000000 		.4byte	.LEFDE22-.LASFDE22
 6236              	.LASFDE22:
ARM GAS  /tmp/cck0uY6y.s 			page 228


 6237 0168 00000000 		.4byte	.Lframe0
 6238 016c 00000000 		.4byte	.LFB40
 6239 0170 60010000 		.4byte	.LFE40-.LFB40
 6240 0174 42       		.byte	0x4
 6241              		.4byte	.LCFI31-.LFB40
 6242 0175 0E       		.byte	0xe
 6243 0176 0C       		.uleb128 0xc
 6244 0177 42       		.byte	0x4
 6245              		.4byte	.LCFI32-.LCFI31
 6246 0178 0E       		.byte	0xe
 6247 0179 18       		.uleb128 0x18
 6248 017a 11       		.byte	0x11
 6249 017b 0E       		.uleb128 0xe
 6250 017c 01       		.sleb128 1
 6251 017d 11       		.byte	0x11
 6252 017e 07       		.uleb128 0x7
 6253 017f 02       		.sleb128 2
 6254 0180 11       		.byte	0x11
 6255 0181 04       		.uleb128 0x4
 6256 0182 03       		.sleb128 3
 6257 0183 42       		.byte	0x4
 6258              		.4byte	.LCFI33-.LCFI32
 6259 0184 0D       		.byte	0xd
 6260 0185 07       		.uleb128 0x7
 6261 0186 0000     		.align	2
 6262              	.LEFDE22:
 6263              	.LSFDE24:
 6264 0188 1C000000 		.4byte	.LEFDE24-.LASFDE24
 6265              	.LASFDE24:
 6266 018c 00000000 		.4byte	.Lframe0
 6267 0190 00000000 		.4byte	.LFB41
 6268 0194 26000000 		.4byte	.LFE41-.LFB41
 6269 0198 42       		.byte	0x4
 6270              		.4byte	.LCFI34-.LFB41
 6271 0199 0E       		.byte	0xe
 6272 019a 08       		.uleb128 0x8
 6273 019b 42       		.byte	0x4
 6274              		.4byte	.LCFI35-.LCFI34
 6275 019c 0E       		.byte	0xe
 6276 019d 10       		.uleb128 0x10
 6277 019e 11       		.byte	0x11
 6278 019f 0E       		.uleb128 0xe
 6279 01a0 01       		.sleb128 1
 6280 01a1 11       		.byte	0x11
 6281 01a2 07       		.uleb128 0x7
 6282 01a3 02       		.sleb128 2
 6283 01a4 42       		.byte	0x4
 6284              		.4byte	.LCFI36-.LCFI35
 6285 01a5 0D       		.byte	0xd
 6286 01a6 07       		.uleb128 0x7
 6287 01a7 00       		.align	2
 6288              	.LEFDE24:
 6289              	.LSFDE26:
 6290 01a8 18000000 		.4byte	.LEFDE26-.LASFDE26
 6291              	.LASFDE26:
 6292 01ac 00000000 		.4byte	.Lframe0
 6293 01b0 00000000 		.4byte	.LFB42
ARM GAS  /tmp/cck0uY6y.s 			page 229


 6294 01b4 16000000 		.4byte	.LFE42-.LFB42
 6295 01b8 42       		.byte	0x4
 6296              		.4byte	.LCFI37-.LFB42
 6297 01b9 0E       		.byte	0xe
 6298 01ba 04       		.uleb128 0x4
 6299 01bb 11       		.byte	0x11
 6300 01bc 07       		.uleb128 0x7
 6301 01bd 01       		.sleb128 1
 6302 01be 42       		.byte	0x4
 6303              		.4byte	.LCFI38-.LCFI37
 6304 01bf 0D       		.byte	0xd
 6305 01c0 07       		.uleb128 0x7
 6306 01c1 000000   		.align	2
 6307              	.LEFDE26:
 6308              	.LSFDE28:
 6309 01c4 20000000 		.4byte	.LEFDE28-.LASFDE28
 6310              	.LASFDE28:
 6311 01c8 00000000 		.4byte	.Lframe0
 6312 01cc 00000000 		.4byte	.LFB43
 6313 01d0 50010000 		.4byte	.LFE43-.LFB43
 6314 01d4 42       		.byte	0x4
 6315              		.4byte	.LCFI39-.LFB43
 6316 01d5 0E       		.byte	0xe
 6317 01d6 0C       		.uleb128 0xc
 6318 01d7 42       		.byte	0x4
 6319              		.4byte	.LCFI40-.LCFI39
 6320 01d8 0E       		.byte	0xe
 6321 01d9 18       		.uleb128 0x18
 6322 01da 11       		.byte	0x11
 6323 01db 0E       		.uleb128 0xe
 6324 01dc 01       		.sleb128 1
 6325 01dd 11       		.byte	0x11
 6326 01de 07       		.uleb128 0x7
 6327 01df 02       		.sleb128 2
 6328 01e0 11       		.byte	0x11
 6329 01e1 04       		.uleb128 0x4
 6330 01e2 03       		.sleb128 3
 6331 01e3 42       		.byte	0x4
 6332              		.4byte	.LCFI41-.LCFI40
 6333 01e4 0D       		.byte	0xd
 6334 01e5 07       		.uleb128 0x7
 6335 01e6 0000     		.align	2
 6336              	.LEFDE28:
 6337              	.LSFDE30:
 6338 01e8 18000000 		.4byte	.LEFDE30-.LASFDE30
 6339              	.LASFDE30:
 6340 01ec 00000000 		.4byte	.Lframe0
 6341 01f0 00000000 		.4byte	.LFB44
 6342 01f4 CA000000 		.4byte	.LFE44-.LFB44
 6343 01f8 42       		.byte	0x4
 6344              		.4byte	.LCFI42-.LFB44
 6345 01f9 0E       		.byte	0xe
 6346 01fa 04       		.uleb128 0x4
 6347 01fb 42       		.byte	0x4
 6348              		.4byte	.LCFI43-.LCFI42
 6349 01fc 0E       		.byte	0xe
 6350 01fd 10       		.uleb128 0x10
ARM GAS  /tmp/cck0uY6y.s 			page 230


 6351 01fe 11       		.byte	0x11
 6352 01ff 07       		.uleb128 0x7
 6353 0200 01       		.sleb128 1
 6354 0201 42       		.byte	0x4
 6355              		.4byte	.LCFI44-.LCFI43
 6356 0202 0D       		.byte	0xd
 6357 0203 07       		.uleb128 0x7
 6358              		.align	2
 6359              	.LEFDE30:
 6360              	.LSFDE32:
 6361 0204 1C000000 		.4byte	.LEFDE32-.LASFDE32
 6362              	.LASFDE32:
 6363 0208 00000000 		.4byte	.Lframe0
 6364 020c 00000000 		.4byte	.LFB45
 6365 0210 D2000000 		.4byte	.LFE45-.LFB45
 6366 0214 42       		.byte	0x4
 6367              		.4byte	.LCFI45-.LFB45
 6368 0215 0E       		.byte	0xe
 6369 0216 08       		.uleb128 0x8
 6370 0217 42       		.byte	0x4
 6371              		.4byte	.LCFI46-.LCFI45
 6372 0218 0E       		.byte	0xe
 6373 0219 18       		.uleb128 0x18
 6374 021a 11       		.byte	0x11
 6375 021b 0E       		.uleb128 0xe
 6376 021c 01       		.sleb128 1
 6377 021d 11       		.byte	0x11
 6378 021e 07       		.uleb128 0x7
 6379 021f 02       		.sleb128 2
 6380 0220 42       		.byte	0x4
 6381              		.4byte	.LCFI47-.LCFI46
 6382 0221 0D       		.byte	0xd
 6383 0222 07       		.uleb128 0x7
 6384 0223 00       		.align	2
 6385              	.LEFDE32:
 6386              	.LSFDE34:
 6387 0224 1C000000 		.4byte	.LEFDE34-.LASFDE34
 6388              	.LASFDE34:
 6389 0228 00000000 		.4byte	.Lframe0
 6390 022c 00000000 		.4byte	.LFB46
 6391 0230 D2000000 		.4byte	.LFE46-.LFB46
 6392 0234 42       		.byte	0x4
 6393              		.4byte	.LCFI48-.LFB46
 6394 0235 0E       		.byte	0xe
 6395 0236 08       		.uleb128 0x8
 6396 0237 42       		.byte	0x4
 6397              		.4byte	.LCFI49-.LCFI48
 6398 0238 0E       		.byte	0xe
 6399 0239 18       		.uleb128 0x18
 6400 023a 11       		.byte	0x11
 6401 023b 0E       		.uleb128 0xe
 6402 023c 01       		.sleb128 1
 6403 023d 11       		.byte	0x11
 6404 023e 07       		.uleb128 0x7
 6405 023f 02       		.sleb128 2
 6406 0240 42       		.byte	0x4
 6407              		.4byte	.LCFI50-.LCFI49
ARM GAS  /tmp/cck0uY6y.s 			page 231


 6408 0241 0D       		.byte	0xd
 6409 0242 07       		.uleb128 0x7
 6410 0243 00       		.align	2
 6411              	.LEFDE34:
 6412              	.LSFDE36:
 6413 0244 18000000 		.4byte	.LEFDE36-.LASFDE36
 6414              	.LASFDE36:
 6415 0248 00000000 		.4byte	.Lframe0
 6416 024c 00000000 		.4byte	.LFB47
 6417 0250 2E000000 		.4byte	.LFE47-.LFB47
 6418 0254 42       		.byte	0x4
 6419              		.4byte	.LCFI51-.LFB47
 6420 0255 0E       		.byte	0xe
 6421 0256 04       		.uleb128 0x4
 6422 0257 42       		.byte	0x4
 6423              		.4byte	.LCFI52-.LCFI51
 6424 0258 0E       		.byte	0xe
 6425 0259 10       		.uleb128 0x10
 6426 025a 11       		.byte	0x11
 6427 025b 07       		.uleb128 0x7
 6428 025c 01       		.sleb128 1
 6429 025d 42       		.byte	0x4
 6430              		.4byte	.LCFI53-.LCFI52
 6431 025e 0D       		.byte	0xd
 6432 025f 07       		.uleb128 0x7
 6433              		.align	2
 6434              	.LEFDE36:
 6435              	.LSFDE38:
 6436 0260 1C000000 		.4byte	.LEFDE38-.LASFDE38
 6437              	.LASFDE38:
 6438 0264 00000000 		.4byte	.Lframe0
 6439 0268 00000000 		.4byte	.LFB48
 6440 026c A6000000 		.4byte	.LFE48-.LFB48
 6441 0270 42       		.byte	0x4
 6442              		.4byte	.LCFI54-.LFB48
 6443 0271 0E       		.byte	0xe
 6444 0272 08       		.uleb128 0x8
 6445 0273 42       		.byte	0x4
 6446              		.4byte	.LCFI55-.LCFI54
 6447 0274 0E       		.byte	0xe
 6448 0275 18       		.uleb128 0x18
 6449 0276 11       		.byte	0x11
 6450 0277 0E       		.uleb128 0xe
 6451 0278 01       		.sleb128 1
 6452 0279 11       		.byte	0x11
 6453 027a 07       		.uleb128 0x7
 6454 027b 02       		.sleb128 2
 6455 027c 42       		.byte	0x4
 6456              		.4byte	.LCFI56-.LCFI55
 6457 027d 0D       		.byte	0xd
 6458 027e 07       		.uleb128 0x7
 6459 027f 00       		.align	2
 6460              	.LEFDE38:
 6461              	.LSFDE40:
 6462 0280 18000000 		.4byte	.LEFDE40-.LASFDE40
 6463              	.LASFDE40:
 6464 0284 00000000 		.4byte	.Lframe0
ARM GAS  /tmp/cck0uY6y.s 			page 232


 6465 0288 00000000 		.4byte	.LFB49
 6466 028c 18000000 		.4byte	.LFE49-.LFB49
 6467 0290 42       		.byte	0x4
 6468              		.4byte	.LCFI57-.LFB49
 6469 0291 0E       		.byte	0xe
 6470 0292 04       		.uleb128 0x4
 6471 0293 11       		.byte	0x11
 6472 0294 07       		.uleb128 0x7
 6473 0295 01       		.sleb128 1
 6474 0296 42       		.byte	0x4
 6475              		.4byte	.LCFI58-.LCFI57
 6476 0297 0D       		.byte	0xd
 6477 0298 07       		.uleb128 0x7
 6478 0299 000000   		.align	2
 6479              	.LEFDE40:
 6480              	.LSFDE42:
 6481 029c 1C000000 		.4byte	.LEFDE42-.LASFDE42
 6482              	.LASFDE42:
 6483 02a0 00000000 		.4byte	.Lframe0
 6484 02a4 00000000 		.4byte	.LFB50
 6485 02a8 0E000000 		.4byte	.LFE50-.LFB50
 6486 02ac 42       		.byte	0x4
 6487              		.4byte	.LCFI59-.LFB50
 6488 02ad 0E       		.byte	0xe
 6489 02ae 08       		.uleb128 0x8
 6490 02af 42       		.byte	0x4
 6491              		.4byte	.LCFI60-.LCFI59
 6492 02b0 0E       		.byte	0xe
 6493 02b1 10       		.uleb128 0x10
 6494 02b2 11       		.byte	0x11
 6495 02b3 0E       		.uleb128 0xe
 6496 02b4 01       		.sleb128 1
 6497 02b5 11       		.byte	0x11
 6498 02b6 07       		.uleb128 0x7
 6499 02b7 02       		.sleb128 2
 6500 02b8 42       		.byte	0x4
 6501              		.4byte	.LCFI61-.LCFI60
 6502 02b9 0D       		.byte	0xd
 6503 02ba 07       		.uleb128 0x7
 6504 02bb 00       		.align	2
 6505              	.LEFDE42:
 6506              	.LSFDE44:
 6507 02bc 1C000000 		.4byte	.LEFDE44-.LASFDE44
 6508              	.LASFDE44:
 6509 02c0 00000000 		.4byte	.Lframe0
 6510 02c4 00000000 		.4byte	.LFB51
 6511 02c8 76000000 		.4byte	.LFE51-.LFB51
 6512 02cc 42       		.byte	0x4
 6513              		.4byte	.LCFI62-.LFB51
 6514 02cd 0E       		.byte	0xe
 6515 02ce 08       		.uleb128 0x8
 6516 02cf 42       		.byte	0x4
 6517              		.4byte	.LCFI63-.LCFI62
 6518 02d0 0E       		.byte	0xe
 6519 02d1 18       		.uleb128 0x18
 6520 02d2 11       		.byte	0x11
 6521 02d3 0E       		.uleb128 0xe
ARM GAS  /tmp/cck0uY6y.s 			page 233


 6522 02d4 01       		.sleb128 1
 6523 02d5 11       		.byte	0x11
 6524 02d6 07       		.uleb128 0x7
 6525 02d7 02       		.sleb128 2
 6526 02d8 42       		.byte	0x4
 6527              		.4byte	.LCFI64-.LCFI63
 6528 02d9 0D       		.byte	0xd
 6529 02da 07       		.uleb128 0x7
 6530 02db 00       		.align	2
 6531              	.LEFDE44:
 6532              	.LSFDE46:
 6533 02dc 1C000000 		.4byte	.LEFDE46-.LASFDE46
 6534              	.LASFDE46:
 6535 02e0 00000000 		.4byte	.Lframe0
 6536 02e4 00000000 		.4byte	.LFB52
 6537 02e8 98000000 		.4byte	.LFE52-.LFB52
 6538 02ec 42       		.byte	0x4
 6539              		.4byte	.LCFI65-.LFB52
 6540 02ed 0E       		.byte	0xe
 6541 02ee 08       		.uleb128 0x8
 6542 02ef 42       		.byte	0x4
 6543              		.4byte	.LCFI66-.LCFI65
 6544 02f0 0E       		.byte	0xe
 6545 02f1 10       		.uleb128 0x10
 6546 02f2 11       		.byte	0x11
 6547 02f3 0E       		.uleb128 0xe
 6548 02f4 01       		.sleb128 1
 6549 02f5 11       		.byte	0x11
 6550 02f6 07       		.uleb128 0x7
 6551 02f7 02       		.sleb128 2
 6552 02f8 42       		.byte	0x4
 6553              		.4byte	.LCFI67-.LCFI66
 6554 02f9 0D       		.byte	0xd
 6555 02fa 07       		.uleb128 0x7
 6556 02fb 00       		.align	2
 6557              	.LEFDE46:
 6558              	.LSFDE48:
 6559 02fc 18000000 		.4byte	.LEFDE48-.LASFDE48
 6560              	.LASFDE48:
 6561 0300 00000000 		.4byte	.Lframe0
 6562 0304 00000000 		.4byte	.LFB53
 6563 0308 0A000000 		.4byte	.LFE53-.LFB53
 6564 030c 42       		.byte	0x4
 6565              		.4byte	.LCFI68-.LFB53
 6566 030d 0E       		.byte	0xe
 6567 030e 04       		.uleb128 0x4
 6568 030f 11       		.byte	0x11
 6569 0310 07       		.uleb128 0x7
 6570 0311 01       		.sleb128 1
 6571 0312 42       		.byte	0x4
 6572              		.4byte	.LCFI69-.LCFI68
 6573 0313 0D       		.byte	0xd
 6574 0314 07       		.uleb128 0x7
 6575 0315 000000   		.align	2
 6576              	.LEFDE48:
 6577              	.LSFDE50:
 6578 0318 1C000000 		.4byte	.LEFDE50-.LASFDE50
ARM GAS  /tmp/cck0uY6y.s 			page 234


 6579              	.LASFDE50:
 6580 031c 00000000 		.4byte	.Lframe0
 6581 0320 00000000 		.4byte	.LFB54
 6582 0324 6A000000 		.4byte	.LFE54-.LFB54
 6583 0328 42       		.byte	0x4
 6584              		.4byte	.LCFI70-.LFB54
 6585 0329 0E       		.byte	0xe
 6586 032a 08       		.uleb128 0x8
 6587 032b 42       		.byte	0x4
 6588              		.4byte	.LCFI71-.LCFI70
 6589 032c 0E       		.byte	0xe
 6590 032d 18       		.uleb128 0x18
 6591 032e 11       		.byte	0x11
 6592 032f 0E       		.uleb128 0xe
 6593 0330 01       		.sleb128 1
 6594 0331 11       		.byte	0x11
 6595 0332 07       		.uleb128 0x7
 6596 0333 02       		.sleb128 2
 6597 0334 42       		.byte	0x4
 6598              		.4byte	.LCFI72-.LCFI71
 6599 0335 0D       		.byte	0xd
 6600 0336 07       		.uleb128 0x7
 6601 0337 00       		.align	2
 6602              	.LEFDE50:
 6603              		.text
 6604              	.Letext0:
 6605              		.section	.debug_loc,"",%progbits
 6606              	.Ldebug_loc0:
 6607              	.LLST0:
 6608 0000 00000000 		.4byte	.LFB29
 6609 0004 02000000 		.4byte	.LCFI0
 6610 0008 0100     		.2byte	0x1
 6611 000a 5D       		.byte	0x5d
 6612 000b 02000000 		.4byte	.LCFI0
 6613 000f 04000000 		.4byte	.LCFI1
 6614 0013 0200     		.2byte	0x2
 6615 0015 7D       		.byte	0x7d
 6616 0016 08       		.sleb128 8
 6617 0017 04000000 		.4byte	.LCFI1
 6618 001b 06000000 		.4byte	.LCFI2
 6619 001f 0200     		.2byte	0x2
 6620 0021 7D       		.byte	0x7d
 6621 0022 30       		.sleb128 48
 6622 0023 06000000 		.4byte	.LCFI2
 6623 0027 A0010000 		.4byte	.LFE29
 6624 002b 0200     		.2byte	0x2
 6625 002d 77       		.byte	0x77
 6626 002e 28       		.sleb128 40
 6627 002f 00000000 		.4byte	0x0
 6628 0033 00000000 		.4byte	0x0
 6629              	.LLST1:
 6630 0037 00000000 		.4byte	.LFB30
 6631 003b 02000000 		.4byte	.LCFI3
 6632 003f 0100     		.2byte	0x1
 6633 0041 5D       		.byte	0x5d
 6634 0042 02000000 		.4byte	.LCFI3
 6635 0046 04000000 		.4byte	.LCFI4
ARM GAS  /tmp/cck0uY6y.s 			page 235


 6636 004a 0200     		.2byte	0x2
 6637 004c 7D       		.byte	0x7d
 6638 004d 08       		.sleb128 8
 6639 004e 04000000 		.4byte	.LCFI4
 6640 0052 06000000 		.4byte	.LCFI5
 6641 0056 0200     		.2byte	0x2
 6642 0058 7D       		.byte	0x7d
 6643 0059 20       		.sleb128 32
 6644 005a 06000000 		.4byte	.LCFI5
 6645 005e 14010000 		.4byte	.LFE30
 6646 0062 0200     		.2byte	0x2
 6647 0064 77       		.byte	0x77
 6648 0065 20       		.sleb128 32
 6649 0066 00000000 		.4byte	0x0
 6650 006a 00000000 		.4byte	0x0
 6651              	.LLST2:
 6652 006e 00000000 		.4byte	.LFB31
 6653 0072 02000000 		.4byte	.LCFI6
 6654 0076 0100     		.2byte	0x1
 6655 0078 5D       		.byte	0x5d
 6656 0079 02000000 		.4byte	.LCFI6
 6657 007d 04000000 		.4byte	.LCFI7
 6658 0081 0200     		.2byte	0x2
 6659 0083 7D       		.byte	0x7d
 6660 0084 08       		.sleb128 8
 6661 0085 04000000 		.4byte	.LCFI7
 6662 0089 06000000 		.4byte	.LCFI8
 6663 008d 0200     		.2byte	0x2
 6664 008f 7D       		.byte	0x7d
 6665 0090 18       		.sleb128 24
 6666 0091 06000000 		.4byte	.LCFI8
 6667 0095 B6000000 		.4byte	.LFE31
 6668 0099 0200     		.2byte	0x2
 6669 009b 77       		.byte	0x77
 6670 009c 18       		.sleb128 24
 6671 009d 00000000 		.4byte	0x0
 6672 00a1 00000000 		.4byte	0x0
 6673              	.LLST3:
 6674 00a5 00000000 		.4byte	.LFB32
 6675 00a9 02000000 		.4byte	.LCFI9
 6676 00ad 0100     		.2byte	0x1
 6677 00af 5D       		.byte	0x5d
 6678 00b0 02000000 		.4byte	.LCFI9
 6679 00b4 04000000 		.4byte	.LCFI10
 6680 00b8 0200     		.2byte	0x2
 6681 00ba 7D       		.byte	0x7d
 6682 00bb 08       		.sleb128 8
 6683 00bc 04000000 		.4byte	.LCFI10
 6684 00c0 06000000 		.4byte	.LCFI11
 6685 00c4 0200     		.2byte	0x2
 6686 00c6 7D       		.byte	0x7d
 6687 00c7 20       		.sleb128 32
 6688 00c8 06000000 		.4byte	.LCFI11
 6689 00cc 1E010000 		.4byte	.LFE32
 6690 00d0 0200     		.2byte	0x2
 6691 00d2 77       		.byte	0x77
 6692 00d3 20       		.sleb128 32
ARM GAS  /tmp/cck0uY6y.s 			page 236


 6693 00d4 00000000 		.4byte	0x0
 6694 00d8 00000000 		.4byte	0x0
 6695              	.LLST4:
 6696 00dc 00000000 		.4byte	.LFB33
 6697 00e0 02000000 		.4byte	.LCFI12
 6698 00e4 0100     		.2byte	0x1
 6699 00e6 5D       		.byte	0x5d
 6700 00e7 02000000 		.4byte	.LCFI12
 6701 00eb 04000000 		.4byte	.LCFI13
 6702 00ef 0200     		.2byte	0x2
 6703 00f1 7D       		.byte	0x7d
 6704 00f2 08       		.sleb128 8
 6705 00f3 04000000 		.4byte	.LCFI13
 6706 00f7 06000000 		.4byte	.LCFI14
 6707 00fb 0200     		.2byte	0x2
 6708 00fd 7D       		.byte	0x7d
 6709 00fe 18       		.sleb128 24
 6710 00ff 06000000 		.4byte	.LCFI14
 6711 0103 82000000 		.4byte	.LFE33
 6712 0107 0200     		.2byte	0x2
 6713 0109 77       		.byte	0x77
 6714 010a 18       		.sleb128 24
 6715 010b 00000000 		.4byte	0x0
 6716 010f 00000000 		.4byte	0x0
 6717              	.LLST5:
 6718 0113 00000000 		.4byte	.LFB34
 6719 0117 02000000 		.4byte	.LCFI15
 6720 011b 0100     		.2byte	0x1
 6721 011d 5D       		.byte	0x5d
 6722 011e 02000000 		.4byte	.LCFI15
 6723 0122 04000000 		.4byte	.LCFI16
 6724 0126 0200     		.2byte	0x2
 6725 0128 7D       		.byte	0x7d
 6726 0129 04       		.sleb128 4
 6727 012a 04000000 		.4byte	.LCFI16
 6728 012e 06000000 		.4byte	.LCFI17
 6729 0132 0200     		.2byte	0x2
 6730 0134 7D       		.byte	0x7d
 6731 0135 18       		.sleb128 24
 6732 0136 06000000 		.4byte	.LCFI17
 6733 013a 4E000000 		.4byte	.LFE34
 6734 013e 0200     		.2byte	0x2
 6735 0140 77       		.byte	0x77
 6736 0141 18       		.sleb128 24
 6737 0142 00000000 		.4byte	0x0
 6738 0146 00000000 		.4byte	0x0
 6739              	.LLST6:
 6740 014a 00000000 		.4byte	.LFB35
 6741 014e 02000000 		.4byte	.LCFI18
 6742 0152 0100     		.2byte	0x1
 6743 0154 5D       		.byte	0x5d
 6744 0155 02000000 		.4byte	.LCFI18
 6745 0159 04000000 		.4byte	.LCFI19
 6746 015d 0200     		.2byte	0x2
 6747 015f 7D       		.byte	0x7d
 6748 0160 08       		.sleb128 8
 6749 0161 04000000 		.4byte	.LCFI19
ARM GAS  /tmp/cck0uY6y.s 			page 237


 6750 0165 06000000 		.4byte	.LCFI20
 6751 0169 0200     		.2byte	0x2
 6752 016b 7D       		.byte	0x7d
 6753 016c 18       		.sleb128 24
 6754 016d 06000000 		.4byte	.LCFI20
 6755 0171 AC000000 		.4byte	.LFE35
 6756 0175 0200     		.2byte	0x2
 6757 0177 77       		.byte	0x77
 6758 0178 18       		.sleb128 24
 6759 0179 00000000 		.4byte	0x0
 6760 017d 00000000 		.4byte	0x0
 6761              	.LLST7:
 6762 0181 00000000 		.4byte	.LFB36
 6763 0185 02000000 		.4byte	.LCFI21
 6764 0189 0100     		.2byte	0x1
 6765 018b 5D       		.byte	0x5d
 6766 018c 02000000 		.4byte	.LCFI21
 6767 0190 04000000 		.4byte	.LCFI22
 6768 0194 0200     		.2byte	0x2
 6769 0196 7D       		.byte	0x7d
 6770 0197 08       		.sleb128 8
 6771 0198 04000000 		.4byte	.LCFI22
 6772 019c 06000000 		.4byte	.LCFI23
 6773 01a0 0200     		.2byte	0x2
 6774 01a2 7D       		.byte	0x7d
 6775 01a3 18       		.sleb128 24
 6776 01a4 06000000 		.4byte	.LCFI23
 6777 01a8 BE000000 		.4byte	.LFE36
 6778 01ac 0200     		.2byte	0x2
 6779 01ae 77       		.byte	0x77
 6780 01af 18       		.sleb128 24
 6781 01b0 00000000 		.4byte	0x0
 6782 01b4 00000000 		.4byte	0x0
 6783              	.LLST8:
 6784 01b8 00000000 		.4byte	.LFB37
 6785 01bc 02000000 		.4byte	.LCFI24
 6786 01c0 0100     		.2byte	0x1
 6787 01c2 5D       		.byte	0x5d
 6788 01c3 02000000 		.4byte	.LCFI24
 6789 01c7 04000000 		.4byte	.LCFI25
 6790 01cb 0200     		.2byte	0x2
 6791 01cd 7D       		.byte	0x7d
 6792 01ce 08       		.sleb128 8
 6793 01cf 04000000 		.4byte	.LCFI25
 6794 01d3 06000000 		.4byte	.LCFI26
 6795 01d7 0200     		.2byte	0x2
 6796 01d9 7D       		.byte	0x7d
 6797 01da 20       		.sleb128 32
 6798 01db 06000000 		.4byte	.LCFI26
 6799 01df 7A000000 		.4byte	.LFE37
 6800 01e3 0200     		.2byte	0x2
 6801 01e5 77       		.byte	0x77
 6802 01e6 10       		.sleb128 16
 6803 01e7 00000000 		.4byte	0x0
 6804 01eb 00000000 		.4byte	0x0
 6805              	.LLST9:
 6806 01ef 00000000 		.4byte	.LFB38
ARM GAS  /tmp/cck0uY6y.s 			page 238


 6807 01f3 02000000 		.4byte	.LCFI27
 6808 01f7 0100     		.2byte	0x1
 6809 01f9 5D       		.byte	0x5d
 6810 01fa 02000000 		.4byte	.LCFI27
 6811 01fe 04000000 		.4byte	.LCFI28
 6812 0202 0200     		.2byte	0x2
 6813 0204 7D       		.byte	0x7d
 6814 0205 08       		.sleb128 8
 6815 0206 04000000 		.4byte	.LCFI28
 6816 020a 22000000 		.4byte	.LFE38
 6817 020e 0200     		.2byte	0x2
 6818 0210 77       		.byte	0x77
 6819 0211 08       		.sleb128 8
 6820 0212 00000000 		.4byte	0x0
 6821 0216 00000000 		.4byte	0x0
 6822              	.LLST10:
 6823 021a 00000000 		.4byte	.LFB39
 6824 021e 02000000 		.4byte	.LCFI29
 6825 0222 0100     		.2byte	0x1
 6826 0224 5D       		.byte	0x5d
 6827 0225 02000000 		.4byte	.LCFI29
 6828 0229 04000000 		.4byte	.LCFI30
 6829 022d 0200     		.2byte	0x2
 6830 022f 7D       		.byte	0x7d
 6831 0230 04       		.sleb128 4
 6832 0231 04000000 		.4byte	.LCFI30
 6833 0235 22000000 		.4byte	.LFE39
 6834 0239 0200     		.2byte	0x2
 6835 023b 77       		.byte	0x77
 6836 023c 04       		.sleb128 4
 6837 023d 00000000 		.4byte	0x0
 6838 0241 00000000 		.4byte	0x0
 6839              	.LLST11:
 6840 0245 00000000 		.4byte	.LFB40
 6841 0249 02000000 		.4byte	.LCFI31
 6842 024d 0100     		.2byte	0x1
 6843 024f 5D       		.byte	0x5d
 6844 0250 02000000 		.4byte	.LCFI31
 6845 0254 04000000 		.4byte	.LCFI32
 6846 0258 0200     		.2byte	0x2
 6847 025a 7D       		.byte	0x7d
 6848 025b 0C       		.sleb128 12
 6849 025c 04000000 		.4byte	.LCFI32
 6850 0260 06000000 		.4byte	.LCFI33
 6851 0264 0200     		.2byte	0x2
 6852 0266 7D       		.byte	0x7d
 6853 0267 18       		.sleb128 24
 6854 0268 06000000 		.4byte	.LCFI33
 6855 026c 60010000 		.4byte	.LFE40
 6856 0270 0200     		.2byte	0x2
 6857 0272 77       		.byte	0x77
 6858 0273 18       		.sleb128 24
 6859 0274 00000000 		.4byte	0x0
 6860 0278 00000000 		.4byte	0x0
 6861              	.LLST12:
 6862 027c 00000000 		.4byte	.LFB41
 6863 0280 02000000 		.4byte	.LCFI34
ARM GAS  /tmp/cck0uY6y.s 			page 239


 6864 0284 0100     		.2byte	0x1
 6865 0286 5D       		.byte	0x5d
 6866 0287 02000000 		.4byte	.LCFI34
 6867 028b 04000000 		.4byte	.LCFI35
 6868 028f 0200     		.2byte	0x2
 6869 0291 7D       		.byte	0x7d
 6870 0292 08       		.sleb128 8
 6871 0293 04000000 		.4byte	.LCFI35
 6872 0297 06000000 		.4byte	.LCFI36
 6873 029b 0200     		.2byte	0x2
 6874 029d 7D       		.byte	0x7d
 6875 029e 10       		.sleb128 16
 6876 029f 06000000 		.4byte	.LCFI36
 6877 02a3 26000000 		.4byte	.LFE41
 6878 02a7 0200     		.2byte	0x2
 6879 02a9 77       		.byte	0x77
 6880 02aa 10       		.sleb128 16
 6881 02ab 00000000 		.4byte	0x0
 6882 02af 00000000 		.4byte	0x0
 6883              	.LLST13:
 6884 02b3 00000000 		.4byte	.LFB42
 6885 02b7 02000000 		.4byte	.LCFI37
 6886 02bb 0100     		.2byte	0x1
 6887 02bd 5D       		.byte	0x5d
 6888 02be 02000000 		.4byte	.LCFI37
 6889 02c2 04000000 		.4byte	.LCFI38
 6890 02c6 0200     		.2byte	0x2
 6891 02c8 7D       		.byte	0x7d
 6892 02c9 04       		.sleb128 4
 6893 02ca 04000000 		.4byte	.LCFI38
 6894 02ce 16000000 		.4byte	.LFE42
 6895 02d2 0200     		.2byte	0x2
 6896 02d4 77       		.byte	0x77
 6897 02d5 04       		.sleb128 4
 6898 02d6 00000000 		.4byte	0x0
 6899 02da 00000000 		.4byte	0x0
 6900              	.LLST14:
 6901 02de 00000000 		.4byte	.LFB43
 6902 02e2 02000000 		.4byte	.LCFI39
 6903 02e6 0100     		.2byte	0x1
 6904 02e8 5D       		.byte	0x5d
 6905 02e9 02000000 		.4byte	.LCFI39
 6906 02ed 04000000 		.4byte	.LCFI40
 6907 02f1 0200     		.2byte	0x2
 6908 02f3 7D       		.byte	0x7d
 6909 02f4 0C       		.sleb128 12
 6910 02f5 04000000 		.4byte	.LCFI40
 6911 02f9 06000000 		.4byte	.LCFI41
 6912 02fd 0200     		.2byte	0x2
 6913 02ff 7D       		.byte	0x7d
 6914 0300 18       		.sleb128 24
 6915 0301 06000000 		.4byte	.LCFI41
 6916 0305 50010000 		.4byte	.LFE43
 6917 0309 0200     		.2byte	0x2
 6918 030b 77       		.byte	0x77
 6919 030c 18       		.sleb128 24
 6920 030d 00000000 		.4byte	0x0
ARM GAS  /tmp/cck0uY6y.s 			page 240


 6921 0311 00000000 		.4byte	0x0
 6922              	.LLST15:
 6923 0315 00000000 		.4byte	.LFB44
 6924 0319 02000000 		.4byte	.LCFI42
 6925 031d 0100     		.2byte	0x1
 6926 031f 5D       		.byte	0x5d
 6927 0320 02000000 		.4byte	.LCFI42
 6928 0324 04000000 		.4byte	.LCFI43
 6929 0328 0200     		.2byte	0x2
 6930 032a 7D       		.byte	0x7d
 6931 032b 04       		.sleb128 4
 6932 032c 04000000 		.4byte	.LCFI43
 6933 0330 06000000 		.4byte	.LCFI44
 6934 0334 0200     		.2byte	0x2
 6935 0336 7D       		.byte	0x7d
 6936 0337 10       		.sleb128 16
 6937 0338 06000000 		.4byte	.LCFI44
 6938 033c CA000000 		.4byte	.LFE44
 6939 0340 0200     		.2byte	0x2
 6940 0342 77       		.byte	0x77
 6941 0343 10       		.sleb128 16
 6942 0344 00000000 		.4byte	0x0
 6943 0348 00000000 		.4byte	0x0
 6944              	.LLST16:
 6945 034c 00000000 		.4byte	.LFB45
 6946 0350 02000000 		.4byte	.LCFI45
 6947 0354 0100     		.2byte	0x1
 6948 0356 5D       		.byte	0x5d
 6949 0357 02000000 		.4byte	.LCFI45
 6950 035b 04000000 		.4byte	.LCFI46
 6951 035f 0200     		.2byte	0x2
 6952 0361 7D       		.byte	0x7d
 6953 0362 08       		.sleb128 8
 6954 0363 04000000 		.4byte	.LCFI46
 6955 0367 06000000 		.4byte	.LCFI47
 6956 036b 0200     		.2byte	0x2
 6957 036d 7D       		.byte	0x7d
 6958 036e 18       		.sleb128 24
 6959 036f 06000000 		.4byte	.LCFI47
 6960 0373 D2000000 		.4byte	.LFE45
 6961 0377 0200     		.2byte	0x2
 6962 0379 77       		.byte	0x77
 6963 037a 18       		.sleb128 24
 6964 037b 00000000 		.4byte	0x0
 6965 037f 00000000 		.4byte	0x0
 6966              	.LLST17:
 6967 0383 00000000 		.4byte	.LFB46
 6968 0387 02000000 		.4byte	.LCFI48
 6969 038b 0100     		.2byte	0x1
 6970 038d 5D       		.byte	0x5d
 6971 038e 02000000 		.4byte	.LCFI48
 6972 0392 04000000 		.4byte	.LCFI49
 6973 0396 0200     		.2byte	0x2
 6974 0398 7D       		.byte	0x7d
 6975 0399 08       		.sleb128 8
 6976 039a 04000000 		.4byte	.LCFI49
 6977 039e 06000000 		.4byte	.LCFI50
ARM GAS  /tmp/cck0uY6y.s 			page 241


 6978 03a2 0200     		.2byte	0x2
 6979 03a4 7D       		.byte	0x7d
 6980 03a5 18       		.sleb128 24
 6981 03a6 06000000 		.4byte	.LCFI50
 6982 03aa D2000000 		.4byte	.LFE46
 6983 03ae 0200     		.2byte	0x2
 6984 03b0 77       		.byte	0x77
 6985 03b1 18       		.sleb128 24
 6986 03b2 00000000 		.4byte	0x0
 6987 03b6 00000000 		.4byte	0x0
 6988              	.LLST18:
 6989 03ba 00000000 		.4byte	.LFB47
 6990 03be 02000000 		.4byte	.LCFI51
 6991 03c2 0100     		.2byte	0x1
 6992 03c4 5D       		.byte	0x5d
 6993 03c5 02000000 		.4byte	.LCFI51
 6994 03c9 04000000 		.4byte	.LCFI52
 6995 03cd 0200     		.2byte	0x2
 6996 03cf 7D       		.byte	0x7d
 6997 03d0 04       		.sleb128 4
 6998 03d1 04000000 		.4byte	.LCFI52
 6999 03d5 06000000 		.4byte	.LCFI53
 7000 03d9 0200     		.2byte	0x2
 7001 03db 7D       		.byte	0x7d
 7002 03dc 10       		.sleb128 16
 7003 03dd 06000000 		.4byte	.LCFI53
 7004 03e1 2E000000 		.4byte	.LFE47
 7005 03e5 0200     		.2byte	0x2
 7006 03e7 77       		.byte	0x77
 7007 03e8 10       		.sleb128 16
 7008 03e9 00000000 		.4byte	0x0
 7009 03ed 00000000 		.4byte	0x0
 7010              	.LLST19:
 7011 03f1 00000000 		.4byte	.LFB48
 7012 03f5 02000000 		.4byte	.LCFI54
 7013 03f9 0100     		.2byte	0x1
 7014 03fb 5D       		.byte	0x5d
 7015 03fc 02000000 		.4byte	.LCFI54
 7016 0400 04000000 		.4byte	.LCFI55
 7017 0404 0200     		.2byte	0x2
 7018 0406 7D       		.byte	0x7d
 7019 0407 08       		.sleb128 8
 7020 0408 04000000 		.4byte	.LCFI55
 7021 040c 06000000 		.4byte	.LCFI56
 7022 0410 0200     		.2byte	0x2
 7023 0412 7D       		.byte	0x7d
 7024 0413 18       		.sleb128 24
 7025 0414 06000000 		.4byte	.LCFI56
 7026 0418 A6000000 		.4byte	.LFE48
 7027 041c 0200     		.2byte	0x2
 7028 041e 77       		.byte	0x77
 7029 041f 18       		.sleb128 24
 7030 0420 00000000 		.4byte	0x0
 7031 0424 00000000 		.4byte	0x0
 7032              	.LLST20:
 7033 0428 00000000 		.4byte	.LFB49
 7034 042c 02000000 		.4byte	.LCFI57
ARM GAS  /tmp/cck0uY6y.s 			page 242


 7035 0430 0100     		.2byte	0x1
 7036 0432 5D       		.byte	0x5d
 7037 0433 02000000 		.4byte	.LCFI57
 7038 0437 04000000 		.4byte	.LCFI58
 7039 043b 0200     		.2byte	0x2
 7040 043d 7D       		.byte	0x7d
 7041 043e 04       		.sleb128 4
 7042 043f 04000000 		.4byte	.LCFI58
 7043 0443 18000000 		.4byte	.LFE49
 7044 0447 0200     		.2byte	0x2
 7045 0449 77       		.byte	0x77
 7046 044a 04       		.sleb128 4
 7047 044b 00000000 		.4byte	0x0
 7048 044f 00000000 		.4byte	0x0
 7049              	.LLST21:
 7050 0453 00000000 		.4byte	.LFB50
 7051 0457 02000000 		.4byte	.LCFI59
 7052 045b 0100     		.2byte	0x1
 7053 045d 5D       		.byte	0x5d
 7054 045e 02000000 		.4byte	.LCFI59
 7055 0462 04000000 		.4byte	.LCFI60
 7056 0466 0200     		.2byte	0x2
 7057 0468 7D       		.byte	0x7d
 7058 0469 08       		.sleb128 8
 7059 046a 04000000 		.4byte	.LCFI60
 7060 046e 06000000 		.4byte	.LCFI61
 7061 0472 0200     		.2byte	0x2
 7062 0474 7D       		.byte	0x7d
 7063 0475 10       		.sleb128 16
 7064 0476 06000000 		.4byte	.LCFI61
 7065 047a 0E000000 		.4byte	.LFE50
 7066 047e 0200     		.2byte	0x2
 7067 0480 77       		.byte	0x77
 7068 0481 10       		.sleb128 16
 7069 0482 00000000 		.4byte	0x0
 7070 0486 00000000 		.4byte	0x0
 7071              	.LLST22:
 7072 048a 00000000 		.4byte	.LFB51
 7073 048e 02000000 		.4byte	.LCFI62
 7074 0492 0100     		.2byte	0x1
 7075 0494 5D       		.byte	0x5d
 7076 0495 02000000 		.4byte	.LCFI62
 7077 0499 04000000 		.4byte	.LCFI63
 7078 049d 0200     		.2byte	0x2
 7079 049f 7D       		.byte	0x7d
 7080 04a0 08       		.sleb128 8
 7081 04a1 04000000 		.4byte	.LCFI63
 7082 04a5 06000000 		.4byte	.LCFI64
 7083 04a9 0200     		.2byte	0x2
 7084 04ab 7D       		.byte	0x7d
 7085 04ac 18       		.sleb128 24
 7086 04ad 06000000 		.4byte	.LCFI64
 7087 04b1 76000000 		.4byte	.LFE51
 7088 04b5 0200     		.2byte	0x2
 7089 04b7 77       		.byte	0x77
 7090 04b8 18       		.sleb128 24
 7091 04b9 00000000 		.4byte	0x0
ARM GAS  /tmp/cck0uY6y.s 			page 243


 7092 04bd 00000000 		.4byte	0x0
 7093              	.LLST23:
 7094 04c1 00000000 		.4byte	.LFB52
 7095 04c5 02000000 		.4byte	.LCFI65
 7096 04c9 0100     		.2byte	0x1
 7097 04cb 5D       		.byte	0x5d
 7098 04cc 02000000 		.4byte	.LCFI65
 7099 04d0 04000000 		.4byte	.LCFI66
 7100 04d4 0200     		.2byte	0x2
 7101 04d6 7D       		.byte	0x7d
 7102 04d7 08       		.sleb128 8
 7103 04d8 04000000 		.4byte	.LCFI66
 7104 04dc 06000000 		.4byte	.LCFI67
 7105 04e0 0200     		.2byte	0x2
 7106 04e2 7D       		.byte	0x7d
 7107 04e3 10       		.sleb128 16
 7108 04e4 06000000 		.4byte	.LCFI67
 7109 04e8 98000000 		.4byte	.LFE52
 7110 04ec 0200     		.2byte	0x2
 7111 04ee 77       		.byte	0x77
 7112 04ef 10       		.sleb128 16
 7113 04f0 00000000 		.4byte	0x0
 7114 04f4 00000000 		.4byte	0x0
 7115              	.LLST24:
 7116 04f8 00000000 		.4byte	.LFB53
 7117 04fc 02000000 		.4byte	.LCFI68
 7118 0500 0100     		.2byte	0x1
 7119 0502 5D       		.byte	0x5d
 7120 0503 02000000 		.4byte	.LCFI68
 7121 0507 04000000 		.4byte	.LCFI69
 7122 050b 0200     		.2byte	0x2
 7123 050d 7D       		.byte	0x7d
 7124 050e 04       		.sleb128 4
 7125 050f 04000000 		.4byte	.LCFI69
 7126 0513 0A000000 		.4byte	.LFE53
 7127 0517 0200     		.2byte	0x2
 7128 0519 77       		.byte	0x77
 7129 051a 04       		.sleb128 4
 7130 051b 00000000 		.4byte	0x0
 7131 051f 00000000 		.4byte	0x0
 7132              	.LLST25:
 7133 0523 00000000 		.4byte	.LFB54
 7134 0527 02000000 		.4byte	.LCFI70
 7135 052b 0100     		.2byte	0x1
 7136 052d 5D       		.byte	0x5d
 7137 052e 02000000 		.4byte	.LCFI70
 7138 0532 04000000 		.4byte	.LCFI71
 7139 0536 0200     		.2byte	0x2
 7140 0538 7D       		.byte	0x7d
 7141 0539 08       		.sleb128 8
 7142 053a 04000000 		.4byte	.LCFI71
 7143 053e 06000000 		.4byte	.LCFI72
 7144 0542 0200     		.2byte	0x2
 7145 0544 7D       		.byte	0x7d
 7146 0545 18       		.sleb128 24
 7147 0546 06000000 		.4byte	.LCFI72
 7148 054a 6A000000 		.4byte	.LFE54
ARM GAS  /tmp/cck0uY6y.s 			page 244


 7149 054e 0200     		.2byte	0x2
 7150 0550 77       		.byte	0x77
 7151 0551 18       		.sleb128 24
 7152 0552 00000000 		.4byte	0x0
 7153 0556 00000000 		.4byte	0x0
 7154              		.section	.debug_info
 7155 0000 240B0000 		.4byte	0xb24
 7156 0004 0200     		.2byte	0x2
 7157 0006 00000000 		.4byte	.Ldebug_abbrev0
 7158 000a 04       		.byte	0x4
 7159 000b 01       		.uleb128 0x1
 7160 000c AB060000 		.4byte	.LASF117
 7161 0010 01       		.byte	0x1
 7162 0011 91030000 		.4byte	.LASF118
 7163 0015 E8040000 		.4byte	.LASF119
 7164 0019 00000000 		.4byte	0x0
 7165 001d 00000000 		.4byte	0x0
 7166 0021 00000000 		.4byte	.Ldebug_ranges0+0x0
 7167 0025 00000000 		.4byte	.Ldebug_line0
 7168 0029 00000000 		.4byte	.Ldebug_macinfo0
 7169 002d 02       		.uleb128 0x2
 7170 002e 04       		.byte	0x4
 7171 002f 07       		.byte	0x7
 7172 0030 F0060000 		.4byte	.LASF0
 7173 0034 03       		.uleb128 0x3
 7174 0035 04       		.byte	0x4
 7175 0036 02       		.uleb128 0x2
 7176 0037 01       		.byte	0x1
 7177 0038 06       		.byte	0x6
 7178 0039 EB030000 		.4byte	.LASF1
 7179 003d 02       		.uleb128 0x2
 7180 003e 01       		.byte	0x1
 7181 003f 08       		.byte	0x8
 7182 0040 B7030000 		.4byte	.LASF2
 7183 0044 02       		.uleb128 0x2
 7184 0045 02       		.byte	0x2
 7185 0046 05       		.byte	0x5
 7186 0047 96000000 		.4byte	.LASF3
 7187 004b 02       		.uleb128 0x2
 7188 004c 02       		.byte	0x2
 7189 004d 07       		.byte	0x7
 7190 004e A9040000 		.4byte	.LASF4
 7191 0052 04       		.uleb128 0x4
 7192 0053 04       		.byte	0x4
 7193 0054 05       		.byte	0x5
 7194 0055 696E7400 		.ascii	"int\000"
 7195 0059 02       		.uleb128 0x2
 7196 005a 08       		.byte	0x8
 7197 005b 05       		.byte	0x5
 7198 005c 6B020000 		.4byte	.LASF5
 7199 0060 02       		.uleb128 0x2
 7200 0061 08       		.byte	0x8
 7201 0062 07       		.byte	0x7
 7202 0063 F7030000 		.4byte	.LASF6
 7203 0067 02       		.uleb128 0x2
 7204 0068 04       		.byte	0x4
 7205 0069 05       		.byte	0x5
ARM GAS  /tmp/cck0uY6y.s 			page 245


 7206 006a BF020000 		.4byte	.LASF7
 7207 006e 05       		.uleb128 0x5
 7208 006f 04       		.byte	0x4
 7209 0070 07       		.byte	0x7
 7210 0071 02       		.uleb128 0x2
 7211 0072 04       		.byte	0x4
 7212 0073 07       		.byte	0x7
 7213 0074 C2050000 		.4byte	.LASF8
 7214 0078 02       		.uleb128 0x2
 7215 0079 01       		.byte	0x1
 7216 007a 08       		.byte	0x8
 7217 007b CF040000 		.4byte	.LASF9
 7218 007f 06       		.uleb128 0x6
 7219 0080 79020000 		.4byte	.LASF10
 7220 0084 19       		.byte	0x19
 7221 0085 3A       		.byte	0x3a
 7222 0086 8A000000 		.4byte	0x8a
 7223 008a 07       		.uleb128 0x7
 7224 008b 04       		.byte	0x4
 7225 008c 90000000 		.4byte	0x90
 7226 0090 08       		.uleb128 0x8
 7227 0091 01       		.byte	0x1
 7228 0092 9C000000 		.4byte	0x9c
 7229 0096 09       		.uleb128 0x9
 7230 0097 34000000 		.4byte	0x34
 7231 009b 00       		.byte	0x0
 7232 009c 06       		.uleb128 0x6
 7233 009d A0000000 		.4byte	.LASF11
 7234 00a1 20       		.byte	0x20
 7235 00a2 55       		.byte	0x55
 7236 00a3 71000000 		.4byte	0x71
 7237 00a7 0A       		.uleb128 0xa
 7238 00a8 6F030000 		.4byte	.LASF18
 7239 00ac 14       		.byte	0x14
 7240 00ad 23       		.byte	0x23
 7241 00ae 63       		.byte	0x63
 7242 00af FA000000 		.4byte	0xfa
 7243 00b3 0B       		.uleb128 0xb
 7244 00b4 21030000 		.4byte	.LASF12
 7245 00b8 23       		.byte	0x23
 7246 00b9 64       		.byte	0x64
 7247 00ba 9C000000 		.4byte	0x9c
 7248 00be 02       		.byte	0x2
 7249 00bf 23       		.byte	0x23
 7250 00c0 00       		.uleb128 0x0
 7251 00c1 0B       		.uleb128 0xb
 7252 00c2 E1040000 		.4byte	.LASF13
 7253 00c6 23       		.byte	0x23
 7254 00c7 65       		.byte	0x65
 7255 00c8 FA000000 		.4byte	0xfa
 7256 00cc 02       		.byte	0x2
 7257 00cd 23       		.byte	0x23
 7258 00ce 04       		.uleb128 0x4
 7259 00cf 0B       		.uleb128 0xb
 7260 00d0 BF000000 		.4byte	.LASF14
 7261 00d4 23       		.byte	0x23
 7262 00d5 66       		.byte	0x66
ARM GAS  /tmp/cck0uY6y.s 			page 246


 7263 00d6 FA000000 		.4byte	0xfa
 7264 00da 02       		.byte	0x2
 7265 00db 23       		.byte	0x23
 7266 00dc 08       		.uleb128 0x8
 7267 00dd 0B       		.uleb128 0xb
 7268 00de 69010000 		.4byte	.LASF15
 7269 00e2 23       		.byte	0x23
 7270 00e3 67       		.byte	0x67
 7271 00e4 34000000 		.4byte	0x34
 7272 00e8 02       		.byte	0x2
 7273 00e9 23       		.byte	0x23
 7274 00ea 0C       		.uleb128 0xc
 7275 00eb 0B       		.uleb128 0xb
 7276 00ec 62040000 		.4byte	.LASF16
 7277 00f0 23       		.byte	0x23
 7278 00f1 68       		.byte	0x68
 7279 00f2 34000000 		.4byte	0x34
 7280 00f6 02       		.byte	0x2
 7281 00f7 23       		.byte	0x23
 7282 00f8 10       		.uleb128 0x10
 7283 00f9 00       		.byte	0x0
 7284 00fa 07       		.uleb128 0x7
 7285 00fb 04       		.byte	0x4
 7286 00fc 00010000 		.4byte	0x100
 7287 0100 0C       		.uleb128 0xc
 7288 0101 6F030000 		.4byte	.LASF18
 7289 0105 A7000000 		.4byte	0xa7
 7290 0109 06       		.uleb128 0x6
 7291 010a 08060000 		.4byte	.LASF17
 7292 010e 23       		.byte	0x23
 7293 010f 6A       		.byte	0x6a
 7294 0110 A7000000 		.4byte	0xa7
 7295 0114 0A       		.uleb128 0xa
 7296 0115 FD060000 		.4byte	.LASF19
 7297 0119 0C       		.byte	0xc
 7298 011a 23       		.byte	0x23
 7299 011b 6D       		.byte	0x6d
 7300 011c 4B010000 		.4byte	0x14b
 7301 0120 0B       		.uleb128 0xb
 7302 0121 21030000 		.4byte	.LASF12
 7303 0125 23       		.byte	0x23
 7304 0126 6E       		.byte	0x6e
 7305 0127 9C000000 		.4byte	0x9c
 7306 012b 02       		.byte	0x2
 7307 012c 23       		.byte	0x23
 7308 012d 00       		.uleb128 0x0
 7309 012e 0B       		.uleb128 0xb
 7310 012f E1040000 		.4byte	.LASF13
 7311 0133 23       		.byte	0x23
 7312 0134 6F       		.byte	0x6f
 7313 0135 FA000000 		.4byte	0xfa
 7314 0139 02       		.byte	0x2
 7315 013a 23       		.byte	0x23
 7316 013b 04       		.uleb128 0x4
 7317 013c 0B       		.uleb128 0xb
 7318 013d BF000000 		.4byte	.LASF14
 7319 0141 23       		.byte	0x23
ARM GAS  /tmp/cck0uY6y.s 			page 247


 7320 0142 70       		.byte	0x70
 7321 0143 FA000000 		.4byte	0xfa
 7322 0147 02       		.byte	0x2
 7323 0148 23       		.byte	0x23
 7324 0149 08       		.uleb128 0x8
 7325 014a 00       		.byte	0x0
 7326 014b 06       		.uleb128 0x6
 7327 014c A9030000 		.4byte	.LASF20
 7328 0150 23       		.byte	0x23
 7329 0151 72       		.byte	0x72
 7330 0152 14010000 		.4byte	0x114
 7331 0156 0A       		.uleb128 0xa
 7332 0157 C8020000 		.4byte	.LASF21
 7333 015b 14       		.byte	0x14
 7334 015c 23       		.byte	0x23
 7335 015d 78       		.byte	0x78
 7336 015e 8D010000 		.4byte	0x18d
 7337 0162 0B       		.uleb128 0xb
 7338 0163 F8050000 		.4byte	.LASF22
 7339 0167 23       		.byte	0x23
 7340 0168 79       		.byte	0x79
 7341 0169 8D010000 		.4byte	0x18d
 7342 016d 02       		.byte	0x2
 7343 016e 23       		.byte	0x23
 7344 016f 00       		.uleb128 0x0
 7345 0170 0B       		.uleb128 0xb
 7346 0171 D2060000 		.4byte	.LASF23
 7347 0175 23       		.byte	0x23
 7348 0176 7A       		.byte	0x7a
 7349 0177 92010000 		.4byte	0x192
 7350 017b 02       		.byte	0x2
 7351 017c 23       		.byte	0x23
 7352 017d 04       		.uleb128 0x4
 7353 017e 0B       		.uleb128 0xb
 7354 017f 34060000 		.4byte	.LASF24
 7355 0183 23       		.byte	0x23
 7356 0184 7B       		.byte	0x7b
 7357 0185 9D010000 		.4byte	0x19d
 7358 0189 02       		.byte	0x2
 7359 018a 23       		.byte	0x23
 7360 018b 08       		.uleb128 0x8
 7361 018c 00       		.byte	0x0
 7362 018d 0D       		.uleb128 0xd
 7363 018e 71000000 		.4byte	0x71
 7364 0192 07       		.uleb128 0x7
 7365 0193 04       		.byte	0x4
 7366 0194 98010000 		.4byte	0x198
 7367 0198 0D       		.uleb128 0xd
 7368 0199 09010000 		.4byte	0x109
 7369 019d 0D       		.uleb128 0xd
 7370 019e 4B010000 		.4byte	0x14b
 7371 01a2 06       		.uleb128 0x6
 7372 01a3 CE020000 		.4byte	.LASF25
 7373 01a7 23       		.byte	0x23
 7374 01a8 7C       		.byte	0x7c
 7375 01a9 56010000 		.4byte	0x156
 7376 01ad 06       		.uleb128 0x6
ARM GAS  /tmp/cck0uY6y.s 			page 248


 7377 01ae 2A040000 		.4byte	.LASF26
 7378 01b2 22       		.byte	0x22
 7379 01b3 57       		.byte	0x57
 7380 01b4 34000000 		.4byte	0x34
 7381 01b8 0A       		.uleb128 0xa
 7382 01b9 77000000 		.4byte	.LASF27
 7383 01bd 08       		.byte	0x8
 7384 01be 22       		.byte	0x22
 7385 01bf 5D       		.byte	0x5d
 7386 01c0 E1010000 		.4byte	0x1e1
 7387 01c4 0B       		.uleb128 0xb
 7388 01c5 DC030000 		.4byte	.LASF28
 7389 01c9 22       		.byte	0x22
 7390 01ca 5E       		.byte	0x5e
 7391 01cb 67000000 		.4byte	0x67
 7392 01cf 02       		.byte	0x2
 7393 01d0 23       		.byte	0x23
 7394 01d1 00       		.uleb128 0x0
 7395 01d2 0B       		.uleb128 0xb
 7396 01d3 C5030000 		.4byte	.LASF29
 7397 01d7 22       		.byte	0x22
 7398 01d8 5F       		.byte	0x5f
 7399 01d9 9C000000 		.4byte	0x9c
 7400 01dd 02       		.byte	0x2
 7401 01de 23       		.byte	0x23
 7402 01df 04       		.uleb128 0x4
 7403 01e0 00       		.byte	0x0
 7404 01e1 06       		.uleb128 0x6
 7405 01e2 D4020000 		.4byte	.LASF30
 7406 01e6 22       		.byte	0x22
 7407 01e7 60       		.byte	0x60
 7408 01e8 B8010000 		.4byte	0x1b8
 7409 01ec 0A       		.uleb128 0xa
 7410 01ed 81000000 		.4byte	.LASF31
 7411 01f1 0C       		.byte	0xc
 7412 01f2 22       		.byte	0x22
 7413 01f3 66       		.byte	0x66
 7414 01f4 23020000 		.4byte	0x223
 7415 01f8 0B       		.uleb128 0xb
 7416 01f9 4C000000 		.4byte	.LASF32
 7417 01fd 22       		.byte	0x22
 7418 01fe 67       		.byte	0x67
 7419 01ff 34000000 		.4byte	0x34
 7420 0203 02       		.byte	0x2
 7421 0204 23       		.byte	0x23
 7422 0205 00       		.uleb128 0x0
 7423 0206 0B       		.uleb128 0xb
 7424 0207 03010000 		.4byte	.LASF33
 7425 020b 22       		.byte	0x22
 7426 020c 68       		.byte	0x68
 7427 020d 71000000 		.4byte	0x71
 7428 0211 02       		.byte	0x2
 7429 0212 23       		.byte	0x23
 7430 0213 04       		.uleb128 0x4
 7431 0214 0B       		.uleb128 0xb
 7432 0215 9E020000 		.4byte	.LASF34
 7433 0219 22       		.byte	0x22
ARM GAS  /tmp/cck0uY6y.s 			page 249


 7434 021a 69       		.byte	0x69
 7435 021b 71000000 		.4byte	0x71
 7436 021f 02       		.byte	0x2
 7437 0220 23       		.byte	0x23
 7438 0221 08       		.uleb128 0x8
 7439 0222 00       		.byte	0x0
 7440 0223 06       		.uleb128 0x6
 7441 0224 8C040000 		.4byte	.LASF35
 7442 0228 22       		.byte	0x22
 7443 0229 6A       		.byte	0x6a
 7444 022a EC010000 		.4byte	0x1ec
 7445 022e 0E       		.uleb128 0xe
 7446 022f 33020000 		.4byte	0x233
 7447 0233 07       		.uleb128 0x7
 7448 0234 04       		.byte	0x4
 7449 0235 39020000 		.4byte	0x239
 7450 0239 0E       		.uleb128 0xe
 7451 023a 36000000 		.4byte	0x36
 7452 023e 07       		.uleb128 0x7
 7453 023f 04       		.byte	0x4
 7454 0240 71000000 		.4byte	0x71
 7455 0244 0A       		.uleb128 0xa
 7456 0245 F8020000 		.4byte	.LASF36
 7457 0249 40       		.byte	0x40
 7458 024a 01       		.byte	0x1
 7459 024b 52       		.byte	0x52
 7460 024c A5020000 		.4byte	0x2a5
 7461 0250 0B       		.uleb128 0xb
 7462 0251 84010000 		.4byte	.LASF37
 7463 0255 01       		.byte	0x1
 7464 0256 53       		.byte	0x53
 7465 0257 A5020000 		.4byte	0x2a5
 7466 025b 02       		.byte	0x2
 7467 025c 23       		.byte	0x23
 7468 025d 00       		.uleb128 0x0
 7469 025e 0B       		.uleb128 0xb
 7470 025f 3B000000 		.4byte	.LASF38
 7471 0263 01       		.byte	0x1
 7472 0264 59       		.byte	0x59
 7473 0265 09010000 		.4byte	0x109
 7474 0269 02       		.byte	0x2
 7475 026a 23       		.byte	0x23
 7476 026b 04       		.uleb128 0x4
 7477 026c 0B       		.uleb128 0xb
 7478 026d 1B040000 		.4byte	.LASF39
 7479 0271 01       		.byte	0x1
 7480 0272 5A       		.byte	0x5a
 7481 0273 09010000 		.4byte	0x109
 7482 0277 02       		.byte	0x2
 7483 0278 23       		.byte	0x23
 7484 0279 18       		.uleb128 0x18
 7485 027a 0B       		.uleb128 0xb
 7486 027b 43070000 		.4byte	.LASF40
 7487 027f 01       		.byte	0x1
 7488 0280 5B       		.byte	0x5b
 7489 0281 71000000 		.4byte	0x71
 7490 0285 02       		.byte	0x2
ARM GAS  /tmp/cck0uY6y.s 			page 250


 7491 0286 23       		.byte	0x23
 7492 0287 2C       		.uleb128 0x2c
 7493 0288 0B       		.uleb128 0xb
 7494 0289 BA050000 		.4byte	.LASF41
 7495 028d 01       		.byte	0x1
 7496 028e 5C       		.byte	0x5c
 7497 028f 3E020000 		.4byte	0x23e
 7498 0293 02       		.byte	0x2
 7499 0294 23       		.byte	0x23
 7500 0295 30       		.uleb128 0x30
 7501 0296 0B       		.uleb128 0xb
 7502 0297 F3010000 		.4byte	.LASF42
 7503 029b 01       		.byte	0x1
 7504 029c 5D       		.byte	0x5d
 7505 029d AB020000 		.4byte	0x2ab
 7506 02a1 02       		.byte	0x2
 7507 02a2 23       		.byte	0x23
 7508 02a3 34       		.uleb128 0x34
 7509 02a4 00       		.byte	0x0
 7510 02a5 07       		.uleb128 0x7
 7511 02a6 04       		.byte	0x4
 7512 02a7 8D010000 		.4byte	0x18d
 7513 02ab 0F       		.uleb128 0xf
 7514 02ac 36000000 		.4byte	0x36
 7515 02b0 BB020000 		.4byte	0x2bb
 7516 02b4 10       		.uleb128 0x10
 7517 02b5 6E000000 		.4byte	0x6e
 7518 02b9 0B       		.byte	0xb
 7519 02ba 00       		.byte	0x0
 7520 02bb 06       		.uleb128 0x6
 7521 02bc D5030000 		.4byte	.LASF43
 7522 02c0 01       		.byte	0x1
 7523 02c1 77       		.byte	0x77
 7524 02c2 44020000 		.4byte	0x244
 7525 02c6 11       		.uleb128 0x11
 7526 02c7 01       		.byte	0x1
 7527 02c8 0C000000 		.4byte	.LASF69
 7528 02cc 01       		.byte	0x1
 7529 02cd 8401     		.2byte	0x184
 7530 02cf 01       		.byte	0x1
 7531 02d0 67000000 		.4byte	0x67
 7532 02d4 00000000 		.4byte	.LFB29
 7533 02d8 A0010000 		.4byte	.LFE29
 7534 02dc 00000000 		.4byte	.LLST0
 7535 02e0 94030000 		.4byte	0x394
 7536 02e4 12       		.uleb128 0x12
 7537 02e5 84060000 		.4byte	.LASF44
 7538 02e9 01       		.byte	0x1
 7539 02ea 8401     		.2byte	0x184
 7540 02ec 7F000000 		.4byte	0x7f
 7541 02f0 02       		.byte	0x2
 7542 02f1 91       		.byte	0x91
 7543 02f2 64       		.sleb128 -28
 7544 02f3 12       		.uleb128 0x12
 7545 02f4 D4050000 		.4byte	.LASF45
 7546 02f8 01       		.byte	0x1
 7547 02f9 8401     		.2byte	0x184
ARM GAS  /tmp/cck0uY6y.s 			page 251


 7548 02fb 2E020000 		.4byte	0x22e
 7549 02ff 02       		.byte	0x2
 7550 0300 91       		.byte	0x91
 7551 0301 60       		.sleb128 -32
 7552 0302 12       		.uleb128 0x12
 7553 0303 62030000 		.4byte	.LASF46
 7554 0307 01       		.byte	0x1
 7555 0308 8401     		.2byte	0x184
 7556 030a 4B000000 		.4byte	0x4b
 7557 030e 02       		.byte	0x2
 7558 030f 91       		.byte	0x91
 7559 0310 5E       		.sleb128 -34
 7560 0311 12       		.uleb128 0x12
 7561 0312 9E060000 		.4byte	.LASF47
 7562 0316 01       		.byte	0x1
 7563 0317 8401     		.2byte	0x184
 7564 0319 34000000 		.4byte	0x34
 7565 031d 02       		.byte	0x2
 7566 031e 91       		.byte	0x91
 7567 031f 58       		.sleb128 -40
 7568 0320 12       		.uleb128 0x12
 7569 0321 43070000 		.4byte	.LASF40
 7570 0325 01       		.byte	0x1
 7571 0326 8401     		.2byte	0x184
 7572 0328 71000000 		.4byte	0x71
 7573 032c 02       		.byte	0x2
 7574 032d 91       		.byte	0x91
 7575 032e 00       		.sleb128 0
 7576 032f 12       		.uleb128 0x12
 7577 0330 76060000 		.4byte	.LASF48
 7578 0334 01       		.byte	0x1
 7579 0335 8401     		.2byte	0x184
 7580 0337 94030000 		.4byte	0x394
 7581 033b 02       		.byte	0x2
 7582 033c 91       		.byte	0x91
 7583 033d 04       		.sleb128 4
 7584 033e 12       		.uleb128 0x12
 7585 033f 4D060000 		.4byte	.LASF49
 7586 0343 01       		.byte	0x1
 7587 0344 8401     		.2byte	0x184
 7588 0346 3E020000 		.4byte	0x23e
 7589 034a 02       		.byte	0x2
 7590 034b 91       		.byte	0x91
 7591 034c 08       		.sleb128 8
 7592 034d 12       		.uleb128 0x12
 7593 034e 1F000000 		.4byte	.LASF50
 7594 0352 01       		.byte	0x1
 7595 0353 8401     		.2byte	0x184
 7596 0355 9A030000 		.4byte	0x39a
 7597 0359 02       		.byte	0x2
 7598 035a 91       		.byte	0x91
 7599 035b 0C       		.sleb128 12
 7600 035c 13       		.uleb128 0x13
 7601 035d 5C060000 		.4byte	.LASF51
 7602 0361 01       		.byte	0x1
 7603 0362 8601     		.2byte	0x186
 7604 0364 67000000 		.4byte	0x67
ARM GAS  /tmp/cck0uY6y.s 			page 252


 7605 0368 02       		.byte	0x2
 7606 0369 91       		.byte	0x91
 7607 036a 6C       		.sleb128 -20
 7608 036b 13       		.uleb128 0x13
 7609 036c C9060000 		.4byte	.LASF52
 7610 0370 01       		.byte	0x1
 7611 0371 8701     		.2byte	0x187
 7612 0373 AA030000 		.4byte	0x3aa
 7613 0377 02       		.byte	0x2
 7614 0378 91       		.byte	0x91
 7615 0379 70       		.sleb128 -16
 7616 037a 14       		.uleb128 0x14
 7617 037b 26000000 		.4byte	.LBB2
 7618 037f 58010000 		.4byte	.LBE2
 7619 0383 13       		.uleb128 0x13
 7620 0384 84010000 		.4byte	.LASF37
 7621 0388 01       		.byte	0x1
 7622 0389 8F01     		.2byte	0x18f
 7623 038b 3E020000 		.4byte	0x23e
 7624 038f 02       		.byte	0x2
 7625 0390 91       		.byte	0x91
 7626 0391 74       		.sleb128 -12
 7627 0392 00       		.byte	0x0
 7628 0393 00       		.byte	0x0
 7629 0394 07       		.uleb128 0x7
 7630 0395 04       		.byte	0x4
 7631 0396 AD010000 		.4byte	0x1ad
 7632 039a 0E       		.uleb128 0xe
 7633 039b 9F030000 		.4byte	0x39f
 7634 039f 07       		.uleb128 0x7
 7635 03a0 04       		.byte	0x4
 7636 03a1 A5030000 		.4byte	0x3a5
 7637 03a5 0E       		.uleb128 0xe
 7638 03a6 23020000 		.4byte	0x223
 7639 03aa 07       		.uleb128 0x7
 7640 03ab 04       		.byte	0x4
 7641 03ac BB020000 		.4byte	0x2bb
 7642 03b0 15       		.uleb128 0x15
 7643 03b1 01       		.byte	0x1
 7644 03b2 C1010000 		.4byte	.LASF58
 7645 03b6 01       		.byte	0x1
 7646 03b7 5A02     		.2byte	0x25a
 7647 03b9 01       		.byte	0x1
 7648 03ba 00000000 		.4byte	.LFB30
 7649 03be 14010000 		.4byte	.LFE30
 7650 03c2 37000000 		.4byte	.LLST1
 7651 03c6 16040000 		.4byte	0x416
 7652 03ca 12       		.uleb128 0x12
 7653 03cb 4B020000 		.4byte	.LASF53
 7654 03cf 01       		.byte	0x1
 7655 03d0 5A02     		.2byte	0x25a
 7656 03d2 16040000 		.4byte	0x416
 7657 03d6 02       		.byte	0x2
 7658 03d7 91       		.byte	0x91
 7659 03d8 64       		.sleb128 -28
 7660 03d9 12       		.uleb128 0x12
 7661 03da 8F060000 		.4byte	.LASF54
ARM GAS  /tmp/cck0uY6y.s 			page 253


 7662 03de 01       		.byte	0x1
 7663 03df 5A02     		.2byte	0x25a
 7664 03e1 9C000000 		.4byte	0x9c
 7665 03e5 02       		.byte	0x2
 7666 03e6 91       		.byte	0x91
 7667 03e7 60       		.sleb128 -32
 7668 03e8 13       		.uleb128 0x13
 7669 03e9 37070000 		.4byte	.LASF55
 7670 03ed 01       		.byte	0x1
 7671 03ee 5C02     		.2byte	0x25c
 7672 03f0 9C000000 		.4byte	0x9c
 7673 03f4 02       		.byte	0x2
 7674 03f5 91       		.byte	0x91
 7675 03f6 6C       		.sleb128 -20
 7676 03f7 13       		.uleb128 0x13
 7677 03f8 DB050000 		.4byte	.LASF56
 7678 03fc 01       		.byte	0x1
 7679 03fd 5D02     		.2byte	0x25d
 7680 03ff 67000000 		.4byte	0x67
 7681 0403 02       		.byte	0x2
 7682 0404 91       		.byte	0x91
 7683 0405 70       		.sleb128 -16
 7684 0406 13       		.uleb128 0x13
 7685 0407 D4040000 		.4byte	.LASF57
 7686 040b 01       		.byte	0x1
 7687 040c 5D02     		.2byte	0x25d
 7688 040e 67000000 		.4byte	0x67
 7689 0412 02       		.byte	0x2
 7690 0413 91       		.byte	0x91
 7691 0414 74       		.sleb128 -12
 7692 0415 00       		.byte	0x0
 7693 0416 0E       		.uleb128 0xe
 7694 0417 1B040000 		.4byte	0x41b
 7695 041b 07       		.uleb128 0x7
 7696 041c 04       		.byte	0x4
 7697 041d 9C000000 		.4byte	0x9c
 7698 0421 15       		.uleb128 0x15
 7699 0422 01       		.byte	0x1
 7700 0423 D8000000 		.4byte	.LASF59
 7701 0427 01       		.byte	0x1
 7702 0428 A702     		.2byte	0x2a7
 7703 042a 01       		.byte	0x1
 7704 042b 00000000 		.4byte	.LFB31
 7705 042f B6000000 		.4byte	.LFE31
 7706 0433 6E000000 		.4byte	.LLST2
 7707 0437 69040000 		.4byte	0x469
 7708 043b 12       		.uleb128 0x12
 7709 043c B3010000 		.4byte	.LASF60
 7710 0440 01       		.byte	0x1
 7711 0441 A702     		.2byte	0x2a7
 7712 0443 9C000000 		.4byte	0x9c
 7713 0447 02       		.byte	0x2
 7714 0448 91       		.byte	0x91
 7715 0449 6C       		.sleb128 -20
 7716 044a 13       		.uleb128 0x13
 7717 044b 37070000 		.4byte	.LASF55
 7718 044f 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 254


 7719 0450 A902     		.2byte	0x2a9
 7720 0452 9C000000 		.4byte	0x9c
 7721 0456 02       		.byte	0x2
 7722 0457 91       		.byte	0x91
 7723 0458 70       		.sleb128 -16
 7724 0459 13       		.uleb128 0x13
 7725 045a DB050000 		.4byte	.LASF56
 7726 045e 01       		.byte	0x1
 7727 045f AA02     		.2byte	0x2aa
 7728 0461 67000000 		.4byte	0x67
 7729 0465 02       		.byte	0x2
 7730 0466 91       		.byte	0x91
 7731 0467 74       		.sleb128 -12
 7732 0468 00       		.byte	0x0
 7733 0469 15       		.uleb128 0x15
 7734 046a 01       		.byte	0x1
 7735 046b 12060000 		.4byte	.LASF61
 7736 046f 01       		.byte	0x1
 7737 0470 FA02     		.2byte	0x2fa
 7738 0472 01       		.byte	0x1
 7739 0473 00000000 		.4byte	.LFB32
 7740 0477 1E010000 		.4byte	.LFE32
 7741 047b A5000000 		.4byte	.LLST3
 7742 047f CF040000 		.4byte	0x4cf
 7743 0483 12       		.uleb128 0x12
 7744 0484 6E040000 		.4byte	.LASF62
 7745 0488 01       		.byte	0x1
 7746 0489 FA02     		.2byte	0x2fa
 7747 048b AD010000 		.4byte	0x1ad
 7748 048f 02       		.byte	0x2
 7749 0490 91       		.byte	0x91
 7750 0491 64       		.sleb128 -28
 7751 0492 12       		.uleb128 0x12
 7752 0493 CA000000 		.4byte	.LASF63
 7753 0497 01       		.byte	0x1
 7754 0498 FA02     		.2byte	0x2fa
 7755 049a 71000000 		.4byte	0x71
 7756 049e 02       		.byte	0x2
 7757 049f 91       		.byte	0x91
 7758 04a0 60       		.sleb128 -32
 7759 04a1 13       		.uleb128 0x13
 7760 04a2 90000000 		.4byte	.LASF64
 7761 04a6 01       		.byte	0x1
 7762 04a7 FC02     		.2byte	0x2fc
 7763 04a9 AA030000 		.4byte	0x3aa
 7764 04ad 02       		.byte	0x2
 7765 04ae 91       		.byte	0x91
 7766 04af 6C       		.sleb128 -20
 7767 04b0 13       		.uleb128 0x13
 7768 04b1 B7060000 		.4byte	.LASF65
 7769 04b5 01       		.byte	0x1
 7770 04b6 FD02     		.2byte	0x2fd
 7771 04b8 71000000 		.4byte	0x71
 7772 04bc 02       		.byte	0x2
 7773 04bd 91       		.byte	0x91
 7774 04be 70       		.sleb128 -16
 7775 04bf 13       		.uleb128 0x13
ARM GAS  /tmp/cck0uY6y.s 			page 255


 7776 04c0 E4010000 		.4byte	.LASF66
 7777 04c4 01       		.byte	0x1
 7778 04c5 FD02     		.2byte	0x2fd
 7779 04c7 71000000 		.4byte	0x71
 7780 04cb 02       		.byte	0x2
 7781 04cc 91       		.byte	0x91
 7782 04cd 74       		.sleb128 -12
 7783 04ce 00       		.byte	0x0
 7784 04cf 15       		.uleb128 0x15
 7785 04d0 01       		.byte	0x1
 7786 04d1 91010000 		.4byte	.LASF67
 7787 04d5 01       		.byte	0x1
 7788 04d6 6303     		.2byte	0x363
 7789 04d8 01       		.byte	0x1
 7790 04d9 00000000 		.4byte	.LFB33
 7791 04dd 82000000 		.4byte	.LFE33
 7792 04e1 DC000000 		.4byte	.LLST4
 7793 04e5 08050000 		.4byte	0x508
 7794 04e9 12       		.uleb128 0x12
 7795 04ea FE010000 		.4byte	.LASF68
 7796 04ee 01       		.byte	0x1
 7797 04ef 6303     		.2byte	0x363
 7798 04f1 AD010000 		.4byte	0x1ad
 7799 04f5 02       		.byte	0x2
 7800 04f6 91       		.byte	0x91
 7801 04f7 6C       		.sleb128 -20
 7802 04f8 13       		.uleb128 0x13
 7803 04f9 90000000 		.4byte	.LASF64
 7804 04fd 01       		.byte	0x1
 7805 04fe 6503     		.2byte	0x365
 7806 0500 AA030000 		.4byte	0x3aa
 7807 0504 02       		.byte	0x2
 7808 0505 91       		.byte	0x91
 7809 0506 74       		.sleb128 -12
 7810 0507 00       		.byte	0x0
 7811 0508 11       		.uleb128 0x11
 7812 0509 01       		.byte	0x1
 7813 050a 0C030000 		.4byte	.LASF70
 7814 050e 01       		.byte	0x1
 7815 050f 8E03     		.2byte	0x38e
 7816 0511 01       		.byte	0x1
 7817 0512 67000000 		.4byte	0x67
 7818 0516 00000000 		.4byte	.LFB34
 7819 051a 4E000000 		.4byte	.LFE34
 7820 051e 13010000 		.4byte	.LLST5
 7821 0522 54050000 		.4byte	0x554
 7822 0526 12       		.uleb128 0x12
 7823 0527 0E020000 		.4byte	.LASF71
 7824 052b 01       		.byte	0x1
 7825 052c 8E03     		.2byte	0x38e
 7826 052e AD010000 		.4byte	0x1ad
 7827 0532 02       		.byte	0x2
 7828 0533 91       		.byte	0x91
 7829 0534 6C       		.sleb128 -20
 7830 0535 13       		.uleb128 0x13
 7831 0536 5C060000 		.4byte	.LASF51
 7832 053a 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 256


 7833 053b 9003     		.2byte	0x390
 7834 053d 67000000 		.4byte	0x67
 7835 0541 02       		.byte	0x2
 7836 0542 91       		.byte	0x91
 7837 0543 70       		.sleb128 -16
 7838 0544 13       		.uleb128 0x13
 7839 0545 90000000 		.4byte	.LASF64
 7840 0549 01       		.byte	0x1
 7841 054a 9103     		.2byte	0x391
 7842 054c 54050000 		.4byte	0x554
 7843 0550 02       		.byte	0x2
 7844 0551 91       		.byte	0x91
 7845 0552 74       		.sleb128 -12
 7846 0553 00       		.byte	0x0
 7847 0554 0E       		.uleb128 0xe
 7848 0555 59050000 		.4byte	0x559
 7849 0559 07       		.uleb128 0x7
 7850 055a 04       		.byte	0x4
 7851 055b 5F050000 		.4byte	0x55f
 7852 055f 0E       		.uleb128 0xe
 7853 0560 BB020000 		.4byte	0x2bb
 7854 0564 15       		.uleb128 0x15
 7855 0565 01       		.byte	0x1
 7856 0566 25010000 		.4byte	.LASF72
 7857 056a 01       		.byte	0x1
 7858 056b AD03     		.2byte	0x3ad
 7859 056d 01       		.byte	0x1
 7860 056e 00000000 		.4byte	.LFB35
 7861 0572 AC000000 		.4byte	.LFE35
 7862 0576 4A010000 		.4byte	.LLST6
 7863 057a 9D050000 		.4byte	0x59d
 7864 057e 12       		.uleb128 0x12
 7865 057f 2C030000 		.4byte	.LASF73
 7866 0583 01       		.byte	0x1
 7867 0584 AD03     		.2byte	0x3ad
 7868 0586 AD010000 		.4byte	0x1ad
 7869 058a 02       		.byte	0x2
 7870 058b 91       		.byte	0x91
 7871 058c 6C       		.sleb128 -20
 7872 058d 13       		.uleb128 0x13
 7873 058e 90000000 		.4byte	.LASF64
 7874 0592 01       		.byte	0x1
 7875 0593 AF03     		.2byte	0x3af
 7876 0595 AA030000 		.4byte	0x3aa
 7877 0599 02       		.byte	0x2
 7878 059a 91       		.byte	0x91
 7879 059b 74       		.sleb128 -12
 7880 059c 00       		.byte	0x0
 7881 059d 11       		.uleb128 0x11
 7882 059e 01       		.byte	0x1
 7883 059f 71010000 		.4byte	.LASF74
 7884 05a3 01       		.byte	0x1
 7885 05a4 D703     		.2byte	0x3d7
 7886 05a6 01       		.byte	0x1
 7887 05a7 67000000 		.4byte	0x67
 7888 05ab 00000000 		.4byte	.LFB36
 7889 05af BE000000 		.4byte	.LFE36
ARM GAS  /tmp/cck0uY6y.s 			page 257


 7890 05b3 81010000 		.4byte	.LLST7
 7891 05b7 E9050000 		.4byte	0x5e9
 7892 05bb 12       		.uleb128 0x12
 7893 05bc 2C030000 		.4byte	.LASF73
 7894 05c0 01       		.byte	0x1
 7895 05c1 D703     		.2byte	0x3d7
 7896 05c3 AD010000 		.4byte	0x1ad
 7897 05c7 02       		.byte	0x2
 7898 05c8 91       		.byte	0x91
 7899 05c9 6C       		.sleb128 -20
 7900 05ca 13       		.uleb128 0x13
 7901 05cb E4010000 		.4byte	.LASF66
 7902 05cf 01       		.byte	0x1
 7903 05d0 D903     		.2byte	0x3d9
 7904 05d2 67000000 		.4byte	0x67
 7905 05d6 02       		.byte	0x2
 7906 05d7 91       		.byte	0x91
 7907 05d8 70       		.sleb128 -16
 7908 05d9 13       		.uleb128 0x13
 7909 05da 90000000 		.4byte	.LASF64
 7910 05de 01       		.byte	0x1
 7911 05df DA03     		.2byte	0x3da
 7912 05e1 AA030000 		.4byte	0x3aa
 7913 05e5 02       		.byte	0x2
 7914 05e6 91       		.byte	0x91
 7915 05e7 74       		.sleb128 -12
 7916 05e8 00       		.byte	0x0
 7917 05e9 15       		.uleb128 0x15
 7918 05ea 01       		.byte	0x1
 7919 05eb AB020000 		.4byte	.LASF75
 7920 05ef 01       		.byte	0x1
 7921 05f0 FE03     		.2byte	0x3fe
 7922 05f2 01       		.byte	0x1
 7923 05f3 00000000 		.4byte	.LFB37
 7924 05f7 7A000000 		.4byte	.LFE37
 7925 05fb B8010000 		.4byte	.LLST8
 7926 05ff 13060000 		.4byte	0x613
 7927 0603 13       		.uleb128 0x13
 7928 0604 5C060000 		.4byte	.LASF51
 7929 0608 01       		.byte	0x1
 7930 0609 0004     		.2byte	0x400
 7931 060b 67000000 		.4byte	0x67
 7932 060f 02       		.byte	0x2
 7933 0610 91       		.byte	0x91
 7934 0611 74       		.sleb128 -12
 7935 0612 00       		.byte	0x0
 7936 0613 16       		.uleb128 0x16
 7937 0614 01       		.byte	0x1
 7938 0615 64060000 		.4byte	.LASF76
 7939 0619 01       		.byte	0x1
 7940 061a 2804     		.2byte	0x428
 7941 061c 01       		.byte	0x1
 7942 061d 00000000 		.4byte	.LFB38
 7943 0621 22000000 		.4byte	.LFE38
 7944 0625 EF010000 		.4byte	.LLST9
 7945 0629 16       		.uleb128 0x16
 7946 062a 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 258


 7947 062b 27070000 		.4byte	.LASF77
 7948 062f 01       		.byte	0x1
 7949 0630 3304     		.2byte	0x433
 7950 0632 01       		.byte	0x1
 7951 0633 00000000 		.4byte	.LFB39
 7952 0637 22000000 		.4byte	.LFE39
 7953 063b 1A020000 		.4byte	.LLST10
 7954 063f 11       		.uleb128 0x11
 7955 0640 01       		.byte	0x1
 7956 0641 9A040000 		.4byte	.LASF78
 7957 0645 01       		.byte	0x1
 7958 0646 3B04     		.2byte	0x43b
 7959 0648 01       		.byte	0x1
 7960 0649 67000000 		.4byte	0x67
 7961 064d 00000000 		.4byte	.LFB40
 7962 0651 60010000 		.4byte	.LFE40
 7963 0655 45020000 		.4byte	.LLST11
 7964 0659 94060000 		.4byte	0x694
 7965 065d 13       		.uleb128 0x13
 7966 065e 90000000 		.4byte	.LASF64
 7967 0662 01       		.byte	0x1
 7968 0663 3D04     		.2byte	0x43d
 7969 0665 AA030000 		.4byte	0x3aa
 7970 0669 01       		.byte	0x1
 7971 066a 54       		.byte	0x54
 7972 066b 13       		.uleb128 0x13
 7973 066c DB050000 		.4byte	.LASF56
 7974 0670 01       		.byte	0x1
 7975 0671 3E04     		.2byte	0x43e
 7976 0673 67000000 		.4byte	0x67
 7977 0677 02       		.byte	0x2
 7978 0678 91       		.byte	0x91
 7979 0679 68       		.sleb128 -24
 7980 067a 14       		.uleb128 0x14
 7981 067b 48000000 		.4byte	.LBB3
 7982 067f 50010000 		.4byte	.LBE3
 7983 0683 13       		.uleb128 0x13
 7984 0684 E4010000 		.4byte	.LASF66
 7985 0688 01       		.byte	0x1
 7986 0689 4D04     		.2byte	0x44d
 7987 068b 67000000 		.4byte	0x67
 7988 068f 02       		.byte	0x2
 7989 0690 91       		.byte	0x91
 7990 0691 6C       		.sleb128 -20
 7991 0692 00       		.byte	0x0
 7992 0693 00       		.byte	0x0
 7993 0694 11       		.uleb128 0x11
 7994 0695 01       		.byte	0x1
 7995 0696 3B030000 		.4byte	.LASF79
 7996 069a 01       		.byte	0x1
 7997 069b 8D04     		.2byte	0x48d
 7998 069d 01       		.byte	0x1
 7999 069e 9C000000 		.4byte	0x9c
 8000 06a2 00000000 		.4byte	.LFB41
 8001 06a6 26000000 		.4byte	.LFE41
 8002 06aa 7C020000 		.4byte	.LLST12
 8003 06ae C2060000 		.4byte	0x6c2
ARM GAS  /tmp/cck0uY6y.s 			page 259


 8004 06b2 13       		.uleb128 0x13
 8005 06b3 A2030000 		.4byte	.LASF80
 8006 06b7 01       		.byte	0x1
 8007 06b8 8F04     		.2byte	0x48f
 8008 06ba 9C000000 		.4byte	0x9c
 8009 06be 02       		.byte	0x2
 8010 06bf 91       		.byte	0x91
 8011 06c0 74       		.sleb128 -12
 8012 06c1 00       		.byte	0x0
 8013 06c2 17       		.uleb128 0x17
 8014 06c3 01       		.byte	0x1
 8015 06c4 7A030000 		.4byte	.LASF120
 8016 06c8 01       		.byte	0x1
 8017 06c9 9C04     		.2byte	0x49c
 8018 06cb 01       		.byte	0x1
 8019 06cc 71000000 		.4byte	0x71
 8020 06d0 00000000 		.4byte	.LFB42
 8021 06d4 16000000 		.4byte	.LFE42
 8022 06d8 B3020000 		.4byte	.LLST13
 8023 06dc 15       		.uleb128 0x15
 8024 06dd 01       		.byte	0x1
 8025 06de 21020000 		.4byte	.LASF81
 8026 06e2 01       		.byte	0x1
 8027 06e3 4E05     		.2byte	0x54e
 8028 06e5 01       		.byte	0x1
 8029 06e6 00000000 		.4byte	.LFB43
 8030 06ea 50010000 		.4byte	.LFE43
 8031 06ee DE020000 		.4byte	.LLST14
 8032 06f2 2C070000 		.4byte	0x72c
 8033 06f6 18       		.uleb128 0x18
 8034 06f7 3C000000 		.4byte	.LBB4
 8035 06fb 80000000 		.4byte	.LBE4
 8036 06ff 13070000 		.4byte	0x713
 8037 0703 13       		.uleb128 0x13
 8038 0704 34000000 		.4byte	.LASF82
 8039 0708 01       		.byte	0x1
 8040 0709 5805     		.2byte	0x558
 8041 070b 2C070000 		.4byte	0x72c
 8042 070f 02       		.byte	0x2
 8043 0710 91       		.byte	0x91
 8044 0711 6C       		.sleb128 -20
 8045 0712 00       		.byte	0x0
 8046 0713 14       		.uleb128 0x14
 8047 0714 80000000 		.4byte	.LBB5
 8048 0718 1A010000 		.4byte	.LBE5
 8049 071c 13       		.uleb128 0x13
 8050 071d 90000000 		.4byte	.LASF64
 8051 0721 01       		.byte	0x1
 8052 0722 6405     		.2byte	0x564
 8053 0724 AA030000 		.4byte	0x3aa
 8054 0728 01       		.byte	0x1
 8055 0729 54       		.byte	0x54
 8056 072a 00       		.byte	0x0
 8057 072b 00       		.byte	0x0
 8058 072c 07       		.uleb128 0x7
 8059 072d 04       		.byte	0x4
 8060 072e A2010000 		.4byte	0x1a2
ARM GAS  /tmp/cck0uY6y.s 			page 260


 8061 0732 15       		.uleb128 0x15
 8062 0733 01       		.byte	0x1
 8063 0734 36040000 		.4byte	.LASF83
 8064 0738 01       		.byte	0x1
 8065 0739 1206     		.2byte	0x612
 8066 073b 01       		.byte	0x1
 8067 073c 00000000 		.4byte	.LFB44
 8068 0740 CA000000 		.4byte	.LFE44
 8069 0744 15030000 		.4byte	.LLST15
 8070 0748 66070000 		.4byte	0x766
 8071 074c 14       		.uleb128 0x14
 8072 074d 68000000 		.4byte	.LBB6
 8073 0751 C0000000 		.4byte	.LBE6
 8074 0755 13       		.uleb128 0x13
 8075 0756 85020000 		.4byte	.LASF84
 8076 075a 01       		.byte	0x1
 8077 075b 3706     		.2byte	0x637
 8078 075d 66070000 		.4byte	0x766
 8079 0761 02       		.byte	0x2
 8080 0762 91       		.byte	0x91
 8081 0763 74       		.sleb128 -12
 8082 0764 00       		.byte	0x0
 8083 0765 00       		.byte	0x0
 8084 0766 0E       		.uleb128 0xe
 8085 0767 2C070000 		.4byte	0x72c
 8086 076b 15       		.uleb128 0x15
 8087 076c 01       		.byte	0x1
 8088 076d DA060000 		.4byte	.LASF85
 8089 0771 01       		.byte	0x1
 8090 0772 3E06     		.2byte	0x63e
 8091 0774 01       		.byte	0x1
 8092 0775 00000000 		.4byte	.LFB45
 8093 0779 D2000000 		.4byte	.LFE45
 8094 077d 4C030000 		.4byte	.LLST16
 8095 0781 B3070000 		.4byte	0x7b3
 8096 0785 12       		.uleb128 0x12
 8097 0786 00000000 		.4byte	.LASF86
 8098 078a 01       		.byte	0x1
 8099 078b 3E06     		.2byte	0x63e
 8100 078d B3070000 		.4byte	0x7b3
 8101 0791 02       		.byte	0x2
 8102 0792 91       		.byte	0x91
 8103 0793 6C       		.sleb128 -20
 8104 0794 12       		.uleb128 0x12
 8105 0795 5E020000 		.4byte	.LASF87
 8106 0799 01       		.byte	0x1
 8107 079a 3E06     		.2byte	0x63e
 8108 079c 9C000000 		.4byte	0x9c
 8109 07a0 02       		.byte	0x2
 8110 07a1 91       		.byte	0x91
 8111 07a2 68       		.sleb128 -24
 8112 07a3 13       		.uleb128 0x13
 8113 07a4 37070000 		.4byte	.LASF55
 8114 07a8 01       		.byte	0x1
 8115 07a9 4006     		.2byte	0x640
 8116 07ab 9C000000 		.4byte	0x9c
 8117 07af 02       		.byte	0x2
ARM GAS  /tmp/cck0uY6y.s 			page 261


 8118 07b0 91       		.byte	0x91
 8119 07b1 74       		.sleb128 -12
 8120 07b2 00       		.byte	0x0
 8121 07b3 0E       		.uleb128 0xe
 8122 07b4 B8070000 		.4byte	0x7b8
 8123 07b8 07       		.uleb128 0x7
 8124 07b9 04       		.byte	0x4
 8125 07ba BE070000 		.4byte	0x7be
 8126 07be 0E       		.uleb128 0xe
 8127 07bf A2010000 		.4byte	0x1a2
 8128 07c3 11       		.uleb128 0x11
 8129 07c4 01       		.byte	0x1
 8130 07c5 49040000 		.4byte	.LASF88
 8131 07c9 01       		.byte	0x1
 8132 07ca 8406     		.2byte	0x684
 8133 07cc 01       		.byte	0x1
 8134 07cd 67000000 		.4byte	0x67
 8135 07d1 00000000 		.4byte	.LFB46
 8136 07d5 D2000000 		.4byte	.LFE46
 8137 07d9 83030000 		.4byte	.LLST17
 8138 07dd 0F080000 		.4byte	0x80f
 8139 07e1 12       		.uleb128 0x12
 8140 07e2 00000000 		.4byte	.LASF86
 8141 07e6 01       		.byte	0x1
 8142 07e7 8406     		.2byte	0x684
 8143 07e9 B3070000 		.4byte	0x7b3
 8144 07ed 02       		.byte	0x2
 8145 07ee 91       		.byte	0x91
 8146 07ef 6C       		.sleb128 -20
 8147 07f0 13       		.uleb128 0x13
 8148 07f1 7F050000 		.4byte	.LASF89
 8149 07f5 01       		.byte	0x1
 8150 07f6 8606     		.2byte	0x686
 8151 07f8 AA030000 		.4byte	0x3aa
 8152 07fc 02       		.byte	0x2
 8153 07fd 91       		.byte	0x91
 8154 07fe 70       		.sleb128 -16
 8155 07ff 13       		.uleb128 0x13
 8156 0800 5C060000 		.4byte	.LASF51
 8157 0804 01       		.byte	0x1
 8158 0805 8706     		.2byte	0x687
 8159 0807 67000000 		.4byte	0x67
 8160 080b 02       		.byte	0x2
 8161 080c 91       		.byte	0x91
 8162 080d 74       		.sleb128 -12
 8163 080e 00       		.byte	0x0
 8164 080f 15       		.uleb128 0x15
 8165 0810 01       		.byte	0x1
 8166 0811 9E010000 		.4byte	.LASF90
 8167 0815 01       		.byte	0x1
 8168 0816 B306     		.2byte	0x6b3
 8169 0818 01       		.byte	0x1
 8170 0819 00000000 		.4byte	.LFB47
 8171 081d 2E000000 		.4byte	.LFE47
 8172 0821 BA030000 		.4byte	.LLST18
 8173 0825 39080000 		.4byte	0x839
 8174 0829 12       		.uleb128 0x12
ARM GAS  /tmp/cck0uY6y.s 			page 262


 8175 082a 3F010000 		.4byte	.LASF91
 8176 082e 01       		.byte	0x1
 8177 082f B306     		.2byte	0x6b3
 8178 0831 39080000 		.4byte	0x839
 8179 0835 02       		.byte	0x2
 8180 0836 91       		.byte	0x91
 8181 0837 74       		.sleb128 -12
 8182 0838 00       		.byte	0x0
 8183 0839 0E       		.uleb128 0xe
 8184 083a 3E080000 		.4byte	0x83e
 8185 083e 07       		.uleb128 0x7
 8186 083f 04       		.byte	0x4
 8187 0840 E1010000 		.4byte	0x1e1
 8188 0844 11       		.uleb128 0x11
 8189 0845 01       		.byte	0x1
 8190 0846 4D030000 		.4byte	.LASF92
 8191 084a 01       		.byte	0x1
 8192 084b BA06     		.2byte	0x6ba
 8193 084d 01       		.byte	0x1
 8194 084e 67000000 		.4byte	0x67
 8195 0852 00000000 		.4byte	.LFB48
 8196 0856 A6000000 		.4byte	.LFE48
 8197 085a F1030000 		.4byte	.LLST19
 8198 085e 90080000 		.4byte	0x890
 8199 0862 12       		.uleb128 0x12
 8200 0863 3F010000 		.4byte	.LASF91
 8201 0867 01       		.byte	0x1
 8202 0868 BA06     		.2byte	0x6ba
 8203 086a 39080000 		.4byte	0x839
 8204 086e 02       		.byte	0x2
 8205 086f 91       		.byte	0x91
 8206 0870 6C       		.sleb128 -20
 8207 0871 12       		.uleb128 0x12
 8208 0872 F5000000 		.4byte	.LASF93
 8209 0876 01       		.byte	0x1
 8210 0877 BA06     		.2byte	0x6ba
 8211 0879 16040000 		.4byte	0x416
 8212 087d 02       		.byte	0x2
 8213 087e 91       		.byte	0x91
 8214 087f 68       		.sleb128 -24
 8215 0880 13       		.uleb128 0x13
 8216 0881 5C060000 		.4byte	.LASF51
 8217 0885 01       		.byte	0x1
 8218 0886 BC06     		.2byte	0x6bc
 8219 0888 67000000 		.4byte	0x67
 8220 088c 02       		.byte	0x2
 8221 088d 91       		.byte	0x91
 8222 088e 74       		.sleb128 -12
 8223 088f 00       		.byte	0x0
 8224 0890 16       		.uleb128 0x16
 8225 0891 01       		.byte	0x1
 8226 0892 23060000 		.4byte	.LASF94
 8227 0896 01       		.byte	0x1
 8228 0897 E506     		.2byte	0x6e5
 8229 0899 01       		.byte	0x1
 8230 089a 00000000 		.4byte	.LFB49
 8231 089e 18000000 		.4byte	.LFE49
ARM GAS  /tmp/cck0uY6y.s 			page 263


 8232 08a2 28040000 		.4byte	.LLST20
 8233 08a6 19       		.uleb128 0x19
 8234 08a7 28000000 		.4byte	.LASF95
 8235 08ab 01       		.byte	0x1
 8236 08ac F506     		.2byte	0x6f5
 8237 08ae 01       		.byte	0x1
 8238 08af 00000000 		.4byte	.LFB50
 8239 08b3 0E000000 		.4byte	.LFE50
 8240 08b7 53040000 		.4byte	.LLST21
 8241 08bb CF080000 		.4byte	0x8cf
 8242 08bf 12       		.uleb128 0x12
 8243 08c0 9E060000 		.4byte	.LASF47
 8244 08c4 01       		.byte	0x1
 8245 08c5 F506     		.2byte	0x6f5
 8246 08c7 34000000 		.4byte	0x34
 8247 08cb 02       		.byte	0x2
 8248 08cc 91       		.byte	0x91
 8249 08cd 74       		.sleb128 -12
 8250 08ce 00       		.byte	0x0
 8251 08cf 19       		.uleb128 0x19
 8252 08d0 A0050000 		.4byte	.LASF96
 8253 08d4 01       		.byte	0x1
 8254 08d5 3607     		.2byte	0x736
 8255 08d7 01       		.byte	0x1
 8256 08d8 00000000 		.4byte	.LFB51
 8257 08dc 76000000 		.4byte	.LFE51
 8258 08e0 8A040000 		.4byte	.LLST22
 8259 08e4 34090000 		.4byte	0x934
 8260 08e8 12       		.uleb128 0x12
 8261 08e9 90000000 		.4byte	.LASF64
 8262 08ed 01       		.byte	0x1
 8263 08ee 3607     		.2byte	0x736
 8264 08f0 AA030000 		.4byte	0x3aa
 8265 08f4 02       		.byte	0x2
 8266 08f5 91       		.byte	0x91
 8267 08f6 74       		.sleb128 -12
 8268 08f7 12       		.uleb128 0x12
 8269 08f8 D4050000 		.4byte	.LASF45
 8270 08fc 01       		.byte	0x1
 8271 08fd 3607     		.2byte	0x736
 8272 08ff 2E020000 		.4byte	0x22e
 8273 0903 02       		.byte	0x2
 8274 0904 91       		.byte	0x91
 8275 0905 70       		.sleb128 -16
 8276 0906 12       		.uleb128 0x12
 8277 0907 43070000 		.4byte	.LASF40
 8278 090b 01       		.byte	0x1
 8279 090c 3607     		.2byte	0x736
 8280 090e 71000000 		.4byte	0x71
 8281 0912 02       		.byte	0x2
 8282 0913 91       		.byte	0x91
 8283 0914 6C       		.sleb128 -20
 8284 0915 12       		.uleb128 0x12
 8285 0916 1F000000 		.4byte	.LASF50
 8286 091a 01       		.byte	0x1
 8287 091b 3607     		.2byte	0x736
 8288 091d 9A030000 		.4byte	0x39a
ARM GAS  /tmp/cck0uY6y.s 			page 264


 8289 0921 02       		.byte	0x2
 8290 0922 91       		.byte	0x91
 8291 0923 68       		.sleb128 -24
 8292 0924 12       		.uleb128 0x12
 8293 0925 62030000 		.4byte	.LASF46
 8294 0929 01       		.byte	0x1
 8295 092a 3607     		.2byte	0x736
 8296 092c 4B000000 		.4byte	0x4b
 8297 0930 02       		.byte	0x2
 8298 0931 91       		.byte	0x91
 8299 0932 00       		.sleb128 0
 8300 0933 00       		.byte	0x0
 8301 0934 19       		.uleb128 0x19
 8302 0935 E1020000 		.4byte	.LASF97
 8303 0939 01       		.byte	0x1
 8304 093a 8C07     		.2byte	0x78c
 8305 093c 01       		.byte	0x1
 8306 093d 00000000 		.4byte	.LFB52
 8307 0941 98000000 		.4byte	.LFE52
 8308 0945 C1040000 		.4byte	.LLST23
 8309 0949 5D090000 		.4byte	0x95d
 8310 094d 13       		.uleb128 0x13
 8311 094e 43070000 		.4byte	.LASF40
 8312 0952 01       		.byte	0x1
 8313 0953 8E07     		.2byte	0x78e
 8314 0955 71000000 		.4byte	0x71
 8315 0959 02       		.byte	0x2
 8316 095a 91       		.byte	0x91
 8317 095b 74       		.sleb128 -12
 8318 095c 00       		.byte	0x0
 8319 095d 1A       		.uleb128 0x1a
 8320 095e 49010000 		.4byte	.LASF121
 8321 0962 01       		.byte	0x1
 8322 0963 AC07     		.2byte	0x7ac
 8323 0965 01       		.byte	0x1
 8324 0966 00000000 		.4byte	.LFB53
 8325 096a 0A000000 		.4byte	.LFE53
 8326 096e F8040000 		.4byte	.LLST24
 8327 0972 1B       		.uleb128 0x1b
 8328 0973 75040000 		.4byte	.LASF122
 8329 0977 01       		.byte	0x1
 8330 0978 CF07     		.2byte	0x7cf
 8331 097a 01       		.byte	0x1
 8332 097b AA030000 		.4byte	0x3aa
 8333 097f 00000000 		.4byte	.LFB54
 8334 0983 6A000000 		.4byte	.LFE54
 8335 0987 23050000 		.4byte	.LLST25
 8336 098b BD090000 		.4byte	0x9bd
 8337 098f 12       		.uleb128 0x12
 8338 0990 62030000 		.4byte	.LASF46
 8339 0994 01       		.byte	0x1
 8340 0995 CF07     		.2byte	0x7cf
 8341 0997 4B000000 		.4byte	0x4b
 8342 099b 02       		.byte	0x2
 8343 099c 91       		.byte	0x91
 8344 099d 6E       		.sleb128 -18
 8345 099e 12       		.uleb128 0x12
ARM GAS  /tmp/cck0uY6y.s 			page 265


 8346 099f 4D060000 		.4byte	.LASF49
 8347 09a3 01       		.byte	0x1
 8348 09a4 CF07     		.2byte	0x7cf
 8349 09a6 3E020000 		.4byte	0x23e
 8350 09aa 02       		.byte	0x2
 8351 09ab 91       		.byte	0x91
 8352 09ac 68       		.sleb128 -24
 8353 09ad 13       		.uleb128 0x13
 8354 09ae C9060000 		.4byte	.LASF52
 8355 09b2 01       		.byte	0x1
 8356 09b3 D107     		.2byte	0x7d1
 8357 09b5 AA030000 		.4byte	0x3aa
 8358 09b9 02       		.byte	0x2
 8359 09ba 91       		.byte	0x91
 8360 09bb 74       		.sleb128 -12
 8361 09bc 00       		.byte	0x0
 8362 09bd 0F       		.uleb128 0xf
 8363 09be A2010000 		.4byte	0x1a2
 8364 09c2 CD090000 		.4byte	0x9cd
 8365 09c6 10       		.uleb128 0x10
 8366 09c7 6E000000 		.4byte	0x6e
 8367 09cb 04       		.byte	0x4
 8368 09cc 00       		.byte	0x0
 8369 09cd 1C       		.uleb128 0x1c
 8370 09ce 5B050000 		.4byte	.LASF98
 8371 09d2 01       		.byte	0x1
 8372 09d3 87       		.byte	0x87
 8373 09d4 BD090000 		.4byte	0x9bd
 8374 09d8 05       		.byte	0x5
 8375 09d9 03       		.byte	0x3
 8376 09da 04000000 		.4byte	pxReadyTasksLists
 8377 09de 1C       		.uleb128 0x1c
 8378 09df 6D050000 		.4byte	.LASF99
 8379 09e3 01       		.byte	0x1
 8380 09e4 88       		.byte	0x88
 8381 09e5 A2010000 		.4byte	0x1a2
 8382 09e9 05       		.byte	0x5
 8383 09ea 03       		.byte	0x3
 8384 09eb 68000000 		.4byte	xDelayedTaskList1
 8385 09ef 1C       		.uleb128 0x1c
 8386 09f0 8E050000 		.4byte	.LASF100
 8387 09f4 01       		.byte	0x1
 8388 09f5 89       		.byte	0x89
 8389 09f6 A2010000 		.4byte	0x1a2
 8390 09fa 05       		.byte	0x5
 8391 09fb 03       		.byte	0x3
 8392 09fc 7C000000 		.4byte	xDelayedTaskList2
 8393 0a00 1C       		.uleb128 0x1c
 8394 0a01 13010000 		.4byte	.LASF101
 8395 0a05 01       		.byte	0x1
 8396 0a06 8A       		.byte	0x8a
 8397 0a07 110A0000 		.4byte	0xa11
 8398 0a0b 05       		.byte	0x5
 8399 0a0c 03       		.byte	0x3
 8400 0a0d 90000000 		.4byte	pxDelayedTaskList
 8401 0a11 0D       		.uleb128 0xd
 8402 0a12 2C070000 		.4byte	0x72c
ARM GAS  /tmp/cck0uY6y.s 			page 266


 8403 0a16 1C       		.uleb128 0x1c
 8404 0a17 0D070000 		.4byte	.LASF102
 8405 0a1b 01       		.byte	0x1
 8406 0a1c 8B       		.byte	0x8b
 8407 0a1d 110A0000 		.4byte	0xa11
 8408 0a21 05       		.byte	0x5
 8409 0a22 03       		.byte	0x3
 8410 0a23 94000000 		.4byte	pxOverflowDelayedTaskList
 8411 0a27 1C       		.uleb128 0x1c
 8412 0a28 AD000000 		.4byte	.LASF103
 8413 0a2c 01       		.byte	0x1
 8414 0a2d 8C       		.byte	0x8c
 8415 0a2e A2010000 		.4byte	0x1a2
 8416 0a32 05       		.byte	0x5
 8417 0a33 03       		.byte	0x3
 8418 0a34 98000000 		.4byte	xPendingReadyList
 8419 0a38 1C       		.uleb128 0x1c
 8420 0a39 BC040000 		.4byte	.LASF104
 8421 0a3d 01       		.byte	0x1
 8422 0a3e 97       		.byte	0x97
 8423 0a3f A2010000 		.4byte	0x1a2
 8424 0a43 05       		.byte	0x5
 8425 0a44 03       		.byte	0x3
 8426 0a45 AC000000 		.4byte	xSuspendedTaskList
 8427 0a49 1C       		.uleb128 0x1c
 8428 0a4a 34020000 		.4byte	.LASF105
 8429 0a4e 01       		.byte	0x1
 8430 0a4f 9C       		.byte	0x9c
 8431 0a50 8D010000 		.4byte	0x18d
 8432 0a54 05       		.byte	0x5
 8433 0a55 03       		.byte	0x3
 8434 0a56 C0000000 		.4byte	uxCurrentNumberOfTasks
 8435 0a5a 1C       		.uleb128 0x1c
 8436 0a5b 5A000000 		.4byte	.LASF106
 8437 0a5f 01       		.byte	0x1
 8438 0a60 9D       		.byte	0x9d
 8439 0a61 6B0A0000 		.4byte	0xa6b
 8440 0a65 05       		.byte	0x5
 8441 0a66 03       		.byte	0x3
 8442 0a67 C4000000 		.4byte	xTickCount
 8443 0a6b 0D       		.uleb128 0xd
 8444 0a6c 9C000000 		.4byte	0x9c
 8445 0a70 1C       		.uleb128 0x1c
 8446 0a71 65000000 		.4byte	.LASF107
 8447 0a75 01       		.byte	0x1
 8448 0a76 9E       		.byte	0x9e
 8449 0a77 71000000 		.4byte	0x71
 8450 0a7b 05       		.byte	0x5
 8451 0a7c 03       		.byte	0x3
 8452 0a7d C8000000 		.4byte	uxTopUsedPriority
 8453 0a81 1C       		.uleb128 0x1c
 8454 0a82 D1010000 		.4byte	.LASF108
 8455 0a86 01       		.byte	0x1
 8456 0a87 9F       		.byte	0x9f
 8457 0a88 8D010000 		.4byte	0x18d
 8458 0a8c 05       		.byte	0x5
 8459 0a8d 03       		.byte	0x3
ARM GAS  /tmp/cck0uY6y.s 			page 267


 8460 0a8e CC000000 		.4byte	uxTopReadyPriority
 8461 0a92 1C       		.uleb128 0x1c
 8462 0a93 E3000000 		.4byte	.LASF109
 8463 0a97 01       		.byte	0x1
 8464 0a98 A0       		.byte	0xa0
 8465 0a99 A30A0000 		.4byte	0xaa3
 8466 0a9d 05       		.byte	0x5
 8467 0a9e 03       		.byte	0x3
 8468 0a9f D0000000 		.4byte	xSchedulerRunning
 8469 0aa3 0D       		.uleb128 0xd
 8470 0aa4 67000000 		.4byte	0x67
 8471 0aa8 1C       		.uleb128 0x1c
 8472 0aa9 4E070000 		.4byte	.LASF110
 8473 0aad 01       		.byte	0x1
 8474 0aae A1       		.byte	0xa1
 8475 0aaf 8D010000 		.4byte	0x18d
 8476 0ab3 05       		.byte	0x5
 8477 0ab4 03       		.byte	0x3
 8478 0ab5 D4000000 		.4byte	uxSchedulerSuspended
 8479 0ab9 1C       		.uleb128 0x1c
 8480 0aba 31010000 		.4byte	.LASF111
 8481 0abe 01       		.byte	0x1
 8482 0abf A2       		.byte	0xa2
 8483 0ac0 8D010000 		.4byte	0x18d
 8484 0ac4 05       		.byte	0x5
 8485 0ac5 03       		.byte	0x3
 8486 0ac6 D8000000 		.4byte	uxMissedTicks
 8487 0aca 1C       		.uleb128 0x1c
 8488 0acb 91020000 		.4byte	.LASF112
 8489 0acf 01       		.byte	0x1
 8490 0ad0 A3       		.byte	0xa3
 8491 0ad1 A30A0000 		.4byte	0xaa3
 8492 0ad5 05       		.byte	0x5
 8493 0ad6 03       		.byte	0x3
 8494 0ad7 DC000000 		.4byte	xMissedYield
 8495 0adb 1C       		.uleb128 0x1c
 8496 0adc 3D060000 		.4byte	.LASF113
 8497 0ae0 01       		.byte	0x1
 8498 0ae1 A4       		.byte	0xa4
 8499 0ae2 A30A0000 		.4byte	0xaa3
 8500 0ae6 05       		.byte	0x5
 8501 0ae7 03       		.byte	0x3
 8502 0ae8 E0000000 		.4byte	xNumOfOverflows
 8503 0aec 1C       		.uleb128 0x1c
 8504 0aed 14020000 		.4byte	.LASF114
 8505 0af1 01       		.byte	0x1
 8506 0af2 A5       		.byte	0xa5
 8507 0af3 71000000 		.4byte	0x71
 8508 0af7 05       		.byte	0x5
 8509 0af8 03       		.byte	0x3
 8510 0af9 E4000000 		.4byte	uxTaskNumber
 8511 0afd 1D       		.uleb128 0x1d
 8512 0afe EB050000 		.4byte	.LASF115
 8513 0b02 1C       		.byte	0x1c
 8514 0b03 CE06     		.2byte	0x6ce
 8515 0b05 0B0B0000 		.4byte	0xb0b
 8516 0b09 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 268


 8517 0b0a 01       		.byte	0x1
 8518 0b0b 0D       		.uleb128 0xd
 8519 0b0c 52000000 		.4byte	0x52
 8520 0b10 1E       		.uleb128 0x1e
 8521 0b11 0E040000 		.4byte	.LASF116
 8522 0b15 01       		.byte	0x1
 8523 0b16 83       		.byte	0x83
 8524 0b17 220B0000 		.4byte	0xb22
 8525 0b1b 01       		.byte	0x1
 8526 0b1c 05       		.byte	0x5
 8527 0b1d 03       		.byte	0x3
 8528 0b1e 00000000 		.4byte	pxCurrentTCB
 8529 0b22 0D       		.uleb128 0xd
 8530 0b23 AA030000 		.4byte	0x3aa
 8531 0b27 00       		.byte	0x0
 8532              		.section	.debug_abbrev
 8533 0000 01       		.uleb128 0x1
 8534 0001 11       		.uleb128 0x11
 8535 0002 01       		.byte	0x1
 8536 0003 25       		.uleb128 0x25
 8537 0004 0E       		.uleb128 0xe
 8538 0005 13       		.uleb128 0x13
 8539 0006 0B       		.uleb128 0xb
 8540 0007 03       		.uleb128 0x3
 8541 0008 0E       		.uleb128 0xe
 8542 0009 1B       		.uleb128 0x1b
 8543 000a 0E       		.uleb128 0xe
 8544 000b 11       		.uleb128 0x11
 8545 000c 01       		.uleb128 0x1
 8546 000d 52       		.uleb128 0x52
 8547 000e 01       		.uleb128 0x1
 8548 000f 55       		.uleb128 0x55
 8549 0010 06       		.uleb128 0x6
 8550 0011 10       		.uleb128 0x10
 8551 0012 06       		.uleb128 0x6
 8552 0013 43       		.uleb128 0x43
 8553 0014 06       		.uleb128 0x6
 8554 0015 00       		.byte	0x0
 8555 0016 00       		.byte	0x0
 8556 0017 02       		.uleb128 0x2
 8557 0018 24       		.uleb128 0x24
 8558 0019 00       		.byte	0x0
 8559 001a 0B       		.uleb128 0xb
 8560 001b 0B       		.uleb128 0xb
 8561 001c 3E       		.uleb128 0x3e
 8562 001d 0B       		.uleb128 0xb
 8563 001e 03       		.uleb128 0x3
 8564 001f 0E       		.uleb128 0xe
 8565 0020 00       		.byte	0x0
 8566 0021 00       		.byte	0x0
 8567 0022 03       		.uleb128 0x3
 8568 0023 0F       		.uleb128 0xf
 8569 0024 00       		.byte	0x0
 8570 0025 0B       		.uleb128 0xb
 8571 0026 0B       		.uleb128 0xb
 8572 0027 00       		.byte	0x0
 8573 0028 00       		.byte	0x0
ARM GAS  /tmp/cck0uY6y.s 			page 269


 8574 0029 04       		.uleb128 0x4
 8575 002a 24       		.uleb128 0x24
 8576 002b 00       		.byte	0x0
 8577 002c 0B       		.uleb128 0xb
 8578 002d 0B       		.uleb128 0xb
 8579 002e 3E       		.uleb128 0x3e
 8580 002f 0B       		.uleb128 0xb
 8581 0030 03       		.uleb128 0x3
 8582 0031 08       		.uleb128 0x8
 8583 0032 00       		.byte	0x0
 8584 0033 00       		.byte	0x0
 8585 0034 05       		.uleb128 0x5
 8586 0035 24       		.uleb128 0x24
 8587 0036 00       		.byte	0x0
 8588 0037 0B       		.uleb128 0xb
 8589 0038 0B       		.uleb128 0xb
 8590 0039 3E       		.uleb128 0x3e
 8591 003a 0B       		.uleb128 0xb
 8592 003b 00       		.byte	0x0
 8593 003c 00       		.byte	0x0
 8594 003d 06       		.uleb128 0x6
 8595 003e 16       		.uleb128 0x16
 8596 003f 00       		.byte	0x0
 8597 0040 03       		.uleb128 0x3
 8598 0041 0E       		.uleb128 0xe
 8599 0042 3A       		.uleb128 0x3a
 8600 0043 0B       		.uleb128 0xb
 8601 0044 3B       		.uleb128 0x3b
 8602 0045 0B       		.uleb128 0xb
 8603 0046 49       		.uleb128 0x49
 8604 0047 13       		.uleb128 0x13
 8605 0048 00       		.byte	0x0
 8606 0049 00       		.byte	0x0
 8607 004a 07       		.uleb128 0x7
 8608 004b 0F       		.uleb128 0xf
 8609 004c 00       		.byte	0x0
 8610 004d 0B       		.uleb128 0xb
 8611 004e 0B       		.uleb128 0xb
 8612 004f 49       		.uleb128 0x49
 8613 0050 13       		.uleb128 0x13
 8614 0051 00       		.byte	0x0
 8615 0052 00       		.byte	0x0
 8616 0053 08       		.uleb128 0x8
 8617 0054 15       		.uleb128 0x15
 8618 0055 01       		.byte	0x1
 8619 0056 27       		.uleb128 0x27
 8620 0057 0C       		.uleb128 0xc
 8621 0058 01       		.uleb128 0x1
 8622 0059 13       		.uleb128 0x13
 8623 005a 00       		.byte	0x0
 8624 005b 00       		.byte	0x0
 8625 005c 09       		.uleb128 0x9
 8626 005d 05       		.uleb128 0x5
 8627 005e 00       		.byte	0x0
 8628 005f 49       		.uleb128 0x49
 8629 0060 13       		.uleb128 0x13
 8630 0061 00       		.byte	0x0
ARM GAS  /tmp/cck0uY6y.s 			page 270


 8631 0062 00       		.byte	0x0
 8632 0063 0A       		.uleb128 0xa
 8633 0064 13       		.uleb128 0x13
 8634 0065 01       		.byte	0x1
 8635 0066 03       		.uleb128 0x3
 8636 0067 0E       		.uleb128 0xe
 8637 0068 0B       		.uleb128 0xb
 8638 0069 0B       		.uleb128 0xb
 8639 006a 3A       		.uleb128 0x3a
 8640 006b 0B       		.uleb128 0xb
 8641 006c 3B       		.uleb128 0x3b
 8642 006d 0B       		.uleb128 0xb
 8643 006e 01       		.uleb128 0x1
 8644 006f 13       		.uleb128 0x13
 8645 0070 00       		.byte	0x0
 8646 0071 00       		.byte	0x0
 8647 0072 0B       		.uleb128 0xb
 8648 0073 0D       		.uleb128 0xd
 8649 0074 00       		.byte	0x0
 8650 0075 03       		.uleb128 0x3
 8651 0076 0E       		.uleb128 0xe
 8652 0077 3A       		.uleb128 0x3a
 8653 0078 0B       		.uleb128 0xb
 8654 0079 3B       		.uleb128 0x3b
 8655 007a 0B       		.uleb128 0xb
 8656 007b 49       		.uleb128 0x49
 8657 007c 13       		.uleb128 0x13
 8658 007d 38       		.uleb128 0x38
 8659 007e 0A       		.uleb128 0xa
 8660 007f 00       		.byte	0x0
 8661 0080 00       		.byte	0x0
 8662 0081 0C       		.uleb128 0xc
 8663 0082 35       		.uleb128 0x35
 8664 0083 00       		.byte	0x0
 8665 0084 03       		.uleb128 0x3
 8666 0085 0E       		.uleb128 0xe
 8667 0086 49       		.uleb128 0x49
 8668 0087 13       		.uleb128 0x13
 8669 0088 00       		.byte	0x0
 8670 0089 00       		.byte	0x0
 8671 008a 0D       		.uleb128 0xd
 8672 008b 35       		.uleb128 0x35
 8673 008c 00       		.byte	0x0
 8674 008d 49       		.uleb128 0x49
 8675 008e 13       		.uleb128 0x13
 8676 008f 00       		.byte	0x0
 8677 0090 00       		.byte	0x0
 8678 0091 0E       		.uleb128 0xe
 8679 0092 26       		.uleb128 0x26
 8680 0093 00       		.byte	0x0
 8681 0094 49       		.uleb128 0x49
 8682 0095 13       		.uleb128 0x13
 8683 0096 00       		.byte	0x0
 8684 0097 00       		.byte	0x0
 8685 0098 0F       		.uleb128 0xf
 8686 0099 01       		.uleb128 0x1
 8687 009a 01       		.byte	0x1
ARM GAS  /tmp/cck0uY6y.s 			page 271


 8688 009b 49       		.uleb128 0x49
 8689 009c 13       		.uleb128 0x13
 8690 009d 01       		.uleb128 0x1
 8691 009e 13       		.uleb128 0x13
 8692 009f 00       		.byte	0x0
 8693 00a0 00       		.byte	0x0
 8694 00a1 10       		.uleb128 0x10
 8695 00a2 21       		.uleb128 0x21
 8696 00a3 00       		.byte	0x0
 8697 00a4 49       		.uleb128 0x49
 8698 00a5 13       		.uleb128 0x13
 8699 00a6 2F       		.uleb128 0x2f
 8700 00a7 0B       		.uleb128 0xb
 8701 00a8 00       		.byte	0x0
 8702 00a9 00       		.byte	0x0
 8703 00aa 11       		.uleb128 0x11
 8704 00ab 2E       		.uleb128 0x2e
 8705 00ac 01       		.byte	0x1
 8706 00ad 3F       		.uleb128 0x3f
 8707 00ae 0C       		.uleb128 0xc
 8708 00af 03       		.uleb128 0x3
 8709 00b0 0E       		.uleb128 0xe
 8710 00b1 3A       		.uleb128 0x3a
 8711 00b2 0B       		.uleb128 0xb
 8712 00b3 3B       		.uleb128 0x3b
 8713 00b4 05       		.uleb128 0x5
 8714 00b5 27       		.uleb128 0x27
 8715 00b6 0C       		.uleb128 0xc
 8716 00b7 49       		.uleb128 0x49
 8717 00b8 13       		.uleb128 0x13
 8718 00b9 11       		.uleb128 0x11
 8719 00ba 01       		.uleb128 0x1
 8720 00bb 12       		.uleb128 0x12
 8721 00bc 01       		.uleb128 0x1
 8722 00bd 40       		.uleb128 0x40
 8723 00be 06       		.uleb128 0x6
 8724 00bf 01       		.uleb128 0x1
 8725 00c0 13       		.uleb128 0x13
 8726 00c1 00       		.byte	0x0
 8727 00c2 00       		.byte	0x0
 8728 00c3 12       		.uleb128 0x12
 8729 00c4 05       		.uleb128 0x5
 8730 00c5 00       		.byte	0x0
 8731 00c6 03       		.uleb128 0x3
 8732 00c7 0E       		.uleb128 0xe
 8733 00c8 3A       		.uleb128 0x3a
 8734 00c9 0B       		.uleb128 0xb
 8735 00ca 3B       		.uleb128 0x3b
 8736 00cb 05       		.uleb128 0x5
 8737 00cc 49       		.uleb128 0x49
 8738 00cd 13       		.uleb128 0x13
 8739 00ce 02       		.uleb128 0x2
 8740 00cf 0A       		.uleb128 0xa
 8741 00d0 00       		.byte	0x0
 8742 00d1 00       		.byte	0x0
 8743 00d2 13       		.uleb128 0x13
 8744 00d3 34       		.uleb128 0x34
ARM GAS  /tmp/cck0uY6y.s 			page 272


 8745 00d4 00       		.byte	0x0
 8746 00d5 03       		.uleb128 0x3
 8747 00d6 0E       		.uleb128 0xe
 8748 00d7 3A       		.uleb128 0x3a
 8749 00d8 0B       		.uleb128 0xb
 8750 00d9 3B       		.uleb128 0x3b
 8751 00da 05       		.uleb128 0x5
 8752 00db 49       		.uleb128 0x49
 8753 00dc 13       		.uleb128 0x13
 8754 00dd 02       		.uleb128 0x2
 8755 00de 0A       		.uleb128 0xa
 8756 00df 00       		.byte	0x0
 8757 00e0 00       		.byte	0x0
 8758 00e1 14       		.uleb128 0x14
 8759 00e2 0B       		.uleb128 0xb
 8760 00e3 01       		.byte	0x1
 8761 00e4 11       		.uleb128 0x11
 8762 00e5 01       		.uleb128 0x1
 8763 00e6 12       		.uleb128 0x12
 8764 00e7 01       		.uleb128 0x1
 8765 00e8 00       		.byte	0x0
 8766 00e9 00       		.byte	0x0
 8767 00ea 15       		.uleb128 0x15
 8768 00eb 2E       		.uleb128 0x2e
 8769 00ec 01       		.byte	0x1
 8770 00ed 3F       		.uleb128 0x3f
 8771 00ee 0C       		.uleb128 0xc
 8772 00ef 03       		.uleb128 0x3
 8773 00f0 0E       		.uleb128 0xe
 8774 00f1 3A       		.uleb128 0x3a
 8775 00f2 0B       		.uleb128 0xb
 8776 00f3 3B       		.uleb128 0x3b
 8777 00f4 05       		.uleb128 0x5
 8778 00f5 27       		.uleb128 0x27
 8779 00f6 0C       		.uleb128 0xc
 8780 00f7 11       		.uleb128 0x11
 8781 00f8 01       		.uleb128 0x1
 8782 00f9 12       		.uleb128 0x12
 8783 00fa 01       		.uleb128 0x1
 8784 00fb 40       		.uleb128 0x40
 8785 00fc 06       		.uleb128 0x6
 8786 00fd 01       		.uleb128 0x1
 8787 00fe 13       		.uleb128 0x13
 8788 00ff 00       		.byte	0x0
 8789 0100 00       		.byte	0x0
 8790 0101 16       		.uleb128 0x16
 8791 0102 2E       		.uleb128 0x2e
 8792 0103 00       		.byte	0x0
 8793 0104 3F       		.uleb128 0x3f
 8794 0105 0C       		.uleb128 0xc
 8795 0106 03       		.uleb128 0x3
 8796 0107 0E       		.uleb128 0xe
 8797 0108 3A       		.uleb128 0x3a
 8798 0109 0B       		.uleb128 0xb
 8799 010a 3B       		.uleb128 0x3b
 8800 010b 05       		.uleb128 0x5
 8801 010c 27       		.uleb128 0x27
ARM GAS  /tmp/cck0uY6y.s 			page 273


 8802 010d 0C       		.uleb128 0xc
 8803 010e 11       		.uleb128 0x11
 8804 010f 01       		.uleb128 0x1
 8805 0110 12       		.uleb128 0x12
 8806 0111 01       		.uleb128 0x1
 8807 0112 40       		.uleb128 0x40
 8808 0113 06       		.uleb128 0x6
 8809 0114 00       		.byte	0x0
 8810 0115 00       		.byte	0x0
 8811 0116 17       		.uleb128 0x17
 8812 0117 2E       		.uleb128 0x2e
 8813 0118 00       		.byte	0x0
 8814 0119 3F       		.uleb128 0x3f
 8815 011a 0C       		.uleb128 0xc
 8816 011b 03       		.uleb128 0x3
 8817 011c 0E       		.uleb128 0xe
 8818 011d 3A       		.uleb128 0x3a
 8819 011e 0B       		.uleb128 0xb
 8820 011f 3B       		.uleb128 0x3b
 8821 0120 05       		.uleb128 0x5
 8822 0121 27       		.uleb128 0x27
 8823 0122 0C       		.uleb128 0xc
 8824 0123 49       		.uleb128 0x49
 8825 0124 13       		.uleb128 0x13
 8826 0125 11       		.uleb128 0x11
 8827 0126 01       		.uleb128 0x1
 8828 0127 12       		.uleb128 0x12
 8829 0128 01       		.uleb128 0x1
 8830 0129 40       		.uleb128 0x40
 8831 012a 06       		.uleb128 0x6
 8832 012b 00       		.byte	0x0
 8833 012c 00       		.byte	0x0
 8834 012d 18       		.uleb128 0x18
 8835 012e 0B       		.uleb128 0xb
 8836 012f 01       		.byte	0x1
 8837 0130 11       		.uleb128 0x11
 8838 0131 01       		.uleb128 0x1
 8839 0132 12       		.uleb128 0x12
 8840 0133 01       		.uleb128 0x1
 8841 0134 01       		.uleb128 0x1
 8842 0135 13       		.uleb128 0x13
 8843 0136 00       		.byte	0x0
 8844 0137 00       		.byte	0x0
 8845 0138 19       		.uleb128 0x19
 8846 0139 2E       		.uleb128 0x2e
 8847 013a 01       		.byte	0x1
 8848 013b 03       		.uleb128 0x3
 8849 013c 0E       		.uleb128 0xe
 8850 013d 3A       		.uleb128 0x3a
 8851 013e 0B       		.uleb128 0xb
 8852 013f 3B       		.uleb128 0x3b
 8853 0140 05       		.uleb128 0x5
 8854 0141 27       		.uleb128 0x27
 8855 0142 0C       		.uleb128 0xc
 8856 0143 11       		.uleb128 0x11
 8857 0144 01       		.uleb128 0x1
 8858 0145 12       		.uleb128 0x12
ARM GAS  /tmp/cck0uY6y.s 			page 274


 8859 0146 01       		.uleb128 0x1
 8860 0147 40       		.uleb128 0x40
 8861 0148 06       		.uleb128 0x6
 8862 0149 01       		.uleb128 0x1
 8863 014a 13       		.uleb128 0x13
 8864 014b 00       		.byte	0x0
 8865 014c 00       		.byte	0x0
 8866 014d 1A       		.uleb128 0x1a
 8867 014e 2E       		.uleb128 0x2e
 8868 014f 00       		.byte	0x0
 8869 0150 03       		.uleb128 0x3
 8870 0151 0E       		.uleb128 0xe
 8871 0152 3A       		.uleb128 0x3a
 8872 0153 0B       		.uleb128 0xb
 8873 0154 3B       		.uleb128 0x3b
 8874 0155 05       		.uleb128 0x5
 8875 0156 27       		.uleb128 0x27
 8876 0157 0C       		.uleb128 0xc
 8877 0158 11       		.uleb128 0x11
 8878 0159 01       		.uleb128 0x1
 8879 015a 12       		.uleb128 0x12
 8880 015b 01       		.uleb128 0x1
 8881 015c 40       		.uleb128 0x40
 8882 015d 06       		.uleb128 0x6
 8883 015e 00       		.byte	0x0
 8884 015f 00       		.byte	0x0
 8885 0160 1B       		.uleb128 0x1b
 8886 0161 2E       		.uleb128 0x2e
 8887 0162 01       		.byte	0x1
 8888 0163 03       		.uleb128 0x3
 8889 0164 0E       		.uleb128 0xe
 8890 0165 3A       		.uleb128 0x3a
 8891 0166 0B       		.uleb128 0xb
 8892 0167 3B       		.uleb128 0x3b
 8893 0168 05       		.uleb128 0x5
 8894 0169 27       		.uleb128 0x27
 8895 016a 0C       		.uleb128 0xc
 8896 016b 49       		.uleb128 0x49
 8897 016c 13       		.uleb128 0x13
 8898 016d 11       		.uleb128 0x11
 8899 016e 01       		.uleb128 0x1
 8900 016f 12       		.uleb128 0x12
 8901 0170 01       		.uleb128 0x1
 8902 0171 40       		.uleb128 0x40
 8903 0172 06       		.uleb128 0x6
 8904 0173 01       		.uleb128 0x1
 8905 0174 13       		.uleb128 0x13
 8906 0175 00       		.byte	0x0
 8907 0176 00       		.byte	0x0
 8908 0177 1C       		.uleb128 0x1c
 8909 0178 34       		.uleb128 0x34
 8910 0179 00       		.byte	0x0
 8911 017a 03       		.uleb128 0x3
 8912 017b 0E       		.uleb128 0xe
 8913 017c 3A       		.uleb128 0x3a
 8914 017d 0B       		.uleb128 0xb
 8915 017e 3B       		.uleb128 0x3b
ARM GAS  /tmp/cck0uY6y.s 			page 275


 8916 017f 0B       		.uleb128 0xb
 8917 0180 49       		.uleb128 0x49
 8918 0181 13       		.uleb128 0x13
 8919 0182 02       		.uleb128 0x2
 8920 0183 0A       		.uleb128 0xa
 8921 0184 00       		.byte	0x0
 8922 0185 00       		.byte	0x0
 8923 0186 1D       		.uleb128 0x1d
 8924 0187 34       		.uleb128 0x34
 8925 0188 00       		.byte	0x0
 8926 0189 03       		.uleb128 0x3
 8927 018a 0E       		.uleb128 0xe
 8928 018b 3A       		.uleb128 0x3a
 8929 018c 0B       		.uleb128 0xb
 8930 018d 3B       		.uleb128 0x3b
 8931 018e 05       		.uleb128 0x5
 8932 018f 49       		.uleb128 0x49
 8933 0190 13       		.uleb128 0x13
 8934 0191 3F       		.uleb128 0x3f
 8935 0192 0C       		.uleb128 0xc
 8936 0193 3C       		.uleb128 0x3c
 8937 0194 0C       		.uleb128 0xc
 8938 0195 00       		.byte	0x0
 8939 0196 00       		.byte	0x0
 8940 0197 1E       		.uleb128 0x1e
 8941 0198 34       		.uleb128 0x34
 8942 0199 00       		.byte	0x0
 8943 019a 03       		.uleb128 0x3
 8944 019b 0E       		.uleb128 0xe
 8945 019c 3A       		.uleb128 0x3a
 8946 019d 0B       		.uleb128 0xb
 8947 019e 3B       		.uleb128 0x3b
 8948 019f 0B       		.uleb128 0xb
 8949 01a0 49       		.uleb128 0x49
 8950 01a1 13       		.uleb128 0x13
 8951 01a2 3F       		.uleb128 0x3f
 8952 01a3 0C       		.uleb128 0xc
 8953 01a4 02       		.uleb128 0x2
 8954 01a5 0A       		.uleb128 0xa
 8955 01a6 00       		.byte	0x0
 8956 01a7 00       		.byte	0x0
 8957 01a8 00       		.byte	0x0
 8958              		.section	.debug_pubnames,"",%progbits
 8959 0000 F1010000 		.4byte	0x1f1
 8960 0004 0200     		.2byte	0x2
 8961 0006 00000000 		.4byte	.Ldebug_info0
 8962 000a 280B0000 		.4byte	0xb28
 8963 000e C6020000 		.4byte	0x2c6
 8964 0012 78546173 		.ascii	"xTaskGenericCreate\000"
 8964      6B47656E 
 8964      65726963 
 8964      43726561 
 8964      746500
 8965 0025 B0030000 		.4byte	0x3b0
 8966 0029 76546173 		.ascii	"vTaskDelayUntil\000"
 8966      6B44656C 
 8966      6179556E 
ARM GAS  /tmp/cck0uY6y.s 			page 276


 8966      74696C00 
 8967 0039 21040000 		.4byte	0x421
 8968 003d 76546173 		.ascii	"vTaskDelay\000"
 8968      6B44656C 
 8968      617900
 8969 0048 69040000 		.4byte	0x469
 8970 004c 76546173 		.ascii	"vTaskPrioritySet\000"
 8970      6B507269 
 8970      6F726974 
 8970      79536574 
 8970      00
 8971 005d CF040000 		.4byte	0x4cf
 8972 0061 76546173 		.ascii	"vTaskSuspend\000"
 8972      6B537573 
 8972      70656E64 
 8972      00
 8973 006e 08050000 		.4byte	0x508
 8974 0072 78546173 		.ascii	"xTaskIsTaskSuspended\000"
 8974      6B497354 
 8974      61736B53 
 8974      75737065 
 8974      6E646564 
 8975 0087 64050000 		.4byte	0x564
 8976 008b 76546173 		.ascii	"vTaskResume\000"
 8976      6B526573 
 8976      756D6500 
 8977 0097 9D050000 		.4byte	0x59d
 8978 009b 78546173 		.ascii	"xTaskResumeFromISR\000"
 8978      6B526573 
 8978      756D6546 
 8978      726F6D49 
 8978      535200
 8979 00ae E9050000 		.4byte	0x5e9
 8980 00b2 76546173 		.ascii	"vTaskStartScheduler\000"
 8980      6B537461 
 8980      72745363 
 8980      68656475 
 8980      6C657200 
 8981 00c6 13060000 		.4byte	0x613
 8982 00ca 76546173 		.ascii	"vTaskEndScheduler\000"
 8982      6B456E64 
 8982      53636865 
 8982      64756C65 
 8982      7200
 8983 00dc 29060000 		.4byte	0x629
 8984 00e0 76546173 		.ascii	"vTaskSuspendAll\000"
 8984      6B537573 
 8984      70656E64 
 8984      416C6C00 
 8985 00f0 3F060000 		.4byte	0x63f
 8986 00f4 78546173 		.ascii	"xTaskResumeAll\000"
 8986      6B526573 
 8986      756D6541 
 8986      6C6C00
 8987 0103 94060000 		.4byte	0x694
 8988 0107 78546173 		.ascii	"xTaskGetTickCount\000"
 8988      6B476574 
ARM GAS  /tmp/cck0uY6y.s 			page 277


 8988      5469636B 
 8988      436F756E 
 8988      7400
 8989 0119 C2060000 		.4byte	0x6c2
 8990 011d 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 8990      736B4765 
 8990      744E756D 
 8990      6265724F 
 8990      66546173 
 8991 0134 DC060000 		.4byte	0x6dc
 8992 0138 76546173 		.ascii	"vTaskIncrementTick\000"
 8992      6B496E63 
 8992      72656D65 
 8992      6E745469 
 8992      636B00
 8993 014b 32070000 		.4byte	0x732
 8994 014f 76546173 		.ascii	"vTaskSwitchContext\000"
 8994      6B537769 
 8994      74636843 
 8994      6F6E7465 
 8994      787400
 8995 0162 6B070000 		.4byte	0x76b
 8996 0166 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 8996      6B506C61 
 8996      63654F6E 
 8996      4576656E 
 8996      744C6973 
 8997 017c C3070000 		.4byte	0x7c3
 8998 0180 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 8998      6B52656D 
 8998      6F766546 
 8998      726F6D45 
 8998      76656E74 
 8999 0199 0F080000 		.4byte	0x80f
 9000 019d 76546173 		.ascii	"vTaskSetTimeOutState\000"
 9000      6B536574 
 9000      54696D65 
 9000      4F757453 
 9000      74617465 
 9001 01b2 44080000 		.4byte	0x844
 9002 01b6 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 9002      6B436865 
 9002      636B466F 
 9002      7254696D 
 9002      654F7574 
 9003 01cb 90080000 		.4byte	0x890
 9004 01cf 76546173 		.ascii	"vTaskMissedYield\000"
 9004      6B4D6973 
 9004      73656459 
 9004      69656C64 
 9004      00
 9005 01e0 100B0000 		.4byte	0xb10
 9006 01e4 70784375 		.ascii	"pxCurrentTCB\000"
 9006      7272656E 
 9006      74544342 
 9006      00
 9007 01f1 00000000 		.4byte	0x0
ARM GAS  /tmp/cck0uY6y.s 			page 278


 9008              		.section	.debug_aranges,"",%progbits
 9009 0000 E4000000 		.4byte	0xe4
 9010 0004 0200     		.2byte	0x2
 9011 0006 00000000 		.4byte	.Ldebug_info0
 9012 000a 04       		.byte	0x4
 9013 000b 00       		.byte	0x0
 9014 000c 0000     		.2byte	0x0
 9015 000e 0000     		.2byte	0x0
 9016 0010 00000000 		.4byte	.LFB29
 9017 0014 A0010000 		.4byte	.LFE29-.LFB29
 9018 0018 00000000 		.4byte	.LFB30
 9019 001c 14010000 		.4byte	.LFE30-.LFB30
 9020 0020 00000000 		.4byte	.LFB31
 9021 0024 B6000000 		.4byte	.LFE31-.LFB31
 9022 0028 00000000 		.4byte	.LFB32
 9023 002c 1E010000 		.4byte	.LFE32-.LFB32
 9024 0030 00000000 		.4byte	.LFB33
 9025 0034 82000000 		.4byte	.LFE33-.LFB33
 9026 0038 00000000 		.4byte	.LFB34
 9027 003c 4E000000 		.4byte	.LFE34-.LFB34
 9028 0040 00000000 		.4byte	.LFB35
 9029 0044 AC000000 		.4byte	.LFE35-.LFB35
 9030 0048 00000000 		.4byte	.LFB36
 9031 004c BE000000 		.4byte	.LFE36-.LFB36
 9032 0050 00000000 		.4byte	.LFB37
 9033 0054 7A000000 		.4byte	.LFE37-.LFB37
 9034 0058 00000000 		.4byte	.LFB38
 9035 005c 22000000 		.4byte	.LFE38-.LFB38
 9036 0060 00000000 		.4byte	.LFB39
 9037 0064 22000000 		.4byte	.LFE39-.LFB39
 9038 0068 00000000 		.4byte	.LFB40
 9039 006c 60010000 		.4byte	.LFE40-.LFB40
 9040 0070 00000000 		.4byte	.LFB41
 9041 0074 26000000 		.4byte	.LFE41-.LFB41
 9042 0078 00000000 		.4byte	.LFB42
 9043 007c 16000000 		.4byte	.LFE42-.LFB42
 9044 0080 00000000 		.4byte	.LFB43
 9045 0084 50010000 		.4byte	.LFE43-.LFB43
 9046 0088 00000000 		.4byte	.LFB44
 9047 008c CA000000 		.4byte	.LFE44-.LFB44
 9048 0090 00000000 		.4byte	.LFB45
 9049 0094 D2000000 		.4byte	.LFE45-.LFB45
 9050 0098 00000000 		.4byte	.LFB46
 9051 009c D2000000 		.4byte	.LFE46-.LFB46
 9052 00a0 00000000 		.4byte	.LFB47
 9053 00a4 2E000000 		.4byte	.LFE47-.LFB47
 9054 00a8 00000000 		.4byte	.LFB48
 9055 00ac A6000000 		.4byte	.LFE48-.LFB48
 9056 00b0 00000000 		.4byte	.LFB49
 9057 00b4 18000000 		.4byte	.LFE49-.LFB49
 9058 00b8 00000000 		.4byte	.LFB50
 9059 00bc 0E000000 		.4byte	.LFE50-.LFB50
 9060 00c0 00000000 		.4byte	.LFB51
 9061 00c4 76000000 		.4byte	.LFE51-.LFB51
 9062 00c8 00000000 		.4byte	.LFB52
 9063 00cc 98000000 		.4byte	.LFE52-.LFB52
 9064 00d0 00000000 		.4byte	.LFB53
ARM GAS  /tmp/cck0uY6y.s 			page 279


 9065 00d4 0A000000 		.4byte	.LFE53-.LFB53
 9066 00d8 00000000 		.4byte	.LFB54
 9067 00dc 6A000000 		.4byte	.LFE54-.LFB54
 9068 00e0 00000000 		.4byte	0x0
 9069 00e4 00000000 		.4byte	0x0
 9070              		.section	.debug_ranges,"",%progbits
 9071              	.Ldebug_ranges0:
 9072 0000 00000000 		.4byte	.Ltext0
 9073 0004 00000000 		.4byte	.Letext0
 9074 0008 00000000 		.4byte	.LFB29
 9075 000c A0010000 		.4byte	.LFE29
 9076 0010 00000000 		.4byte	.LFB30
 9077 0014 14010000 		.4byte	.LFE30
 9078 0018 00000000 		.4byte	.LFB31
 9079 001c B6000000 		.4byte	.LFE31
 9080 0020 00000000 		.4byte	.LFB32
 9081 0024 1E010000 		.4byte	.LFE32
 9082 0028 00000000 		.4byte	.LFB33
 9083 002c 82000000 		.4byte	.LFE33
 9084 0030 00000000 		.4byte	.LFB34
 9085 0034 4E000000 		.4byte	.LFE34
 9086 0038 00000000 		.4byte	.LFB35
 9087 003c AC000000 		.4byte	.LFE35
 9088 0040 00000000 		.4byte	.LFB36
 9089 0044 BE000000 		.4byte	.LFE36
 9090 0048 00000000 		.4byte	.LFB37
 9091 004c 7A000000 		.4byte	.LFE37
 9092 0050 00000000 		.4byte	.LFB38
 9093 0054 22000000 		.4byte	.LFE38
 9094 0058 00000000 		.4byte	.LFB39
 9095 005c 22000000 		.4byte	.LFE39
 9096 0060 00000000 		.4byte	.LFB40
 9097 0064 60010000 		.4byte	.LFE40
 9098 0068 00000000 		.4byte	.LFB41
 9099 006c 26000000 		.4byte	.LFE41
 9100 0070 00000000 		.4byte	.LFB42
 9101 0074 16000000 		.4byte	.LFE42
 9102 0078 00000000 		.4byte	.LFB43
 9103 007c 50010000 		.4byte	.LFE43
 9104 0080 00000000 		.4byte	.LFB44
 9105 0084 CA000000 		.4byte	.LFE44
 9106 0088 00000000 		.4byte	.LFB45
 9107 008c D2000000 		.4byte	.LFE45
 9108 0090 00000000 		.4byte	.LFB46
 9109 0094 D2000000 		.4byte	.LFE46
 9110 0098 00000000 		.4byte	.LFB47
 9111 009c 2E000000 		.4byte	.LFE47
 9112 00a0 00000000 		.4byte	.LFB48
 9113 00a4 A6000000 		.4byte	.LFE48
 9114 00a8 00000000 		.4byte	.LFB49
 9115 00ac 18000000 		.4byte	.LFE49
 9116 00b0 00000000 		.4byte	.LFB50
 9117 00b4 0E000000 		.4byte	.LFE50
 9118 00b8 00000000 		.4byte	.LFB51
 9119 00bc 76000000 		.4byte	.LFE51
 9120 00c0 00000000 		.4byte	.LFB52
 9121 00c4 98000000 		.4byte	.LFE52
ARM GAS  /tmp/cck0uY6y.s 			page 280


 9122 00c8 00000000 		.4byte	.LFB53
 9123 00cc 0A000000 		.4byte	.LFE53
 9124 00d0 00000000 		.4byte	.LFB54
 9125 00d4 6A000000 		.4byte	.LFE54
 9126 00d8 00000000 		.4byte	0x0
 9127 00dc 00000000 		.4byte	0x0
 9128              		.section	.debug_macinfo
 9129 a5b8 00       		.byte	0x0
 9130              		.section	.debug_str,"MS",%progbits,1
 9131              	.LASF86:
 9132 0000 70784576 		.ascii	"pxEventList\000"
 9132      656E744C 
 9132      69737400 
 9133              	.LASF69:
 9134 000c 78546173 		.ascii	"xTaskGenericCreate\000"
 9134      6B47656E 
 9134      65726963 
 9134      43726561 
 9134      746500
 9135              	.LASF50:
 9136 001f 78526567 		.ascii	"xRegions\000"
 9136      696F6E73 
 9136      00
 9137              	.LASF95:
 9138 0028 70727649 		.ascii	"prvIdleTask\000"
 9138      646C6554 
 9138      61736B00 
 9139              	.LASF82:
 9140 0034 70785465 		.ascii	"pxTemp\000"
 9140      6D7000
 9141              	.LASF38:
 9142 003b 7847656E 		.ascii	"xGenericListItem\000"
 9142      65726963 
 9142      4C697374 
 9142      4974656D 
 9142      00
 9143              	.LASF32:
 9144 004c 70764261 		.ascii	"pvBaseAddress\000"
 9144      73654164 
 9144      64726573 
 9144      7300
 9145              	.LASF106:
 9146 005a 78546963 		.ascii	"xTickCount\000"
 9146      6B436F75 
 9146      6E7400
 9147              	.LASF107:
 9148 0065 7578546F 		.ascii	"uxTopUsedPriority\000"
 9148      70557365 
 9148      64507269 
 9148      6F726974 
 9148      7900
 9149              	.LASF27:
 9150 0077 7854494D 		.ascii	"xTIME_OUT\000"
 9150      455F4F55 
 9150      5400
 9151              	.LASF31:
 9152 0081 784D454D 		.ascii	"xMEMORY_REGION\000"
ARM GAS  /tmp/cck0uY6y.s 			page 281


 9152      4F52595F 
 9152      52454749 
 9152      4F4E00
 9153              	.LASF64:
 9154 0090 70785443 		.ascii	"pxTCB\000"
 9154      4200
 9155              	.LASF3:
 9156 0096 73686F72 		.ascii	"short int\000"
 9156      7420696E 
 9156      7400
 9157              	.LASF11:
 9158 00a0 706F7274 		.ascii	"portTickType\000"
 9158      5469636B 
 9158      54797065 
 9158      00
 9159              	.LASF103:
 9160 00ad 7850656E 		.ascii	"xPendingReadyList\000"
 9160      64696E67 
 9160      52656164 
 9160      794C6973 
 9160      7400
 9161              	.LASF14:
 9162 00bf 70785072 		.ascii	"pxPrevious\000"
 9162      6576696F 
 9162      757300
 9163              	.LASF63:
 9164 00ca 75784E65 		.ascii	"uxNewPriority\000"
 9164      77507269 
 9164      6F726974 
 9164      7900
 9165              	.LASF59:
 9166 00d8 76546173 		.ascii	"vTaskDelay\000"
 9166      6B44656C 
 9166      617900
 9167              	.LASF109:
 9168 00e3 78536368 		.ascii	"xSchedulerRunning\000"
 9168      6564756C 
 9168      65725275 
 9168      6E6E696E 
 9168      6700
 9169              	.LASF93:
 9170 00f5 70785469 		.ascii	"pxTicksToWait\000"
 9170      636B7354 
 9170      6F576169 
 9170      7400
 9171              	.LASF33:
 9172 0103 756C4C65 		.ascii	"ulLengthInBytes\000"
 9172      6E677468 
 9172      496E4279 
 9172      74657300 
 9173              	.LASF101:
 9174 0113 70784465 		.ascii	"pxDelayedTaskList\000"
 9174      6C617965 
 9174      64546173 
 9174      6B4C6973 
 9174      7400
 9175              	.LASF72:
ARM GAS  /tmp/cck0uY6y.s 			page 282


 9176 0125 76546173 		.ascii	"vTaskResume\000"
 9176      6B526573 
 9176      756D6500 
 9177              	.LASF111:
 9178 0131 75784D69 		.ascii	"uxMissedTicks\000"
 9178      73736564 
 9178      5469636B 
 9178      7300
 9179              	.LASF91:
 9180 013f 70785469 		.ascii	"pxTimeOut\000"
 9180      6D654F75 
 9180      7400
 9181              	.LASF121:
 9182 0149 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 9182      6865636B 
 9182      5461736B 
 9182      73576169 
 9182      74696E67 
 9183              	.LASF15:
 9184 0169 70764F77 		.ascii	"pvOwner\000"
 9184      6E657200 
 9185              	.LASF74:
 9186 0171 78546173 		.ascii	"xTaskResumeFromISR\000"
 9186      6B526573 
 9186      756D6546 
 9186      726F6D49 
 9186      535200
 9187              	.LASF37:
 9188 0184 7078546F 		.ascii	"pxTopOfStack\000"
 9188      704F6653 
 9188      7461636B 
 9188      00
 9189              	.LASF67:
 9190 0191 76546173 		.ascii	"vTaskSuspend\000"
 9190      6B537573 
 9190      70656E64 
 9190      00
 9191              	.LASF90:
 9192 019e 76546173 		.ascii	"vTaskSetTimeOutState\000"
 9192      6B536574 
 9192      54696D65 
 9192      4F757453 
 9192      74617465 
 9193              	.LASF60:
 9194 01b3 78546963 		.ascii	"xTicksToDelay\000"
 9194      6B73546F 
 9194      44656C61 
 9194      7900
 9195              	.LASF58:
 9196 01c1 76546173 		.ascii	"vTaskDelayUntil\000"
 9196      6B44656C 
 9196      6179556E 
 9196      74696C00 
 9197              	.LASF108:
 9198 01d1 7578546F 		.ascii	"uxTopReadyPriority\000"
 9198      70526561 
 9198      64795072 
ARM GAS  /tmp/cck0uY6y.s 			page 283


 9198      696F7269 
 9198      747900
 9199              	.LASF66:
 9200 01e4 78596965 		.ascii	"xYieldRequired\000"
 9200      6C645265 
 9200      71756972 
 9200      656400
 9201              	.LASF42:
 9202 01f3 70635461 		.ascii	"pcTaskName\000"
 9202      736B4E61 
 9202      6D6500
 9203              	.LASF68:
 9204 01fe 70785461 		.ascii	"pxTaskToSuspend\000"
 9204      736B546F 
 9204      53757370 
 9204      656E6400 
 9205              	.LASF71:
 9206 020e 78546173 		.ascii	"xTask\000"
 9206      6B00
 9207              	.LASF114:
 9208 0214 75785461 		.ascii	"uxTaskNumber\000"
 9208      736B4E75 
 9208      6D626572 
 9208      00
 9209              	.LASF81:
 9210 0221 76546173 		.ascii	"vTaskIncrementTick\000"
 9210      6B496E63 
 9210      72656D65 
 9210      6E745469 
 9210      636B00
 9211              	.LASF105:
 9212 0234 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 9212      7272656E 
 9212      744E756D 
 9212      6265724F 
 9212      66546173 
 9213              	.LASF53:
 9214 024b 70785072 		.ascii	"pxPreviousWakeTime\000"
 9214      6576696F 
 9214      75735761 
 9214      6B655469 
 9214      6D6500
 9215              	.LASF87:
 9216 025e 78546963 		.ascii	"xTicksToWait\000"
 9216      6B73546F 
 9216      57616974 
 9216      00
 9217              	.LASF5:
 9218 026b 6C6F6E67 		.ascii	"long long int\000"
 9218      206C6F6E 
 9218      6720696E 
 9218      7400
 9219              	.LASF10:
 9220 0279 70645441 		.ascii	"pdTASK_CODE\000"
 9220      534B5F43 
 9220      4F444500 
 9221              	.LASF84:
ARM GAS  /tmp/cck0uY6y.s 			page 284


 9222 0285 7078436F 		.ascii	"pxConstList\000"
 9222      6E73744C 
 9222      69737400 
 9223              	.LASF112:
 9224 0291 784D6973 		.ascii	"xMissedYield\000"
 9224      73656459 
 9224      69656C64 
 9224      00
 9225              	.LASF34:
 9226 029e 756C5061 		.ascii	"ulParameters\000"
 9226      72616D65 
 9226      74657273 
 9226      00
 9227              	.LASF75:
 9228 02ab 76546173 		.ascii	"vTaskStartScheduler\000"
 9228      6B537461 
 9228      72745363 
 9228      68656475 
 9228      6C657200 
 9229              	.LASF7:
 9230 02bf 6C6F6E67 		.ascii	"long int\000"
 9230      20696E74 
 9230      00
 9231              	.LASF21:
 9232 02c8 784C4953 		.ascii	"xLIST\000"
 9232      5400
 9233              	.LASF25:
 9234 02ce 784C6973 		.ascii	"xList\000"
 9234      7400
 9235              	.LASF30:
 9236 02d4 7854696D 		.ascii	"xTimeOutType\000"
 9236      654F7574 
 9236      54797065 
 9236      00
 9237              	.LASF97:
 9238 02e1 70727649 		.ascii	"prvInitialiseTaskLists\000"
 9238      6E697469 
 9238      616C6973 
 9238      65546173 
 9238      6B4C6973 
 9239              	.LASF36:
 9240 02f8 74736B54 		.ascii	"tskTaskControlBlock\000"
 9240      61736B43 
 9240      6F6E7472 
 9240      6F6C426C 
 9240      6F636B00 
 9241              	.LASF70:
 9242 030c 78546173 		.ascii	"xTaskIsTaskSuspended\000"
 9242      6B497354 
 9242      61736B53 
 9242      75737065 
 9242      6E646564 
 9243              	.LASF12:
 9244 0321 78497465 		.ascii	"xItemValue\000"
 9244      6D56616C 
 9244      756500
 9245              	.LASF73:
ARM GAS  /tmp/cck0uY6y.s 			page 285


 9246 032c 70785461 		.ascii	"pxTaskToResume\000"
 9246      736B546F 
 9246      52657375 
 9246      6D6500
 9247              	.LASF79:
 9248 033b 78546173 		.ascii	"xTaskGetTickCount\000"
 9248      6B476574 
 9248      5469636B 
 9248      436F756E 
 9248      7400
 9249              	.LASF92:
 9250 034d 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 9250      6B436865 
 9250      636B466F 
 9250      7254696D 
 9250      654F7574 
 9251              	.LASF46:
 9252 0362 75735374 		.ascii	"usStackDepth\000"
 9252      61636B44 
 9252      65707468 
 9252      00
 9253              	.LASF18:
 9254 036f 784C4953 		.ascii	"xLIST_ITEM\000"
 9254      545F4954 
 9254      454D00
 9255              	.LASF120:
 9256 037a 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 9256      736B4765 
 9256      744E756D 
 9256      6265724F 
 9256      66546173 
 9257              	.LASF118:
 9258 0391 46726565 		.ascii	"FreeRTOS/tasks.c\000"
 9258      52544F53 
 9258      2F746173 
 9258      6B732E63 
 9258      00
 9259              	.LASF80:
 9260 03a2 78546963 		.ascii	"xTicks\000"
 9260      6B7300
 9261              	.LASF20:
 9262 03a9 784D696E 		.ascii	"xMiniListItem\000"
 9262      694C6973 
 9262      74497465 
 9262      6D00
 9263              	.LASF2:
 9264 03b7 756E7369 		.ascii	"unsigned char\000"
 9264      676E6564 
 9264      20636861 
 9264      7200
 9265              	.LASF29:
 9266 03c5 7854696D 		.ascii	"xTimeOnEntering\000"
 9266      654F6E45 
 9266      6E746572 
 9266      696E6700 
 9267              	.LASF43:
 9268 03d5 74736B54 		.ascii	"tskTCB\000"
ARM GAS  /tmp/cck0uY6y.s 			page 286


 9268      434200
 9269              	.LASF28:
 9270 03dc 784F7665 		.ascii	"xOverflowCount\000"
 9270      72666C6F 
 9270      77436F75 
 9270      6E7400
 9271              	.LASF1:
 9272 03eb 7369676E 		.ascii	"signed char\000"
 9272      65642063 
 9272      68617200 
 9273              	.LASF6:
 9274 03f7 6C6F6E67 		.ascii	"long long unsigned int\000"
 9274      206C6F6E 
 9274      6720756E 
 9274      7369676E 
 9274      65642069 
 9275              	.LASF116:
 9276 040e 70784375 		.ascii	"pxCurrentTCB\000"
 9276      7272656E 
 9276      74544342 
 9276      00
 9277              	.LASF39:
 9278 041b 78457665 		.ascii	"xEventListItem\000"
 9278      6E744C69 
 9278      73744974 
 9278      656D00
 9279              	.LASF26:
 9280 042a 78546173 		.ascii	"xTaskHandle\000"
 9280      6B48616E 
 9280      646C6500 
 9281              	.LASF83:
 9282 0436 76546173 		.ascii	"vTaskSwitchContext\000"
 9282      6B537769 
 9282      74636843 
 9282      6F6E7465 
 9282      787400
 9283              	.LASF88:
 9284 0449 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 9284      6B52656D 
 9284      6F766546 
 9284      726F6D45 
 9284      76656E74 
 9285              	.LASF16:
 9286 0462 7076436F 		.ascii	"pvContainer\000"
 9286      6E746169 
 9286      6E657200 
 9287              	.LASF62:
 9288 046e 70785461 		.ascii	"pxTask\000"
 9288      736B00
 9289              	.LASF122:
 9290 0475 70727641 		.ascii	"prvAllocateTCBAndStack\000"
 9290      6C6C6F63 
 9290      61746554 
 9290      4342416E 
 9290      64537461 
 9291              	.LASF35:
 9292 048c 784D656D 		.ascii	"xMemoryRegion\000"
ARM GAS  /tmp/cck0uY6y.s 			page 287


 9292      6F727952 
 9292      6567696F 
 9292      6E00
 9293              	.LASF78:
 9294 049a 78546173 		.ascii	"xTaskResumeAll\000"
 9294      6B526573 
 9294      756D6541 
 9294      6C6C00
 9295              	.LASF4:
 9296 04a9 73686F72 		.ascii	"short unsigned int\000"
 9296      7420756E 
 9296      7369676E 
 9296      65642069 
 9296      6E7400
 9297              	.LASF104:
 9298 04bc 78537573 		.ascii	"xSuspendedTaskList\000"
 9298      70656E64 
 9298      65645461 
 9298      736B4C69 
 9298      737400
 9299              	.LASF9:
 9300 04cf 63686172 		.ascii	"char\000"
 9300      00
 9301              	.LASF57:
 9302 04d4 7853686F 		.ascii	"xShouldDelay\000"
 9302      756C6444 
 9302      656C6179 
 9302      00
 9303              	.LASF13:
 9304 04e1 70784E65 		.ascii	"pxNext\000"
 9304      787400
 9305              	.LASF119:
 9306 04e8 2F686F6D 		.ascii	"/home/cas/Documentos/casainho-projects/trunk/sdcard"
 9306      652F6361 
 9306      732F446F 
 9306      63756D65 
 9306      6E746F73 
 9307 051b 5F626174 		.ascii	"_bathroom_scale/firmware/beurer_bg_16/Firmware/Free"
 9307      68726F6F 
 9307      6D5F7363 
 9307      616C652F 
 9307      6669726D 
 9308 054e 52544F53 		.ascii	"RTOS-LPC17x8\000"
 9308      2D4C5043 
 9308      31377838 
 9308      00
 9309              	.LASF98:
 9310 055b 70785265 		.ascii	"pxReadyTasksLists\000"
 9310      61647954 
 9310      61736B73 
 9310      4C697374 
 9310      7300
 9311              	.LASF99:
 9312 056d 7844656C 		.ascii	"xDelayedTaskList1\000"
 9312      61796564 
 9312      5461736B 
 9312      4C697374 
ARM GAS  /tmp/cck0uY6y.s 			page 288


 9312      3100
 9313              	.LASF89:
 9314 057f 7078556E 		.ascii	"pxUnblockedTCB\000"
 9314      626C6F63 
 9314      6B656454 
 9314      434200
 9315              	.LASF100:
 9316 058e 7844656C 		.ascii	"xDelayedTaskList2\000"
 9316      61796564 
 9316      5461736B 
 9316      4C697374 
 9316      3200
 9317              	.LASF96:
 9318 05a0 70727649 		.ascii	"prvInitialiseTCBVariables\000"
 9318      6E697469 
 9318      616C6973 
 9318      65544342 
 9318      56617269 
 9319              	.LASF41:
 9320 05ba 70785374 		.ascii	"pxStack\000"
 9320      61636B00 
 9321              	.LASF8:
 9322 05c2 6C6F6E67 		.ascii	"long unsigned int\000"
 9322      20756E73 
 9322      69676E65 
 9322      6420696E 
 9322      7400
 9323              	.LASF45:
 9324 05d4 70634E61 		.ascii	"pcName\000"
 9324      6D6500
 9325              	.LASF56:
 9326 05db 78416C72 		.ascii	"xAlreadyYielded\000"
 9326      65616479 
 9326      5969656C 
 9326      64656400 
 9327              	.LASF115:
 9328 05eb 49544D5F 		.ascii	"ITM_RxBuffer\000"
 9328      52784275 
 9328      66666572 
 9328      00
 9329              	.LASF22:
 9330 05f8 75784E75 		.ascii	"uxNumberOfItems\000"
 9330      6D626572 
 9330      4F664974 
 9330      656D7300 
 9331              	.LASF17:
 9332 0608 784C6973 		.ascii	"xListItem\000"
 9332      74497465 
 9332      6D00
 9333              	.LASF61:
 9334 0612 76546173 		.ascii	"vTaskPrioritySet\000"
 9334      6B507269 
 9334      6F726974 
 9334      79536574 
 9334      00
 9335              	.LASF94:
 9336 0623 76546173 		.ascii	"vTaskMissedYield\000"
ARM GAS  /tmp/cck0uY6y.s 			page 289


 9336      6B4D6973 
 9336      73656459 
 9336      69656C64 
 9336      00
 9337              	.LASF24:
 9338 0634 784C6973 		.ascii	"xListEnd\000"
 9338      74456E64 
 9338      00
 9339              	.LASF113:
 9340 063d 784E756D 		.ascii	"xNumOfOverflows\000"
 9340      4F664F76 
 9340      6572666C 
 9340      6F777300 
 9341              	.LASF49:
 9342 064d 70757853 		.ascii	"puxStackBuffer\000"
 9342      7461636B 
 9342      42756666 
 9342      657200
 9343              	.LASF51:
 9344 065c 78526574 		.ascii	"xReturn\000"
 9344      75726E00 
 9345              	.LASF76:
 9346 0664 76546173 		.ascii	"vTaskEndScheduler\000"
 9346      6B456E64 
 9346      53636865 
 9346      64756C65 
 9346      7200
 9347              	.LASF48:
 9348 0676 70784372 		.ascii	"pxCreatedTask\000"
 9348      65617465 
 9348      64546173 
 9348      6B00
 9349              	.LASF44:
 9350 0684 70785461 		.ascii	"pxTaskCode\000"
 9350      736B436F 
 9350      646500
 9351              	.LASF54:
 9352 068f 7854696D 		.ascii	"xTimeIncrement\000"
 9352      65496E63 
 9352      72656D65 
 9352      6E7400
 9353              	.LASF47:
 9354 069e 70765061 		.ascii	"pvParameters\000"
 9354      72616D65 
 9354      74657273 
 9354      00
 9355              	.LASF117:
 9356 06ab 474E5520 		.ascii	"GNU C 4.4.1\000"
 9356      4320342E 
 9356      342E3100 
 9357              	.LASF65:
 9358 06b7 75784375 		.ascii	"uxCurrentPriority\000"
 9358      7272656E 
 9358      74507269 
 9358      6F726974 
 9358      7900
 9359              	.LASF52:
ARM GAS  /tmp/cck0uY6y.s 			page 290


 9360 06c9 70784E65 		.ascii	"pxNewTCB\000"
 9360      77544342 
 9360      00
 9361              	.LASF23:
 9362 06d2 7078496E 		.ascii	"pxIndex\000"
 9362      64657800 
 9363              	.LASF85:
 9364 06da 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 9364      6B506C61 
 9364      63654F6E 
 9364      4576656E 
 9364      744C6973 
 9365              	.LASF0:
 9366 06f0 756E7369 		.ascii	"unsigned int\000"
 9366      676E6564 
 9366      20696E74 
 9366      00
 9367              	.LASF19:
 9368 06fd 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 9368      495F4C49 
 9368      53545F49 
 9368      54454D00 
 9369              	.LASF102:
 9370 070d 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 9370      6572666C 
 9370      6F774465 
 9370      6C617965 
 9370      64546173 
 9371              	.LASF77:
 9372 0727 76546173 		.ascii	"vTaskSuspendAll\000"
 9372      6B537573 
 9372      70656E64 
 9372      416C6C00 
 9373              	.LASF55:
 9374 0737 7854696D 		.ascii	"xTimeToWake\000"
 9374      65546F57 
 9374      616B6500 
 9375              	.LASF40:
 9376 0743 75785072 		.ascii	"uxPriority\000"
 9376      696F7269 
 9376      747900
 9377              	.LASF110:
 9378 074e 75785363 		.ascii	"uxSchedulerSuspended\000"
 9378      68656475 
 9378      6C657253 
 9378      75737065 
 9378      6E646564 
 9379              		.ident	"GCC: (Sourcery G++ Lite 2009q3-68) 4.4.1"
ARM GAS  /tmp/cck0uY6y.s 			page 291


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
     /tmp/cck0uY6y.s:3665   .bss:00000000 pxCurrentTCB
     /tmp/cck0uY6y.s:3662   .bss:00000000 $d
     /tmp/cck0uY6y.s:3668   .bss:00000004 pxReadyTasksLists
     /tmp/cck0uY6y.s:3671   .bss:00000068 xDelayedTaskList1
     /tmp/cck0uY6y.s:3674   .bss:0000007c xDelayedTaskList2
     /tmp/cck0uY6y.s:3677   .bss:00000090 pxDelayedTaskList
     /tmp/cck0uY6y.s:3680   .bss:00000094 pxOverflowDelayedTaskList
     /tmp/cck0uY6y.s:3683   .bss:00000098 xPendingReadyList
     /tmp/cck0uY6y.s:3686   .bss:000000ac xSuspendedTaskList
     /tmp/cck0uY6y.s:3689   .bss:000000c0 uxCurrentNumberOfTasks
     /tmp/cck0uY6y.s:3692   .bss:000000c4 xTickCount
     /tmp/cck0uY6y.s:3695   .bss:000000c8 uxTopUsedPriority
     /tmp/cck0uY6y.s:3698   .bss:000000cc uxTopReadyPriority
     /tmp/cck0uY6y.s:3701   .bss:000000d0 xSchedulerRunning
     /tmp/cck0uY6y.s:3704   .bss:000000d4 uxSchedulerSuspended
     /tmp/cck0uY6y.s:3707   .bss:000000d8 uxMissedTicks
     /tmp/cck0uY6y.s:3710   .bss:000000dc xMissedYield
     /tmp/cck0uY6y.s:3713   .bss:000000e0 xNumOfOverflows
     /tmp/cck0uY6y.s:3716   .bss:000000e4 uxTaskNumber
     /tmp/cck0uY6y.s:3719   .text.xTaskGenericCreate:00000000 $t
     /tmp/cck0uY6y.s:3724   .text.xTaskGenericCreate:00000000 xTaskGenericCreate
     /tmp/cck0uY6y.s:5881   .text.prvAllocateTCBAndStack:00000000 prvAllocateTCBAndStack
     /tmp/cck0uY6y.s:5711   .text.prvInitialiseTCBVariables:00000000 prvInitialiseTCBVariables
     /tmp/cck0uY6y.s:5785   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
     /tmp/cck0uY6y.s:3930   .text.vTaskDelayUntil:00000000 $t
     /tmp/cck0uY6y.s:3935   .text.vTaskDelayUntil:00000000 vTaskDelayUntil
     /tmp/cck0uY6y.s:4784   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
     /tmp/cck0uY6y.s:4814   .text.xTaskResumeAll:00000000 xTaskResumeAll
     /tmp/cck0uY6y.s:4079   .text.vTaskDelay:00000000 $t
     /tmp/cck0uY6y.s:4084   .text.vTaskDelay:00000000 vTaskDelay
     /tmp/cck0uY6y.s:4176   .text.vTaskPrioritySet:00000000 $t
     /tmp/cck0uY6y.s:4181   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
     /tmp/cck0uY6y.s:4339   .text.vTaskSuspend:00000000 $t
     /tmp/cck0uY6y.s:4344   .text.vTaskSuspend:00000000 vTaskSuspend
     /tmp/cck0uY6y.s:4420   .text.xTaskIsTaskSuspended:00000000 $t
     /tmp/cck0uY6y.s:4425   .text.xTaskIsTaskSuspended:00000000 xTaskIsTaskSuspended
     /tmp/cck0uY6y.s:4478   .text.vTaskResume:00000000 $t
     /tmp/cck0uY6y.s:4483   .text.vTaskResume:00000000 vTaskResume
     /tmp/cck0uY6y.s:4572   .text.xTaskResumeFromISR:00000000 $t
     /tmp/cck0uY6y.s:4577   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
     /tmp/cck0uY6y.s:4673   .rodata:00000000 $d
     /tmp/cck0uY6y.s:4674   .rodata:00000000 .LC0
     /tmp/cck0uY6y.s:4677   .text.vTaskStartScheduler:00000000 $t
     /tmp/cck0uY6y.s:4682   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
     /tmp/cck0uY6y.s:5687   .text.prvIdleTask:00000000 prvIdleTask
     /tmp/cck0uY6y.s:4745   .text.vTaskEndScheduler:00000000 $t
     /tmp/cck0uY6y.s:4750   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
     /tmp/cck0uY6y.s:4779   .text.vTaskSuspendAll:00000000 $t
     /tmp/cck0uY6y.s:4809   .text.xTaskResumeAll:00000000 $t
     /tmp/cck0uY6y.s:5050   .text.vTaskIncrementTick:00000000 vTaskIncrementTick
     /tmp/cck0uY6y.s:4983   .text.xTaskGetTickCount:00000000 $t
     /tmp/cck0uY6y.s:4988   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
     /tmp/cck0uY6y.s:5018   .text.uxTaskGetNumberOfTasks:00000000 $t
     /tmp/cck0uY6y.s:5023   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
     /tmp/cck0uY6y.s:5045   .text.vTaskIncrementTick:00000000 $t
ARM GAS  /tmp/cck0uY6y.s 			page 292


     /tmp/cck0uY6y.s:5201   .text.vTaskSwitchContext:00000000 $t
     /tmp/cck0uY6y.s:5206   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
     /tmp/cck0uY6y.s:5307   .text.vTaskPlaceOnEventList:00000000 $t
     /tmp/cck0uY6y.s:5312   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
     /tmp/cck0uY6y.s:5407   .text.xTaskRemoveFromEventList:00000000 $t
     /tmp/cck0uY6y.s:5412   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
     /tmp/cck0uY6y.s:5520   .text.vTaskSetTimeOutState:00000000 $t
     /tmp/cck0uY6y.s:5525   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
     /tmp/cck0uY6y.s:5558   .text.xTaskCheckForTimeOut:00000000 $t
     /tmp/cck0uY6y.s:5563   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
     /tmp/cck0uY6y.s:5656   .text.vTaskMissedYield:00000000 $t
     /tmp/cck0uY6y.s:5661   .text.vTaskMissedYield:00000000 vTaskMissedYield
     /tmp/cck0uY6y.s:5683   .text.prvIdleTask:00000000 $t
     /tmp/cck0uY6y.s:5860   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
     /tmp/cck0uY6y.s:5707   .text.prvInitialiseTCBVariables:00000000 $t
     /tmp/cck0uY6y.s:5781   .text.prvInitialiseTaskLists:00000000 $t
     /tmp/cck0uY6y.s:5856   .text.prvCheckTasksWaitingTermination:00000000 $t
     /tmp/cck0uY6y.s:5877   .text.prvAllocateTCBAndStack:00000000 $t
     /tmp/cck0uY6y.s:5958   .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortYieldFromISR
vListRemove
vListInsert
vConfigureTimerForRunTimeStats
xPortStartScheduler
vPortEndScheduler
vApplicationTickHook
strncpy
vListInitialiseItem
vListInitialise
pvPortMalloc
vPortFree
memset
