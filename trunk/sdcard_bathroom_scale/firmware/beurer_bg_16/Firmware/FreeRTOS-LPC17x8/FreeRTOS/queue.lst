ARM GAS  /tmp/cch3WSAd.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"queue.c"
  14              		.section	.debug_abbrev,"",%progbits
  15              	.Ldebug_abbrev0:
  16              		.section	.debug_info,"",%progbits
  17              	.Ldebug_info0:
  18              		.section	.debug_line,"",%progbits
  19              	.Ldebug_line0:
  20 0000 9E060000 		.section	.debug_macinfo,"",%progbits
  20      02007604 
  20      00000201 
  20      FB0E0D00 
  20      01010101 
  21              	.Ldebug_macinfo0:
  22              		.text
  23              	.Ltext0:
  24              		.file 1 "FreeRTOS/queue.c"
  25              		.section	.debug_macinfo
  26 0000 03       		.byte	0x3
  27 0001 00       		.uleb128 0x0
  28 0002 01       		.uleb128 0x1
  29 0003 01       		.byte	0x1
  30 0004 00       		.uleb128 0x0
  31 0005 5F5F5354 		.ascii	"__STDC__ 1\000"
  31      44435F5F 
  31      203100
  32 0010 01       		.byte	0x1
  33 0011 00       		.uleb128 0x0
  34 0012 5F5F5354 		.ascii	"__STDC_VERSION__ 199901L\000"
  34      44435F56 
  34      45525349 
  34      4F4E5F5F 
  34      20313939 
  35 002b 01       		.byte	0x1
  36 002c 00       		.uleb128 0x0
  37 002d 5F5F5354 		.ascii	"__STDC_HOSTED__ 1\000"
  37      44435F48 
  37      4F535445 
  37      445F5F20 
  37      3100
  38 003f 01       		.byte	0x1
  39 0040 00       		.uleb128 0x0
  40 0041 5F5F474E 		.ascii	"__GNUC__ 4\000"
  40      55435F5F 
  40      203400
  41 004c 01       		.byte	0x1
ARM GAS  /tmp/cch3WSAd.s 			page 2


  42 004d 00       		.uleb128 0x0
  43 004e 5F5F474E 		.ascii	"__GNUC_MINOR__ 4\000"
  43      55435F4D 
  43      494E4F52 
  43      5F5F2034 
  43      00
  44 005f 01       		.byte	0x1
  45 0060 00       		.uleb128 0x0
  46 0061 5F5F474E 		.ascii	"__GNUC_PATCHLEVEL__ 1\000"
  46      55435F50 
  46      41544348 
  46      4C455645 
  46      4C5F5F20 
  47 0077 01       		.byte	0x1
  48 0078 00       		.uleb128 0x0
  49 0079 5F5F5349 		.ascii	"__SIZE_TYPE__ unsigned int\000"
  49      5A455F54 
  49      5950455F 
  49      5F20756E 
  49      7369676E 
  50 0094 01       		.byte	0x1
  51 0095 00       		.uleb128 0x0
  52 0096 5F5F5054 		.ascii	"__PTRDIFF_TYPE__ int\000"
  52      52444946 
  52      465F5459 
  52      50455F5F 
  52      20696E74 
  53 00ab 01       		.byte	0x1
  54 00ac 00       		.uleb128 0x0
  55 00ad 5F5F5743 		.ascii	"__WCHAR_TYPE__ unsigned int\000"
  55      4841525F 
  55      54595045 
  55      5F5F2075 
  55      6E736967 
  56 00c9 01       		.byte	0x1
  57 00ca 00       		.uleb128 0x0
  58 00cb 5F5F5749 		.ascii	"__WINT_TYPE__ unsigned int\000"
  58      4E545F54 
  58      5950455F 
  58      5F20756E 
  58      7369676E 
  59 00e6 01       		.byte	0x1
  60 00e7 00       		.uleb128 0x0
  61 00e8 5F5F494E 		.ascii	"__INTMAX_TYPE__ long long int\000"
  61      544D4158 
  61      5F545950 
  61      455F5F20 
  61      6C6F6E67 
  62 0106 01       		.byte	0x1
  63 0107 00       		.uleb128 0x0
  64 0108 5F5F5549 		.ascii	"__UINTMAX_TYPE__ long long unsigned int\000"
  64      4E544D41 
  64      585F5459 
  64      50455F5F 
  64      206C6F6E 
  65 0130 01       		.byte	0x1
  66 0131 00       		.uleb128 0x0
ARM GAS  /tmp/cch3WSAd.s 			page 3


  67 0132 5F5F4348 		.ascii	"__CHAR16_TYPE__ short unsigned int\000"
  67      41523136 
  67      5F545950 
  67      455F5F20 
  67      73686F72 
  68 0155 01       		.byte	0x1
  69 0156 00       		.uleb128 0x0
  70 0157 5F5F4348 		.ascii	"__CHAR32_TYPE__ unsigned int\000"
  70      41523332 
  70      5F545950 
  70      455F5F20 
  70      756E7369 
  71 0174 01       		.byte	0x1
  72 0175 00       		.uleb128 0x0
  73 0176 5F5F4758 		.ascii	"__GXX_ABI_VERSION 1002\000"
  73      585F4142 
  73      495F5645 
  73      5253494F 
  73      4E203130 
  74 018d 01       		.byte	0x1
  75 018e 00       		.uleb128 0x0
  76 018f 5F5F5343 		.ascii	"__SCHAR_MAX__ 127\000"
  76      4841525F 
  76      4D41585F 
  76      5F203132 
  76      3700
  77 01a1 01       		.byte	0x1
  78 01a2 00       		.uleb128 0x0
  79 01a3 5F5F5348 		.ascii	"__SHRT_MAX__ 32767\000"
  79      52545F4D 
  79      41585F5F 
  79      20333237 
  79      363700
  80 01b6 01       		.byte	0x1
  81 01b7 00       		.uleb128 0x0
  82 01b8 5F5F494E 		.ascii	"__INT_MAX__ 2147483647\000"
  82      545F4D41 
  82      585F5F20 
  82      32313437 
  82      34383336 
  83 01cf 01       		.byte	0x1
  84 01d0 00       		.uleb128 0x0
  85 01d1 5F5F4C4F 		.ascii	"__LONG_MAX__ 2147483647L\000"
  85      4E475F4D 
  85      41585F5F 
  85      20323134 
  85      37343833 
  86 01ea 01       		.byte	0x1
  87 01eb 00       		.uleb128 0x0
  88 01ec 5F5F4C4F 		.ascii	"__LONG_LONG_MAX__ 9223372036854775807LL\000"
  88      4E475F4C 
  88      4F4E475F 
  88      4D41585F 
  88      5F203932 
  89 0214 01       		.byte	0x1
  90 0215 00       		.uleb128 0x0
  91 0216 5F5F5743 		.ascii	"__WCHAR_MAX__ 4294967295U\000"
ARM GAS  /tmp/cch3WSAd.s 			page 4


  91      4841525F 
  91      4D41585F 
  91      5F203432 
  91      39343936 
  92 0230 01       		.byte	0x1
  93 0231 00       		.uleb128 0x0
  94 0232 5F5F4348 		.ascii	"__CHAR_BIT__ 8\000"
  94      41525F42 
  94      49545F5F 
  94      203800
  95 0241 01       		.byte	0x1
  96 0242 00       		.uleb128 0x0
  97 0243 5F5F494E 		.ascii	"__INTMAX_MAX__ 9223372036854775807LL\000"
  97      544D4158 
  97      5F4D4158 
  97      5F5F2039 
  97      32323333 
  98 0268 01       		.byte	0x1
  99 0269 00       		.uleb128 0x0
 100 026a 5F5F464C 		.ascii	"__FLT_EVAL_METHOD__ 0\000"
 100      545F4556 
 100      414C5F4D 
 100      4554484F 
 100      445F5F20 
 101 0280 01       		.byte	0x1
 102 0281 00       		.uleb128 0x0
 103 0282 5F5F4445 		.ascii	"__DEC_EVAL_METHOD__ 2\000"
 103      435F4556 
 103      414C5F4D 
 103      4554484F 
 103      445F5F20 
 104 0298 01       		.byte	0x1
 105 0299 00       		.uleb128 0x0
 106 029a 5F5F464C 		.ascii	"__FLT_RADIX__ 2\000"
 106      545F5241 
 106      4449585F 
 106      5F203200 
 107 02aa 01       		.byte	0x1
 108 02ab 00       		.uleb128 0x0
 109 02ac 5F5F464C 		.ascii	"__FLT_MANT_DIG__ 24\000"
 109      545F4D41 
 109      4E545F44 
 109      49475F5F 
 109      20323400 
 110 02c0 01       		.byte	0x1
 111 02c1 00       		.uleb128 0x0
 112 02c2 5F5F464C 		.ascii	"__FLT_DIG__ 6\000"
 112      545F4449 
 112      475F5F20 
 112      3600
 113 02d0 01       		.byte	0x1
 114 02d1 00       		.uleb128 0x0
 115 02d2 5F5F464C 		.ascii	"__FLT_MIN_EXP__ (-125)\000"
 115      545F4D49 
 115      4E5F4558 
 115      505F5F20 
 115      282D3132 
ARM GAS  /tmp/cch3WSAd.s 			page 5


 116 02e9 01       		.byte	0x1
 117 02ea 00       		.uleb128 0x0
 118 02eb 5F5F464C 		.ascii	"__FLT_MIN_10_EXP__ (-37)\000"
 118      545F4D49 
 118      4E5F3130 
 118      5F455850 
 118      5F5F2028 
 119 0304 01       		.byte	0x1
 120 0305 00       		.uleb128 0x0
 121 0306 5F5F464C 		.ascii	"__FLT_MAX_EXP__ 128\000"
 121      545F4D41 
 121      585F4558 
 121      505F5F20 
 121      31323800 
 122 031a 01       		.byte	0x1
 123 031b 00       		.uleb128 0x0
 124 031c 5F5F464C 		.ascii	"__FLT_MAX_10_EXP__ 38\000"
 124      545F4D41 
 124      585F3130 
 124      5F455850 
 124      5F5F2033 
 125 0332 01       		.byte	0x1
 126 0333 00       		.uleb128 0x0
 127 0334 5F5F464C 		.ascii	"__FLT_MAX__ 3.40282347e+38F\000"
 127      545F4D41 
 127      585F5F20 
 127      332E3430 
 127      32383233 
 128 0350 01       		.byte	0x1
 129 0351 00       		.uleb128 0x0
 130 0352 5F5F464C 		.ascii	"__FLT_MIN__ 1.17549435e-38F\000"
 130      545F4D49 
 130      4E5F5F20 
 130      312E3137 
 130      35343934 
 131 036e 01       		.byte	0x1
 132 036f 00       		.uleb128 0x0
 133 0370 5F5F464C 		.ascii	"__FLT_EPSILON__ 1.19209290e-7F\000"
 133      545F4550 
 133      53494C4F 
 133      4E5F5F20 
 133      312E3139 
 134 038f 01       		.byte	0x1
 135 0390 00       		.uleb128 0x0
 136 0391 5F5F464C 		.ascii	"__FLT_DENORM_MIN__ 1.40129846e-45F\000"
 136      545F4445 
 136      4E4F524D 
 136      5F4D494E 
 136      5F5F2031 
 137 03b4 01       		.byte	0x1
 138 03b5 00       		.uleb128 0x0
 139 03b6 5F5F464C 		.ascii	"__FLT_HAS_DENORM__ 1\000"
 139      545F4841 
 139      535F4445 
 139      4E4F524D 
 139      5F5F2031 
 140 03cb 01       		.byte	0x1
ARM GAS  /tmp/cch3WSAd.s 			page 6


 141 03cc 00       		.uleb128 0x0
 142 03cd 5F5F464C 		.ascii	"__FLT_HAS_INFINITY__ 1\000"
 142      545F4841 
 142      535F494E 
 142      46494E49 
 142      54595F5F 
 143 03e4 01       		.byte	0x1
 144 03e5 00       		.uleb128 0x0
 145 03e6 5F5F464C 		.ascii	"__FLT_HAS_QUIET_NAN__ 1\000"
 145      545F4841 
 145      535F5155 
 145      4945545F 
 145      4E414E5F 
 146 03fe 01       		.byte	0x1
 147 03ff 00       		.uleb128 0x0
 148 0400 5F5F4442 		.ascii	"__DBL_MANT_DIG__ 53\000"
 148      4C5F4D41 
 148      4E545F44 
 148      49475F5F 
 148      20353300 
 149 0414 01       		.byte	0x1
 150 0415 00       		.uleb128 0x0
 151 0416 5F5F4442 		.ascii	"__DBL_DIG__ 15\000"
 151      4C5F4449 
 151      475F5F20 
 151      313500
 152 0425 01       		.byte	0x1
 153 0426 00       		.uleb128 0x0
 154 0427 5F5F4442 		.ascii	"__DBL_MIN_EXP__ (-1021)\000"
 154      4C5F4D49 
 154      4E5F4558 
 154      505F5F20 
 154      282D3130 
 155 043f 01       		.byte	0x1
 156 0440 00       		.uleb128 0x0
 157 0441 5F5F4442 		.ascii	"__DBL_MIN_10_EXP__ (-307)\000"
 157      4C5F4D49 
 157      4E5F3130 
 157      5F455850 
 157      5F5F2028 
 158 045b 01       		.byte	0x1
 159 045c 00       		.uleb128 0x0
 160 045d 5F5F4442 		.ascii	"__DBL_MAX_EXP__ 1024\000"
 160      4C5F4D41 
 160      585F4558 
 160      505F5F20 
 160      31303234 
 161 0472 01       		.byte	0x1
 162 0473 00       		.uleb128 0x0
 163 0474 5F5F4442 		.ascii	"__DBL_MAX_10_EXP__ 308\000"
 163      4C5F4D41 
 163      585F3130 
 163      5F455850 
 163      5F5F2033 
 164 048b 01       		.byte	0x1
 165 048c 00       		.uleb128 0x0
 166 048d 5F5F4442 		.ascii	"__DBL_MAX__ 1.7976931348623157e+308\000"
ARM GAS  /tmp/cch3WSAd.s 			page 7


 166      4C5F4D41 
 166      585F5F20 
 166      312E3739 
 166      37363933 
 167 04b1 01       		.byte	0x1
 168 04b2 00       		.uleb128 0x0
 169 04b3 5F5F4442 		.ascii	"__DBL_MIN__ 2.2250738585072014e-308\000"
 169      4C5F4D49 
 169      4E5F5F20 
 169      322E3232 
 169      35303733 
 170 04d7 01       		.byte	0x1
 171 04d8 00       		.uleb128 0x0
 172 04d9 5F5F4442 		.ascii	"__DBL_EPSILON__ 2.2204460492503131e-16\000"
 172      4C5F4550 
 172      53494C4F 
 172      4E5F5F20 
 172      322E3232 
 173 0500 01       		.byte	0x1
 174 0501 00       		.uleb128 0x0
 175 0502 5F5F4442 		.ascii	"__DBL_DENORM_MIN__ 4.9406564584124654e-324\000"
 175      4C5F4445 
 175      4E4F524D 
 175      5F4D494E 
 175      5F5F2034 
 176 052d 01       		.byte	0x1
 177 052e 00       		.uleb128 0x0
 178 052f 5F5F4442 		.ascii	"__DBL_HAS_DENORM__ 1\000"
 178      4C5F4841 
 178      535F4445 
 178      4E4F524D 
 178      5F5F2031 
 179 0544 01       		.byte	0x1
 180 0545 00       		.uleb128 0x0
 181 0546 5F5F4442 		.ascii	"__DBL_HAS_INFINITY__ 1\000"
 181      4C5F4841 
 181      535F494E 
 181      46494E49 
 181      54595F5F 
 182 055d 01       		.byte	0x1
 183 055e 00       		.uleb128 0x0
 184 055f 5F5F4442 		.ascii	"__DBL_HAS_QUIET_NAN__ 1\000"
 184      4C5F4841 
 184      535F5155 
 184      4945545F 
 184      4E414E5F 
 185 0577 01       		.byte	0x1
 186 0578 00       		.uleb128 0x0
 187 0579 5F5F4C44 		.ascii	"__LDBL_MANT_DIG__ 53\000"
 187      424C5F4D 
 187      414E545F 
 187      4449475F 
 187      5F203533 
 188 058e 01       		.byte	0x1
 189 058f 00       		.uleb128 0x0
 190 0590 5F5F4C44 		.ascii	"__LDBL_DIG__ 15\000"
 190      424C5F44 
ARM GAS  /tmp/cch3WSAd.s 			page 8


 190      49475F5F 
 190      20313500 
 191 05a0 01       		.byte	0x1
 192 05a1 00       		.uleb128 0x0
 193 05a2 5F5F4C44 		.ascii	"__LDBL_MIN_EXP__ (-1021)\000"
 193      424C5F4D 
 193      494E5F45 
 193      58505F5F 
 193      20282D31 
 194 05bb 01       		.byte	0x1
 195 05bc 00       		.uleb128 0x0
 196 05bd 5F5F4C44 		.ascii	"__LDBL_MIN_10_EXP__ (-307)\000"
 196      424C5F4D 
 196      494E5F31 
 196      305F4558 
 196      505F5F20 
 197 05d8 01       		.byte	0x1
 198 05d9 00       		.uleb128 0x0
 199 05da 5F5F4C44 		.ascii	"__LDBL_MAX_EXP__ 1024\000"
 199      424C5F4D 
 199      41585F45 
 199      58505F5F 
 199      20313032 
 200 05f0 01       		.byte	0x1
 201 05f1 00       		.uleb128 0x0
 202 05f2 5F5F4C44 		.ascii	"__LDBL_MAX_10_EXP__ 308\000"
 202      424C5F4D 
 202      41585F31 
 202      305F4558 
 202      505F5F20 
 203 060a 01       		.byte	0x1
 204 060b 00       		.uleb128 0x0
 205 060c 5F5F4445 		.ascii	"__DECIMAL_DIG__ 17\000"
 205      43494D41 
 205      4C5F4449 
 205      475F5F20 
 205      313700
 206 061f 01       		.byte	0x1
 207 0620 00       		.uleb128 0x0
 208 0621 5F5F4C44 		.ascii	"__LDBL_MAX__ 1.7976931348623157e+308L\000"
 208      424C5F4D 
 208      41585F5F 
 208      20312E37 
 208      39373639 
 209 0647 01       		.byte	0x1
 210 0648 00       		.uleb128 0x0
 211 0649 5F5F4C44 		.ascii	"__LDBL_MIN__ 2.2250738585072014e-308L\000"
 211      424C5F4D 
 211      494E5F5F 
 211      20322E32 
 211      32353037 
 212 066f 01       		.byte	0x1
 213 0670 00       		.uleb128 0x0
 214 0671 5F5F4C44 		.ascii	"__LDBL_EPSILON__ 2.2204460492503131e-16L\000"
 214      424C5F45 
 214      5053494C 
 214      4F4E5F5F 
ARM GAS  /tmp/cch3WSAd.s 			page 9


 214      20322E32 
 215 069a 01       		.byte	0x1
 216 069b 00       		.uleb128 0x0
 217 069c 5F5F4C44 		.ascii	"__LDBL_DENORM_MIN__ 4.9406564584124654e-324L\000"
 217      424C5F44 
 217      454E4F52 
 217      4D5F4D49 
 217      4E5F5F20 
 218 06c9 01       		.byte	0x1
 219 06ca 00       		.uleb128 0x0
 220 06cb 5F5F4C44 		.ascii	"__LDBL_HAS_DENORM__ 1\000"
 220      424C5F48 
 220      41535F44 
 220      454E4F52 
 220      4D5F5F20 
 221 06e1 01       		.byte	0x1
 222 06e2 00       		.uleb128 0x0
 223 06e3 5F5F4C44 		.ascii	"__LDBL_HAS_INFINITY__ 1\000"
 223      424C5F48 
 223      41535F49 
 223      4E46494E 
 223      4954595F 
 224 06fb 01       		.byte	0x1
 225 06fc 00       		.uleb128 0x0
 226 06fd 5F5F4C44 		.ascii	"__LDBL_HAS_QUIET_NAN__ 1\000"
 226      424C5F48 
 226      41535F51 
 226      55494554 
 226      5F4E414E 
 227 0716 01       		.byte	0x1
 228 0717 00       		.uleb128 0x0
 229 0718 5F5F4445 		.ascii	"__DEC32_MANT_DIG__ 7\000"
 229      4333325F 
 229      4D414E54 
 229      5F444947 
 229      5F5F2037 
 230 072d 01       		.byte	0x1
 231 072e 00       		.uleb128 0x0
 232 072f 5F5F4445 		.ascii	"__DEC32_MIN_EXP__ (-94)\000"
 232      4333325F 
 232      4D494E5F 
 232      4558505F 
 232      5F20282D 
 233 0747 01       		.byte	0x1
 234 0748 00       		.uleb128 0x0
 235 0749 5F5F4445 		.ascii	"__DEC32_MAX_EXP__ 97\000"
 235      4333325F 
 235      4D41585F 
 235      4558505F 
 235      5F203937 
 236 075e 01       		.byte	0x1
 237 075f 00       		.uleb128 0x0
 238 0760 5F5F4445 		.ascii	"__DEC32_MIN__ 1E-95DF\000"
 238      4333325F 
 238      4D494E5F 
 238      5F203145 
 238      2D393544 
ARM GAS  /tmp/cch3WSAd.s 			page 10


 239 0776 01       		.byte	0x1
 240 0777 00       		.uleb128 0x0
 241 0778 5F5F4445 		.ascii	"__DEC32_MAX__ 9.999999E96DF\000"
 241      4333325F 
 241      4D41585F 
 241      5F20392E 
 241      39393939 
 242 0794 01       		.byte	0x1
 243 0795 00       		.uleb128 0x0
 244 0796 5F5F4445 		.ascii	"__DEC32_EPSILON__ 1E-6DF\000"
 244      4333325F 
 244      45505349 
 244      4C4F4E5F 
 244      5F203145 
 245 07af 01       		.byte	0x1
 246 07b0 00       		.uleb128 0x0
 247 07b1 5F5F4445 		.ascii	"__DEC32_SUBNORMAL_MIN__ 0.000001E-95DF\000"
 247      4333325F 
 247      5355424E 
 247      4F524D41 
 247      4C5F4D49 
 248 07d8 01       		.byte	0x1
 249 07d9 00       		.uleb128 0x0
 250 07da 5F5F4445 		.ascii	"__DEC64_MANT_DIG__ 16\000"
 250      4336345F 
 250      4D414E54 
 250      5F444947 
 250      5F5F2031 
 251 07f0 01       		.byte	0x1
 252 07f1 00       		.uleb128 0x0
 253 07f2 5F5F4445 		.ascii	"__DEC64_MIN_EXP__ (-382)\000"
 253      4336345F 
 253      4D494E5F 
 253      4558505F 
 253      5F20282D 
 254 080b 01       		.byte	0x1
 255 080c 00       		.uleb128 0x0
 256 080d 5F5F4445 		.ascii	"__DEC64_MAX_EXP__ 385\000"
 256      4336345F 
 256      4D41585F 
 256      4558505F 
 256      5F203338 
 257 0823 01       		.byte	0x1
 258 0824 00       		.uleb128 0x0
 259 0825 5F5F4445 		.ascii	"__DEC64_MIN__ 1E-383DD\000"
 259      4336345F 
 259      4D494E5F 
 259      5F203145 
 259      2D333833 
 260 083c 01       		.byte	0x1
 261 083d 00       		.uleb128 0x0
 262 083e 5F5F4445 		.ascii	"__DEC64_MAX__ 9.999999999999999E384DD\000"
 262      4336345F 
 262      4D41585F 
 262      5F20392E 
 262      39393939 
 263 0864 01       		.byte	0x1
ARM GAS  /tmp/cch3WSAd.s 			page 11


 264 0865 00       		.uleb128 0x0
 265 0866 5F5F4445 		.ascii	"__DEC64_EPSILON__ 1E-15DD\000"
 265      4336345F 
 265      45505349 
 265      4C4F4E5F 
 265      5F203145 
 266 0880 01       		.byte	0x1
 267 0881 00       		.uleb128 0x0
 268 0882 5F5F4445 		.ascii	"__DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD\000"
 268      4336345F 
 268      5355424E 
 268      4F524D41 
 268      4C5F4D49 
 269 08b3 01       		.byte	0x1
 270 08b4 00       		.uleb128 0x0
 271 08b5 5F5F4445 		.ascii	"__DEC128_MANT_DIG__ 34\000"
 271      43313238 
 271      5F4D414E 
 271      545F4449 
 271      475F5F20 
 272 08cc 01       		.byte	0x1
 273 08cd 00       		.uleb128 0x0
 274 08ce 5F5F4445 		.ascii	"__DEC128_MIN_EXP__ (-6142)\000"
 274      43313238 
 274      5F4D494E 
 274      5F455850 
 274      5F5F2028 
 275 08e9 01       		.byte	0x1
 276 08ea 00       		.uleb128 0x0
 277 08eb 5F5F4445 		.ascii	"__DEC128_MAX_EXP__ 6145\000"
 277      43313238 
 277      5F4D4158 
 277      5F455850 
 277      5F5F2036 
 278 0903 01       		.byte	0x1
 279 0904 00       		.uleb128 0x0
 280 0905 5F5F4445 		.ascii	"__DEC128_MIN__ 1E-6143DL\000"
 280      43313238 
 280      5F4D494E 
 280      5F5F2031 
 280      452D3631 
 281 091e 01       		.byte	0x1
 282 091f 00       		.uleb128 0x0
 283 0920 5F5F4445 		.ascii	"__DEC128_MAX__ 9.999999999999999999999999999999999E"
 283      43313238 
 283      5F4D4158 
 283      5F5F2039 
 283      2E393939 
 284 0953 36313434 		.ascii	"6144DL\000"
 284      444C00
 285 095a 01       		.byte	0x1
 286 095b 00       		.uleb128 0x0
 287 095c 5F5F4445 		.ascii	"__DEC128_EPSILON__ 1E-33DL\000"
 287      43313238 
 287      5F455053 
 287      494C4F4E 
 287      5F5F2031 
ARM GAS  /tmp/cch3WSAd.s 			page 12


 288 0977 01       		.byte	0x1
 289 0978 00       		.uleb128 0x0
 290 0979 5F5F4445 		.ascii	"__DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000"
 290      43313238 
 290      5F535542 
 290      4E4F524D 
 290      414C5F4D 
 291 09ac 30303030 		.ascii	"000000001E-6143DL\000"
 291      30303030 
 291      31452D36 
 291      31343344 
 291      4C00
 292 09be 01       		.byte	0x1
 293 09bf 00       		.uleb128 0x0
 294 09c0 5F5F5245 		.ascii	"__REGISTER_PREFIX__ \000"
 294      47495354 
 294      45525F50 
 294      52454649 
 294      585F5F20 
 295 09d5 01       		.byte	0x1
 296 09d6 00       		.uleb128 0x0
 297 09d7 5F5F5553 		.ascii	"__USER_LABEL_PREFIX__ \000"
 297      45525F4C 
 297      4142454C 
 297      5F505245 
 297      4649585F 
 298 09ee 01       		.byte	0x1
 299 09ef 00       		.uleb128 0x0
 300 09f0 5F5F5645 		.ascii	"__VERSION__ \"4.4.1\"\000"
 300      5253494F 
 300      4E5F5F20 
 300      22342E34 
 300      2E312200 
 301 0a04 01       		.byte	0x1
 302 0a05 00       		.uleb128 0x0
 303 0a06 5F5F474E 		.ascii	"__GNUC_STDC_INLINE__ 1\000"
 303      55435F53 
 303      5444435F 
 303      494E4C49 
 303      4E455F5F 
 304 0a1d 01       		.byte	0x1
 305 0a1e 00       		.uleb128 0x0
 306 0a1f 5F5F4E4F 		.ascii	"__NO_INLINE__ 1\000"
 306      5F494E4C 
 306      494E455F 
 306      5F203100 
 307 0a2f 01       		.byte	0x1
 308 0a30 00       		.uleb128 0x0
 309 0a31 5F5F4649 		.ascii	"__FINITE_MATH_ONLY__ 0\000"
 309      4E495445 
 309      5F4D4154 
 309      485F4F4E 
 309      4C595F5F 
 310 0a48 01       		.byte	0x1
 311 0a49 00       		.uleb128 0x0
 312 0a4a 5F5F4348 		.ascii	"__CHAR_UNSIGNED__ 1\000"
 312      41525F55 
ARM GAS  /tmp/cch3WSAd.s 			page 13


 312      4E534947 
 312      4E45445F 
 312      5F203100 
 313 0a5e 01       		.byte	0x1
 314 0a5f 00       		.uleb128 0x0
 315 0a60 5F5F5349 		.ascii	"__SIZEOF_INT__ 4\000"
 315      5A454F46 
 315      5F494E54 
 315      5F5F2034 
 315      00
 316 0a71 01       		.byte	0x1
 317 0a72 00       		.uleb128 0x0
 318 0a73 5F5F5349 		.ascii	"__SIZEOF_LONG__ 4\000"
 318      5A454F46 
 318      5F4C4F4E 
 318      475F5F20 
 318      3400
 319 0a85 01       		.byte	0x1
 320 0a86 00       		.uleb128 0x0
 321 0a87 5F5F5349 		.ascii	"__SIZEOF_LONG_LONG__ 8\000"
 321      5A454F46 
 321      5F4C4F4E 
 321      475F4C4F 
 321      4E475F5F 
 322 0a9e 01       		.byte	0x1
 323 0a9f 00       		.uleb128 0x0
 324 0aa0 5F5F5349 		.ascii	"__SIZEOF_SHORT__ 2\000"
 324      5A454F46 
 324      5F53484F 
 324      52545F5F 
 324      203200
 325 0ab3 01       		.byte	0x1
 326 0ab4 00       		.uleb128 0x0
 327 0ab5 5F5F5349 		.ascii	"__SIZEOF_FLOAT__ 4\000"
 327      5A454F46 
 327      5F464C4F 
 327      41545F5F 
 327      203400
 328 0ac8 01       		.byte	0x1
 329 0ac9 00       		.uleb128 0x0
 330 0aca 5F5F5349 		.ascii	"__SIZEOF_DOUBLE__ 8\000"
 330      5A454F46 
 330      5F444F55 
 330      424C455F 
 330      5F203800 
 331 0ade 01       		.byte	0x1
 332 0adf 00       		.uleb128 0x0
 333 0ae0 5F5F5349 		.ascii	"__SIZEOF_LONG_DOUBLE__ 8\000"
 333      5A454F46 
 333      5F4C4F4E 
 333      475F444F 
 333      55424C45 
 334 0af9 01       		.byte	0x1
 335 0afa 00       		.uleb128 0x0
 336 0afb 5F5F5349 		.ascii	"__SIZEOF_SIZE_T__ 4\000"
 336      5A454F46 
 336      5F53495A 
ARM GAS  /tmp/cch3WSAd.s 			page 14


 336      455F545F 
 336      5F203400 
 337 0b0f 01       		.byte	0x1
 338 0b10 00       		.uleb128 0x0
 339 0b11 5F5F5349 		.ascii	"__SIZEOF_WCHAR_T__ 4\000"
 339      5A454F46 
 339      5F574348 
 339      41525F54 
 339      5F5F2034 
 340 0b26 01       		.byte	0x1
 341 0b27 00       		.uleb128 0x0
 342 0b28 5F5F5349 		.ascii	"__SIZEOF_WINT_T__ 4\000"
 342      5A454F46 
 342      5F57494E 
 342      545F545F 
 342      5F203400 
 343 0b3c 01       		.byte	0x1
 344 0b3d 00       		.uleb128 0x0
 345 0b3e 5F5F5349 		.ascii	"__SIZEOF_PTRDIFF_T__ 4\000"
 345      5A454F46 
 345      5F505452 
 345      44494646 
 345      5F545F5F 
 346 0b55 01       		.byte	0x1
 347 0b56 00       		.uleb128 0x0
 348 0b57 5F5F5349 		.ascii	"__SIZEOF_POINTER__ 4\000"
 348      5A454F46 
 348      5F504F49 
 348      4E544552 
 348      5F5F2034 
 349 0b6c 01       		.byte	0x1
 350 0b6d 00       		.uleb128 0x0
 351 0b6e 5F5F6172 		.ascii	"__arm__ 1\000"
 351      6D5F5F20 
 351      3100
 352 0b78 01       		.byte	0x1
 353 0b79 00       		.uleb128 0x0
 354 0b7a 5F5F4150 		.ascii	"__APCS_32__ 1\000"
 354      43535F33 
 354      325F5F20 
 354      3100
 355 0b88 01       		.byte	0x1
 356 0b89 00       		.uleb128 0x0
 357 0b8a 5F5F7468 		.ascii	"__thumb__ 1\000"
 357      756D625F 
 357      5F203100 
 358 0b96 01       		.byte	0x1
 359 0b97 00       		.uleb128 0x0
 360 0b98 5F5F7468 		.ascii	"__thumb2__ 1\000"
 360      756D6232 
 360      5F5F2031 
 360      00
 361 0ba5 01       		.byte	0x1
 362 0ba6 00       		.uleb128 0x0
 363 0ba7 5F5F4152 		.ascii	"__ARMEL__ 1\000"
 363      4D454C5F 
 363      5F203100 
ARM GAS  /tmp/cch3WSAd.s 			page 15


 364 0bb3 01       		.byte	0x1
 365 0bb4 00       		.uleb128 0x0
 366 0bb5 5F5F5448 		.ascii	"__THUMBEL__ 1\000"
 366      554D4245 
 366      4C5F5F20 
 366      3100
 367 0bc3 01       		.byte	0x1
 368 0bc4 00       		.uleb128 0x0
 369 0bc5 5F5F534F 		.ascii	"__SOFTFP__ 1\000"
 369      46544650 
 369      5F5F2031 
 369      00
 370 0bd2 01       		.byte	0x1
 371 0bd3 00       		.uleb128 0x0
 372 0bd4 5F5F5646 		.ascii	"__VFP_FP__ 1\000"
 372      505F4650 
 372      5F5F2031 
 372      00
 373 0be1 01       		.byte	0x1
 374 0be2 00       		.uleb128 0x0
 375 0be3 5F5F5448 		.ascii	"__THUMB_INTERWORK__ 1\000"
 375      554D425F 
 375      494E5445 
 375      52574F52 
 375      4B5F5F20 
 376 0bf9 01       		.byte	0x1
 377 0bfa 00       		.uleb128 0x0
 378 0bfb 5F5F4152 		.ascii	"__ARM_ARCH_7M__ 1\000"
 378      4D5F4152 
 378      43485F37 
 378      4D5F5F20 
 378      3100
 379 0c0d 01       		.byte	0x1
 380 0c0e 00       		.uleb128 0x0
 381 0c0f 5F5F4152 		.ascii	"__ARM_EABI__ 1\000"
 381      4D5F4541 
 381      42495F5F 
 381      203100
 382 0c1e 01       		.byte	0x1
 383 0c1f 00       		.uleb128 0x0
 384 0c20 5F5F4758 		.ascii	"__GXX_TYPEINFO_EQUALITY_INLINE 0\000"
 384      585F5459 
 384      5045494E 
 384      464F5F45 
 384      5155414C 
 385 0c41 01       		.byte	0x1
 386 0c42 00       		.uleb128 0x0
 387 0c43 5F5F454C 		.ascii	"__ELF__ 1\000"
 387      465F5F20 
 387      3100
 388 0c4d 01       		.byte	0x1
 389 0c4e 00       		.uleb128 0x0
 390 0c4f 5F5F4249 		.ascii	"__BIGGEST_ALIGNMENT__ 8\000"
 390      47474553 
 390      545F414C 
 390      49474E4D 
 390      454E545F 
ARM GAS  /tmp/cch3WSAd.s 			page 16


 391 0c67 01       		.byte	0x1
 392 0c68 00       		.uleb128 0x0
 393 0c69 5F5F5553 		.ascii	"__USES_INITFINI__ 1\000"
 393      45535F49 
 393      4E495446 
 393      494E495F 
 393      5F203100 
 394 0c7d 01       		.byte	0x1
 395 0c7e 00       		.uleb128 0x0
 396 0c7f 465F4350 		.ascii	"F_CPU 12000000UL\000"
 396      55203132 
 396      30303030 
 396      3030554C 
 396      00
 397 0c90 01       		.byte	0x1
 398 0c91 00       		.uleb128 0x0
 399 0c92 465F434C 		.ascii	"F_CLOCK 12000000UL\000"
 399      4F434B20 
 399      31323030 
 399      30303030 
 399      554C00
 400 0ca5 01       		.byte	0x1
 401 0ca6 00       		.uleb128 0x0
 402 0ca7 424F4152 		.ascii	"BOARD BOARD_\000"
 402      4420424F 
 402      4152445F 
 402      00
 403 0cb4 01       		.byte	0x1
 404 0cb5 00       		.uleb128 0x0
 405 0cb6 44454255 		.ascii	"DEBUG 1\000"
 405      47203100 
 406 0cbe 01       		.byte	0x1
 407 0cbf 00       		.uleb128 0x0
 408 0cc0 5041434B 		.ascii	"PACK_STRUCT_END __attribute((packed))\000"
 408      5F535452 
 408      5543545F 
 408      454E4420 
 408      5F5F6174 
 409 0ce6 01       		.byte	0x1
 410 0ce7 00       		.uleb128 0x0
 411 0ce8 414C4947 		.ascii	"ALIGN_STRUCT_END __attribute((aligned(4)))\000"
 411      4E5F5354 
 411      52554354 
 411      5F454E44 
 411      205F5F61 
 412 0d13 01       		.byte	0x1
 413 0d14 00       		.uleb128 0x0
 414 0d15 5F4C5043 		.ascii	"_LPC1758_ 1\000"
 414      31373538 
 414      5F203100 
 415              		.file 2 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../l
 416 0d21 03       		.byte	0x3
 417 0d22 36       		.uleb128 0x36
 418 0d23 02       		.uleb128 0x2
 419 0d24 01       		.byte	0x1
 420 0d25 08       		.uleb128 0x8
 421 0d26 5F535444 		.ascii	"_STDLIB_H_ \000"
ARM GAS  /tmp/cch3WSAd.s 			page 17


 421      4C49425F 
 421      485F2000 
 422              		.file 3 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../l
 423 0d32 03       		.byte	0x3
 424 0d33 0A       		.uleb128 0xa
 425 0d34 03       		.uleb128 0x3
 426 0d35 01       		.byte	0x1
 427 0d36 0D       		.uleb128 0xd
 428 0d37 5F414E53 		.ascii	"_ANSIDECL_H_ \000"
 428      49444543 
 428      4C5F485F 
 428      2000
 429              		.file 4 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../l
 430 0d45 03       		.byte	0x3
 431 0d46 0F       		.uleb128 0xf
 432 0d47 04       		.uleb128 0x4
 433 0d48 01       		.byte	0x1
 434 0d49 05       		.uleb128 0x5
 435 0d4a 5F5F4E45 		.ascii	"__NEWLIB_H__ 1\000"
 435      574C4942 
 435      5F485F5F 
 435      203100
 436 0d59 01       		.byte	0x1
 437 0d5a 0B       		.uleb128 0xb
 438 0d5b 5F4E4557 		.ascii	"_NEWLIB_VERSION \"1.17.0\"\000"
 438      4C49425F 
 438      56455253 
 438      494F4E20 
 438      22312E31 
 439 0d74 01       		.byte	0x1
 440 0d75 12       		.uleb128 0x12
 441 0d76 5F57414E 		.ascii	"_WANT_IO_LONG_LONG 1\000"
 441      545F494F 
 441      5F4C4F4E 
 441      475F4C4F 
 441      4E472031 
 442 0d8b 01       		.byte	0x1
 443 0d8c 22       		.uleb128 0x22
 444 0d8d 5F4D425F 		.ascii	"_MB_LEN_MAX 1\000"
 444      4C454E5F 
 444      4D415820 
 444      3100
 445 0d9b 01       		.byte	0x1
 446 0d9c 2C       		.uleb128 0x2c
 447 0d9d 48415645 		.ascii	"HAVE_INITFINI_ARRAY 1\000"
 447      5F494E49 
 447      5446494E 
 447      495F4152 
 447      52415920 
 448 0db3 01       		.byte	0x1
 449 0db4 30       		.uleb128 0x30
 450 0db5 5F415445 		.ascii	"_ATEXIT_DYNAMIC_ALLOC 1\000"
 450      5849545F 
 450      44594E41 
 450      4D49435F 
 450      414C4C4F 
 451 0dcd 04       		.byte	0x4
ARM GAS  /tmp/cch3WSAd.s 			page 18


 452              		.file 5 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../l
 453 0dce 03       		.byte	0x3
 454 0dcf 10       		.uleb128 0x10
 455 0dd0 05       		.uleb128 0x5
 456 0dd1 01       		.byte	0x1
 457 0dd2 02       		.uleb128 0x2
 458 0dd3 5F5F5359 		.ascii	"__SYS_CONFIG_H__ \000"
 458      535F434F 
 458      4E464947 
 458      5F485F5F 
 458      2000
 459              		.file 6 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../l
 460 0de5 03       		.byte	0x3
 461 0de6 04       		.uleb128 0x4
 462 0de7 06       		.uleb128 0x6
 463 0de8 01       		.byte	0x1
 464 0de9 3C       		.uleb128 0x3c
 465 0dea 5F5F4945 		.ascii	"__IEEE_LITTLE_ENDIAN \000"
 465      45455F4C 
 465      4954544C 
 465      455F454E 
 465      4449414E 
 466 0e00 04       		.byte	0x4
 467 0e01 01       		.byte	0x1
 468 0e02 8201     		.uleb128 0x82
 469 0e04 5F524545 		.ascii	"_REENT_SMALL \000"
 469      4E545F53 
 469      4D414C4C 
 469      2000
 470 0e12 01       		.byte	0x1
 471 0e13 A601     		.uleb128 0xa6
 472 0e15 5F504F49 		.ascii	"_POINTER_INT long\000"
 472      4E544552 
 472      5F494E54 
 472      206C6F6E 
 472      6700
 473 0e27 02       		.byte	0x2
 474 0e28 AC01     		.uleb128 0xac
 475 0e2a 5F5F5241 		.ascii	"__RAND_MAX\000"
 475      4E445F4D 
 475      415800
 476 0e35 01       		.byte	0x1
 477 0e36 B001     		.uleb128 0xb0
 478 0e38 5F5F5241 		.ascii	"__RAND_MAX 0x7fffffff\000"
 478      4E445F4D 
 478      41582030 
 478      78376666 
 478      66666666 
 479 0e4e 01       		.byte	0x1
 480 0e4f BD01     		.uleb128 0xbd
 481 0e51 5F5F494D 		.ascii	"__IMPORT \000"
 481      504F5254 
 481      2000
 482 0e5b 01       		.byte	0x1
 483 0e5c C401     		.uleb128 0xc4
 484 0e5e 5F524541 		.ascii	"_READ_WRITE_RETURN_TYPE int\000"
 484      445F5752 
ARM GAS  /tmp/cch3WSAd.s 			page 19


 484      4954455F 
 484      52455455 
 484      524E5F54 
 485 0e7a 04       		.byte	0x4
 486 0e7b 01       		.byte	0x1
 487 0e7c 17       		.uleb128 0x17
 488 0e7d 5F484156 		.ascii	"_HAVE_STDC \000"
 488      455F5354 
 488      44432000 
 489 0e89 01       		.byte	0x1
 490 0e8a 2E       		.uleb128 0x2e
 491 0e8b 5F424547 		.ascii	"_BEGIN_STD_C \000"
 491      494E5F53 
 491      54445F43 
 491      2000
 492 0e99 01       		.byte	0x1
 493 0e9a 2F       		.uleb128 0x2f
 494 0e9b 5F454E44 		.ascii	"_END_STD_C \000"
 494      5F535444 
 494      5F432000 
 495 0ea7 01       		.byte	0x1
 496 0ea8 30       		.uleb128 0x30
 497 0ea9 5F4E4F54 		.ascii	"_NOTHROW \000"
 497      48524F57 
 497      2000
 498 0eb3 01       		.byte	0x1
 499 0eb4 34       		.uleb128 0x34
 500 0eb5 5F505452 		.ascii	"_PTR void *\000"
 500      20766F69 
 500      64202A00 
 501 0ec1 01       		.byte	0x1
 502 0ec2 35       		.uleb128 0x35
 503 0ec3 5F414E44 		.ascii	"_AND ,\000"
 503      202C00
 504 0eca 01       		.byte	0x1
 505 0ecb 36       		.uleb128 0x36
 506 0ecc 5F4E4F41 		.ascii	"_NOARGS void\000"
 506      52475320 
 506      766F6964 
 506      00
 507 0ed9 01       		.byte	0x1
 508 0eda 37       		.uleb128 0x37
 509 0edb 5F434F4E 		.ascii	"_CONST const\000"
 509      53542063 
 509      6F6E7374 
 509      00
 510 0ee8 01       		.byte	0x1
 511 0ee9 38       		.uleb128 0x38
 512 0eea 5F564F4C 		.ascii	"_VOLATILE volatile\000"
 512      4154494C 
 512      4520766F 
 512      6C617469 
 512      6C6500
 513 0efd 01       		.byte	0x1
 514 0efe 39       		.uleb128 0x39
 515 0eff 5F534947 		.ascii	"_SIGNED signed\000"
 515      4E454420 
ARM GAS  /tmp/cch3WSAd.s 			page 20


 515      7369676E 
 515      656400
 516 0f0e 01       		.byte	0x1
 517 0f0f 3A       		.uleb128 0x3a
 518 0f10 5F444F54 		.ascii	"_DOTS , ...\000"
 518      53202C20 
 518      2E2E2E00 
 519 0f1c 01       		.byte	0x1
 520 0f1d 3B       		.uleb128 0x3b
 521 0f1e 5F564F49 		.ascii	"_VOID void\000"
 521      4420766F 
 521      696400
 522 0f29 01       		.byte	0x1
 523 0f2a 41       		.uleb128 0x41
 524 0f2b 5F455846 		.ascii	"_EXFUN_NOTHROW(name,proto) name proto _NOTHROW\000"
 524      554E5F4E 
 524      4F544852 
 524      4F57286E 
 524      616D652C 
 525 0f5a 01       		.byte	0x1
 526 0f5b 42       		.uleb128 0x42
 527 0f5c 5F455846 		.ascii	"_EXFUN(name,proto) name proto\000"
 527      554E286E 
 527      616D652C 
 527      70726F74 
 527      6F29206E 
 528 0f7a 01       		.byte	0x1
 529 0f7b 43       		.uleb128 0x43
 530 0f7c 5F455850 		.ascii	"_EXPARM(name,proto) (* name) proto\000"
 530      41524D28 
 530      6E616D65 
 530      2C70726F 
 530      746F2920 
 531 0f9f 01       		.byte	0x1
 532 0fa0 45       		.uleb128 0x45
 533 0fa1 5F444546 		.ascii	"_DEFUN(name,arglist,args) name(args)\000"
 533      554E286E 
 533      616D652C 
 533      6172676C 
 533      6973742C 
 534 0fc6 01       		.byte	0x1
 535 0fc7 46       		.uleb128 0x46
 536 0fc8 5F444546 		.ascii	"_DEFUN_VOID(name) name(_NOARGS)\000"
 536      554E5F56 
 536      4F494428 
 536      6E616D65 
 536      29206E61 
 537 0fe8 01       		.byte	0x1
 538 0fe9 47       		.uleb128 0x47
 539 0fea 5F434153 		.ascii	"_CAST_VOID (void)\000"
 539      545F564F 
 539      49442028 
 539      766F6964 
 539      2900
 540 0ffc 01       		.byte	0x1
 541 0ffd 49       		.uleb128 0x49
 542 0ffe 5F4C4F4E 		.ascii	"_LONG_DOUBLE long double\000"
ARM GAS  /tmp/cch3WSAd.s 			page 21


 542      475F444F 
 542      55424C45 
 542      206C6F6E 
 542      6720646F 
 543 1017 01       		.byte	0x1
 544 1018 4C       		.uleb128 0x4c
 545 1019 5F4C4F4E 		.ascii	"_LONG_LONG_TYPE long long\000"
 545      475F4C4F 
 545      4E475F54 
 545      59504520 
 545      6C6F6E67 
 546 1033 01       		.byte	0x1
 547 1034 4F       		.uleb128 0x4f
 548 1035 5F504152 		.ascii	"_PARAMS(paramlist) paramlist\000"
 548      414D5328 
 548      70617261 
 548      6D6C6973 
 548      74292070 
 549 1052 01       		.byte	0x1
 550 1053 69       		.uleb128 0x69
 551 1054 5F415454 		.ascii	"_ATTRIBUTE(attrs) __attribute__ (attrs)\000"
 551      52494255 
 551      54452861 
 551      74747273 
 551      29205F5F 
 552 107c 04       		.byte	0x4
 553 107d 01       		.byte	0x1
 554 107e 11       		.uleb128 0x11
 555 107f 5F5F6E65 		.ascii	"__need_size_t \000"
 555      65645F73 
 555      697A655F 
 555      742000
 556 108e 01       		.byte	0x1
 557 108f 12       		.uleb128 0x12
 558 1090 5F5F6E65 		.ascii	"__need_wchar_t \000"
 558      65645F77 
 558      63686172 
 558      5F742000 
 559              		.file 7 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../l
 560 10a0 03       		.byte	0x3
 561 10a1 13       		.uleb128 0x13
 562 10a2 07       		.uleb128 0x7
 563 10a3 01       		.byte	0x1
 564 10a4 BA01     		.uleb128 0xba
 565 10a6 5F5F7369 		.ascii	"__size_t__ \000"
 565      7A655F74 
 565      5F5F2000 
 566 10b2 01       		.byte	0x1
 567 10b3 BB01     		.uleb128 0xbb
 568 10b5 5F5F5349 		.ascii	"__SIZE_T__ \000"
 568      5A455F54 
 568      5F5F2000 
 569 10c1 01       		.byte	0x1
 570 10c2 BC01     		.uleb128 0xbc
 571 10c4 5F53495A 		.ascii	"_SIZE_T \000"
 571      455F5420 
 571      00
ARM GAS  /tmp/cch3WSAd.s 			page 22


 572 10cd 01       		.byte	0x1
 573 10ce BD01     		.uleb128 0xbd
 574 10d0 5F535953 		.ascii	"_SYS_SIZE_T_H \000"
 574      5F53495A 
 574      455F545F 
 574      482000
 575 10df 01       		.byte	0x1
 576 10e0 BE01     		.uleb128 0xbe
 577 10e2 5F545F53 		.ascii	"_T_SIZE_ \000"
 577      495A455F 
 577      2000
 578 10ec 01       		.byte	0x1
 579 10ed BF01     		.uleb128 0xbf
 580 10ef 5F545F53 		.ascii	"_T_SIZE \000"
 580      495A4520 
 580      00
 581 10f8 01       		.byte	0x1
 582 10f9 C001     		.uleb128 0xc0
 583 10fb 5F5F5349 		.ascii	"__SIZE_T \000"
 583      5A455F54 
 583      2000
 584 1105 01       		.byte	0x1
 585 1106 C101     		.uleb128 0xc1
 586 1108 5F53495A 		.ascii	"_SIZE_T_ \000"
 586      455F545F 
 586      2000
 587 1112 01       		.byte	0x1
 588 1113 C201     		.uleb128 0xc2
 589 1115 5F425344 		.ascii	"_BSD_SIZE_T_ \000"
 589      5F53495A 
 589      455F545F 
 589      2000
 590 1123 01       		.byte	0x1
 591 1124 C301     		.uleb128 0xc3
 592 1126 5F53495A 		.ascii	"_SIZE_T_DEFINED_ \000"
 592      455F545F 
 592      44454649 
 592      4E45445F 
 592      2000
 593 1138 01       		.byte	0x1
 594 1139 C401     		.uleb128 0xc4
 595 113b 5F53495A 		.ascii	"_SIZE_T_DEFINED \000"
 595      455F545F 
 595      44454649 
 595      4E454420 
 595      00
 596 114c 01       		.byte	0x1
 597 114d C501     		.uleb128 0xc5
 598 114f 5F425344 		.ascii	"_BSD_SIZE_T_DEFINED_ \000"
 598      5F53495A 
 598      455F545F 
 598      44454649 
 598      4E45445F 
 599 1165 01       		.byte	0x1
 600 1166 C601     		.uleb128 0xc6
 601 1168 5F53495A 		.ascii	"_SIZE_T_DECLARED \000"
 601      455F545F 
ARM GAS  /tmp/cch3WSAd.s 			page 23


 601      4445434C 
 601      41524544 
 601      2000
 602 117a 01       		.byte	0x1
 603 117b C701     		.uleb128 0xc7
 604 117d 5F5F5F69 		.ascii	"___int_size_t_h \000"
 604      6E745F73 
 604      697A655F 
 604      745F6820 
 604      00
 605 118e 01       		.byte	0x1
 606 118f C801     		.uleb128 0xc8
 607 1191 5F474343 		.ascii	"_GCC_SIZE_T \000"
 607      5F53495A 
 607      455F5420 
 607      00
 608 119e 01       		.byte	0x1
 609 119f C901     		.uleb128 0xc9
 610 11a1 5F53495A 		.ascii	"_SIZET_ \000"
 610      45545F20 
 610      00
 611 11aa 01       		.byte	0x1
 612 11ab CD01     		.uleb128 0xcd
 613 11ad 5F5F7369 		.ascii	"__size_t \000"
 613      7A655F74 
 613      2000
 614 11b7 02       		.byte	0x2
 615 11b8 E901     		.uleb128 0xe9
 616 11ba 5F5F6E65 		.ascii	"__need_size_t\000"
 616      65645F73 
 616      697A655F 
 616      7400
 617 11c8 01       		.byte	0x1
 618 11c9 8602     		.uleb128 0x106
 619 11cb 5F5F7763 		.ascii	"__wchar_t__ \000"
 619      6861725F 
 619      745F5F20 
 619      00
 620 11d8 01       		.byte	0x1
 621 11d9 8702     		.uleb128 0x107
 622 11db 5F5F5743 		.ascii	"__WCHAR_T__ \000"
 622      4841525F 
 622      545F5F20 
 622      00
 623 11e8 01       		.byte	0x1
 624 11e9 8802     		.uleb128 0x108
 625 11eb 5F574348 		.ascii	"_WCHAR_T \000"
 625      41525F54 
 625      2000
 626 11f5 01       		.byte	0x1
 627 11f6 8902     		.uleb128 0x109
 628 11f8 5F545F57 		.ascii	"_T_WCHAR_ \000"
 628      43484152 
 628      5F2000
 629 1203 01       		.byte	0x1
 630 1204 8A02     		.uleb128 0x10a
 631 1206 5F545F57 		.ascii	"_T_WCHAR \000"
ARM GAS  /tmp/cch3WSAd.s 			page 24


 631      43484152 
 631      2000
 632 1210 01       		.byte	0x1
 633 1211 8B02     		.uleb128 0x10b
 634 1213 5F5F5743 		.ascii	"__WCHAR_T \000"
 634      4841525F 
 634      542000
 635 121e 01       		.byte	0x1
 636 121f 8C02     		.uleb128 0x10c
 637 1221 5F574348 		.ascii	"_WCHAR_T_ \000"
 637      41525F54 
 637      5F2000
 638 122c 01       		.byte	0x1
 639 122d 8D02     		.uleb128 0x10d
 640 122f 5F425344 		.ascii	"_BSD_WCHAR_T_ \000"
 640      5F574348 
 640      41525F54 
 640      5F2000
 641 123e 01       		.byte	0x1
 642 123f 8E02     		.uleb128 0x10e
 643 1241 5F574348 		.ascii	"_WCHAR_T_DEFINED_ \000"
 643      41525F54 
 643      5F444546 
 643      494E4544 
 643      5F2000
 644 1254 01       		.byte	0x1
 645 1255 8F02     		.uleb128 0x10f
 646 1257 5F574348 		.ascii	"_WCHAR_T_DEFINED \000"
 646      41525F54 
 646      5F444546 
 646      494E4544 
 646      2000
 647 1269 01       		.byte	0x1
 648 126a 9002     		.uleb128 0x110
 649 126c 5F574348 		.ascii	"_WCHAR_T_H \000"
 649      41525F54 
 649      5F482000 
 650 1278 01       		.byte	0x1
 651 1279 9102     		.uleb128 0x111
 652 127b 5F5F5F69 		.ascii	"___int_wchar_t_h \000"
 652      6E745F77 
 652      63686172 
 652      5F745F68 
 652      2000
 653 128d 01       		.byte	0x1
 654 128e 9202     		.uleb128 0x112
 655 1290 5F5F494E 		.ascii	"__INT_WCHAR_T_H \000"
 655      545F5743 
 655      4841525F 
 655      545F4820 
 655      00
 656 12a1 01       		.byte	0x1
 657 12a2 9302     		.uleb128 0x113
 658 12a4 5F474343 		.ascii	"_GCC_WCHAR_T \000"
 658      5F574348 
 658      41525F54 
 658      2000
ARM GAS  /tmp/cch3WSAd.s 			page 25


 659 12b2 01       		.byte	0x1
 660 12b3 9402     		.uleb128 0x114
 661 12b5 5F574348 		.ascii	"_WCHAR_T_DECLARED \000"
 661      41525F54 
 661      5F444543 
 661      4C415245 
 661      442000
 662 12c8 02       		.byte	0x2
 663 12c9 A102     		.uleb128 0x121
 664 12cb 5F425344 		.ascii	"_BSD_WCHAR_T_\000"
 664      5F574348 
 664      41525F54 
 664      5F00
 665 12d9 02       		.byte	0x2
 666 12da D602     		.uleb128 0x156
 667 12dc 5F5F6E65 		.ascii	"__need_wchar_t\000"
 667      65645F77 
 667      63686172 
 667      5F7400
 668 12eb 02       		.byte	0x2
 669 12ec 9603     		.uleb128 0x196
 670 12ee 5F5F6E65 		.ascii	"__need_NULL\000"
 670      65645F4E 
 670      554C4C00 
 671 12fa 04       		.byte	0x4
 672              		.file 8 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../l
 673 12fb 03       		.byte	0x3
 674 12fc 15       		.uleb128 0x15
 675 12fd 08       		.uleb128 0x8
 676 12fe 01       		.byte	0x1
 677 12ff 0B       		.uleb128 0xb
 678 1300 5F535953 		.ascii	"_SYS_REENT_H_ \000"
 678      5F524545 
 678      4E545F48 
 678      5F2000
 679 130f 03       		.byte	0x3
 680 1310 0D       		.uleb128 0xd
 681 1311 03       		.uleb128 0x3
 682 1312 04       		.byte	0x4
 683              		.file 9 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../l
 684 1313 03       		.byte	0x3
 685 1314 0E       		.uleb128 0xe
 686 1315 09       		.uleb128 0x9
 687 1316 01       		.byte	0x1
 688 1317 0A       		.uleb128 0xa
 689 1318 5F535953 		.ascii	"_SYS__TYPES_H \000"
 689      5F5F5459 
 689      5045535F 
 689      482000
 690              		.file 10 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 691 1327 03       		.byte	0x3
 692 1328 0C       		.uleb128 0xc
 693 1329 0A       		.uleb128 0xa
 694 132a 01       		.byte	0x1
 695 132b 06       		.uleb128 0x6
 696 132c 5F4D4143 		.ascii	"_MACHINE__TYPES_H \000"
 696      48494E45 
ARM GAS  /tmp/cch3WSAd.s 			page 26


 696      5F5F5459 
 696      5045535F 
 696      482000
 697              		.file 11 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 698 133f 03       		.byte	0x3
 699 1340 07       		.uleb128 0x7
 700 1341 0B       		.uleb128 0xb
 701 1342 01       		.byte	0x1
 702 1343 06       		.uleb128 0x6
 703 1344 5F4D4143 		.ascii	"_MACHINE__DEFAULT_TYPES_H \000"
 703      48494E45 
 703      5F5F4445 
 703      4641554C 
 703      545F5459 
 704 135f 01       		.byte	0x1
 705 1360 12       		.uleb128 0x12
 706 1361 5F5F4558 		.ascii	"__EXP(x) __ ##x ##__\000"
 706      50287829 
 706      205F5F20 
 706      23237820 
 706      23235F5F 
 707 1376 01       		.byte	0x1
 708 1377 1C       		.uleb128 0x1c
 709 1378 5F5F5F69 		.ascii	"___int8_t_defined 1\000"
 709      6E74385F 
 709      745F6465 
 709      66696E65 
 709      64203100 
 710 138c 01       		.byte	0x1
 711 138d 26       		.uleb128 0x26
 712 138e 5F5F5F69 		.ascii	"___int16_t_defined 1\000"
 712      6E743136 
 712      5F745F64 
 712      6566696E 
 712      65642031 
 713 13a3 01       		.byte	0x1
 714 13a4 30       		.uleb128 0x30
 715 13a5 5F5F5F69 		.ascii	"___int_least16_t_defined 1\000"
 715      6E745F6C 
 715      65617374 
 715      31365F74 
 715      5F646566 
 716 13c0 01       		.byte	0x1
 717 13c1 3C       		.uleb128 0x3c
 718 13c2 5F5F5F69 		.ascii	"___int32_t_defined 1\000"
 718      6E743332 
 718      5F745F64 
 718      6566696E 
 718      65642031 
 719 13d7 01       		.byte	0x1
 720 13d8 4E       		.uleb128 0x4e
 721 13d9 5F5F5F69 		.ascii	"___int_least32_t_defined 1\000"
 721      6E745F6C 
 721      65617374 
 721      33325F74 
 721      5F646566 
 722 13f4 01       		.byte	0x1
ARM GAS  /tmp/cch3WSAd.s 			page 27


 723 13f5 65       		.uleb128 0x65
 724 13f6 5F5F5F69 		.ascii	"___int64_t_defined 1\000"
 724      6E743634 
 724      5F745F64 
 724      6566696E 
 724      65642031 
 725 140b 02       		.byte	0x2
 726 140c 73       		.uleb128 0x73
 727 140d 5F5F4558 		.ascii	"__EXP\000"
 727      5000
 728 1413 04       		.byte	0x4
 729 1414 04       		.byte	0x4
 730              		.file 12 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 731 1415 03       		.byte	0x3
 732 1416 0D       		.uleb128 0xd
 733 1417 0C       		.uleb128 0xc
 734 1418 01       		.byte	0x1
 735 1419 02       		.uleb128 0x2
 736 141a 5F5F5359 		.ascii	"__SYS_LOCK_H__ \000"
 736      535F4C4F 
 736      434B5F48 
 736      5F5F2000 
 737 142a 01       		.byte	0x1
 738 142b 0B       		.uleb128 0xb
 739 142c 5F5F4C4F 		.ascii	"__LOCK_INIT(class,lock) static int lock = 0;\000"
 739      434B5F49 
 739      4E495428 
 739      636C6173 
 739      732C6C6F 
 740 1459 01       		.byte	0x1
 741 145a 0C       		.uleb128 0xc
 742 145b 5F5F4C4F 		.ascii	"__LOCK_INIT_RECURSIVE(class,lock) static int lock ="
 742      434B5F49 
 742      4E49545F 
 742      52454355 
 742      52534956 
 743 148e 20303B00 		.ascii	" 0;\000"
 744 1492 01       		.byte	0x1
 745 1493 0D       		.uleb128 0xd
 746 1494 5F5F6C6F 		.ascii	"__lock_init(lock) (_CAST_VOID 0)\000"
 746      636B5F69 
 746      6E697428 
 746      6C6F636B 
 746      2920285F 
 747 14b5 01       		.byte	0x1
 748 14b6 0E       		.uleb128 0xe
 749 14b7 5F5F6C6F 		.ascii	"__lock_init_recursive(lock) (_CAST_VOID 0)\000"
 749      636B5F69 
 749      6E69745F 
 749      72656375 
 749      72736976 
 750 14e2 01       		.byte	0x1
 751 14e3 0F       		.uleb128 0xf
 752 14e4 5F5F6C6F 		.ascii	"__lock_close(lock) (_CAST_VOID 0)\000"
 752      636B5F63 
 752      6C6F7365 
 752      286C6F63 
ARM GAS  /tmp/cch3WSAd.s 			page 28


 752      6B292028 
 753 1506 01       		.byte	0x1
 754 1507 10       		.uleb128 0x10
 755 1508 5F5F6C6F 		.ascii	"__lock_close_recursive(lock) (_CAST_VOID 0)\000"
 755      636B5F63 
 755      6C6F7365 
 755      5F726563 
 755      75727369 
 756 1534 01       		.byte	0x1
 757 1535 11       		.uleb128 0x11
 758 1536 5F5F6C6F 		.ascii	"__lock_acquire(lock) (_CAST_VOID 0)\000"
 758      636B5F61 
 758      63717569 
 758      7265286C 
 758      6F636B29 
 759 155a 01       		.byte	0x1
 760 155b 12       		.uleb128 0x12
 761 155c 5F5F6C6F 		.ascii	"__lock_acquire_recursive(lock) (_CAST_VOID 0)\000"
 761      636B5F61 
 761      63717569 
 761      72655F72 
 761      65637572 
 762 158a 01       		.byte	0x1
 763 158b 13       		.uleb128 0x13
 764 158c 5F5F6C6F 		.ascii	"__lock_try_acquire(lock) (_CAST_VOID 0)\000"
 764      636B5F74 
 764      72795F61 
 764      63717569 
 764      7265286C 
 765 15b4 01       		.byte	0x1
 766 15b5 14       		.uleb128 0x14
 767 15b6 5F5F6C6F 		.ascii	"__lock_try_acquire_recursive(lock) (_CAST_VOID 0)\000"
 767      636B5F74 
 767      72795F61 
 767      63717569 
 767      72655F72 
 768 15e8 01       		.byte	0x1
 769 15e9 15       		.uleb128 0x15
 770 15ea 5F5F6C6F 		.ascii	"__lock_release(lock) (_CAST_VOID 0)\000"
 770      636B5F72 
 770      656C6561 
 770      7365286C 
 770      6F636B29 
 771 160e 01       		.byte	0x1
 772 160f 16       		.uleb128 0x16
 773 1610 5F5F6C6F 		.ascii	"__lock_release_recursive(lock) (_CAST_VOID 0)\000"
 773      636B5F72 
 773      656C6561 
 773      73655F72 
 773      65637572 
 774 163e 04       		.byte	0x4
 775 163f 01       		.byte	0x1
 776 1640 3E       		.uleb128 0x3e
 777 1641 5F5F6E65 		.ascii	"__need_wint_t \000"
 777      65645F77 
 777      696E745F 
 777      742000
ARM GAS  /tmp/cch3WSAd.s 			page 29


 778 1650 03       		.byte	0x3
 779 1651 3F       		.uleb128 0x3f
 780 1652 07       		.uleb128 0x7
 781 1653 01       		.byte	0x1
 782 1654 DB02     		.uleb128 0x15b
 783 1656 5F57494E 		.ascii	"_WINT_T \000"
 783      545F5420 
 783      00
 784 165f 02       		.byte	0x2
 785 1660 E202     		.uleb128 0x162
 786 1662 5F5F6E65 		.ascii	"__need_wint_t\000"
 786      65645F77 
 786      696E745F 
 786      7400
 787 1670 02       		.byte	0x2
 788 1671 9603     		.uleb128 0x196
 789 1673 5F5F6E65 		.ascii	"__need_NULL\000"
 789      65645F4E 
 789      554C4C00 
 790 167f 04       		.byte	0x4
 791 1680 04       		.byte	0x4
 792 1681 01       		.byte	0x1
 793 1682 10       		.uleb128 0x10
 794 1683 5F4E554C 		.ascii	"_NULL 0\000"
 794      4C203000 
 795 168b 01       		.byte	0x1
 796 168c 14       		.uleb128 0x14
 797 168d 5F5F4C6F 		.ascii	"__Long long\000"
 797      6E67206C 
 797      6F6E6700 
 798 1699 01       		.byte	0x1
 799 169a 45       		.uleb128 0x45
 800 169b 5F415445 		.ascii	"_ATEXIT_SIZE 32\000"
 800      5849545F 
 800      53495A45 
 800      20333200 
 801 16ab 01       		.byte	0x1
 802 16ac 9E01     		.uleb128 0x9e
 803 16ae 5F524545 		.ascii	"_REENT_SMALL_CHECK_INIT(ptr) do { if ((ptr) && !(pt"
 803      4E545F53 
 803      4D414C4C 
 803      5F434845 
 803      434B5F49 
 804 16e1 72292D3E 		.ascii	"r)->__sdidinit) __sinit (ptr); } while (0)\000"
 804      5F5F7364 
 804      6964696E 
 804      69742920 
 804      5F5F7369 
 805 170c 01       		.byte	0x1
 806 170d B702     		.uleb128 0x137
 807 170f 5F52414E 		.ascii	"_RAND48_SEED_0 (0x330e)\000"
 807      4434385F 
 807      53454544 
 807      5F302028 
 807      30783333 
 808 1727 01       		.byte	0x1
 809 1728 B802     		.uleb128 0x138
ARM GAS  /tmp/cch3WSAd.s 			page 30


 810 172a 5F52414E 		.ascii	"_RAND48_SEED_1 (0xabcd)\000"
 810      4434385F 
 810      53454544 
 810      5F312028 
 810      30786162 
 811 1742 01       		.byte	0x1
 812 1743 B902     		.uleb128 0x139
 813 1745 5F52414E 		.ascii	"_RAND48_SEED_2 (0x1234)\000"
 813      4434385F 
 813      53454544 
 813      5F322028 
 813      30783132 
 814 175d 01       		.byte	0x1
 815 175e BA02     		.uleb128 0x13a
 816 1760 5F52414E 		.ascii	"_RAND48_MULT_0 (0xe66d)\000"
 816      4434385F 
 816      4D554C54 
 816      5F302028 
 816      30786536 
 817 1778 01       		.byte	0x1
 818 1779 BB02     		.uleb128 0x13b
 819 177b 5F52414E 		.ascii	"_RAND48_MULT_1 (0xdeec)\000"
 819      4434385F 
 819      4D554C54 
 819      5F312028 
 819      30786465 
 820 1793 01       		.byte	0x1
 821 1794 BC02     		.uleb128 0x13c
 822 1796 5F52414E 		.ascii	"_RAND48_MULT_2 (0x0005)\000"
 822      4434385F 
 822      4D554C54 
 822      5F322028 
 822      30783030 
 823 17ae 01       		.byte	0x1
 824 17af BD02     		.uleb128 0x13d
 825 17b1 5F52414E 		.ascii	"_RAND48_ADD (0x000b)\000"
 825      4434385F 
 825      41444420 
 825      28307830 
 825      30306229 
 826 17c6 01       		.byte	0x1
 827 17c7 C902     		.uleb128 0x149
 828 17c9 5F524545 		.ascii	"_REENT_EMERGENCY_SIZE 25\000"
 828      4E545F45 
 828      4D455247 
 828      454E4359 
 828      5F53495A 
 829 17e2 01       		.byte	0x1
 830 17e3 CA02     		.uleb128 0x14a
 831 17e5 5F524545 		.ascii	"_REENT_ASCTIME_SIZE 26\000"
 831      4E545F41 
 831      53435449 
 831      4D455F53 
 831      495A4520 
 832 17fc 01       		.byte	0x1
 833 17fd CB02     		.uleb128 0x14b
 834 17ff 5F524545 		.ascii	"_REENT_SIGNAL_SIZE 24\000"
ARM GAS  /tmp/cch3WSAd.s 			page 31


 834      4E545F53 
 834      49474E41 
 834      4C5F5349 
 834      5A452032 
 835 1815 01       		.byte	0x1
 836 1816 AE03     		.uleb128 0x1ae
 837 1818 5F524545 		.ascii	"_REENT_INIT(var) { 0, (__FILE *)&__sf_fake_stdin, ("
 837      4E545F49 
 837      4E495428 
 837      76617229 
 837      207B2030 
 838 184b 5F5F4649 		.ascii	"__FILE *)&__sf_fake_stdout, (__FILE *)&__sf_fake_st"
 838      4C45202A 
 838      29265F5F 
 838      73665F66 
 838      616B655F 
 839 187e 64657272 		.ascii	"derr, 0, _NULL, 0, 0, \"C\", _NULL, _NULL, 0, 0, _N"
 839      2C20302C 
 839      205F4E55 
 839      4C4C2C20 
 839      302C2030 
 840 18af 554C4C2C 		.ascii	"ULL, _NULL, _NULL, _NULL, _NULL, _NULL, {_NULL, 0, "
 840      205F4E55 
 840      4C4C2C20 
 840      5F4E554C 
 840      4C2C205F 
 841 18e2 7B5F4E55 		.ascii	"{_NULL}, _NULL}, {_NULL, 0, _NULL}, _NULL, _NULL, _"
 841      4C4C7D2C 
 841      205F4E55 
 841      4C4C7D2C 
 841      207B5F4E 
 842 1915 4E554C4C 		.ascii	"NULL }\000"
 842      207D00
 843 191c 01       		.byte	0x1
 844 191d C903     		.uleb128 0x1c9
 845 191f 5F524545 		.ascii	"_REENT_INIT_PTR(var) { (var)->_stdin = (__FILE *)&_"
 845      4E545F49 
 845      4E49545F 
 845      50545228 
 845      76617229 
 846 1952 5F73665F 		.ascii	"_sf_fake_stdin; (var)->_stdout = (__FILE *)&__sf_fa"
 846      66616B65 
 846      5F737464 
 846      696E3B20 
 846      28766172 
 847 1985 6B655F73 		.ascii	"ke_stdout; (var)->_stderr = (__FILE *)&__sf_fake_st"
 847      74646F75 
 847      743B2028 
 847      76617229 
 847      2D3E5F73 
 848 19b8 64657272 		.ascii	"derr; (var)->_errno = 0; (var)->_inc = 0; (var)->_e"
 848      3B202876 
 848      6172292D 
 848      3E5F6572 
 848      726E6F20 
 849 19eb 6D657267 		.ascii	"mergency = _NULL; (var)->__sdidinit = 0; (var)->_cu"
 849      656E6379 
ARM GAS  /tmp/cch3WSAd.s 			page 32


 849      203D205F 
 849      4E554C4C 
 849      3B202876 
 850 1a1e 7272656E 		.ascii	"rrent_category = 0; (var)->_current_locale = \"C\";"
 850      745F6361 
 850      7465676F 
 850      7279203D 
 850      20303B20 
 851 1a4f 20287661 		.ascii	" (var)->_mp = _NULL; (var)->__cleanup = _NULL; (var"
 851      72292D3E 
 851      5F6D7020 
 851      3D205F4E 
 851      554C4C3B 
 852 1a82 292D3E5F 		.ascii	")->_gamma_signgam = 0; (var)->_cvtlen = 0; (var)->_"
 852      67616D6D 
 852      615F7369 
 852      676E6761 
 852      6D203D20 
 853 1ab5 63767462 		.ascii	"cvtbuf = _NULL; (var)->_r48 = _NULL; (var)->_localt"
 853      7566203D 
 853      205F4E55 
 853      4C4C3B20 
 853      28766172 
 854 1ae8 696D655F 		.ascii	"ime_buf = _NULL; (var)->_asctime_buf = _NULL; (var)"
 854      62756620 
 854      3D205F4E 
 854      554C4C3B 
 854      20287661 
 855 1b1b 2D3E5F73 		.ascii	"->_sig_func = _NULL; (var)->_atexit = _NULL; (var)-"
 855      69675F66 
 855      756E6320 
 855      3D205F4E 
 855      554C4C3B 
 856 1b4e 3E5F6174 		.ascii	">_atexit0._next = _NULL; (var)->_atexit0._ind = 0; "
 856      65786974 
 856      302E5F6E 
 856      65787420 
 856      3D205F4E 
 857 1b81 28766172 		.ascii	"(var)->_atexit0._fns[0] = _NULL; (var)->_atexit0._o"
 857      292D3E5F 
 857      61746578 
 857      6974302E 
 857      5F666E73 
 858 1bb4 6E5F6578 		.ascii	"n_exit_args_ptr = _NULL; (var)->__sglue._next = _NU"
 858      69745F61 
 858      7267735F 
 858      70747220 
 858      3D205F4E 
 859 1be7 4C4C3B20 		.ascii	"LL; (var)->__sglue._niobs = 0; (var)->__sglue._iobs"
 859      28766172 
 859      292D3E5F 
 859      5F73676C 
 859      75652E5F 
 860 1c1a 203D205F 		.ascii	" = _NULL; (var)->__sf = 0; (var)->_misc = _NULL; (v"
 860      4E554C4C 
 860      3B202876 
 860      6172292D 
ARM GAS  /tmp/cch3WSAd.s 			page 33


 860      3E5F5F73 
 861 1c4d 6172292D 		.ascii	"ar)->_signal_buf = _NULL; }\000"
 861      3E5F7369 
 861      676E616C 
 861      5F627566 
 861      203D205F 
 862              		.file 13 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 863 1c69 03       		.byte	0x3
 864 1c6a EB03     		.uleb128 0x1eb
 865 1c6c 0D       		.uleb128 0xd
 866 1c6d 02       		.byte	0x2
 867 1c6e 0B       		.uleb128 0xb
 868 1c6f 61737365 		.ascii	"assert\000"
 868      727400
 869 1c76 01       		.byte	0x1
 870 1c77 1A       		.uleb128 0x1a
 871 1c78 61737365 		.ascii	"assert(__e) ((__e) ? (void)0 : __assert_func (__FIL"
 871      7274285F 
 871      5F652920 
 871      28285F5F 
 871      6529203F 
 872 1cab 455F5F2C 		.ascii	"E__, __LINE__, __ASSERT_FUNC, #__e))\000"
 872      205F5F4C 
 872      494E455F 
 872      5F2C205F 
 872      5F415353 
 873 1cd0 01       		.byte	0x1
 874 1cd1 23       		.uleb128 0x23
 875 1cd2 5F5F4153 		.ascii	"__ASSERT_FUNC __func__\000"
 875      53455254 
 875      5F46554E 
 875      43205F5F 
 875      66756E63 
 876 1ce9 04       		.byte	0x4
 877 1cea 01       		.byte	0x1
 878 1ceb EC03     		.uleb128 0x1ec
 879 1ced 5F5F7265 		.ascii	"__reent_assert(x) assert(x)\000"
 879      656E745F 
 879      61737365 
 879      72742878 
 879      29206173 
 880 1d09 01       		.byte	0x1
 881 1d0a F603     		.uleb128 0x1f6
 882 1d0c 5F524545 		.ascii	"_REENT_CHECK(var,what,type,size,init) do { struct _"
 882      4E545F43 
 882      4845434B 
 882      28766172 
 882      2C776861 
 883 1d3f 7265656E 		.ascii	"reent *_r = (var); if (_r->what == NULL) { _r->what"
 883      74202A5F 
 883      72203D20 
 883      28766172 
 883      293B2069 
 884 1d72 203D2028 		.ascii	" = (type)malloc(size); __reent_assert(_r->what); in"
 884      74797065 
 884      296D616C 
 884      6C6F6328 
ARM GAS  /tmp/cch3WSAd.s 			page 34


 884      73697A65 
 885 1da5 69743B20 		.ascii	"it; } } while (0)\000"
 885      7D207D20 
 885      7768696C 
 885      65202830 
 885      2900
 886 1db7 01       		.byte	0x1
 887 1db8 FF03     		.uleb128 0x1ff
 888 1dba 5F524545 		.ascii	"_REENT_CHECK_TM(var) _REENT_CHECK(var, _localtime_b"
 888      4E545F43 
 888      4845434B 
 888      5F544D28 
 888      76617229 
 889 1ded 75662C20 		.ascii	"uf, struct __tm *, sizeof *((var)->_localtime_buf),"
 889      73747275 
 889      6374205F 
 889      5F746D20 
 889      2A2C2073 
 890 1e20 202900   		.ascii	" )\000"
 891 1e23 01       		.byte	0x1
 892 1e24 8304     		.uleb128 0x203
 893 1e26 5F524545 		.ascii	"_REENT_CHECK_ASCTIME_BUF(var) _REENT_CHECK(var, _as"
 893      4E545F43 
 893      4845434B 
 893      5F415343 
 893      54494D45 
 894 1e59 6374696D 		.ascii	"ctime_buf, char *, _REENT_ASCTIME_SIZE, memset((var"
 894      655F6275 
 894      662C2063 
 894      68617220 
 894      2A2C205F 
 895 1e8c 292D3E5F 		.ascii	")->_asctime_buf, 0, _REENT_ASCTIME_SIZE))\000"
 895      61736374 
 895      696D655F 
 895      6275662C 
 895      20302C20 
 896 1eb6 01       		.byte	0x1
 897 1eb7 8804     		.uleb128 0x208
 898 1eb9 5F524545 		.ascii	"_REENT_INIT_RAND48(var) do { struct _reent *_r = (v"
 898      4E545F49 
 898      4E49545F 
 898      52414E44 
 898      34382876 
 899 1eec 6172293B 		.ascii	"ar); _r->_r48->_seed[0] = _RAND48_SEED_0; _r->_r48-"
 899      205F722D 
 899      3E5F7234 
 899      382D3E5F 
 899      73656564 
 900 1f1f 3E5F7365 		.ascii	">_seed[1] = _RAND48_SEED_1; _r->_r48->_seed[2] = _R"
 900      65645B31 
 900      5D203D20 
 900      5F52414E 
 900      4434385F 
 901 1f52 414E4434 		.ascii	"AND48_SEED_2; _r->_r48->_mult[0] = _RAND48_MULT_0; "
 901      385F5345 
 901      45445F32 
 901      3B205F72 
ARM GAS  /tmp/cch3WSAd.s 			page 35


 901      2D3E5F72 
 902 1f85 5F722D3E 		.ascii	"_r->_r48->_mult[1] = _RAND48_MULT_1; _r->_r48->_mul"
 902      5F723438 
 902      2D3E5F6D 
 902      756C745B 
 902      315D203D 
 903 1fb8 745B325D 		.ascii	"t[2] = _RAND48_MULT_2; _r->_r48->_add = _RAND48_ADD"
 903      203D205F 
 903      52414E44 
 903      34385F4D 
 903      554C545F 
 904 1feb 3B205F72 		.ascii	"; _r->_r48->_rand_next = 1; } while (0)\000"
 904      2D3E5F72 
 904      34382D3E 
 904      5F72616E 
 904      645F6E65 
 905 2013 01       		.byte	0x1
 906 2014 9304     		.uleb128 0x213
 907 2016 5F524545 		.ascii	"_REENT_CHECK_RAND48(var) _REENT_CHECK(var, _r48, st"
 907      4E545F43 
 907      4845434B 
 907      5F52414E 
 907      44343828 
 908 2049 72756374 		.ascii	"ruct _rand48 *, sizeof *((var)->_r48), _REENT_INIT_"
 908      205F7261 
 908      6E643438 
 908      202A2C20 
 908      73697A65 
 909 207c 52414E44 		.ascii	"RAND48((var)))\000"
 909      34382828 
 909      76617229 
 909      292900
 910 208b 01       		.byte	0x1
 911 208c 9604     		.uleb128 0x216
 912 208e 5F524545 		.ascii	"_REENT_INIT_MP(var) do { struct _reent *_r = (var);"
 912      4E545F49 
 912      4E49545F 
 912      4D502876 
 912      61722920 
 913 20c1 205F722D 		.ascii	" _r->_mp->_result_k = 0; _r->_mp->_result = _r->_mp"
 913      3E5F6D70 
 913      2D3E5F72 
 913      6573756C 
 913      745F6B20 
 914 20f4 2D3E5F70 		.ascii	"->_p5s = _NULL; _r->_mp->_freelist = _NULL; } while"
 914      3573203D 
 914      205F4E55 
 914      4C4C3B20 
 914      5F722D3E 
 915 2127 20283029 		.ascii	" (0)\000"
 915      00
 916 212c 01       		.byte	0x1
 917 212d 9C04     		.uleb128 0x21c
 918 212f 5F524545 		.ascii	"_REENT_CHECK_MP(var) _REENT_CHECK(var, _mp, struct "
 918      4E545F43 
 918      4845434B 
 918      5F4D5028 
ARM GAS  /tmp/cch3WSAd.s 			page 36


 918      76617229 
 919 2162 5F6D7072 		.ascii	"_mprec *, sizeof *((var)->_mp), _REENT_INIT_MP(var)"
 919      6563202A 
 919      2C207369 
 919      7A656F66 
 919      202A2828 
 920 2195 2900     		.ascii	")\000"
 921 2197 01       		.byte	0x1
 922 2198 9F04     		.uleb128 0x21f
 923 219a 5F524545 		.ascii	"_REENT_CHECK_EMERGENCY(var) _REENT_CHECK(var, _emer"
 923      4E545F43 
 923      4845434B 
 923      5F454D45 
 923      5247454E 
 924 21cd 67656E63 		.ascii	"gency, char *, _REENT_EMERGENCY_SIZE, )\000"
 924      792C2063 
 924      68617220 
 924      2A2C205F 
 924      5245454E 
 925 21f5 01       		.byte	0x1
 926 21f6 A204     		.uleb128 0x222
 927 21f8 5F524545 		.ascii	"_REENT_INIT_MISC(var) do { struct _reent *_r = (var"
 927      4E545F49 
 927      4E49545F 
 927      4D495343 
 927      28766172 
 928 222b 293B205F 		.ascii	"); _r->_misc->_strtok_last = _NULL; _r->_misc->_mbl"
 928      722D3E5F 
 928      6D697363 
 928      2D3E5F73 
 928      7472746F 
 929 225e 656E5F73 		.ascii	"en_state.__count = 0; _r->_misc->_mblen_state.__val"
 929      74617465 
 929      2E5F5F63 
 929      6F756E74 
 929      203D2030 
 930 2291 75652E5F 		.ascii	"ue.__wch = 0; _r->_misc->_wctomb_state.__count = 0;"
 930      5F776368 
 930      203D2030 
 930      3B205F72 
 930      2D3E5F6D 
 931 22c4 205F722D 		.ascii	" _r->_misc->_wctomb_state.__value.__wch = 0; _r->_m"
 931      3E5F6D69 
 931      73632D3E 
 931      5F776374 
 931      6F6D625F 
 932 22f7 6973632D 		.ascii	"isc->_mbtowc_state.__count = 0; _r->_misc->_mbtowc_"
 932      3E5F6D62 
 932      746F7763 
 932      5F737461 
 932      74652E5F 
 933 232a 73746174 		.ascii	"state.__value.__wch = 0; _r->_misc->_mbrlen_state._"
 933      652E5F5F 
 933      76616C75 
 933      652E5F5F 
 933      77636820 
 934 235d 5F636F75 		.ascii	"_count = 0; _r->_misc->_mbrlen_state.__value.__wch "
ARM GAS  /tmp/cch3WSAd.s 			page 37


 934      6E74203D 
 934      20303B20 
 934      5F722D3E 
 934      5F6D6973 
 935 2390 3D20303B 		.ascii	"= 0; _r->_misc->_mbrtowc_state.__count = 0; _r->_mi"
 935      205F722D 
 935      3E5F6D69 
 935      73632D3E 
 935      5F6D6272 
 936 23c3 73632D3E 		.ascii	"sc->_mbrtowc_state.__value.__wch = 0; _r->_misc->_m"
 936      5F6D6272 
 936      746F7763 
 936      5F737461 
 936      74652E5F 
 937 23f6 62737274 		.ascii	"bsrtowcs_state.__count = 0; _r->_misc->_mbsrtowcs_s"
 937      6F776373 
 937      5F737461 
 937      74652E5F 
 937      5F636F75 
 938 2429 74617465 		.ascii	"tate.__value.__wch = 0; _r->_misc->_wcrtomb_state._"
 938      2E5F5F76 
 938      616C7565 
 938      2E5F5F77 
 938      6368203D 
 939 245c 5F636F75 		.ascii	"_count = 0; _r->_misc->_wcrtomb_state.__value.__wch"
 939      6E74203D 
 939      20303B20 
 939      5F722D3E 
 939      5F6D6973 
 940 248f 203D2030 		.ascii	" = 0; _r->_misc->_wcsrtombs_state.__count = 0; _r->"
 940      3B205F72 
 940      2D3E5F6D 
 940      6973632D 
 940      3E5F7763 
 941 24c2 5F6D6973 		.ascii	"_misc->_wcsrtombs_state.__value.__wch = 0; _r->_mis"
 941      632D3E5F 
 941      77637372 
 941      746F6D62 
 941      735F7374 
 942 24f5 632D3E5F 		.ascii	"c->_l64a_buf[0] = '\\0'; _r->_misc->_getdate_err = "
 942      6C363461 
 942      5F627566 
 942      5B305D20 
 942      3D20275C 
 943 2527 303B207D 		.ascii	"0; } while (0)\000"
 943      20776869 
 943      6C652028 
 943      302900
 944 2536 01       		.byte	0x1
 945 2537 B804     		.uleb128 0x238
 946 2539 5F524545 		.ascii	"_REENT_CHECK_MISC(var) _REENT_CHECK(var, _misc, str"
 946      4E545F43 
 946      4845434B 
 946      5F4D4953 
 946      43287661 
 947 256c 75637420 		.ascii	"uct _misc_reent *, sizeof *((var)->_misc), _REENT_I"
 947      5F6D6973 
ARM GAS  /tmp/cch3WSAd.s 			page 38


 947      635F7265 
 947      656E7420 
 947      2A2C2073 
 948 259f 4E49545F 		.ascii	"NIT_MISC(var))\000"
 948      4D495343 
 948      28766172 
 948      292900
 949 25ae 01       		.byte	0x1
 950 25af BB04     		.uleb128 0x23b
 951 25b1 5F524545 		.ascii	"_REENT_CHECK_SIGNAL_BUF(var) _REENT_CHECK(var, _sig"
 951      4E545F43 
 951      4845434B 
 951      5F534947 
 951      4E414C5F 
 952 25e4 6E616C5F 		.ascii	"nal_buf, char *, _REENT_SIGNAL_SIZE, )\000"
 952      6275662C 
 952      20636861 
 952      72202A2C 
 952      205F5245 
 953 260b 01       		.byte	0x1
 954 260c BE04     		.uleb128 0x23e
 955 260e 5F524545 		.ascii	"_REENT_SIGNGAM(ptr) ((ptr)->_gamma_signgam)\000"
 955      4E545F53 
 955      49474E47 
 955      414D2870 
 955      74722920 
 956 263a 01       		.byte	0x1
 957 263b BF04     		.uleb128 0x23f
 958 263d 5F524545 		.ascii	"_REENT_RAND_NEXT(ptr) ((ptr)->_r48->_rand_next)\000"
 958      4E545F52 
 958      414E445F 
 958      4E455854 
 958      28707472 
 959 266d 01       		.byte	0x1
 960 266e C004     		.uleb128 0x240
 961 2670 5F524545 		.ascii	"_REENT_RAND48_SEED(ptr) ((ptr)->_r48->_seed)\000"
 961      4E545F52 
 961      414E4434 
 961      385F5345 
 961      45442870 
 962 269d 01       		.byte	0x1
 963 269e C104     		.uleb128 0x241
 964 26a0 5F524545 		.ascii	"_REENT_RAND48_MULT(ptr) ((ptr)->_r48->_mult)\000"
 964      4E545F52 
 964      414E4434 
 964      385F4D55 
 964      4C542870 
 965 26cd 01       		.byte	0x1
 966 26ce C204     		.uleb128 0x242
 967 26d0 5F524545 		.ascii	"_REENT_RAND48_ADD(ptr) ((ptr)->_r48->_add)\000"
 967      4E545F52 
 967      414E4434 
 967      385F4144 
 967      44287074 
 968 26fb 01       		.byte	0x1
 969 26fc C304     		.uleb128 0x243
 970 26fe 5F524545 		.ascii	"_REENT_MP_RESULT(ptr) ((ptr)->_mp->_result)\000"
ARM GAS  /tmp/cch3WSAd.s 			page 39


 970      4E545F4D 
 970      505F5245 
 970      53554C54 
 970      28707472 
 971 272a 01       		.byte	0x1
 972 272b C404     		.uleb128 0x244
 973 272d 5F524545 		.ascii	"_REENT_MP_RESULT_K(ptr) ((ptr)->_mp->_result_k)\000"
 973      4E545F4D 
 973      505F5245 
 973      53554C54 
 973      5F4B2870 
 974 275d 01       		.byte	0x1
 975 275e C504     		.uleb128 0x245
 976 2760 5F524545 		.ascii	"_REENT_MP_P5S(ptr) ((ptr)->_mp->_p5s)\000"
 976      4E545F4D 
 976      505F5035 
 976      53287074 
 976      72292028 
 977 2786 01       		.byte	0x1
 978 2787 C604     		.uleb128 0x246
 979 2789 5F524545 		.ascii	"_REENT_MP_FREELIST(ptr) ((ptr)->_mp->_freelist)\000"
 979      4E545F4D 
 979      505F4652 
 979      45454C49 
 979      53542870 
 980 27b9 01       		.byte	0x1
 981 27ba C704     		.uleb128 0x247
 982 27bc 5F524545 		.ascii	"_REENT_ASCTIME_BUF(ptr) ((ptr)->_asctime_buf)\000"
 982      4E545F41 
 982      53435449 
 982      4D455F42 
 982      55462870 
 983 27ea 01       		.byte	0x1
 984 27eb C804     		.uleb128 0x248
 985 27ed 5F524545 		.ascii	"_REENT_TM(ptr) ((ptr)->_localtime_buf)\000"
 985      4E545F54 
 985      4D287074 
 985      72292028 
 985      28707472 
 986 2814 01       		.byte	0x1
 987 2815 C904     		.uleb128 0x249
 988 2817 5F524545 		.ascii	"_REENT_EMERGENCY(ptr) ((ptr)->_emergency)\000"
 988      4E545F45 
 988      4D455247 
 988      454E4359 
 988      28707472 
 989 2841 01       		.byte	0x1
 990 2842 CA04     		.uleb128 0x24a
 991 2844 5F524545 		.ascii	"_REENT_STRTOK_LAST(ptr) ((ptr)->_misc->_strtok_last"
 991      4E545F53 
 991      5452544F 
 991      4B5F4C41 
 991      53542870 
 992 2877 2900     		.ascii	")\000"
 993 2879 01       		.byte	0x1
 994 287a CB04     		.uleb128 0x24b
 995 287c 5F524545 		.ascii	"_REENT_MBLEN_STATE(ptr) ((ptr)->_misc->_mblen_state"
ARM GAS  /tmp/cch3WSAd.s 			page 40


 995      4E545F4D 
 995      424C454E 
 995      5F535441 
 995      54452870 
 996 28af 2900     		.ascii	")\000"
 997 28b1 01       		.byte	0x1
 998 28b2 CC04     		.uleb128 0x24c
 999 28b4 5F524545 		.ascii	"_REENT_MBTOWC_STATE(ptr) ((ptr)->_misc->_mbtowc_sta"
 999      4E545F4D 
 999      42544F57 
 999      435F5354 
 999      41544528 
 1000 28e7 74652900 		.ascii	"te)\000"
 1001 28eb 01       		.byte	0x1
 1002 28ec CD04     		.uleb128 0x24d
 1003 28ee 5F524545 		.ascii	"_REENT_WCTOMB_STATE(ptr) ((ptr)->_misc->_wctomb_sta"
 1003      4E545F57 
 1003      43544F4D 
 1003      425F5354 
 1003      41544528 
 1004 2921 74652900 		.ascii	"te)\000"
 1005 2925 01       		.byte	0x1
 1006 2926 CE04     		.uleb128 0x24e
 1007 2928 5F524545 		.ascii	"_REENT_MBRLEN_STATE(ptr) ((ptr)->_misc->_mbrlen_sta"
 1007      4E545F4D 
 1007      42524C45 
 1007      4E5F5354 
 1007      41544528 
 1008 295b 74652900 		.ascii	"te)\000"
 1009 295f 01       		.byte	0x1
 1010 2960 CF04     		.uleb128 0x24f
 1011 2962 5F524545 		.ascii	"_REENT_MBRTOWC_STATE(ptr) ((ptr)->_misc->_mbrtowc_s"
 1011      4E545F4D 
 1011      4252544F 
 1011      57435F53 
 1011      54415445 
 1012 2995 74617465 		.ascii	"tate)\000"
 1012      2900
 1013 299b 01       		.byte	0x1
 1014 299c D004     		.uleb128 0x250
 1015 299e 5F524545 		.ascii	"_REENT_MBSRTOWCS_STATE(ptr) ((ptr)->_misc->_mbsrtow"
 1015      4E545F4D 
 1015      42535254 
 1015      4F574353 
 1015      5F535441 
 1016 29d1 63735F73 		.ascii	"cs_state)\000"
 1016      74617465 
 1016      2900
 1017 29db 01       		.byte	0x1
 1018 29dc D104     		.uleb128 0x251
 1019 29de 5F524545 		.ascii	"_REENT_WCRTOMB_STATE(ptr) ((ptr)->_misc->_wcrtomb_s"
 1019      4E545F57 
 1019      4352544F 
 1019      4D425F53 
 1019      54415445 
 1020 2a11 74617465 		.ascii	"tate)\000"
 1020      2900
ARM GAS  /tmp/cch3WSAd.s 			page 41


 1021 2a17 01       		.byte	0x1
 1022 2a18 D204     		.uleb128 0x252
 1023 2a1a 5F524545 		.ascii	"_REENT_WCSRTOMBS_STATE(ptr) ((ptr)->_misc->_wcsrtom"
 1023      4E545F57 
 1023      43535254 
 1023      4F4D4253 
 1023      5F535441 
 1024 2a4d 62735F73 		.ascii	"bs_state)\000"
 1024      74617465 
 1024      2900
 1025 2a57 01       		.byte	0x1
 1026 2a58 D304     		.uleb128 0x253
 1027 2a5a 5F524545 		.ascii	"_REENT_L64A_BUF(ptr) ((ptr)->_misc->_l64a_buf)\000"
 1027      4E545F4C 
 1027      3634415F 
 1027      42554628 
 1027      70747229 
 1028 2a89 01       		.byte	0x1
 1029 2a8a D404     		.uleb128 0x254
 1030 2a8c 5F524545 		.ascii	"_REENT_GETDATE_ERR_P(ptr) (&((ptr)->_misc->_getdate"
 1030      4E545F47 
 1030      45544441 
 1030      54455F45 
 1030      52525F50 
 1031 2abf 5F657272 		.ascii	"_err))\000"
 1031      292900
 1032 2ac6 01       		.byte	0x1
 1033 2ac7 D504     		.uleb128 0x255
 1034 2ac9 5F524545 		.ascii	"_REENT_SIGNAL_BUF(ptr) ((ptr)->_signal_buf)\000"
 1034      4E545F53 
 1034      49474E41 
 1034      4C5F4255 
 1034      46287074 
 1035 2af5 01       		.byte	0x1
 1036 2af6 C006     		.uleb128 0x340
 1037 2af8 5F5F4154 		.ascii	"__ATTRIBUTE_IMPURE_PTR__ \000"
 1037      54524942 
 1037      5554455F 
 1037      494D5055 
 1037      52455F50 
 1038 2b12 01       		.byte	0x1
 1039 2b13 D206     		.uleb128 0x352
 1040 2b15 5F524545 		.ascii	"_REENT _impure_ptr\000"
 1040      4E54205F 
 1040      696D7075 
 1040      72655F70 
 1040      747200
 1041 2b28 01       		.byte	0x1
 1042 2b29 D706     		.uleb128 0x357
 1043 2b2b 5F474C4F 		.ascii	"_GLOBAL_REENT _global_impure_ptr\000"
 1043      42414C5F 
 1043      5245454E 
 1043      54205F67 
 1043      6C6F6261 
 1044 2b4c 04       		.byte	0x4
 1045              		.file 14 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 1046 2b4d 03       		.byte	0x3
ARM GAS  /tmp/cch3WSAd.s 			page 42


 1047 2b4e 16       		.uleb128 0x16
 1048 2b4f 0E       		.uleb128 0xe
 1049 2b50 01       		.byte	0x1
 1050 2b51 02       		.uleb128 0x2
 1051 2b52 5F4D4143 		.ascii	"_MACHSTDLIB_H_ \000"
 1051      48535444 
 1051      4C49425F 
 1051      485F2000 
 1052 2b62 04       		.byte	0x4
 1053              		.file 15 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 1054 2b63 03       		.byte	0x3
 1055 2b64 18       		.uleb128 0x18
 1056 2b65 0F       		.uleb128 0xf
 1057 2b66 01       		.byte	0x1
 1058 2b67 08       		.uleb128 0x8
 1059 2b68 5F4E4557 		.ascii	"_NEWLIB_ALLOCA_H \000"
 1059      4C49425F 
 1059      414C4C4F 
 1059      43415F48 
 1059      2000
 1060 2b7a 02       		.byte	0x2
 1061 2b7b 0D       		.uleb128 0xd
 1062 2b7c 616C6C6F 		.ascii	"alloca\000"
 1062      636100
 1063 2b83 01       		.byte	0x1
 1064 2b84 10       		.uleb128 0x10
 1065 2b85 616C6C6F 		.ascii	"alloca(size) __builtin_alloca(size)\000"
 1065      63612873 
 1065      697A6529 
 1065      205F5F62 
 1065      75696C74 
 1066 2ba9 04       		.byte	0x4
 1067 2baa 01       		.byte	0x1
 1068 2bab 36       		.uleb128 0x36
 1069 2bac 4E554C4C 		.ascii	"NULL 0\000"
 1069      203000
 1070 2bb3 01       		.byte	0x1
 1071 2bb4 39       		.uleb128 0x39
 1072 2bb5 45584954 		.ascii	"EXIT_FAILURE 1\000"
 1072      5F464149 
 1072      4C555245 
 1072      203100
 1073 2bc4 01       		.byte	0x1
 1074 2bc5 3A       		.uleb128 0x3a
 1075 2bc6 45584954 		.ascii	"EXIT_SUCCESS 0\000"
 1075      5F535543 
 1075      43455353 
 1075      203000
 1076 2bd5 01       		.byte	0x1
 1077 2bd6 3C       		.uleb128 0x3c
 1078 2bd7 52414E44 		.ascii	"RAND_MAX __RAND_MAX\000"
 1078      5F4D4158 
 1078      205F5F52 
 1078      414E445F 
 1078      4D415800 
 1079 2beb 01       		.byte	0x1
 1080 2bec 44       		.uleb128 0x44
ARM GAS  /tmp/cch3WSAd.s 			page 43


 1081 2bed 4D425F43 		.ascii	"MB_CUR_MAX __mb_cur_max\000"
 1081      55525F4D 
 1081      4158205F 
 1081      5F6D625F 
 1081      6375725F 
 1082 2c05 01       		.byte	0x1
 1083 2c06 7F       		.uleb128 0x7f
 1084 2c07 73747274 		.ascii	"strtodf strtof\000"
 1084      6F646620 
 1084      73747274 
 1084      6F6600
 1085 2c16 04       		.byte	0x4
 1086              		.file 16 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 1087 2c17 03       		.byte	0x3
 1088 2c18 37       		.uleb128 0x37
 1089 2c19 10       		.uleb128 0x10
 1090 2c1a 01       		.byte	0x1
 1091 2c1b 08       		.uleb128 0x8
 1092 2c1c 5F535452 		.ascii	"_STRING_H_ \000"
 1092      494E475F 
 1092      485F2000 
 1093 2c28 01       		.byte	0x1
 1094 2c29 0D       		.uleb128 0xd
 1095 2c2a 5F5F6E65 		.ascii	"__need_size_t \000"
 1095      65645F73 
 1095      697A655F 
 1095      742000
 1096 2c39 03       		.byte	0x3
 1097 2c3a 0E       		.uleb128 0xe
 1098 2c3b 07       		.uleb128 0x7
 1099 2c3c 02       		.byte	0x2
 1100 2c3d E901     		.uleb128 0xe9
 1101 2c3f 5F5F6E65 		.ascii	"__need_size_t\000"
 1101      65645F73 
 1101      697A655F 
 1101      7400
 1102 2c4d 02       		.byte	0x2
 1103 2c4e 9603     		.uleb128 0x196
 1104 2c50 5F5F6E65 		.ascii	"__need_NULL\000"
 1104      65645F4E 
 1104      554C4C00 
 1105 2c5c 04       		.byte	0x4
 1106 2c5d 01       		.byte	0x1
 1107 2c5e 56       		.uleb128 0x56
 1108 2c5f 73747263 		.ascii	"strcmpi strcasecmp\000"
 1108      6D706920 
 1108      73747263 
 1108      61736563 
 1108      6D7000
 1109 2c72 01       		.byte	0x1
 1110 2c73 59       		.uleb128 0x59
 1111 2c74 73747269 		.ascii	"stricmp strcasecmp\000"
 1111      636D7020 
 1111      73747263 
 1111      61736563 
 1111      6D7000
 1112 2c87 01       		.byte	0x1
ARM GAS  /tmp/cch3WSAd.s 			page 44


 1113 2c88 5C       		.uleb128 0x5c
 1114 2c89 7374726E 		.ascii	"strncmpi strncasecmp\000"
 1114      636D7069 
 1114      20737472 
 1114      6E636173 
 1114      65636D70 
 1115 2c9e 01       		.byte	0x1
 1116 2c9f 5F       		.uleb128 0x5f
 1117 2ca0 7374726E 		.ascii	"strnicmp strncasecmp\000"
 1117      69636D70 
 1117      20737472 
 1117      6E636173 
 1117      65636D70 
 1118              		.file 17 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 1119 2cb5 03       		.byte	0x3
 1120 2cb6 64       		.uleb128 0x64
 1121 2cb7 11       		.uleb128 0x11
 1122 2cb8 04       		.byte	0x4
 1123 2cb9 04       		.byte	0x4
 1124 2cba 01       		.byte	0x1
 1125 2cbb 3C       		.uleb128 0x3c
 1126 2cbc 4D50555F 		.ascii	"MPU_WRAPPERS_INCLUDED_FROM_API_FILE \000"
 1126      57524150 
 1126      50455253 
 1126      5F494E43 
 1126      4C554445 
 1127              		.file 18 "./FreeRTOS/include/FreeRTOS.h"
 1128 2ce1 03       		.byte	0x3
 1129 2ce2 3E       		.uleb128 0x3e
 1130 2ce3 12       		.uleb128 0x12
 1131 2ce4 01       		.byte	0x1
 1132 2ce5 37       		.uleb128 0x37
 1133 2ce6 494E435F 		.ascii	"INC_FREERTOS_H \000"
 1133      46524545 
 1133      52544F53 
 1133      5F482000 
 1134 2cf6 03       		.byte	0x3
 1135 2cf7 3D       		.uleb128 0x3d
 1136 2cf8 07       		.uleb128 0x7
 1137 2cf9 01       		.byte	0x1
 1138 2cfa 28       		.uleb128 0x28
 1139 2cfb 5F535444 		.ascii	"_STDDEF_H \000"
 1139      4445465F 
 1139      482000
 1140 2d06 01       		.byte	0x1
 1141 2d07 29       		.uleb128 0x29
 1142 2d08 5F535444 		.ascii	"_STDDEF_H_ \000"
 1142      4445465F 
 1142      485F2000 
 1143 2d14 01       		.byte	0x1
 1144 2d15 2B       		.uleb128 0x2b
 1145 2d16 5F414E53 		.ascii	"_ANSI_STDDEF_H \000"
 1145      495F5354 
 1145      44444546 
 1145      5F482000 
 1146 2d26 01       		.byte	0x1
 1147 2d27 2D       		.uleb128 0x2d
ARM GAS  /tmp/cch3WSAd.s 			page 45


 1148 2d28 5F5F5354 		.ascii	"__STDDEF_H__ \000"
 1148      44444546 
 1148      5F485F5F 
 1148      2000
 1149 2d36 01       		.byte	0x1
 1150 2d37 8A01     		.uleb128 0x8a
 1151 2d39 5F505452 		.ascii	"_PTRDIFF_T \000"
 1151      44494646 
 1151      5F542000 
 1152 2d45 01       		.byte	0x1
 1153 2d46 8B01     		.uleb128 0x8b
 1154 2d48 5F545F50 		.ascii	"_T_PTRDIFF_ \000"
 1154      54524449 
 1154      46465F20 
 1154      00
 1155 2d55 01       		.byte	0x1
 1156 2d56 8C01     		.uleb128 0x8c
 1157 2d58 5F545F50 		.ascii	"_T_PTRDIFF \000"
 1157      54524449 
 1157      46462000 
 1158 2d64 01       		.byte	0x1
 1159 2d65 8D01     		.uleb128 0x8d
 1160 2d67 5F5F5054 		.ascii	"__PTRDIFF_T \000"
 1160      52444946 
 1160      465F5420 
 1160      00
 1161 2d74 01       		.byte	0x1
 1162 2d75 8E01     		.uleb128 0x8e
 1163 2d77 5F505452 		.ascii	"_PTRDIFF_T_ \000"
 1163      44494646 
 1163      5F545F20 
 1163      00
 1164 2d84 01       		.byte	0x1
 1165 2d85 8F01     		.uleb128 0x8f
 1166 2d87 5F425344 		.ascii	"_BSD_PTRDIFF_T_ \000"
 1166      5F505452 
 1166      44494646 
 1166      5F545F20 
 1166      00
 1167 2d98 01       		.byte	0x1
 1168 2d99 9001     		.uleb128 0x90
 1169 2d9b 5F5F5F69 		.ascii	"___int_ptrdiff_t_h \000"
 1169      6E745F70 
 1169      74726469 
 1169      66665F74 
 1169      5F682000 
 1170 2daf 01       		.byte	0x1
 1171 2db0 9101     		.uleb128 0x91
 1172 2db2 5F474343 		.ascii	"_GCC_PTRDIFF_T \000"
 1172      5F505452 
 1172      44494646 
 1172      5F542000 
 1173 2dc2 02       		.byte	0x2
 1174 2dc3 A001     		.uleb128 0xa0
 1175 2dc5 5F5F6E65 		.ascii	"__need_ptrdiff_t\000"
 1175      65645F70 
 1175      74726469 
ARM GAS  /tmp/cch3WSAd.s 			page 46


 1175      66665F74 
 1175      00
 1176 2dd6 02       		.byte	0x2
 1177 2dd7 E901     		.uleb128 0xe9
 1178 2dd9 5F5F6E65 		.ascii	"__need_size_t\000"
 1178      65645F73 
 1178      697A655F 
 1178      7400
 1179 2de7 02       		.byte	0x2
 1180 2de8 D602     		.uleb128 0x156
 1181 2dea 5F5F6E65 		.ascii	"__need_wchar_t\000"
 1181      65645F77 
 1181      63686172 
 1181      5F7400
 1182 2df9 02       		.byte	0x2
 1183 2dfa 8B03     		.uleb128 0x18b
 1184 2dfc 4E554C4C 		.ascii	"NULL\000"
 1184      00
 1185 2e01 01       		.byte	0x1
 1186 2e02 9003     		.uleb128 0x190
 1187 2e04 4E554C4C 		.ascii	"NULL ((void *)0)\000"
 1187      20282876 
 1187      6F696420 
 1187      2A293029 
 1187      00
 1188 2e15 02       		.byte	0x2
 1189 2e16 9603     		.uleb128 0x196
 1190 2e18 5F5F6E65 		.ascii	"__need_NULL\000"
 1190      65645F4E 
 1190      554C4C00 
 1191 2e24 01       		.byte	0x1
 1192 2e25 9B03     		.uleb128 0x19b
 1193 2e27 6F666673 		.ascii	"offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEM"
 1193      65746F66 
 1193      28545950 
 1193      452C4D45 
 1193      4D424552 
 1194 2e5a 42455229 		.ascii	"BER)\000"
 1194      00
 1195 2e5f 04       		.byte	0x4
 1196              		.file 19 "./FreeRTOS/include/projdefs.h"
 1197 2e60 03       		.byte	0x3
 1198 2e61 40       		.uleb128 0x40
 1199 2e62 13       		.uleb128 0x13
 1200 2e63 01       		.byte	0x1
 1201 2e64 37       		.uleb128 0x37
 1202 2e65 50524F4A 		.ascii	"PROJDEFS_H \000"
 1202      44454653 
 1202      5F482000 
 1203 2e71 01       		.byte	0x1
 1204 2e72 3C       		.uleb128 0x3c
 1205 2e73 70645452 		.ascii	"pdTRUE ( 1 )\000"
 1205      55452028 
 1205      20312029 
 1205      00
 1206 2e80 01       		.byte	0x1
 1207 2e81 3D       		.uleb128 0x3d
ARM GAS  /tmp/cch3WSAd.s 			page 47


 1208 2e82 70644641 		.ascii	"pdFALSE ( 0 )\000"
 1208      4C534520 
 1208      28203020 
 1208      2900
 1209 2e90 01       		.byte	0x1
 1210 2e91 3F       		.uleb128 0x3f
 1211 2e92 70645041 		.ascii	"pdPASS ( 1 )\000"
 1211      53532028 
 1211      20312029 
 1211      00
 1212 2e9f 01       		.byte	0x1
 1213 2ea0 40       		.uleb128 0x40
 1214 2ea1 70644641 		.ascii	"pdFAIL ( 0 )\000"
 1214      494C2028 
 1214      20302029 
 1214      00
 1215 2eae 01       		.byte	0x1
 1216 2eaf 41       		.uleb128 0x41
 1217 2eb0 65727251 		.ascii	"errQUEUE_EMPTY ( 0 )\000"
 1217      55455545 
 1217      5F454D50 
 1217      54592028 
 1217      20302029 
 1218 2ec5 01       		.byte	0x1
 1219 2ec6 42       		.uleb128 0x42
 1220 2ec7 65727251 		.ascii	"errQUEUE_FULL ( 0 )\000"
 1220      55455545 
 1220      5F46554C 
 1220      4C202820 
 1220      30202900 
 1221 2edb 01       		.byte	0x1
 1222 2edc 45       		.uleb128 0x45
 1223 2edd 65727243 		.ascii	"errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY ( -1 )\000"
 1223      4F554C44 
 1223      5F4E4F54 
 1223      5F414C4C 
 1223      4F434154 
 1224 2f0a 01       		.byte	0x1
 1225 2f0b 46       		.uleb128 0x46
 1226 2f0c 6572724E 		.ascii	"errNO_TASK_TO_RUN ( -2 )\000"
 1226      4F5F5441 
 1226      534B5F54 
 1226      4F5F5255 
 1226      4E202820 
 1227 2f25 01       		.byte	0x1
 1228 2f26 47       		.uleb128 0x47
 1229 2f27 65727251 		.ascii	"errQUEUE_BLOCKED ( -4 )\000"
 1229      55455545 
 1229      5F424C4F 
 1229      434B4544 
 1229      2028202D 
 1230 2f3f 01       		.byte	0x1
 1231 2f40 48       		.uleb128 0x48
 1232 2f41 65727251 		.ascii	"errQUEUE_YIELD ( -5 )\000"
 1232      55455545 
 1232      5F594945 
 1232      4C442028 
ARM GAS  /tmp/cch3WSAd.s 			page 48


 1232      202D3520 
 1233 2f57 04       		.byte	0x4
 1234              		.file 20 "./FreeRTOSConfig.h"
 1235 2f58 03       		.byte	0x3
 1236 2f59 43       		.uleb128 0x43
 1237 2f5a 14       		.uleb128 0x14
 1238 2f5b 01       		.byte	0x1
 1239 2f5c 37       		.uleb128 0x37
 1240 2f5d 46524545 		.ascii	"FREERTOS_CONFIG_H \000"
 1240      52544F53 
 1240      5F434F4E 
 1240      4649475F 
 1240      482000
 1241              		.file 21 "../../libs/CMSIS/CM3/DeviceSupport/NXP/LPC17xx/LPC17xx.h"
 1242 2f70 03       		.byte	0x3
 1243 2f71 39       		.uleb128 0x39
 1244 2f72 15       		.uleb128 0x15
 1245 2f73 01       		.byte	0x1
 1246 2f74 1B       		.uleb128 0x1b
 1247 2f75 5F5F4C50 		.ascii	"__LPC17xx_H__ \000"
 1247      43313778 
 1247      785F485F 
 1247      5F2000
 1248 2f84 01       		.byte	0x1
 1249 2f85 5B       		.uleb128 0x5b
 1250 2f86 5F5F4D50 		.ascii	"__MPU_PRESENT 1\000"
 1250      555F5052 
 1250      4553454E 
 1250      54203100 
 1251 2f96 01       		.byte	0x1
 1252 2f97 5C       		.uleb128 0x5c
 1253 2f98 5F5F4E56 		.ascii	"__NVIC_PRIO_BITS 5\000"
 1253      49435F50 
 1253      52494F5F 
 1253      42495453 
 1253      203500
 1254 2fab 01       		.byte	0x1
 1255 2fac 5D       		.uleb128 0x5d
 1256 2fad 5F5F5665 		.ascii	"__Vendor_SysTickConfig 0\000"
 1256      6E646F72 
 1256      5F537973 
 1256      5469636B 
 1256      436F6E66 
 1257              		.file 22 "../../libs/CMSIS/CM3/CoreSupport/core_cm3.h"
 1258 2fc6 03       		.byte	0x3
 1259 2fc7 60       		.uleb128 0x60
 1260 2fc8 16       		.uleb128 0x16
 1261 2fc9 01       		.byte	0x1
 1262 2fca 19       		.uleb128 0x19
 1263 2fcb 5F5F434D 		.ascii	"__CM3_CORE_H__ \000"
 1263      335F434F 
 1263      52455F48 
 1263      5F5F2000 
 1264 2fdb 01       		.byte	0x1
 1265 2fdc 54       		.uleb128 0x54
 1266 2fdd 5F5F434D 		.ascii	"__CM3_CMSIS_VERSION_MAIN (0x01)\000"
 1266      335F434D 
ARM GAS  /tmp/cch3WSAd.s 			page 49


 1266      5349535F 
 1266      56455253 
 1266      494F4E5F 
 1267 2ffd 01       		.byte	0x1
 1268 2ffe 55       		.uleb128 0x55
 1269 2fff 5F5F434D 		.ascii	"__CM3_CMSIS_VERSION_SUB (0x30)\000"
 1269      335F434D 
 1269      5349535F 
 1269      56455253 
 1269      494F4E5F 
 1270 301e 01       		.byte	0x1
 1271 301f 56       		.uleb128 0x56
 1272 3020 5F5F434D 		.ascii	"__CM3_CMSIS_VERSION ((__CM3_CMSIS_VERSION_MAIN << 1"
 1272      335F434D 
 1272      5349535F 
 1272      56455253 
 1272      494F4E20 
 1273 3053 3629207C 		.ascii	"6) | __CM3_CMSIS_VERSION_SUB)\000"
 1273      205F5F43 
 1273      4D335F43 
 1273      4D534953 
 1273      5F564552 
 1274 3071 01       		.byte	0x1
 1275 3072 58       		.uleb128 0x58
 1276 3073 5F5F434F 		.ascii	"__CORTEX_M (0x03)\000"
 1276      52544558 
 1276      5F4D2028 
 1276      30783033 
 1276      2900
 1277              		.file 23 "/home/cas/Documentos/06_software/arm_toolchain/codesourcery_arm_toolchain-2009q3/bin/../
 1278 3085 03       		.byte	0x3
 1279 3086 5A       		.uleb128 0x5a
 1280 3087 17       		.uleb128 0x17
 1281 3088 01       		.byte	0x1
 1282 3089 0A       		.uleb128 0xa
 1283 308a 5F535444 		.ascii	"_STDINT_H \000"
 1283      494E545F 
 1283      482000
 1284 3095 01       		.byte	0x1
 1285 3096 14       		.uleb128 0x14
 1286 3097 5F5F5354 		.ascii	"__STDINT_EXP(x) __ ##x ##__\000"
 1286      44494E54 
 1286      5F455850 
 1286      28782920 
 1286      5F5F2023 
 1287 30b3 01       		.byte	0x1
 1288 30b4 1E       		.uleb128 0x1e
 1289 30b5 5F5F6861 		.ascii	"__have_longlong64 1\000"
 1289      76655F6C 
 1289      6F6E676C 
 1289      6F6E6736 
 1289      34203100 
 1290 30c9 01       		.byte	0x1
 1291 30ca 25       		.uleb128 0x25
 1292 30cb 5F5F6861 		.ascii	"__have_long32 1\000"
 1292      76655F6C 
 1292      6F6E6733 
ARM GAS  /tmp/cch3WSAd.s 			page 50


 1292      32203100 
 1293 30db 01       		.byte	0x1
 1294 30dc 2B       		.uleb128 0x2b
 1295 30dd 5F5F696E 		.ascii	"__int8_t_defined 1\000"
 1295      74385F74 
 1295      5F646566 
 1295      696E6564 
 1295      203100
 1296 30f0 01       		.byte	0x1
 1297 30f1 31       		.uleb128 0x31
 1298 30f2 5F5F696E 		.ascii	"__int_least8_t_defined 1\000"
 1298      745F6C65 
 1298      61737438 
 1298      5F745F64 
 1298      6566696E 
 1299 310b 01       		.byte	0x1
 1300 310c 37       		.uleb128 0x37
 1301 310d 5F5F696E 		.ascii	"__int16_t_defined 1\000"
 1301      7431365F 
 1301      745F6465 
 1301      66696E65 
 1301      64203100 
 1302 3121 01       		.byte	0x1
 1303 3122 45       		.uleb128 0x45
 1304 3123 5F5F696E 		.ascii	"__int_least16_t_defined 1\000"
 1304      745F6C65 
 1304      61737431 
 1304      365F745F 
 1304      64656669 
 1305 313d 01       		.byte	0x1
 1306 313e 51       		.uleb128 0x51
 1307 313f 5F5F696E 		.ascii	"__int32_t_defined 1\000"
 1307      7433325F 
 1307      745F6465 
 1307      66696E65 
 1307      64203100 
 1308 3153 01       		.byte	0x1
 1309 3154 63       		.uleb128 0x63
 1310 3155 5F5F696E 		.ascii	"__int_least32_t_defined 1\000"
 1310      745F6C65 
 1310      61737433 
 1310      325F745F 
 1310      64656669 
 1311 316f 01       		.byte	0x1
 1312 3170 79       		.uleb128 0x79
 1313 3171 5F5F696E 		.ascii	"__int64_t_defined 1\000"
 1313      7436345F 
 1313      745F6465 
 1313      66696E65 
 1313      64203100 
 1314 3185 01       		.byte	0x1
 1315 3186 8301     		.uleb128 0x83
 1316 3188 5F5F696E 		.ascii	"__int_least64_t_defined 1\000"
 1316      745F6C65 
 1316      61737436 
 1316      345F745F 
 1316      64656669 
ARM GAS  /tmp/cch3WSAd.s 			page 51


 1317 31a2 01       		.byte	0x1
 1318 31a3 A101     		.uleb128 0xa1
 1319 31a5 5F5F696E 		.ascii	"__int_fast8_t_defined 1\000"
 1319      745F6661 
 1319      7374385F 
 1319      745F6465 
 1319      66696E65 
 1320 31bd 01       		.byte	0x1
 1321 31be A701     		.uleb128 0xa7
 1322 31c0 5F5F696E 		.ascii	"__int_fast16_t_defined 1\000"
 1322      745F6661 
 1322      73743136 
 1322      5F745F64 
 1322      6566696E 
 1323 31d9 01       		.byte	0x1
 1324 31da AD01     		.uleb128 0xad
 1325 31dc 5F5F696E 		.ascii	"__int_fast32_t_defined 1\000"
 1325      745F6661 
 1325      73743332 
 1325      5F745F64 
 1325      6566696E 
 1326 31f5 01       		.byte	0x1
 1327 31f6 D701     		.uleb128 0xd7
 1328 31f8 5F5F696E 		.ascii	"__int_fast64_t_defined 1\000"
 1328      745F6661 
 1328      73743634 
 1328      5F745F64 
 1328      6566696E 
 1329 3211 01       		.byte	0x1
 1330 3212 8102     		.uleb128 0x101
 1331 3214 494E5438 		.ascii	"INT8_MIN -128\000"
 1331      5F4D494E 
 1331      202D3132 
 1331      3800
 1332 3222 01       		.byte	0x1
 1333 3223 8202     		.uleb128 0x102
 1334 3225 494E5438 		.ascii	"INT8_MAX 127\000"
 1334      5F4D4158 
 1334      20313237 
 1334      00
 1335 3232 01       		.byte	0x1
 1336 3233 8302     		.uleb128 0x103
 1337 3235 55494E54 		.ascii	"UINT8_MAX 255\000"
 1337      385F4D41 
 1337      58203235 
 1337      3500
 1338 3243 01       		.byte	0x1
 1339 3244 8702     		.uleb128 0x107
 1340 3246 494E545F 		.ascii	"INT_LEAST8_MIN -128\000"
 1340      4C454153 
 1340      54385F4D 
 1340      494E202D 
 1340      31323800 
 1341 325a 01       		.byte	0x1
 1342 325b 8802     		.uleb128 0x108
 1343 325d 494E545F 		.ascii	"INT_LEAST8_MAX 127\000"
 1343      4C454153 
ARM GAS  /tmp/cch3WSAd.s 			page 52


 1343      54385F4D 
 1343      41582031 
 1343      323700
 1344 3270 01       		.byte	0x1
 1345 3271 8902     		.uleb128 0x109
 1346 3273 55494E54 		.ascii	"UINT_LEAST8_MAX 255\000"
 1346      5F4C4541 
 1346      5354385F 
 1346      4D415820 
 1346      32353500 
 1347 3287 01       		.byte	0x1
 1348 3288 8F02     		.uleb128 0x10f
 1349 328a 494E5431 		.ascii	"INT16_MIN -32768\000"
 1349      365F4D49 
 1349      4E202D33 
 1349      32373638 
 1349      00
 1350 329b 01       		.byte	0x1
 1351 329c 9002     		.uleb128 0x110
 1352 329e 494E5431 		.ascii	"INT16_MAX 32767\000"
 1352      365F4D41 
 1352      58203332 
 1352      37363700 
 1353 32ae 01       		.byte	0x1
 1354 32af 9102     		.uleb128 0x111
 1355 32b1 55494E54 		.ascii	"UINT16_MAX 65535\000"
 1355      31365F4D 
 1355      41582036 
 1355      35353335 
 1355      00
 1356 32c2 01       		.byte	0x1
 1357 32c3 9502     		.uleb128 0x115
 1358 32c5 494E545F 		.ascii	"INT_LEAST16_MIN -32768\000"
 1358      4C454153 
 1358      5431365F 
 1358      4D494E20 
 1358      2D333237 
 1359 32dc 01       		.byte	0x1
 1360 32dd 9602     		.uleb128 0x116
 1361 32df 494E545F 		.ascii	"INT_LEAST16_MAX 32767\000"
 1361      4C454153 
 1361      5431365F 
 1361      4D415820 
 1361      33323736 
 1362 32f5 01       		.byte	0x1
 1363 32f6 9702     		.uleb128 0x117
 1364 32f8 55494E54 		.ascii	"UINT_LEAST16_MAX 65535\000"
 1364      5F4C4541 
 1364      53543136 
 1364      5F4D4158 
 1364      20363535 
 1365 330f 01       		.byte	0x1
 1366 3310 9E02     		.uleb128 0x11e
 1367 3312 494E5433 		.ascii	"INT32_MIN (-2147483647L-1)\000"
 1367      325F4D49 
 1367      4E20282D 
 1367      32313437 
ARM GAS  /tmp/cch3WSAd.s 			page 53


 1367      34383336 
 1368 332d 01       		.byte	0x1
 1369 332e 9F02     		.uleb128 0x11f
 1370 3330 494E5433 		.ascii	"INT32_MAX 2147483647L\000"
 1370      325F4D41 
 1370      58203231 
 1370      34373438 
 1370      33363437 
 1371 3346 01       		.byte	0x1
 1372 3347 A002     		.uleb128 0x120
 1373 3349 55494E54 		.ascii	"UINT32_MAX 4294967295UL\000"
 1373      33325F4D 
 1373      41582034 
 1373      32393439 
 1373      36373239 
 1374 3361 01       		.byte	0x1
 1375 3362 AA02     		.uleb128 0x12a
 1376 3364 494E545F 		.ascii	"INT_LEAST32_MIN (-2147483647L-1)\000"
 1376      4C454153 
 1376      5433325F 
 1376      4D494E20 
 1376      282D3231 
 1377 3385 01       		.byte	0x1
 1378 3386 AB02     		.uleb128 0x12b
 1379 3388 494E545F 		.ascii	"INT_LEAST32_MAX 2147483647L\000"
 1379      4C454153 
 1379      5433325F 
 1379      4D415820 
 1379      32313437 
 1380 33a4 01       		.byte	0x1
 1381 33a5 AC02     		.uleb128 0x12c
 1382 33a7 55494E54 		.ascii	"UINT_LEAST32_MAX 4294967295UL\000"
 1382      5F4C4541 
 1382      53543332 
 1382      5F4D4158 
 1382      20343239 
 1383 33c5 01       		.byte	0x1
 1384 33c6 BC02     		.uleb128 0x13c
 1385 33c8 494E5436 		.ascii	"INT64_MIN (-9223372036854775807LL-1LL)\000"
 1385      345F4D49 
 1385      4E20282D 
 1385      39323233 
 1385      33373230 
 1386 33ef 01       		.byte	0x1
 1387 33f0 BD02     		.uleb128 0x13d
 1388 33f2 494E5436 		.ascii	"INT64_MAX 9223372036854775807LL\000"
 1388      345F4D41 
 1388      58203932 
 1388      32333337 
 1388      32303336 
 1389 3412 01       		.byte	0x1
 1390 3413 BE02     		.uleb128 0x13e
 1391 3415 55494E54 		.ascii	"UINT64_MAX 18446744073709551615ULL\000"
 1391      36345F4D 
 1391      41582031 
 1391      38343436 
 1391      37343430 
ARM GAS  /tmp/cch3WSAd.s 			page 54


 1392 3438 01       		.byte	0x1
 1393 3439 C802     		.uleb128 0x148
 1394 343b 494E545F 		.ascii	"INT_LEAST64_MIN (-9223372036854775807LL-1LL)\000"
 1394      4C454153 
 1394      5436345F 
 1394      4D494E20 
 1394      282D3932 
 1395 3468 01       		.byte	0x1
 1396 3469 C902     		.uleb128 0x149
 1397 346b 494E545F 		.ascii	"INT_LEAST64_MAX 9223372036854775807LL\000"
 1397      4C454153 
 1397      5436345F 
 1397      4D415820 
 1397      39323233 
 1398 3491 01       		.byte	0x1
 1399 3492 CA02     		.uleb128 0x14a
 1400 3494 55494E54 		.ascii	"UINT_LEAST64_MAX 18446744073709551615ULL\000"
 1400      5F4C4541 
 1400      53543634 
 1400      5F4D4158 
 1400      20313834 
 1401 34bd 01       		.byte	0x1
 1402 34be D002     		.uleb128 0x150
 1403 34c0 494E545F 		.ascii	"INT_FAST8_MIN (-__STDINT_EXP(INT_MAX)-1)\000"
 1403      46415354 
 1403      385F4D49 
 1403      4E20282D 
 1403      5F5F5354 
 1404 34e9 01       		.byte	0x1
 1405 34ea D102     		.uleb128 0x151
 1406 34ec 494E545F 		.ascii	"INT_FAST8_MAX __STDINT_EXP(INT_MAX)\000"
 1406      46415354 
 1406      385F4D41 
 1406      58205F5F 
 1406      53544449 
 1407 3510 01       		.byte	0x1
 1408 3511 D202     		.uleb128 0x152
 1409 3513 55494E54 		.ascii	"UINT_FAST8_MAX (__STDINT_EXP(INT_MAX)*2U+1U)\000"
 1409      5F464153 
 1409      54385F4D 
 1409      41582028 
 1409      5F5F5354 
 1410 3540 01       		.byte	0x1
 1411 3541 DC02     		.uleb128 0x15c
 1412 3543 494E545F 		.ascii	"INT_FAST16_MIN (-__STDINT_EXP(INT_MAX)-1)\000"
 1412      46415354 
 1412      31365F4D 
 1412      494E2028 
 1412      2D5F5F53 
 1413 356d 01       		.byte	0x1
 1414 356e DD02     		.uleb128 0x15d
 1415 3570 494E545F 		.ascii	"INT_FAST16_MAX __STDINT_EXP(INT_MAX)\000"
 1415      46415354 
 1415      31365F4D 
 1415      4158205F 
 1415      5F535444 
 1416 3595 01       		.byte	0x1
ARM GAS  /tmp/cch3WSAd.s 			page 55


 1417 3596 DE02     		.uleb128 0x15e
 1418 3598 55494E54 		.ascii	"UINT_FAST16_MAX (__STDINT_EXP(INT_MAX)*2U+1U)\000"
 1418      5F464153 
 1418      5431365F 
 1418      4D415820 
 1418      285F5F53 
 1419 35c6 01       		.byte	0x1
 1420 35c7 E802     		.uleb128 0x168
 1421 35c9 494E545F 		.ascii	"INT_FAST32_MIN (-__STDINT_EXP(INT_MAX)-1)\000"
 1421      46415354 
 1421      33325F4D 
 1421      494E2028 
 1421      2D5F5F53 
 1422 35f3 01       		.byte	0x1
 1423 35f4 E902     		.uleb128 0x169
 1424 35f6 494E545F 		.ascii	"INT_FAST32_MAX __STDINT_EXP(INT_MAX)\000"
 1424      46415354 
 1424      33325F4D 
 1424      4158205F 
 1424      5F535444 
 1425 361b 01       		.byte	0x1
 1426 361c EA02     		.uleb128 0x16a
 1427 361e 55494E54 		.ascii	"UINT_FAST32_MAX (__STDINT_EXP(INT_MAX)*2U+1U)\000"
 1427      5F464153 
 1427      5433325F 
 1427      4D415820 
 1427      285F5F53 
 1428 364c 01       		.byte	0x1
 1429 364d F802     		.uleb128 0x178
 1430 364f 494E545F 		.ascii	"INT_FAST64_MIN INT_LEAST64_MIN\000"
 1430      46415354 
 1430      36345F4D 
 1430      494E2049 
 1430      4E545F4C 
 1431 366e 01       		.byte	0x1
 1432 366f F902     		.uleb128 0x179
 1433 3671 494E545F 		.ascii	"INT_FAST64_MAX INT_LEAST64_MAX\000"
 1433      46415354 
 1433      36345F4D 
 1433      41582049 
 1433      4E545F4C 
 1434 3690 01       		.byte	0x1
 1435 3691 FA02     		.uleb128 0x17a
 1436 3693 55494E54 		.ascii	"UINT_FAST64_MAX UINT_LEAST64_MAX\000"
 1436      5F464153 
 1436      5436345F 
 1436      4D415820 
 1436      55494E54 
 1437 36b4 01       		.byte	0x1
 1438 36b5 FF02     		.uleb128 0x17f
 1439 36b7 494E544D 		.ascii	"INTMAX_MAX __INTMAX_MAX__\000"
 1439      41585F4D 
 1439      4158205F 
 1439      5F494E54 
 1439      4D41585F 
 1440 36d1 01       		.byte	0x1
 1441 36d2 8003     		.uleb128 0x180
ARM GAS  /tmp/cch3WSAd.s 			page 56


 1442 36d4 494E544D 		.ascii	"INTMAX_MIN (-INTMAX_MAX - 1)\000"
 1442      41585F4D 
 1442      494E2028 
 1442      2D494E54 
 1442      4D41585F 
 1443 36f1 01       		.byte	0x1
 1444 36f2 8B03     		.uleb128 0x18b
 1445 36f4 55494E54 		.ascii	"UINTMAX_MAX UINT64_MAX\000"
 1445      4D41585F 
 1445      4D415820 
 1445      55494E54 
 1445      36345F4D 
 1446 370b 01       		.byte	0x1
 1447 370c 9203     		.uleb128 0x192
 1448 370e 53495A45 		.ascii	"SIZE_MAX (__STDINT_EXP(LONG_MAX) * 2UL + 1)\000"
 1448      5F4D4158 
 1448      20285F5F 
 1448      53544449 
 1448      4E545F45 
 1449 373a 01       		.byte	0x1
 1450 373b 9603     		.uleb128 0x196
 1451 373d 5349475F 		.ascii	"SIG_ATOMIC_MIN (-__STDINT_EXP(INT_MAX) - 1)\000"
 1451      41544F4D 
 1451      49435F4D 
 1451      494E2028 
 1451      2D5F5F53 
 1452 3769 01       		.byte	0x1
 1453 376a 9703     		.uleb128 0x197
 1454 376c 5349475F 		.ascii	"SIG_ATOMIC_MAX __STDINT_EXP(INT_MAX)\000"
 1454      41544F4D 
 1454      49435F4D 
 1454      4158205F 
 1454      5F535444 
 1455 3791 01       		.byte	0x1
 1456 3792 9D03     		.uleb128 0x19d
 1457 3794 50545244 		.ascii	"PTRDIFF_MAX __STDINT_EXP(LONG_MAX)\000"
 1457      4946465F 
 1457      4D415820 
 1457      5F5F5354 
 1457      44494E54 
 1458 37b7 01       		.byte	0x1
 1459 37b8 9F03     		.uleb128 0x19f
 1460 37ba 50545244 		.ascii	"PTRDIFF_MIN (-PTRDIFF_MAX - 1)\000"
 1460      4946465F 
 1460      4D494E20 
 1460      282D5054 
 1460      52444946 
 1461 37d9 01       		.byte	0x1
 1462 37da A203     		.uleb128 0x1a2
 1463 37dc 57434841 		.ascii	"WCHAR_MAX __WCHAR_MAX__\000"
 1463      525F4D41 
 1463      58205F5F 
 1463      57434841 
 1463      525F4D41 
 1464 37f4 01       		.byte	0x1
 1465 37f5 AC03     		.uleb128 0x1ac
 1466 37f7 57494E54 		.ascii	"WINT_MAX (__STDINT_EXP(INT_MAX) * 2U + 1U)\000"
ARM GAS  /tmp/cch3WSAd.s 			page 57


 1466      5F4D4158 
 1466      20285F5F 
 1466      53544449 
 1466      4E545F45 
 1467 3822 01       		.byte	0x1
 1468 3823 B103     		.uleb128 0x1b1
 1469 3825 57494E54 		.ascii	"WINT_MIN 0U\000"
 1469      5F4D494E 
 1469      20305500 
 1470 3831 01       		.byte	0x1
 1471 3832 B503     		.uleb128 0x1b5
 1472 3834 494E5438 		.ascii	"INT8_C(x) x\000"
 1472      5F432878 
 1472      29207800 
 1473 3840 01       		.byte	0x1
 1474 3841 B703     		.uleb128 0x1b7
 1475 3843 55494E54 		.ascii	"UINT8_C(x) x\000"
 1475      385F4328 
 1475      78292078 
 1475      00
 1476 3850 01       		.byte	0x1
 1477 3851 BC03     		.uleb128 0x1bc
 1478 3853 494E5431 		.ascii	"INT16_C(x) x\000"
 1478      365F4328 
 1478      78292078 
 1478      00
 1479 3860 01       		.byte	0x1
 1480 3861 BE03     		.uleb128 0x1be
 1481 3863 55494E54 		.ascii	"UINT16_C(x) x\000"
 1481      31365F43 
 1481      28782920 
 1481      7800
 1482 3871 01       		.byte	0x1
 1483 3872 C403     		.uleb128 0x1c4
 1484 3874 494E5433 		.ascii	"INT32_C(x) x ##L\000"
 1484      325F4328 
 1484      78292078 
 1484      2023234C 
 1484      00
 1485 3885 01       		.byte	0x1
 1486 3886 C503     		.uleb128 0x1c5
 1487 3888 55494E54 		.ascii	"UINT32_C(x) x ##UL\000"
 1487      33325F43 
 1487      28782920 
 1487      78202323 
 1487      554C00
 1488 389b 01       		.byte	0x1
 1489 389c D003     		.uleb128 0x1d0
 1490 389e 494E5436 		.ascii	"INT64_C(x) x ##LL\000"
 1490      345F4328 
 1490      78292078 
 1490      2023234C 
 1490      4C00
 1491 38b0 01       		.byte	0x1
 1492 38b1 D103     		.uleb128 0x1d1
 1493 38b3 55494E54 		.ascii	"UINT64_C(x) x ##ULL\000"
 1493      36345F43 
ARM GAS  /tmp/cch3WSAd.s 			page 58


 1493      28782920 
 1493      78202323 
 1493      554C4C00 
 1494 38c7 01       		.byte	0x1
 1495 38c8 DA03     		.uleb128 0x1da
 1496 38ca 494E544D 		.ascii	"INTMAX_C(x) x ##LL\000"
 1496      41585F43 
 1496      28782920 
 1496      78202323 
 1496      4C4C00
 1497 38dd 01       		.byte	0x1
 1498 38de DB03     		.uleb128 0x1db
 1499 38e0 55494E54 		.ascii	"UINTMAX_C(x) x ##ULL\000"
 1499      4D41585F 
 1499      43287829 
 1499      20782023 
 1499      23554C4C 
 1500 38f5 04       		.byte	0x4
 1501 38f6 01       		.byte	0x1
 1502 38f7 71       		.uleb128 0x71
 1503 38f8 5F5F4920 		.ascii	"__I volatile const\000"
 1503      766F6C61 
 1503      74696C65 
 1503      20636F6E 
 1503      737400
 1504 390b 01       		.byte	0x1
 1505 390c 73       		.uleb128 0x73
 1506 390d 5F5F4F20 		.ascii	"__O volatile\000"
 1506      766F6C61 
 1506      74696C65 
 1506      00
 1507 391a 01       		.byte	0x1
 1508 391b 74       		.uleb128 0x74
 1509 391c 5F5F494F 		.ascii	"__IO volatile\000"
 1509      20766F6C 
 1509      6174696C 
 1509      6500
 1510 392a 01       		.byte	0x1
 1511 392b B301     		.uleb128 0xb3
 1512 392d 5343425F 		.ascii	"SCB_CPUID_IMPLEMENTER_Pos 24\000"
 1512      43505549 
 1512      445F494D 
 1512      504C454D 
 1512      454E5445 
 1513 394a 01       		.byte	0x1
 1514 394b B401     		.uleb128 0xb4
 1515 394d 5343425F 		.ascii	"SCB_CPUID_IMPLEMENTER_Msk (0xFFul << SCB_CPUID_IMPL"
 1515      43505549 
 1515      445F494D 
 1515      504C454D 
 1515      454E5445 
 1516 3980 454D454E 		.ascii	"EMENTER_Pos)\000"
 1516      5445525F 
 1516      506F7329 
 1516      00
 1517 398d 01       		.byte	0x1
 1518 398e B601     		.uleb128 0xb6
ARM GAS  /tmp/cch3WSAd.s 			page 59


 1519 3990 5343425F 		.ascii	"SCB_CPUID_VARIANT_Pos 20\000"
 1519      43505549 
 1519      445F5641 
 1519      5249414E 
 1519      545F506F 
 1520 39a9 01       		.byte	0x1
 1521 39aa B701     		.uleb128 0xb7
 1522 39ac 5343425F 		.ascii	"SCB_CPUID_VARIANT_Msk (0xFul << SCB_CPUID_VARIANT_P"
 1522      43505549 
 1522      445F5641 
 1522      5249414E 
 1522      545F4D73 
 1523 39df 6F732900 		.ascii	"os)\000"
 1524 39e3 01       		.byte	0x1
 1525 39e4 B901     		.uleb128 0xb9
 1526 39e6 5343425F 		.ascii	"SCB_CPUID_PARTNO_Pos 4\000"
 1526      43505549 
 1526      445F5041 
 1526      52544E4F 
 1526      5F506F73 
 1527 39fd 01       		.byte	0x1
 1528 39fe BA01     		.uleb128 0xba
 1529 3a00 5343425F 		.ascii	"SCB_CPUID_PARTNO_Msk (0xFFFul << SCB_CPUID_PARTNO_P"
 1529      43505549 
 1529      445F5041 
 1529      52544E4F 
 1529      5F4D736B 
 1530 3a33 6F732900 		.ascii	"os)\000"
 1531 3a37 01       		.byte	0x1
 1532 3a38 BC01     		.uleb128 0xbc
 1533 3a3a 5343425F 		.ascii	"SCB_CPUID_REVISION_Pos 0\000"
 1533      43505549 
 1533      445F5245 
 1533      56495349 
 1533      4F4E5F50 
 1534 3a53 01       		.byte	0x1
 1535 3a54 BD01     		.uleb128 0xbd
 1536 3a56 5343425F 		.ascii	"SCB_CPUID_REVISION_Msk (0xFul << SCB_CPUID_REVISION"
 1536      43505549 
 1536      445F5245 
 1536      56495349 
 1536      4F4E5F4D 
 1537 3a89 5F506F73 		.ascii	"_Pos)\000"
 1537      2900
 1538 3a8f 01       		.byte	0x1
 1539 3a90 C001     		.uleb128 0xc0
 1540 3a92 5343425F 		.ascii	"SCB_ICSR_NMIPENDSET_Pos 31\000"
 1540      49435352 
 1540      5F4E4D49 
 1540      50454E44 
 1540      5345545F 
 1541 3aad 01       		.byte	0x1
 1542 3aae C101     		.uleb128 0xc1
 1543 3ab0 5343425F 		.ascii	"SCB_ICSR_NMIPENDSET_Msk (1ul << SCB_ICSR_NMIPENDSET"
 1543      49435352 
 1543      5F4E4D49 
 1543      50454E44 
ARM GAS  /tmp/cch3WSAd.s 			page 60


 1543      5345545F 
 1544 3ae3 5F506F73 		.ascii	"_Pos)\000"
 1544      2900
 1545 3ae9 01       		.byte	0x1
 1546 3aea C301     		.uleb128 0xc3
 1547 3aec 5343425F 		.ascii	"SCB_ICSR_PENDSVSET_Pos 28\000"
 1547      49435352 
 1547      5F50454E 
 1547      44535653 
 1547      45545F50 
 1548 3b06 01       		.byte	0x1
 1549 3b07 C401     		.uleb128 0xc4
 1550 3b09 5343425F 		.ascii	"SCB_ICSR_PENDSVSET_Msk (1ul << SCB_ICSR_PENDSVSET_P"
 1550      49435352 
 1550      5F50454E 
 1550      44535653 
 1550      45545F4D 
 1551 3b3c 6F732900 		.ascii	"os)\000"
 1552 3b40 01       		.byte	0x1
 1553 3b41 C601     		.uleb128 0xc6
 1554 3b43 5343425F 		.ascii	"SCB_ICSR_PENDSVCLR_Pos 27\000"
 1554      49435352 
 1554      5F50454E 
 1554      44535643 
 1554      4C525F50 
 1555 3b5d 01       		.byte	0x1
 1556 3b5e C701     		.uleb128 0xc7
 1557 3b60 5343425F 		.ascii	"SCB_ICSR_PENDSVCLR_Msk (1ul << SCB_ICSR_PENDSVCLR_P"
 1557      49435352 
 1557      5F50454E 
 1557      44535643 
 1557      4C525F4D 
 1558 3b93 6F732900 		.ascii	"os)\000"
 1559 3b97 01       		.byte	0x1
 1560 3b98 C901     		.uleb128 0xc9
 1561 3b9a 5343425F 		.ascii	"SCB_ICSR_PENDSTSET_Pos 26\000"
 1561      49435352 
 1561      5F50454E 
 1561      44535453 
 1561      45545F50 
 1562 3bb4 01       		.byte	0x1
 1563 3bb5 CA01     		.uleb128 0xca
 1564 3bb7 5343425F 		.ascii	"SCB_ICSR_PENDSTSET_Msk (1ul << SCB_ICSR_PENDSTSET_P"
 1564      49435352 
 1564      5F50454E 
 1564      44535453 
 1564      45545F4D 
 1565 3bea 6F732900 		.ascii	"os)\000"
 1566 3bee 01       		.byte	0x1
 1567 3bef CC01     		.uleb128 0xcc
 1568 3bf1 5343425F 		.ascii	"SCB_ICSR_PENDSTCLR_Pos 25\000"
 1568      49435352 
 1568      5F50454E 
 1568      44535443 
 1568      4C525F50 
 1569 3c0b 01       		.byte	0x1
 1570 3c0c CD01     		.uleb128 0xcd
ARM GAS  /tmp/cch3WSAd.s 			page 61


 1571 3c0e 5343425F 		.ascii	"SCB_ICSR_PENDSTCLR_Msk (1ul << SCB_ICSR_PENDSTCLR_P"
 1571      49435352 
 1571      5F50454E 
 1571      44535443 
 1571      4C525F4D 
 1572 3c41 6F732900 		.ascii	"os)\000"
 1573 3c45 01       		.byte	0x1
 1574 3c46 CF01     		.uleb128 0xcf
 1575 3c48 5343425F 		.ascii	"SCB_ICSR_ISRPREEMPT_Pos 23\000"
 1575      49435352 
 1575      5F495352 
 1575      50524545 
 1575      4D50545F 
 1576 3c63 01       		.byte	0x1
 1577 3c64 D001     		.uleb128 0xd0
 1578 3c66 5343425F 		.ascii	"SCB_ICSR_ISRPREEMPT_Msk (1ul << SCB_ICSR_ISRPREEMPT"
 1578      49435352 
 1578      5F495352 
 1578      50524545 
 1578      4D50545F 
 1579 3c99 5F506F73 		.ascii	"_Pos)\000"
 1579      2900
 1580 3c9f 01       		.byte	0x1
 1581 3ca0 D201     		.uleb128 0xd2
 1582 3ca2 5343425F 		.ascii	"SCB_ICSR_ISRPENDING_Pos 22\000"
 1582      49435352 
 1582      5F495352 
 1582      50454E44 
 1582      494E475F 
 1583 3cbd 01       		.byte	0x1
 1584 3cbe D301     		.uleb128 0xd3
 1585 3cc0 5343425F 		.ascii	"SCB_ICSR_ISRPENDING_Msk (1ul << SCB_ICSR_ISRPENDING"
 1585      49435352 
 1585      5F495352 
 1585      50454E44 
 1585      494E475F 
 1586 3cf3 5F506F73 		.ascii	"_Pos)\000"
 1586      2900
 1587 3cf9 01       		.byte	0x1
 1588 3cfa D501     		.uleb128 0xd5
 1589 3cfc 5343425F 		.ascii	"SCB_ICSR_VECTPENDING_Pos 12\000"
 1589      49435352 
 1589      5F564543 
 1589      5450454E 
 1589      44494E47 
 1590 3d18 01       		.byte	0x1
 1591 3d19 D601     		.uleb128 0xd6
 1592 3d1b 5343425F 		.ascii	"SCB_ICSR_VECTPENDING_Msk (0x1FFul << SCB_ICSR_VECTP"
 1592      49435352 
 1592      5F564543 
 1592      5450454E 
 1592      44494E47 
 1593 3d4e 454E4449 		.ascii	"ENDING_Pos)\000"
 1593      4E475F50 
 1593      6F732900 
 1594 3d5a 01       		.byte	0x1
 1595 3d5b D801     		.uleb128 0xd8
ARM GAS  /tmp/cch3WSAd.s 			page 62


 1596 3d5d 5343425F 		.ascii	"SCB_ICSR_RETTOBASE_Pos 11\000"
 1596      49435352 
 1596      5F524554 
 1596      544F4241 
 1596      53455F50 
 1597 3d77 01       		.byte	0x1
 1598 3d78 D901     		.uleb128 0xd9
 1599 3d7a 5343425F 		.ascii	"SCB_ICSR_RETTOBASE_Msk (1ul << SCB_ICSR_RETTOBASE_P"
 1599      49435352 
 1599      5F524554 
 1599      544F4241 
 1599      53455F4D 
 1600 3dad 6F732900 		.ascii	"os)\000"
 1601 3db1 01       		.byte	0x1
 1602 3db2 DB01     		.uleb128 0xdb
 1603 3db4 5343425F 		.ascii	"SCB_ICSR_VECTACTIVE_Pos 0\000"
 1603      49435352 
 1603      5F564543 
 1603      54414354 
 1603      4956455F 
 1604 3dce 01       		.byte	0x1
 1605 3dcf DC01     		.uleb128 0xdc
 1606 3dd1 5343425F 		.ascii	"SCB_ICSR_VECTACTIVE_Msk (0x1FFul << SCB_ICSR_VECTAC"
 1606      49435352 
 1606      5F564543 
 1606      54414354 
 1606      4956455F 
 1607 3e04 54495645 		.ascii	"TIVE_Pos)\000"
 1607      5F506F73 
 1607      2900
 1608 3e0e 01       		.byte	0x1
 1609 3e0f DF01     		.uleb128 0xdf
 1610 3e11 5343425F 		.ascii	"SCB_VTOR_TBLBASE_Pos 29\000"
 1610      56544F52 
 1610      5F54424C 
 1610      42415345 
 1610      5F506F73 
 1611 3e29 01       		.byte	0x1
 1612 3e2a E001     		.uleb128 0xe0
 1613 3e2c 5343425F 		.ascii	"SCB_VTOR_TBLBASE_Msk (0x1FFul << SCB_VTOR_TBLBASE_P"
 1613      56544F52 
 1613      5F54424C 
 1613      42415345 
 1613      5F4D736B 
 1614 3e5f 6F732900 		.ascii	"os)\000"
 1615 3e63 01       		.byte	0x1
 1616 3e64 E201     		.uleb128 0xe2
 1617 3e66 5343425F 		.ascii	"SCB_VTOR_TBLOFF_Pos 7\000"
 1617      56544F52 
 1617      5F54424C 
 1617      4F46465F 
 1617      506F7320 
 1618 3e7c 01       		.byte	0x1
 1619 3e7d E301     		.uleb128 0xe3
 1620 3e7f 5343425F 		.ascii	"SCB_VTOR_TBLOFF_Msk (0x3FFFFFul << SCB_VTOR_TBLOFF_"
 1620      56544F52 
 1620      5F54424C 
ARM GAS  /tmp/cch3WSAd.s 			page 63


 1620      4F46465F 
 1620      4D736B20 
 1621 3eb2 506F7329 		.ascii	"Pos)\000"
 1621      00
 1622 3eb7 01       		.byte	0x1
 1623 3eb8 E601     		.uleb128 0xe6
 1624 3eba 5343425F 		.ascii	"SCB_AIRCR_VECTKEY_Pos 16\000"
 1624      41495243 
 1624      525F5645 
 1624      43544B45 
 1624      595F506F 
 1625 3ed3 01       		.byte	0x1
 1626 3ed4 E701     		.uleb128 0xe7
 1627 3ed6 5343425F 		.ascii	"SCB_AIRCR_VECTKEY_Msk (0xFFFFul << SCB_AIRCR_VECTKE"
 1627      41495243 
 1627      525F5645 
 1627      43544B45 
 1627      595F4D73 
 1628 3f09 595F506F 		.ascii	"Y_Pos)\000"
 1628      732900
 1629 3f10 01       		.byte	0x1
 1630 3f11 E901     		.uleb128 0xe9
 1631 3f13 5343425F 		.ascii	"SCB_AIRCR_VECTKEYSTAT_Pos 16\000"
 1631      41495243 
 1631      525F5645 
 1631      43544B45 
 1631      59535441 
 1632 3f30 01       		.byte	0x1
 1633 3f31 EA01     		.uleb128 0xea
 1634 3f33 5343425F 		.ascii	"SCB_AIRCR_VECTKEYSTAT_Msk (0xFFFFul << SCB_AIRCR_VE"
 1634      41495243 
 1634      525F5645 
 1634      43544B45 
 1634      59535441 
 1635 3f66 43544B45 		.ascii	"CTKEYSTAT_Pos)\000"
 1635      59535441 
 1635      545F506F 
 1635      732900
 1636 3f75 01       		.byte	0x1
 1637 3f76 EC01     		.uleb128 0xec
 1638 3f78 5343425F 		.ascii	"SCB_AIRCR_ENDIANESS_Pos 15\000"
 1638      41495243 
 1638      525F454E 
 1638      4449414E 
 1638      4553535F 
 1639 3f93 01       		.byte	0x1
 1640 3f94 ED01     		.uleb128 0xed
 1641 3f96 5343425F 		.ascii	"SCB_AIRCR_ENDIANESS_Msk (1ul << SCB_AIRCR_ENDIANESS"
 1641      41495243 
 1641      525F454E 
 1641      4449414E 
 1641      4553535F 
 1642 3fc9 5F506F73 		.ascii	"_Pos)\000"
 1642      2900
 1643 3fcf 01       		.byte	0x1
 1644 3fd0 EF01     		.uleb128 0xef
 1645 3fd2 5343425F 		.ascii	"SCB_AIRCR_PRIGROUP_Pos 8\000"
ARM GAS  /tmp/cch3WSAd.s 			page 64


 1645      41495243 
 1645      525F5052 
 1645      4947524F 
 1645      55505F50 
 1646 3feb 01       		.byte	0x1
 1647 3fec F001     		.uleb128 0xf0
 1648 3fee 5343425F 		.ascii	"SCB_AIRCR_PRIGROUP_Msk (7ul << SCB_AIRCR_PRIGROUP_P"
 1648      41495243 
 1648      525F5052 
 1648      4947524F 
 1648      55505F4D 
 1649 4021 6F732900 		.ascii	"os)\000"
 1650 4025 01       		.byte	0x1
 1651 4026 F201     		.uleb128 0xf2
 1652 4028 5343425F 		.ascii	"SCB_AIRCR_SYSRESETREQ_Pos 2\000"
 1652      41495243 
 1652      525F5359 
 1652      53524553 
 1652      45545245 
 1653 4044 01       		.byte	0x1
 1654 4045 F301     		.uleb128 0xf3
 1655 4047 5343425F 		.ascii	"SCB_AIRCR_SYSRESETREQ_Msk (1ul << SCB_AIRCR_SYSRESE"
 1655      41495243 
 1655      525F5359 
 1655      53524553 
 1655      45545245 
 1656 407a 54524551 		.ascii	"TREQ_Pos)\000"
 1656      5F506F73 
 1656      2900
 1657 4084 01       		.byte	0x1
 1658 4085 F501     		.uleb128 0xf5
 1659 4087 5343425F 		.ascii	"SCB_AIRCR_VECTCLRACTIVE_Pos 1\000"
 1659      41495243 
 1659      525F5645 
 1659      4354434C 
 1659      52414354 
 1660 40a5 01       		.byte	0x1
 1661 40a6 F601     		.uleb128 0xf6
 1662 40a8 5343425F 		.ascii	"SCB_AIRCR_VECTCLRACTIVE_Msk (1ul << SCB_AIRCR_VECTC"
 1662      41495243 
 1662      525F5645 
 1662      4354434C 
 1662      52414354 
 1663 40db 4C524143 		.ascii	"LRACTIVE_Pos)\000"
 1663      54495645 
 1663      5F506F73 
 1663      2900
 1664 40e9 01       		.byte	0x1
 1665 40ea F801     		.uleb128 0xf8
 1666 40ec 5343425F 		.ascii	"SCB_AIRCR_VECTRESET_Pos 0\000"
 1666      41495243 
 1666      525F5645 
 1666      43545245 
 1666      5345545F 
 1667 4106 01       		.byte	0x1
 1668 4107 F901     		.uleb128 0xf9
 1669 4109 5343425F 		.ascii	"SCB_AIRCR_VECTRESET_Msk (1ul << SCB_AIRCR_VECTRESET"
ARM GAS  /tmp/cch3WSAd.s 			page 65


 1669      41495243 
 1669      525F5645 
 1669      43545245 
 1669      5345545F 
 1670 413c 5F506F73 		.ascii	"_Pos)\000"
 1670      2900
 1671 4142 01       		.byte	0x1
 1672 4143 FC01     		.uleb128 0xfc
 1673 4145 5343425F 		.ascii	"SCB_SCR_SEVONPEND_Pos 4\000"
 1673      5343525F 
 1673      5345564F 
 1673      4E50454E 
 1673      445F506F 
 1674 415d 01       		.byte	0x1
 1675 415e FD01     		.uleb128 0xfd
 1676 4160 5343425F 		.ascii	"SCB_SCR_SEVONPEND_Msk (1ul << SCB_SCR_SEVONPEND_Pos"
 1676      5343525F 
 1676      5345564F 
 1676      4E50454E 
 1676      445F4D73 
 1677 4193 2900     		.ascii	")\000"
 1678 4195 01       		.byte	0x1
 1679 4196 FF01     		.uleb128 0xff
 1680 4198 5343425F 		.ascii	"SCB_SCR_SLEEPDEEP_Pos 2\000"
 1680      5343525F 
 1680      534C4545 
 1680      50444545 
 1680      505F506F 
 1681 41b0 01       		.byte	0x1
 1682 41b1 8002     		.uleb128 0x100
 1683 41b3 5343425F 		.ascii	"SCB_SCR_SLEEPDEEP_Msk (1ul << SCB_SCR_SLEEPDEEP_Pos"
 1683      5343525F 
 1683      534C4545 
 1683      50444545 
 1683      505F4D73 
 1684 41e6 2900     		.ascii	")\000"
 1685 41e8 01       		.byte	0x1
 1686 41e9 8202     		.uleb128 0x102
 1687 41eb 5343425F 		.ascii	"SCB_SCR_SLEEPONEXIT_Pos 1\000"
 1687      5343525F 
 1687      534C4545 
 1687      504F4E45 
 1687      5849545F 
 1688 4205 01       		.byte	0x1
 1689 4206 8302     		.uleb128 0x103
 1690 4208 5343425F 		.ascii	"SCB_SCR_SLEEPONEXIT_Msk (1ul << SCB_SCR_SLEEPONEXIT"
 1690      5343525F 
 1690      534C4545 
 1690      504F4E45 
 1690      5849545F 
 1691 423b 5F506F73 		.ascii	"_Pos)\000"
 1691      2900
 1692 4241 01       		.byte	0x1
 1693 4242 8602     		.uleb128 0x106
 1694 4244 5343425F 		.ascii	"SCB_CCR_STKALIGN_Pos 9\000"
 1694      4343525F 
 1694      53544B41 
ARM GAS  /tmp/cch3WSAd.s 			page 66


 1694      4C49474E 
 1694      5F506F73 
 1695 425b 01       		.byte	0x1
 1696 425c 8702     		.uleb128 0x107
 1697 425e 5343425F 		.ascii	"SCB_CCR_STKALIGN_Msk (1ul << SCB_CCR_STKALIGN_Pos)\000"
 1697      4343525F 
 1697      53544B41 
 1697      4C49474E 
 1697      5F4D736B 
 1698 4291 01       		.byte	0x1
 1699 4292 8902     		.uleb128 0x109
 1700 4294 5343425F 		.ascii	"SCB_CCR_BFHFNMIGN_Pos 8\000"
 1700      4343525F 
 1700      42464846 
 1700      4E4D4947 
 1700      4E5F506F 
 1701 42ac 01       		.byte	0x1
 1702 42ad 8A02     		.uleb128 0x10a
 1703 42af 5343425F 		.ascii	"SCB_CCR_BFHFNMIGN_Msk (1ul << SCB_CCR_BFHFNMIGN_Pos"
 1703      4343525F 
 1703      42464846 
 1703      4E4D4947 
 1703      4E5F4D73 
 1704 42e2 2900     		.ascii	")\000"
 1705 42e4 01       		.byte	0x1
 1706 42e5 8C02     		.uleb128 0x10c
 1707 42e7 5343425F 		.ascii	"SCB_CCR_DIV_0_TRP_Pos 4\000"
 1707      4343525F 
 1707      4449565F 
 1707      305F5452 
 1707      505F506F 
 1708 42ff 01       		.byte	0x1
 1709 4300 8D02     		.uleb128 0x10d
 1710 4302 5343425F 		.ascii	"SCB_CCR_DIV_0_TRP_Msk (1ul << SCB_CCR_DIV_0_TRP_Pos"
 1710      4343525F 
 1710      4449565F 
 1710      305F5452 
 1710      505F4D73 
 1711 4335 2900     		.ascii	")\000"
 1712 4337 01       		.byte	0x1
 1713 4338 8F02     		.uleb128 0x10f
 1714 433a 5343425F 		.ascii	"SCB_CCR_UNALIGN_TRP_Pos 3\000"
 1714      4343525F 
 1714      554E414C 
 1714      49474E5F 
 1714      5452505F 
 1715 4354 01       		.byte	0x1
 1716 4355 9002     		.uleb128 0x110
 1717 4357 5343425F 		.ascii	"SCB_CCR_UNALIGN_TRP_Msk (1ul << SCB_CCR_UNALIGN_TRP"
 1717      4343525F 
 1717      554E414C 
 1717      49474E5F 
 1717      5452505F 
 1718 438a 5F506F73 		.ascii	"_Pos)\000"
 1718      2900
 1719 4390 01       		.byte	0x1
 1720 4391 9202     		.uleb128 0x112
ARM GAS  /tmp/cch3WSAd.s 			page 67


 1721 4393 5343425F 		.ascii	"SCB_CCR_USERSETMPEND_Pos 1\000"
 1721      4343525F 
 1721      55534552 
 1721      5345544D 
 1721      50454E44 
 1722 43ae 01       		.byte	0x1
 1723 43af 9302     		.uleb128 0x113
 1724 43b1 5343425F 		.ascii	"SCB_CCR_USERSETMPEND_Msk (1ul << SCB_CCR_USERSETMPE"
 1724      4343525F 
 1724      55534552 
 1724      5345544D 
 1724      50454E44 
 1725 43e4 4E445F50 		.ascii	"ND_Pos)\000"
 1725      6F732900 
 1726 43ec 01       		.byte	0x1
 1727 43ed 9502     		.uleb128 0x115
 1728 43ef 5343425F 		.ascii	"SCB_CCR_NONBASETHRDENA_Pos 0\000"
 1728      4343525F 
 1728      4E4F4E42 
 1728      41534554 
 1728      48524445 
 1729 440c 01       		.byte	0x1
 1730 440d 9602     		.uleb128 0x116
 1731 440f 5343425F 		.ascii	"SCB_CCR_NONBASETHRDENA_Msk (1ul << SCB_CCR_NONBASET"
 1731      4343525F 
 1731      4E4F4E42 
 1731      41534554 
 1731      48524445 
 1732 4442 48524445 		.ascii	"HRDENA_Pos)\000"
 1732      4E415F50 
 1732      6F732900 
 1733 444e 01       		.byte	0x1
 1734 444f 9902     		.uleb128 0x119
 1735 4451 5343425F 		.ascii	"SCB_SHCSR_USGFAULTENA_Pos 18\000"
 1735      53484353 
 1735      525F5553 
 1735      47464155 
 1735      4C54454E 
 1736 446e 01       		.byte	0x1
 1737 446f 9A02     		.uleb128 0x11a
 1738 4471 5343425F 		.ascii	"SCB_SHCSR_USGFAULTENA_Msk (1ul << SCB_SHCSR_USGFAUL"
 1738      53484353 
 1738      525F5553 
 1738      47464155 
 1738      4C54454E 
 1739 44a4 54454E41 		.ascii	"TENA_Pos)\000"
 1739      5F506F73 
 1739      2900
 1740 44ae 01       		.byte	0x1
 1741 44af 9C02     		.uleb128 0x11c
 1742 44b1 5343425F 		.ascii	"SCB_SHCSR_BUSFAULTENA_Pos 17\000"
 1742      53484353 
 1742      525F4255 
 1742      53464155 
 1742      4C54454E 
 1743 44ce 01       		.byte	0x1
 1744 44cf 9D02     		.uleb128 0x11d
ARM GAS  /tmp/cch3WSAd.s 			page 68


 1745 44d1 5343425F 		.ascii	"SCB_SHCSR_BUSFAULTENA_Msk (1ul << SCB_SHCSR_BUSFAUL"
 1745      53484353 
 1745      525F4255 
 1745      53464155 
 1745      4C54454E 
 1746 4504 54454E41 		.ascii	"TENA_Pos)\000"
 1746      5F506F73 
 1746      2900
 1747 450e 01       		.byte	0x1
 1748 450f 9F02     		.uleb128 0x11f
 1749 4511 5343425F 		.ascii	"SCB_SHCSR_MEMFAULTENA_Pos 16\000"
 1749      53484353 
 1749      525F4D45 
 1749      4D464155 
 1749      4C54454E 
 1750 452e 01       		.byte	0x1
 1751 452f A002     		.uleb128 0x120
 1752 4531 5343425F 		.ascii	"SCB_SHCSR_MEMFAULTENA_Msk (1ul << SCB_SHCSR_MEMFAUL"
 1752      53484353 
 1752      525F4D45 
 1752      4D464155 
 1752      4C54454E 
 1753 4564 54454E41 		.ascii	"TENA_Pos)\000"
 1753      5F506F73 
 1753      2900
 1754 456e 01       		.byte	0x1
 1755 456f A202     		.uleb128 0x122
 1756 4571 5343425F 		.ascii	"SCB_SHCSR_SVCALLPENDED_Pos 15\000"
 1756      53484353 
 1756      525F5356 
 1756      43414C4C 
 1756      50454E44 
 1757 458f 01       		.byte	0x1
 1758 4590 A302     		.uleb128 0x123
 1759 4592 5343425F 		.ascii	"SCB_SHCSR_SVCALLPENDED_Msk (1ul << SCB_SHCSR_SVCALL"
 1759      53484353 
 1759      525F5356 
 1759      43414C4C 
 1759      50454E44 
 1760 45c5 50454E44 		.ascii	"PENDED_Pos)\000"
 1760      45445F50 
 1760      6F732900 
 1761 45d1 01       		.byte	0x1
 1762 45d2 A502     		.uleb128 0x125
 1763 45d4 5343425F 		.ascii	"SCB_SHCSR_BUSFAULTPENDED_Pos 14\000"
 1763      53484353 
 1763      525F4255 
 1763      53464155 
 1763      4C545045 
 1764 45f4 01       		.byte	0x1
 1765 45f5 A602     		.uleb128 0x126
 1766 45f7 5343425F 		.ascii	"SCB_SHCSR_BUSFAULTPENDED_Msk (1ul << SCB_SHCSR_BUSF"
 1766      53484353 
 1766      525F4255 
 1766      53464155 
 1766      4C545045 
 1767 462a 41554C54 		.ascii	"AULTPENDED_Pos)\000"
ARM GAS  /tmp/cch3WSAd.s 			page 69


 1767      50454E44 
 1767      45445F50 
 1767      6F732900 
 1768 463a 01       		.byte	0x1
 1769 463b A802     		.uleb128 0x128
 1770 463d 5343425F 		.ascii	"SCB_SHCSR_MEMFAULTPENDED_Pos 13\000"
 1770      53484353 
 1770      525F4D45 
 1770      4D464155 
 1770      4C545045 
 1771 465d 01       		.byte	0x1
 1772 465e A902     		.uleb128 0x129
 1773 4660 5343425F 		.ascii	"SCB_SHCSR_MEMFAULTPENDED_Msk (1ul << SCB_SHCSR_MEMF"
 1773      53484353 
 1773      525F4D45 
 1773      4D464155 
 1773      4C545045 
 1774 4693 41554C54 		.ascii	"AULTPENDED_Pos)\000"
 1774      50454E44 
 1774      45445F50 
 1774      6F732900 
 1775 46a3 01       		.byte	0x1
 1776 46a4 AB02     		.uleb128 0x12b
 1777 46a6 5343425F 		.ascii	"SCB_SHCSR_USGFAULTPENDED_Pos 12\000"
 1777      53484353 
 1777      525F5553 
 1777      47464155 
 1777      4C545045 
 1778 46c6 01       		.byte	0x1
 1779 46c7 AC02     		.uleb128 0x12c
 1780 46c9 5343425F 		.ascii	"SCB_SHCSR_USGFAULTPENDED_Msk (1ul << SCB_SHCSR_USGF"
 1780      53484353 
 1780      525F5553 
 1780      47464155 
 1780      4C545045 
 1781 46fc 41554C54 		.ascii	"AULTPENDED_Pos)\000"
 1781      50454E44 
 1781      45445F50 
 1781      6F732900 
 1782 470c 01       		.byte	0x1
 1783 470d AE02     		.uleb128 0x12e
 1784 470f 5343425F 		.ascii	"SCB_SHCSR_SYSTICKACT_Pos 11\000"
 1784      53484353 
 1784      525F5359 
 1784      53544943 
 1784      4B414354 
 1785 472b 01       		.byte	0x1
 1786 472c AF02     		.uleb128 0x12f
 1787 472e 5343425F 		.ascii	"SCB_SHCSR_SYSTICKACT_Msk (1ul << SCB_SHCSR_SYSTICKA"
 1787      53484353 
 1787      525F5359 
 1787      53544943 
 1787      4B414354 
 1788 4761 43545F50 		.ascii	"CT_Pos)\000"
 1788      6F732900 
 1789 4769 01       		.byte	0x1
 1790 476a B102     		.uleb128 0x131
ARM GAS  /tmp/cch3WSAd.s 			page 70


 1791 476c 5343425F 		.ascii	"SCB_SHCSR_PENDSVACT_Pos 10\000"
 1791      53484353 
 1791      525F5045 
 1791      4E445356 
 1791      4143545F 
 1792 4787 01       		.byte	0x1
 1793 4788 B202     		.uleb128 0x132
 1794 478a 5343425F 		.ascii	"SCB_SHCSR_PENDSVACT_Msk (1ul << SCB_SHCSR_PENDSVACT"
 1794      53484353 
 1794      525F5045 
 1794      4E445356 
 1794      4143545F 
 1795 47bd 5F506F73 		.ascii	"_Pos)\000"
 1795      2900
 1796 47c3 01       		.byte	0x1
 1797 47c4 B402     		.uleb128 0x134
 1798 47c6 5343425F 		.ascii	"SCB_SHCSR_MONITORACT_Pos 8\000"
 1798      53484353 
 1798      525F4D4F 
 1798      4E49544F 
 1798      52414354 
 1799 47e1 01       		.byte	0x1
 1800 47e2 B502     		.uleb128 0x135
 1801 47e4 5343425F 		.ascii	"SCB_SHCSR_MONITORACT_Msk (1ul << SCB_SHCSR_MONITORA"
 1801      53484353 
 1801      525F4D4F 
 1801      4E49544F 
 1801      52414354 
 1802 4817 43545F50 		.ascii	"CT_Pos)\000"
 1802      6F732900 
 1803 481f 01       		.byte	0x1
 1804 4820 B702     		.uleb128 0x137
 1805 4822 5343425F 		.ascii	"SCB_SHCSR_SVCALLACT_Pos 7\000"
 1805      53484353 
 1805      525F5356 
 1805      43414C4C 
 1805      4143545F 
 1806 483c 01       		.byte	0x1
 1807 483d B802     		.uleb128 0x138
 1808 483f 5343425F 		.ascii	"SCB_SHCSR_SVCALLACT_Msk (1ul << SCB_SHCSR_SVCALLACT"
 1808      53484353 
 1808      525F5356 
 1808      43414C4C 
 1808      4143545F 
 1809 4872 5F506F73 		.ascii	"_Pos)\000"
 1809      2900
 1810 4878 01       		.byte	0x1
 1811 4879 BA02     		.uleb128 0x13a
 1812 487b 5343425F 		.ascii	"SCB_SHCSR_USGFAULTACT_Pos 3\000"
 1812      53484353 
 1812      525F5553 
 1812      47464155 
 1812      4C544143 
 1813 4897 01       		.byte	0x1
 1814 4898 BB02     		.uleb128 0x13b
 1815 489a 5343425F 		.ascii	"SCB_SHCSR_USGFAULTACT_Msk (1ul << SCB_SHCSR_USGFAUL"
 1815      53484353 
ARM GAS  /tmp/cch3WSAd.s 			page 71


 1815      525F5553 
 1815      47464155 
 1815      4C544143 
 1816 48cd 54414354 		.ascii	"TACT_Pos)\000"
 1816      5F506F73 
 1816      2900
 1817 48d7 01       		.byte	0x1
 1818 48d8 BD02     		.uleb128 0x13d
 1819 48da 5343425F 		.ascii	"SCB_SHCSR_BUSFAULTACT_Pos 1\000"
 1819      53484353 
 1819      525F4255 
 1819      53464155 
 1819      4C544143 
 1820 48f6 01       		.byte	0x1
 1821 48f7 BE02     		.uleb128 0x13e
 1822 48f9 5343425F 		.ascii	"SCB_SHCSR_BUSFAULTACT_Msk (1ul << SCB_SHCSR_BUSFAUL"
 1822      53484353 
 1822      525F4255 
 1822      53464155 
 1822      4C544143 
 1823 492c 54414354 		.ascii	"TACT_Pos)\000"
 1823      5F506F73 
 1823      2900
 1824 4936 01       		.byte	0x1
 1825 4937 C002     		.uleb128 0x140
 1826 4939 5343425F 		.ascii	"SCB_SHCSR_MEMFAULTACT_Pos 0\000"
 1826      53484353 
 1826      525F4D45 
 1826      4D464155 
 1826      4C544143 
 1827 4955 01       		.byte	0x1
 1828 4956 C102     		.uleb128 0x141
 1829 4958 5343425F 		.ascii	"SCB_SHCSR_MEMFAULTACT_Msk (1ul << SCB_SHCSR_MEMFAUL"
 1829      53484353 
 1829      525F4D45 
 1829      4D464155 
 1829      4C544143 
 1830 498b 54414354 		.ascii	"TACT_Pos)\000"
 1830      5F506F73 
 1830      2900
 1831 4995 01       		.byte	0x1
 1832 4996 C402     		.uleb128 0x144
 1833 4998 5343425F 		.ascii	"SCB_CFSR_USGFAULTSR_Pos 16\000"
 1833      43465352 
 1833      5F555347 
 1833      4641554C 
 1833      5453525F 
 1834 49b3 01       		.byte	0x1
 1835 49b4 C502     		.uleb128 0x145
 1836 49b6 5343425F 		.ascii	"SCB_CFSR_USGFAULTSR_Msk (0xFFFFul << SCB_CFSR_USGFA"
 1836      43465352 
 1836      5F555347 
 1836      4641554C 
 1836      5453525F 
 1837 49e9 554C5453 		.ascii	"ULTSR_Pos)\000"
 1837      525F506F 
 1837      732900
ARM GAS  /tmp/cch3WSAd.s 			page 72


 1838 49f4 01       		.byte	0x1
 1839 49f5 C702     		.uleb128 0x147
 1840 49f7 5343425F 		.ascii	"SCB_CFSR_BUSFAULTSR_Pos 8\000"
 1840      43465352 
 1840      5F425553 
 1840      4641554C 
 1840      5453525F 
 1841 4a11 01       		.byte	0x1
 1842 4a12 C802     		.uleb128 0x148
 1843 4a14 5343425F 		.ascii	"SCB_CFSR_BUSFAULTSR_Msk (0xFFul << SCB_CFSR_BUSFAUL"
 1843      43465352 
 1843      5F425553 
 1843      4641554C 
 1843      5453525F 
 1844 4a47 5453525F 		.ascii	"TSR_Pos)\000"
 1844      506F7329 
 1844      00
 1845 4a50 01       		.byte	0x1
 1846 4a51 CA02     		.uleb128 0x14a
 1847 4a53 5343425F 		.ascii	"SCB_CFSR_MEMFAULTSR_Pos 0\000"
 1847      43465352 
 1847      5F4D454D 
 1847      4641554C 
 1847      5453525F 
 1848 4a6d 01       		.byte	0x1
 1849 4a6e CB02     		.uleb128 0x14b
 1850 4a70 5343425F 		.ascii	"SCB_CFSR_MEMFAULTSR_Msk (0xFFul << SCB_CFSR_MEMFAUL"
 1850      43465352 
 1850      5F4D454D 
 1850      4641554C 
 1850      5453525F 
 1851 4aa3 5453525F 		.ascii	"TSR_Pos)\000"
 1851      506F7329 
 1851      00
 1852 4aac 01       		.byte	0x1
 1853 4aad CE02     		.uleb128 0x14e
 1854 4aaf 5343425F 		.ascii	"SCB_HFSR_DEBUGEVT_Pos 31\000"
 1854      48465352 
 1854      5F444542 
 1854      55474556 
 1854      545F506F 
 1855 4ac8 01       		.byte	0x1
 1856 4ac9 CF02     		.uleb128 0x14f
 1857 4acb 5343425F 		.ascii	"SCB_HFSR_DEBUGEVT_Msk (1ul << SCB_HFSR_DEBUGEVT_Pos"
 1857      48465352 
 1857      5F444542 
 1857      55474556 
 1857      545F4D73 
 1858 4afe 2900     		.ascii	")\000"
 1859 4b00 01       		.byte	0x1
 1860 4b01 D102     		.uleb128 0x151
 1861 4b03 5343425F 		.ascii	"SCB_HFSR_FORCED_Pos 30\000"
 1861      48465352 
 1861      5F464F52 
 1861      4345445F 
 1861      506F7320 
 1862 4b1a 01       		.byte	0x1
ARM GAS  /tmp/cch3WSAd.s 			page 73


 1863 4b1b D202     		.uleb128 0x152
 1864 4b1d 5343425F 		.ascii	"SCB_HFSR_FORCED_Msk (1ul << SCB_HFSR_FORCED_Pos)\000"
 1864      48465352 
 1864      5F464F52 
 1864      4345445F 
 1864      4D736B20 
 1865 4b4e 01       		.byte	0x1
 1866 4b4f D402     		.uleb128 0x154
 1867 4b51 5343425F 		.ascii	"SCB_HFSR_VECTTBL_Pos 1\000"
 1867      48465352 
 1867      5F564543 
 1867      5454424C 
 1867      5F506F73 
 1868 4b68 01       		.byte	0x1
 1869 4b69 D502     		.uleb128 0x155
 1870 4b6b 5343425F 		.ascii	"SCB_HFSR_VECTTBL_Msk (1ul << SCB_HFSR_VECTTBL_Pos)\000"
 1870      48465352 
 1870      5F564543 
 1870      5454424C 
 1870      5F4D736B 
 1871 4b9e 01       		.byte	0x1
 1872 4b9f D802     		.uleb128 0x158
 1873 4ba1 5343425F 		.ascii	"SCB_DFSR_EXTERNAL_Pos 4\000"
 1873      44465352 
 1873      5F455854 
 1873      45524E41 
 1873      4C5F506F 
 1874 4bb9 01       		.byte	0x1
 1875 4bba D902     		.uleb128 0x159
 1876 4bbc 5343425F 		.ascii	"SCB_DFSR_EXTERNAL_Msk (1ul << SCB_DFSR_EXTERNAL_Pos"
 1876      44465352 
 1876      5F455854 
 1876      45524E41 
 1876      4C5F4D73 
 1877 4bef 2900     		.ascii	")\000"
 1878 4bf1 01       		.byte	0x1
 1879 4bf2 DB02     		.uleb128 0x15b
 1880 4bf4 5343425F 		.ascii	"SCB_DFSR_VCATCH_Pos 3\000"
 1880      44465352 
 1880      5F564341 
 1880      5443485F 
 1880      506F7320 
 1881 4c0a 01       		.byte	0x1
 1882 4c0b DC02     		.uleb128 0x15c
 1883 4c0d 5343425F 		.ascii	"SCB_DFSR_VCATCH_Msk (1ul << SCB_DFSR_VCATCH_Pos)\000"
 1883      44465352 
 1883      5F564341 
 1883      5443485F 
 1883      4D736B20 
 1884 4c3e 01       		.byte	0x1
 1885 4c3f DE02     		.uleb128 0x15e
 1886 4c41 5343425F 		.ascii	"SCB_DFSR_DWTTRAP_Pos 2\000"
 1886      44465352 
 1886      5F445754 
 1886      54524150 
 1886      5F506F73 
 1887 4c58 01       		.byte	0x1
ARM GAS  /tmp/cch3WSAd.s 			page 74


 1888 4c59 DF02     		.uleb128 0x15f
 1889 4c5b 5343425F 		.ascii	"SCB_DFSR_DWTTRAP_Msk (1ul << SCB_DFSR_DWTTRAP_Pos)\000"
 1889      44465352 
 1889      5F445754 
 1889      54524150 
 1889      5F4D736B 
 1890 4c8e 01       		.byte	0x1
 1891 4c8f E102     		.uleb128 0x161
 1892 4c91 5343425F 		.ascii	"SCB_DFSR_BKPT_Pos 1\000"
 1892      44465352 
 1892      5F424B50 
 1892      545F506F 
 1892      73203100 
 1893 4ca5 01       		.byte	0x1
 1894 4ca6 E202     		.uleb128 0x162
 1895 4ca8 5343425F 		.ascii	"SCB_DFSR_BKPT_Msk (1ul << SCB_DFSR_BKPT_Pos)\000"
 1895      44465352 
 1895      5F424B50 
 1895      545F4D73 
 1895      6B202831 
 1896 4cd5 01       		.byte	0x1
 1897 4cd6 E402     		.uleb128 0x164
 1898 4cd8 5343425F 		.ascii	"SCB_DFSR_HALTED_Pos 0\000"
 1898      44465352 
 1898      5F48414C 
 1898      5445445F 
 1898      506F7320 
 1899 4cee 01       		.byte	0x1
 1900 4cef E502     		.uleb128 0x165
 1901 4cf1 5343425F 		.ascii	"SCB_DFSR_HALTED_Msk (1ul << SCB_DFSR_HALTED_Pos)\000"
 1901      44465352 
 1901      5F48414C 
 1901      5445445F 
 1901      4D736B20 
 1902 4d22 01       		.byte	0x1
 1903 4d23 F602     		.uleb128 0x176
 1904 4d25 53797354 		.ascii	"SysTick_CTRL_COUNTFLAG_Pos 16\000"
 1904      69636B5F 
 1904      4354524C 
 1904      5F434F55 
 1904      4E54464C 
 1905 4d43 01       		.byte	0x1
 1906 4d44 F702     		.uleb128 0x177
 1907 4d46 53797354 		.ascii	"SysTick_CTRL_COUNTFLAG_Msk (1ul << SysTick_CTRL_COU"
 1907      69636B5F 
 1907      4354524C 
 1907      5F434F55 
 1907      4E54464C 
 1908 4d79 4E54464C 		.ascii	"NTFLAG_Pos)\000"
 1908      41475F50 
 1908      6F732900 
 1909 4d85 01       		.byte	0x1
 1910 4d86 F902     		.uleb128 0x179
 1911 4d88 53797354 		.ascii	"SysTick_CTRL_CLKSOURCE_Pos 2\000"
 1911      69636B5F 
 1911      4354524C 
 1911      5F434C4B 
ARM GAS  /tmp/cch3WSAd.s 			page 75


 1911      534F5552 
 1912 4da5 01       		.byte	0x1
 1913 4da6 FA02     		.uleb128 0x17a
 1914 4da8 53797354 		.ascii	"SysTick_CTRL_CLKSOURCE_Msk (1ul << SysTick_CTRL_CLK"
 1914      69636B5F 
 1914      4354524C 
 1914      5F434C4B 
 1914      534F5552 
 1915 4ddb 534F5552 		.ascii	"SOURCE_Pos)\000"
 1915      43455F50 
 1915      6F732900 
 1916 4de7 01       		.byte	0x1
 1917 4de8 FC02     		.uleb128 0x17c
 1918 4dea 53797354 		.ascii	"SysTick_CTRL_TICKINT_Pos 1\000"
 1918      69636B5F 
 1918      4354524C 
 1918      5F544943 
 1918      4B494E54 
 1919 4e05 01       		.byte	0x1
 1920 4e06 FD02     		.uleb128 0x17d
 1921 4e08 53797354 		.ascii	"SysTick_CTRL_TICKINT_Msk (1ul << SysTick_CTRL_TICKI"
 1921      69636B5F 
 1921      4354524C 
 1921      5F544943 
 1921      4B494E54 
 1922 4e3b 4E545F50 		.ascii	"NT_Pos)\000"
 1922      6F732900 
 1923 4e43 01       		.byte	0x1
 1924 4e44 FF02     		.uleb128 0x17f
 1925 4e46 53797354 		.ascii	"SysTick_CTRL_ENABLE_Pos 0\000"
 1925      69636B5F 
 1925      4354524C 
 1925      5F454E41 
 1925      424C455F 
 1926 4e60 01       		.byte	0x1
 1927 4e61 8003     		.uleb128 0x180
 1928 4e63 53797354 		.ascii	"SysTick_CTRL_ENABLE_Msk (1ul << SysTick_CTRL_ENABLE"
 1928      69636B5F 
 1928      4354524C 
 1928      5F454E41 
 1928      424C455F 
 1929 4e96 5F506F73 		.ascii	"_Pos)\000"
 1929      2900
 1930 4e9c 01       		.byte	0x1
 1931 4e9d 8303     		.uleb128 0x183
 1932 4e9f 53797354 		.ascii	"SysTick_LOAD_RELOAD_Pos 0\000"
 1932      69636B5F 
 1932      4C4F4144 
 1932      5F52454C 
 1932      4F41445F 
 1933 4eb9 01       		.byte	0x1
 1934 4eba 8403     		.uleb128 0x184
 1935 4ebc 53797354 		.ascii	"SysTick_LOAD_RELOAD_Msk (0xFFFFFFul << SysTick_LOAD"
 1935      69636B5F 
 1935      4C4F4144 
 1935      5F52454C 
 1935      4F41445F 
ARM GAS  /tmp/cch3WSAd.s 			page 76


 1936 4eef 5F52454C 		.ascii	"_RELOAD_Pos)\000"
 1936      4F41445F 
 1936      506F7329 
 1936      00
 1937 4efc 01       		.byte	0x1
 1938 4efd 8703     		.uleb128 0x187
 1939 4eff 53797354 		.ascii	"SysTick_VAL_CURRENT_Pos 0\000"
 1939      69636B5F 
 1939      56414C5F 
 1939      43555252 
 1939      454E545F 
 1940 4f19 01       		.byte	0x1
 1941 4f1a 8803     		.uleb128 0x188
 1942 4f1c 53797354 		.ascii	"SysTick_VAL_CURRENT_Msk (0xFFFFFFul << SysTick_VAL_"
 1942      69636B5F 
 1942      56414C5F 
 1942      43555252 
 1942      454E545F 
 1943 4f4f 43555252 		.ascii	"CURRENT_Pos)\000"
 1943      454E545F 
 1943      506F7329 
 1943      00
 1944 4f5c 01       		.byte	0x1
 1945 4f5d 8B03     		.uleb128 0x18b
 1946 4f5f 53797354 		.ascii	"SysTick_CALIB_NOREF_Pos 31\000"
 1946      69636B5F 
 1946      43414C49 
 1946      425F4E4F 
 1946      5245465F 
 1947 4f7a 01       		.byte	0x1
 1948 4f7b 8C03     		.uleb128 0x18c
 1949 4f7d 53797354 		.ascii	"SysTick_CALIB_NOREF_Msk (1ul << SysTick_CALIB_NOREF"
 1949      69636B5F 
 1949      43414C49 
 1949      425F4E4F 
 1949      5245465F 
 1950 4fb0 5F506F73 		.ascii	"_Pos)\000"
 1950      2900
 1951 4fb6 01       		.byte	0x1
 1952 4fb7 8E03     		.uleb128 0x18e
 1953 4fb9 53797354 		.ascii	"SysTick_CALIB_SKEW_Pos 30\000"
 1953      69636B5F 
 1953      43414C49 
 1953      425F534B 
 1953      45575F50 
 1954 4fd3 01       		.byte	0x1
 1955 4fd4 8F03     		.uleb128 0x18f
 1956 4fd6 53797354 		.ascii	"SysTick_CALIB_SKEW_Msk (1ul << SysTick_CALIB_SKEW_P"
 1956      69636B5F 
 1956      43414C49 
 1956      425F534B 
 1956      45575F4D 
 1957 5009 6F732900 		.ascii	"os)\000"
 1958 500d 01       		.byte	0x1
 1959 500e 9103     		.uleb128 0x191
 1960 5010 53797354 		.ascii	"SysTick_CALIB_TENMS_Pos 0\000"
 1960      69636B5F 
ARM GAS  /tmp/cch3WSAd.s 			page 77


 1960      43414C49 
 1960      425F5445 
 1960      4E4D535F 
 1961 502a 01       		.byte	0x1
 1962 502b 9203     		.uleb128 0x192
 1963 502d 53797354 		.ascii	"SysTick_CALIB_TENMS_Msk (0xFFFFFFul << SysTick_VAL_"
 1963      69636B5F 
 1963      43414C49 
 1963      425F5445 
 1963      4E4D535F 
 1964 5060 43555252 		.ascii	"CURRENT_Pos)\000"
 1964      454E545F 
 1964      506F7329 
 1964      00
 1965 506d 01       		.byte	0x1
 1966 506e BF03     		.uleb128 0x1bf
 1967 5070 49544D5F 		.ascii	"ITM_TPR_PRIVMASK_Pos 0\000"
 1967      5450525F 
 1967      50524956 
 1967      4D41534B 
 1967      5F506F73 
 1968 5087 01       		.byte	0x1
 1969 5088 C003     		.uleb128 0x1c0
 1970 508a 49544D5F 		.ascii	"ITM_TPR_PRIVMASK_Msk (0xFul << ITM_TPR_PRIVMASK_Pos"
 1970      5450525F 
 1970      50524956 
 1970      4D41534B 
 1970      5F4D736B 
 1971 50bd 2900     		.ascii	")\000"
 1972 50bf 01       		.byte	0x1
 1973 50c0 C303     		.uleb128 0x1c3
 1974 50c2 49544D5F 		.ascii	"ITM_TCR_BUSY_Pos 23\000"
 1974      5443525F 
 1974      42555359 
 1974      5F506F73 
 1974      20323300 
 1975 50d6 01       		.byte	0x1
 1976 50d7 C403     		.uleb128 0x1c4
 1977 50d9 49544D5F 		.ascii	"ITM_TCR_BUSY_Msk (1ul << ITM_TCR_BUSY_Pos)\000"
 1977      5443525F 
 1977      42555359 
 1977      5F4D736B 
 1977      20283175 
 1978 5104 01       		.byte	0x1
 1979 5105 C603     		.uleb128 0x1c6
 1980 5107 49544D5F 		.ascii	"ITM_TCR_ATBID_Pos 16\000"
 1980      5443525F 
 1980      41544249 
 1980      445F506F 
 1980      73203136 
 1981 511c 01       		.byte	0x1
 1982 511d C703     		.uleb128 0x1c7
 1983 511f 49544D5F 		.ascii	"ITM_TCR_ATBID_Msk (0x7Ful << ITM_TCR_ATBID_Pos)\000"
 1983      5443525F 
 1983      41544249 
 1983      445F4D73 
 1983      6B202830 
ARM GAS  /tmp/cch3WSAd.s 			page 78


 1984 514f 01       		.byte	0x1
 1985 5150 C903     		.uleb128 0x1c9
 1986 5152 49544D5F 		.ascii	"ITM_TCR_TSPrescale_Pos 8\000"
 1986      5443525F 
 1986      54535072 
 1986      65736361 
 1986      6C655F50 
 1987 516b 01       		.byte	0x1
 1988 516c CA03     		.uleb128 0x1ca
 1989 516e 49544D5F 		.ascii	"ITM_TCR_TSPrescale_Msk (3ul << ITM_TCR_TSPrescale_P"
 1989      5443525F 
 1989      54535072 
 1989      65736361 
 1989      6C655F4D 
 1990 51a1 6F732900 		.ascii	"os)\000"
 1991 51a5 01       		.byte	0x1
 1992 51a6 CC03     		.uleb128 0x1cc
 1993 51a8 49544D5F 		.ascii	"ITM_TCR_SWOENA_Pos 4\000"
 1993      5443525F 
 1993      53574F45 
 1993      4E415F50 
 1993      6F732034 
 1994 51bd 01       		.byte	0x1
 1995 51be CD03     		.uleb128 0x1cd
 1996 51c0 49544D5F 		.ascii	"ITM_TCR_SWOENA_Msk (1ul << ITM_TCR_SWOENA_Pos)\000"
 1996      5443525F 
 1996      53574F45 
 1996      4E415F4D 
 1996      736B2028 
 1997 51ef 01       		.byte	0x1
 1998 51f0 CF03     		.uleb128 0x1cf
 1999 51f2 49544D5F 		.ascii	"ITM_TCR_DWTENA_Pos 3\000"
 1999      5443525F 
 1999      44575445 
 1999      4E415F50 
 1999      6F732033 
 2000 5207 01       		.byte	0x1
 2001 5208 D003     		.uleb128 0x1d0
 2002 520a 49544D5F 		.ascii	"ITM_TCR_DWTENA_Msk (1ul << ITM_TCR_DWTENA_Pos)\000"
 2002      5443525F 
 2002      44575445 
 2002      4E415F4D 
 2002      736B2028 
 2003 5239 01       		.byte	0x1
 2004 523a D203     		.uleb128 0x1d2
 2005 523c 49544D5F 		.ascii	"ITM_TCR_SYNCENA_Pos 2\000"
 2005      5443525F 
 2005      53594E43 
 2005      454E415F 
 2005      506F7320 
 2006 5252 01       		.byte	0x1
 2007 5253 D303     		.uleb128 0x1d3
 2008 5255 49544D5F 		.ascii	"ITM_TCR_SYNCENA_Msk (1ul << ITM_TCR_SYNCENA_Pos)\000"
 2008      5443525F 
 2008      53594E43 
 2008      454E415F 
 2008      4D736B20 
ARM GAS  /tmp/cch3WSAd.s 			page 79


 2009 5286 01       		.byte	0x1
 2010 5287 D503     		.uleb128 0x1d5
 2011 5289 49544D5F 		.ascii	"ITM_TCR_TSENA_Pos 1\000"
 2011      5443525F 
 2011      5453454E 
 2011      415F506F 
 2011      73203100 
 2012 529d 01       		.byte	0x1
 2013 529e D603     		.uleb128 0x1d6
 2014 52a0 49544D5F 		.ascii	"ITM_TCR_TSENA_Msk (1ul << ITM_TCR_TSENA_Pos)\000"
 2014      5443525F 
 2014      5453454E 
 2014      415F4D73 
 2014      6B202831 
 2015 52cd 01       		.byte	0x1
 2016 52ce D803     		.uleb128 0x1d8
 2017 52d0 49544D5F 		.ascii	"ITM_TCR_ITMENA_Pos 0\000"
 2017      5443525F 
 2017      49544D45 
 2017      4E415F50 
 2017      6F732030 
 2018 52e5 01       		.byte	0x1
 2019 52e6 D903     		.uleb128 0x1d9
 2020 52e8 49544D5F 		.ascii	"ITM_TCR_ITMENA_Msk (1ul << ITM_TCR_ITMENA_Pos)\000"
 2020      5443525F 
 2020      49544D45 
 2020      4E415F4D 
 2020      736B2028 
 2021 5317 01       		.byte	0x1
 2022 5318 DC03     		.uleb128 0x1dc
 2023 531a 49544D5F 		.ascii	"ITM_IWR_ATVALIDM_Pos 0\000"
 2023      4957525F 
 2023      41545641 
 2023      4C49444D 
 2023      5F506F73 
 2024 5331 01       		.byte	0x1
 2025 5332 DD03     		.uleb128 0x1dd
 2026 5334 49544D5F 		.ascii	"ITM_IWR_ATVALIDM_Msk (1ul << ITM_IWR_ATVALIDM_Pos)\000"
 2026      4957525F 
 2026      41545641 
 2026      4C49444D 
 2026      5F4D736B 
 2027 5367 01       		.byte	0x1
 2028 5368 E003     		.uleb128 0x1e0
 2029 536a 49544D5F 		.ascii	"ITM_IRR_ATREADYM_Pos 0\000"
 2029      4952525F 
 2029      41545245 
 2029      4144594D 
 2029      5F506F73 
 2030 5381 01       		.byte	0x1
 2031 5382 E103     		.uleb128 0x1e1
 2032 5384 49544D5F 		.ascii	"ITM_IRR_ATREADYM_Msk (1ul << ITM_IRR_ATREADYM_Pos)\000"
 2032      4952525F 
 2032      41545245 
 2032      4144594D 
 2032      5F4D736B 
 2033 53b7 01       		.byte	0x1
ARM GAS  /tmp/cch3WSAd.s 			page 80


 2034 53b8 E403     		.uleb128 0x1e4
 2035 53ba 49544D5F 		.ascii	"ITM_IMCR_INTEGRATION_Pos 0\000"
 2035      494D4352 
 2035      5F494E54 
 2035      45475241 
 2035      54494F4E 
 2036 53d5 01       		.byte	0x1
 2037 53d6 E503     		.uleb128 0x1e5
 2038 53d8 49544D5F 		.ascii	"ITM_IMCR_INTEGRATION_Msk (1ul << ITM_IMCR_INTEGRATI"
 2038      494D4352 
 2038      5F494E54 
 2038      45475241 
 2038      54494F4E 
 2039 540b 4F4E5F50 		.ascii	"ON_Pos)\000"
 2039      6F732900 
 2040 5413 01       		.byte	0x1
 2041 5414 E803     		.uleb128 0x1e8
 2042 5416 49544D5F 		.ascii	"ITM_LSR_ByteAcc_Pos 2\000"
 2042      4C53525F 
 2042      42797465 
 2042      4163635F 
 2042      506F7320 
 2043 542c 01       		.byte	0x1
 2044 542d E903     		.uleb128 0x1e9
 2045 542f 49544D5F 		.ascii	"ITM_LSR_ByteAcc_Msk (1ul << ITM_LSR_ByteAcc_Pos)\000"
 2045      4C53525F 
 2045      42797465 
 2045      4163635F 
 2045      4D736B20 
 2046 5460 01       		.byte	0x1
 2047 5461 EB03     		.uleb128 0x1eb
 2048 5463 49544D5F 		.ascii	"ITM_LSR_Access_Pos 1\000"
 2048      4C53525F 
 2048      41636365 
 2048      73735F50 
 2048      6F732031 
 2049 5478 01       		.byte	0x1
 2050 5479 EC03     		.uleb128 0x1ec
 2051 547b 49544D5F 		.ascii	"ITM_LSR_Access_Msk (1ul << ITM_LSR_Access_Pos)\000"
 2051      4C53525F 
 2051      41636365 
 2051      73735F4D 
 2051      736B2028 
 2052 54aa 01       		.byte	0x1
 2053 54ab EE03     		.uleb128 0x1ee
 2054 54ad 49544D5F 		.ascii	"ITM_LSR_Present_Pos 0\000"
 2054      4C53525F 
 2054      50726573 
 2054      656E745F 
 2054      506F7320 
 2055 54c3 01       		.byte	0x1
 2056 54c4 EF03     		.uleb128 0x1ef
 2057 54c6 49544D5F 		.ascii	"ITM_LSR_Present_Msk (1ul << ITM_LSR_Present_Pos)\000"
 2057      4C53525F 
 2057      50726573 
 2057      656E745F 
 2057      4D736B20 
ARM GAS  /tmp/cch3WSAd.s 			page 81


 2058 54f7 01       		.byte	0x1
 2059 54f8 8304     		.uleb128 0x203
 2060 54fa 496E7465 		.ascii	"InterruptType_ICTR_INTLINESNUM_Pos 0\000"
 2060      72727570 
 2060      74547970 
 2060      655F4943 
 2060      54525F49 
 2061 551f 01       		.byte	0x1
 2062 5520 8404     		.uleb128 0x204
 2063 5522 496E7465 		.ascii	"InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << Inter"
 2063      72727570 
 2063      74547970 
 2063      655F4943 
 2063      54525F49 
 2064 5555 72757074 		.ascii	"ruptType_ICTR_INTLINESNUM_Pos)\000"
 2064      54797065 
 2064      5F494354 
 2064      525F494E 
 2064      544C494E 
 2065 5574 01       		.byte	0x1
 2066 5575 8704     		.uleb128 0x207
 2067 5577 496E7465 		.ascii	"InterruptType_ACTLR_DISFOLD_Pos 2\000"
 2067      72727570 
 2067      74547970 
 2067      655F4143 
 2067      544C525F 
 2068 5599 01       		.byte	0x1
 2069 559a 8804     		.uleb128 0x208
 2070 559c 496E7465 		.ascii	"InterruptType_ACTLR_DISFOLD_Msk (1ul << InterruptTy"
 2070      72727570 
 2070      74547970 
 2070      655F4143 
 2070      544C525F 
 2071 55cf 70655F41 		.ascii	"pe_ACTLR_DISFOLD_Pos)\000"
 2071      43544C52 
 2071      5F444953 
 2071      464F4C44 
 2071      5F506F73 
 2072 55e5 01       		.byte	0x1
 2073 55e6 8A04     		.uleb128 0x20a
 2074 55e8 496E7465 		.ascii	"InterruptType_ACTLR_DISDEFWBUF_Pos 1\000"
 2074      72727570 
 2074      74547970 
 2074      655F4143 
 2074      544C525F 
 2075 560d 01       		.byte	0x1
 2076 560e 8B04     		.uleb128 0x20b
 2077 5610 496E7465 		.ascii	"InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << Interrup"
 2077      72727570 
 2077      74547970 
 2077      655F4143 
 2077      544C525F 
 2078 5643 74547970 		.ascii	"tType_ACTLR_DISDEFWBUF_Pos)\000"
 2078      655F4143 
 2078      544C525F 
 2078      44495344 
 2078      45465742 
ARM GAS  /tmp/cch3WSAd.s 			page 82


 2079 565f 01       		.byte	0x1
 2080 5660 8D04     		.uleb128 0x20d
 2081 5662 496E7465 		.ascii	"InterruptType_ACTLR_DISMCYCINT_Pos 0\000"
 2081      72727570 
 2081      74547970 
 2081      655F4143 
 2081      544C525F 
 2082 5687 01       		.byte	0x1
 2083 5688 8E04     		.uleb128 0x20e
 2084 568a 496E7465 		.ascii	"InterruptType_ACTLR_DISMCYCINT_Msk (1ul << Interrup"
 2084      72727570 
 2084      74547970 
 2084      655F4143 
 2084      544C525F 
 2085 56bd 74547970 		.ascii	"tType_ACTLR_DISMCYCINT_Pos)\000"
 2085      655F4143 
 2085      544C525F 
 2085      4449534D 
 2085      43594349 
 2086 56d9 01       		.byte	0x1
 2087 56da A704     		.uleb128 0x227
 2088 56dc 4D50555F 		.ascii	"MPU_TYPE_IREGION_Pos 16\000"
 2088      54595045 
 2088      5F495245 
 2088      47494F4E 
 2088      5F506F73 
 2089 56f4 01       		.byte	0x1
 2090 56f5 A804     		.uleb128 0x228
 2091 56f7 4D50555F 		.ascii	"MPU_TYPE_IREGION_Msk (0xFFul << MPU_TYPE_IREGION_Po"
 2091      54595045 
 2091      5F495245 
 2091      47494F4E 
 2091      5F4D736B 
 2092 572a 732900   		.ascii	"s)\000"
 2093 572d 01       		.byte	0x1
 2094 572e AA04     		.uleb128 0x22a
 2095 5730 4D50555F 		.ascii	"MPU_TYPE_DREGION_Pos 8\000"
 2095      54595045 
 2095      5F445245 
 2095      47494F4E 
 2095      5F506F73 
 2096 5747 01       		.byte	0x1
 2097 5748 AB04     		.uleb128 0x22b
 2098 574a 4D50555F 		.ascii	"MPU_TYPE_DREGION_Msk (0xFFul << MPU_TYPE_DREGION_Po"
 2098      54595045 
 2098      5F445245 
 2098      47494F4E 
 2098      5F4D736B 
 2099 577d 732900   		.ascii	"s)\000"
 2100 5780 01       		.byte	0x1
 2101 5781 AD04     		.uleb128 0x22d
 2102 5783 4D50555F 		.ascii	"MPU_TYPE_SEPARATE_Pos 0\000"
 2102      54595045 
 2102      5F534550 
 2102      41524154 
 2102      455F506F 
 2103 579b 01       		.byte	0x1
ARM GAS  /tmp/cch3WSAd.s 			page 83


 2104 579c AE04     		.uleb128 0x22e
 2105 579e 4D50555F 		.ascii	"MPU_TYPE_SEPARATE_Msk (1ul << MPU_TYPE_SEPARATE_Pos"
 2105      54595045 
 2105      5F534550 
 2105      41524154 
 2105      455F4D73 
 2106 57d1 2900     		.ascii	")\000"
 2107 57d3 01       		.byte	0x1
 2108 57d4 B104     		.uleb128 0x231
 2109 57d6 4D50555F 		.ascii	"MPU_CTRL_PRIVDEFENA_Pos 2\000"
 2109      4354524C 
 2109      5F505249 
 2109      56444546 
 2109      454E415F 
 2110 57f0 01       		.byte	0x1
 2111 57f1 B204     		.uleb128 0x232
 2112 57f3 4D50555F 		.ascii	"MPU_CTRL_PRIVDEFENA_Msk (1ul << MPU_CTRL_PRIVDEFENA"
 2112      4354524C 
 2112      5F505249 
 2112      56444546 
 2112      454E415F 
 2113 5826 5F506F73 		.ascii	"_Pos)\000"
 2113      2900
 2114 582c 01       		.byte	0x1
 2115 582d B404     		.uleb128 0x234
 2116 582f 4D50555F 		.ascii	"MPU_CTRL_HFNMIENA_Pos 1\000"
 2116      4354524C 
 2116      5F48464E 
 2116      4D49454E 
 2116      415F506F 
 2117 5847 01       		.byte	0x1
 2118 5848 B504     		.uleb128 0x235
 2119 584a 4D50555F 		.ascii	"MPU_CTRL_HFNMIENA_Msk (1ul << MPU_CTRL_HFNMIENA_Pos"
 2119      4354524C 
 2119      5F48464E 
 2119      4D49454E 
 2119      415F4D73 
 2120 587d 2900     		.ascii	")\000"
 2121 587f 01       		.byte	0x1
 2122 5880 B704     		.uleb128 0x237
 2123 5882 4D50555F 		.ascii	"MPU_CTRL_ENABLE_Pos 0\000"
 2123      4354524C 
 2123      5F454E41 
 2123      424C455F 
 2123      506F7320 
 2124 5898 01       		.byte	0x1
 2125 5899 B804     		.uleb128 0x238
 2126 589b 4D50555F 		.ascii	"MPU_CTRL_ENABLE_Msk (1ul << MPU_CTRL_ENABLE_Pos)\000"
 2126      4354524C 
 2126      5F454E41 
 2126      424C455F 
 2126      4D736B20 
 2127 58cc 01       		.byte	0x1
 2128 58cd BB04     		.uleb128 0x23b
 2129 58cf 4D50555F 		.ascii	"MPU_RNR_REGION_Pos 0\000"
 2129      524E525F 
 2129      52454749 
ARM GAS  /tmp/cch3WSAd.s 			page 84


 2129      4F4E5F50 
 2129      6F732030 
 2130 58e4 01       		.byte	0x1
 2131 58e5 BC04     		.uleb128 0x23c
 2132 58e7 4D50555F 		.ascii	"MPU_RNR_REGION_Msk (0xFFul << MPU_RNR_REGION_Pos)\000"
 2132      524E525F 
 2132      52454749 
 2132      4F4E5F4D 
 2132      736B2028 
 2133 5919 01       		.byte	0x1
 2134 591a BF04     		.uleb128 0x23f
 2135 591c 4D50555F 		.ascii	"MPU_RBAR_ADDR_Pos 5\000"
 2135      52424152 
 2135      5F414444 
 2135      525F506F 
 2135      73203500 
 2136 5930 01       		.byte	0x1
 2137 5931 C004     		.uleb128 0x240
 2138 5933 4D50555F 		.ascii	"MPU_RBAR_ADDR_Msk (0x7FFFFFFul << MPU_RBAR_ADDR_Pos"
 2138      52424152 
 2138      5F414444 
 2138      525F4D73 
 2138      6B202830 
 2139 5966 2900     		.ascii	")\000"
 2140 5968 01       		.byte	0x1
 2141 5969 C204     		.uleb128 0x242
 2142 596b 4D50555F 		.ascii	"MPU_RBAR_VALID_Pos 4\000"
 2142      52424152 
 2142      5F56414C 
 2142      49445F50 
 2142      6F732034 
 2143 5980 01       		.byte	0x1
 2144 5981 C304     		.uleb128 0x243
 2145 5983 4D50555F 		.ascii	"MPU_RBAR_VALID_Msk (1ul << MPU_RBAR_VALID_Pos)\000"
 2145      52424152 
 2145      5F56414C 
 2145      49445F4D 
 2145      736B2028 
 2146 59b2 01       		.byte	0x1
 2147 59b3 C504     		.uleb128 0x245
 2148 59b5 4D50555F 		.ascii	"MPU_RBAR_REGION_Pos 0\000"
 2148      52424152 
 2148      5F524547 
 2148      494F4E5F 
 2148      506F7320 
 2149 59cb 01       		.byte	0x1
 2150 59cc C604     		.uleb128 0x246
 2151 59ce 4D50555F 		.ascii	"MPU_RBAR_REGION_Msk (0xFul << MPU_RBAR_REGION_Pos)\000"
 2151      52424152 
 2151      5F524547 
 2151      494F4E5F 
 2151      4D736B20 
 2152 5a01 01       		.byte	0x1
 2153 5a02 C904     		.uleb128 0x249
 2154 5a04 4D50555F 		.ascii	"MPU_RASR_XN_Pos 28\000"
 2154      52415352 
 2154      5F584E5F 
ARM GAS  /tmp/cch3WSAd.s 			page 85


 2154      506F7320 
 2154      323800
 2155 5a17 01       		.byte	0x1
 2156 5a18 CA04     		.uleb128 0x24a
 2157 5a1a 4D50555F 		.ascii	"MPU_RASR_XN_Msk (1ul << MPU_RASR_XN_Pos)\000"
 2157      52415352 
 2157      5F584E5F 
 2157      4D736B20 
 2157      2831756C 
 2158 5a43 01       		.byte	0x1
 2159 5a44 CC04     		.uleb128 0x24c
 2160 5a46 4D50555F 		.ascii	"MPU_RASR_AP_Pos 24\000"
 2160      52415352 
 2160      5F41505F 
 2160      506F7320 
 2160      323400
 2161 5a59 01       		.byte	0x1
 2162 5a5a CD04     		.uleb128 0x24d
 2163 5a5c 4D50555F 		.ascii	"MPU_RASR_AP_Msk (7ul << MPU_RASR_AP_Pos)\000"
 2163      52415352 
 2163      5F41505F 
 2163      4D736B20 
 2163      2837756C 
 2164 5a85 01       		.byte	0x1
 2165 5a86 CF04     		.uleb128 0x24f
 2166 5a88 4D50555F 		.ascii	"MPU_RASR_TEX_Pos 19\000"
 2166      52415352 
 2166      5F544558 
 2166      5F506F73 
 2166      20313900 
 2167 5a9c 01       		.byte	0x1
 2168 5a9d D004     		.uleb128 0x250
 2169 5a9f 4D50555F 		.ascii	"MPU_RASR_TEX_Msk (7ul << MPU_RASR_TEX_Pos)\000"
 2169      52415352 
 2169      5F544558 
 2169      5F4D736B 
 2169      20283775 
 2170 5aca 01       		.byte	0x1
 2171 5acb D204     		.uleb128 0x252
 2172 5acd 4D50555F 		.ascii	"MPU_RASR_S_Pos 18\000"
 2172      52415352 
 2172      5F535F50 
 2172      6F732031 
 2172      3800
 2173 5adf 01       		.byte	0x1
 2174 5ae0 D304     		.uleb128 0x253
 2175 5ae2 4D50555F 		.ascii	"MPU_RASR_S_Msk (1ul << MPU_RASR_S_Pos)\000"
 2175      52415352 
 2175      5F535F4D 
 2175      736B2028 
 2175      31756C20 
 2176 5b09 01       		.byte	0x1
 2177 5b0a D504     		.uleb128 0x255
 2178 5b0c 4D50555F 		.ascii	"MPU_RASR_C_Pos 17\000"
 2178      52415352 
 2178      5F435F50 
 2178      6F732031 
ARM GAS  /tmp/cch3WSAd.s 			page 86


 2178      3700
 2179 5b1e 01       		.byte	0x1
 2180 5b1f D604     		.uleb128 0x256
 2181 5b21 4D50555F 		.ascii	"MPU_RASR_C_Msk (1ul << MPU_RASR_C_Pos)\000"
 2181      52415352 
 2181      5F435F4D 
 2181      736B2028 
 2181      31756C20 
 2182 5b48 01       		.byte	0x1
 2183 5b49 D804     		.uleb128 0x258
 2184 5b4b 4D50555F 		.ascii	"MPU_RASR_B_Pos 16\000"
 2184      52415352 
 2184      5F425F50 
 2184      6F732031 
 2184      3600
 2185 5b5d 01       		.byte	0x1
 2186 5b5e D904     		.uleb128 0x259
 2187 5b60 4D50555F 		.ascii	"MPU_RASR_B_Msk (1ul << MPU_RASR_B_Pos)\000"
 2187      52415352 
 2187      5F425F4D 
 2187      736B2028 
 2187      31756C20 
 2188 5b87 01       		.byte	0x1
 2189 5b88 DB04     		.uleb128 0x25b
 2190 5b8a 4D50555F 		.ascii	"MPU_RASR_SRD_Pos 8\000"
 2190      52415352 
 2190      5F535244 
 2190      5F506F73 
 2190      203800
 2191 5b9d 01       		.byte	0x1
 2192 5b9e DC04     		.uleb128 0x25c
 2193 5ba0 4D50555F 		.ascii	"MPU_RASR_SRD_Msk (0xFFul << MPU_RASR_SRD_Pos)\000"
 2193      52415352 
 2193      5F535244 
 2193      5F4D736B 
 2193      20283078 
 2194 5bce 01       		.byte	0x1
 2195 5bcf DE04     		.uleb128 0x25e
 2196 5bd1 4D50555F 		.ascii	"MPU_RASR_SIZE_Pos 1\000"
 2196      52415352 
 2196      5F53495A 
 2196      455F506F 
 2196      73203100 
 2197 5be5 01       		.byte	0x1
 2198 5be6 DF04     		.uleb128 0x25f
 2199 5be8 4D50555F 		.ascii	"MPU_RASR_SIZE_Msk (0x1Ful << MPU_RASR_SIZE_Pos)\000"
 2199      52415352 
 2199      5F53495A 
 2199      455F4D73 
 2199      6B202830 
 2200 5c18 01       		.byte	0x1
 2201 5c19 E104     		.uleb128 0x261
 2202 5c1b 4D50555F 		.ascii	"MPU_RASR_ENA_Pos 0\000"
 2202      52415352 
 2202      5F454E41 
 2202      5F506F73 
 2202      203000
ARM GAS  /tmp/cch3WSAd.s 			page 87


 2203 5c2e 01       		.byte	0x1
 2204 5c2f E204     		.uleb128 0x262
 2205 5c31 4D50555F 		.ascii	"MPU_RASR_ENA_Msk (0x1Ful << MPU_RASR_ENA_Pos)\000"
 2205      52415352 
 2205      5F454E41 
 2205      5F4D736B 
 2205      20283078 
 2206 5c5f 01       		.byte	0x1
 2207 5c60 F504     		.uleb128 0x275
 2208 5c62 436F7265 		.ascii	"CoreDebug_DHCSR_DBGKEY_Pos 16\000"
 2208      44656275 
 2208      675F4448 
 2208      4353525F 
 2208      4442474B 
 2209 5c80 01       		.byte	0x1
 2210 5c81 F604     		.uleb128 0x276
 2211 5c83 436F7265 		.ascii	"CoreDebug_DHCSR_DBGKEY_Msk (0xFFFFul << CoreDebug_D"
 2211      44656275 
 2211      675F4448 
 2211      4353525F 
 2211      4442474B 
 2212 5cb6 48435352 		.ascii	"HCSR_DBGKEY_Pos)\000"
 2212      5F444247 
 2212      4B45595F 
 2212      506F7329 
 2212      00
 2213 5cc7 01       		.byte	0x1
 2214 5cc8 F804     		.uleb128 0x278
 2215 5cca 436F7265 		.ascii	"CoreDebug_DHCSR_S_RESET_ST_Pos 25\000"
 2215      44656275 
 2215      675F4448 
 2215      4353525F 
 2215      535F5245 
 2216 5cec 01       		.byte	0x1
 2217 5ced F904     		.uleb128 0x279
 2218 5cef 436F7265 		.ascii	"CoreDebug_DHCSR_S_RESET_ST_Msk (1ul << CoreDebug_DH"
 2218      44656275 
 2218      675F4448 
 2218      4353525F 
 2218      535F5245 
 2219 5d22 4353525F 		.ascii	"CSR_S_RESET_ST_Pos)\000"
 2219      535F5245 
 2219      5345545F 
 2219      53545F50 
 2219      6F732900 
 2220 5d36 01       		.byte	0x1
 2221 5d37 FB04     		.uleb128 0x27b
 2222 5d39 436F7265 		.ascii	"CoreDebug_DHCSR_S_RETIRE_ST_Pos 24\000"
 2222      44656275 
 2222      675F4448 
 2222      4353525F 
 2222      535F5245 
 2223 5d5c 01       		.byte	0x1
 2224 5d5d FC04     		.uleb128 0x27c
 2225 5d5f 436F7265 		.ascii	"CoreDebug_DHCSR_S_RETIRE_ST_Msk (1ul << CoreDebug_D"
 2225      44656275 
 2225      675F4448 
ARM GAS  /tmp/cch3WSAd.s 			page 88


 2225      4353525F 
 2225      535F5245 
 2226 5d92 48435352 		.ascii	"HCSR_S_RETIRE_ST_Pos)\000"
 2226      5F535F52 
 2226      45544952 
 2226      455F5354 
 2226      5F506F73 
 2227 5da8 01       		.byte	0x1
 2228 5da9 FE04     		.uleb128 0x27e
 2229 5dab 436F7265 		.ascii	"CoreDebug_DHCSR_S_LOCKUP_Pos 19\000"
 2229      44656275 
 2229      675F4448 
 2229      4353525F 
 2229      535F4C4F 
 2230 5dcb 01       		.byte	0x1
 2231 5dcc FF04     		.uleb128 0x27f
 2232 5dce 436F7265 		.ascii	"CoreDebug_DHCSR_S_LOCKUP_Msk (1ul << CoreDebug_DHCS"
 2232      44656275 
 2232      675F4448 
 2232      4353525F 
 2232      535F4C4F 
 2233 5e01 525F535F 		.ascii	"R_S_LOCKUP_Pos)\000"
 2233      4C4F434B 
 2233      55505F50 
 2233      6F732900 
 2234 5e11 01       		.byte	0x1
 2235 5e12 8105     		.uleb128 0x281
 2236 5e14 436F7265 		.ascii	"CoreDebug_DHCSR_S_SLEEP_Pos 18\000"
 2236      44656275 
 2236      675F4448 
 2236      4353525F 
 2236      535F534C 
 2237 5e33 01       		.byte	0x1
 2238 5e34 8205     		.uleb128 0x282
 2239 5e36 436F7265 		.ascii	"CoreDebug_DHCSR_S_SLEEP_Msk (1ul << CoreDebug_DHCSR"
 2239      44656275 
 2239      675F4448 
 2239      4353525F 
 2239      535F534C 
 2240 5e69 5F535F53 		.ascii	"_S_SLEEP_Pos)\000"
 2240      4C454550 
 2240      5F506F73 
 2240      2900
 2241 5e77 01       		.byte	0x1
 2242 5e78 8405     		.uleb128 0x284
 2243 5e7a 436F7265 		.ascii	"CoreDebug_DHCSR_S_HALT_Pos 17\000"
 2243      44656275 
 2243      675F4448 
 2243      4353525F 
 2243      535F4841 
 2244 5e98 01       		.byte	0x1
 2245 5e99 8505     		.uleb128 0x285
 2246 5e9b 436F7265 		.ascii	"CoreDebug_DHCSR_S_HALT_Msk (1ul << CoreDebug_DHCSR_"
 2246      44656275 
 2246      675F4448 
 2246      4353525F 
 2246      535F4841 
ARM GAS  /tmp/cch3WSAd.s 			page 89


 2247 5ece 535F4841 		.ascii	"S_HALT_Pos)\000"
 2247      4C545F50 
 2247      6F732900 
 2248 5eda 01       		.byte	0x1
 2249 5edb 8705     		.uleb128 0x287
 2250 5edd 436F7265 		.ascii	"CoreDebug_DHCSR_S_REGRDY_Pos 16\000"
 2250      44656275 
 2250      675F4448 
 2250      4353525F 
 2250      535F5245 
 2251 5efd 01       		.byte	0x1
 2252 5efe 8805     		.uleb128 0x288
 2253 5f00 436F7265 		.ascii	"CoreDebug_DHCSR_S_REGRDY_Msk (1ul << CoreDebug_DHCS"
 2253      44656275 
 2253      675F4448 
 2253      4353525F 
 2253      535F5245 
 2254 5f33 525F535F 		.ascii	"R_S_REGRDY_Pos)\000"
 2254      52454752 
 2254      44595F50 
 2254      6F732900 
 2255 5f43 01       		.byte	0x1
 2256 5f44 8A05     		.uleb128 0x28a
 2257 5f46 436F7265 		.ascii	"CoreDebug_DHCSR_C_SNAPSTALL_Pos 5\000"
 2257      44656275 
 2257      675F4448 
 2257      4353525F 
 2257      435F534E 
 2258 5f68 01       		.byte	0x1
 2259 5f69 8B05     		.uleb128 0x28b
 2260 5f6b 436F7265 		.ascii	"CoreDebug_DHCSR_C_SNAPSTALL_Msk (1ul << CoreDebug_D"
 2260      44656275 
 2260      675F4448 
 2260      4353525F 
 2260      435F534E 
 2261 5f9e 48435352 		.ascii	"HCSR_C_SNAPSTALL_Pos)\000"
 2261      5F435F53 
 2261      4E415053 
 2261      54414C4C 
 2261      5F506F73 
 2262 5fb4 01       		.byte	0x1
 2263 5fb5 8D05     		.uleb128 0x28d
 2264 5fb7 436F7265 		.ascii	"CoreDebug_DHCSR_C_MASKINTS_Pos 3\000"
 2264      44656275 
 2264      675F4448 
 2264      4353525F 
 2264      435F4D41 
 2265 5fd8 01       		.byte	0x1
 2266 5fd9 8E05     		.uleb128 0x28e
 2267 5fdb 436F7265 		.ascii	"CoreDebug_DHCSR_C_MASKINTS_Msk (1ul << CoreDebug_DH"
 2267      44656275 
 2267      675F4448 
 2267      4353525F 
 2267      435F4D41 
 2268 600e 4353525F 		.ascii	"CSR_C_MASKINTS_Pos)\000"
 2268      435F4D41 
 2268      534B494E 
ARM GAS  /tmp/cch3WSAd.s 			page 90


 2268      54535F50 
 2268      6F732900 
 2269 6022 01       		.byte	0x1
 2270 6023 9005     		.uleb128 0x290
 2271 6025 436F7265 		.ascii	"CoreDebug_DHCSR_C_STEP_Pos 2\000"
 2271      44656275 
 2271      675F4448 
 2271      4353525F 
 2271      435F5354 
 2272 6042 01       		.byte	0x1
 2273 6043 9105     		.uleb128 0x291
 2274 6045 436F7265 		.ascii	"CoreDebug_DHCSR_C_STEP_Msk (1ul << CoreDebug_DHCSR_"
 2274      44656275 
 2274      675F4448 
 2274      4353525F 
 2274      435F5354 
 2275 6078 435F5354 		.ascii	"C_STEP_Pos)\000"
 2275      45505F50 
 2275      6F732900 
 2276 6084 01       		.byte	0x1
 2277 6085 9305     		.uleb128 0x293
 2278 6087 436F7265 		.ascii	"CoreDebug_DHCSR_C_HALT_Pos 1\000"
 2278      44656275 
 2278      675F4448 
 2278      4353525F 
 2278      435F4841 
 2279 60a4 01       		.byte	0x1
 2280 60a5 9405     		.uleb128 0x294
 2281 60a7 436F7265 		.ascii	"CoreDebug_DHCSR_C_HALT_Msk (1ul << CoreDebug_DHCSR_"
 2281      44656275 
 2281      675F4448 
 2281      4353525F 
 2281      435F4841 
 2282 60da 435F4841 		.ascii	"C_HALT_Pos)\000"
 2282      4C545F50 
 2282      6F732900 
 2283 60e6 01       		.byte	0x1
 2284 60e7 9605     		.uleb128 0x296
 2285 60e9 436F7265 		.ascii	"CoreDebug_DHCSR_C_DEBUGEN_Pos 0\000"
 2285      44656275 
 2285      675F4448 
 2285      4353525F 
 2285      435F4445 
 2286 6109 01       		.byte	0x1
 2287 610a 9705     		.uleb128 0x297
 2288 610c 436F7265 		.ascii	"CoreDebug_DHCSR_C_DEBUGEN_Msk (1ul << CoreDebug_DHC"
 2288      44656275 
 2288      675F4448 
 2288      4353525F 
 2288      435F4445 
 2289 613f 53525F43 		.ascii	"SR_C_DEBUGEN_Pos)\000"
 2289      5F444542 
 2289      5547454E 
 2289      5F506F73 
 2289      2900
 2290 6151 01       		.byte	0x1
 2291 6152 9A05     		.uleb128 0x29a
ARM GAS  /tmp/cch3WSAd.s 			page 91


 2292 6154 436F7265 		.ascii	"CoreDebug_DCRSR_REGWnR_Pos 16\000"
 2292      44656275 
 2292      675F4443 
 2292      5253525F 
 2292      52454757 
 2293 6172 01       		.byte	0x1
 2294 6173 9B05     		.uleb128 0x29b
 2295 6175 436F7265 		.ascii	"CoreDebug_DCRSR_REGWnR_Msk (1ul << CoreDebug_DCRSR_"
 2295      44656275 
 2295      675F4443 
 2295      5253525F 
 2295      52454757 
 2296 61a8 52454757 		.ascii	"REGWnR_Pos)\000"
 2296      6E525F50 
 2296      6F732900 
 2297 61b4 01       		.byte	0x1
 2298 61b5 9D05     		.uleb128 0x29d
 2299 61b7 436F7265 		.ascii	"CoreDebug_DCRSR_REGSEL_Pos 0\000"
 2299      44656275 
 2299      675F4443 
 2299      5253525F 
 2299      52454753 
 2300 61d4 01       		.byte	0x1
 2301 61d5 9E05     		.uleb128 0x29e
 2302 61d7 436F7265 		.ascii	"CoreDebug_DCRSR_REGSEL_Msk (0x1Ful << CoreDebug_DCR"
 2302      44656275 
 2302      675F4443 
 2302      5253525F 
 2302      52454753 
 2303 620a 53525F52 		.ascii	"SR_REGSEL_Pos)\000"
 2303      45475345 
 2303      4C5F506F 
 2303      732900
 2304 6219 01       		.byte	0x1
 2305 621a A105     		.uleb128 0x2a1
 2306 621c 436F7265 		.ascii	"CoreDebug_DEMCR_TRCENA_Pos 24\000"
 2306      44656275 
 2306      675F4445 
 2306      4D43525F 
 2306      54524345 
 2307 623a 01       		.byte	0x1
 2308 623b A205     		.uleb128 0x2a2
 2309 623d 436F7265 		.ascii	"CoreDebug_DEMCR_TRCENA_Msk (1ul << CoreDebug_DEMCR_"
 2309      44656275 
 2309      675F4445 
 2309      4D43525F 
 2309      54524345 
 2310 6270 54524345 		.ascii	"TRCENA_Pos)\000"
 2310      4E415F50 
 2310      6F732900 
 2311 627c 01       		.byte	0x1
 2312 627d A405     		.uleb128 0x2a4
 2313 627f 436F7265 		.ascii	"CoreDebug_DEMCR_MON_REQ_Pos 19\000"
 2313      44656275 
 2313      675F4445 
 2313      4D43525F 
 2313      4D4F4E5F 
ARM GAS  /tmp/cch3WSAd.s 			page 92


 2314 629e 01       		.byte	0x1
 2315 629f A505     		.uleb128 0x2a5
 2316 62a1 436F7265 		.ascii	"CoreDebug_DEMCR_MON_REQ_Msk (1ul << CoreDebug_DEMCR"
 2316      44656275 
 2316      675F4445 
 2316      4D43525F 
 2316      4D4F4E5F 
 2317 62d4 5F4D4F4E 		.ascii	"_MON_REQ_Pos)\000"
 2317      5F524551 
 2317      5F506F73 
 2317      2900
 2318 62e2 01       		.byte	0x1
 2319 62e3 A705     		.uleb128 0x2a7
 2320 62e5 436F7265 		.ascii	"CoreDebug_DEMCR_MON_STEP_Pos 18\000"
 2320      44656275 
 2320      675F4445 
 2320      4D43525F 
 2320      4D4F4E5F 
 2321 6305 01       		.byte	0x1
 2322 6306 A805     		.uleb128 0x2a8
 2323 6308 436F7265 		.ascii	"CoreDebug_DEMCR_MON_STEP_Msk (1ul << CoreDebug_DEMC"
 2323      44656275 
 2323      675F4445 
 2323      4D43525F 
 2323      4D4F4E5F 
 2324 633b 525F4D4F 		.ascii	"R_MON_STEP_Pos)\000"
 2324      4E5F5354 
 2324      45505F50 
 2324      6F732900 
 2325 634b 01       		.byte	0x1
 2326 634c AA05     		.uleb128 0x2aa
 2327 634e 436F7265 		.ascii	"CoreDebug_DEMCR_MON_PEND_Pos 17\000"
 2327      44656275 
 2327      675F4445 
 2327      4D43525F 
 2327      4D4F4E5F 
 2328 636e 01       		.byte	0x1
 2329 636f AB05     		.uleb128 0x2ab
 2330 6371 436F7265 		.ascii	"CoreDebug_DEMCR_MON_PEND_Msk (1ul << CoreDebug_DEMC"
 2330      44656275 
 2330      675F4445 
 2330      4D43525F 
 2330      4D4F4E5F 
 2331 63a4 525F4D4F 		.ascii	"R_MON_PEND_Pos)\000"
 2331      4E5F5045 
 2331      4E445F50 
 2331      6F732900 
 2332 63b4 01       		.byte	0x1
 2333 63b5 AD05     		.uleb128 0x2ad
 2334 63b7 436F7265 		.ascii	"CoreDebug_DEMCR_MON_EN_Pos 16\000"
 2334      44656275 
 2334      675F4445 
 2334      4D43525F 
 2334      4D4F4E5F 
 2335 63d5 01       		.byte	0x1
 2336 63d6 AE05     		.uleb128 0x2ae
 2337 63d8 436F7265 		.ascii	"CoreDebug_DEMCR_MON_EN_Msk (1ul << CoreDebug_DEMCR_"
ARM GAS  /tmp/cch3WSAd.s 			page 93


 2337      44656275 
 2337      675F4445 
 2337      4D43525F 
 2337      4D4F4E5F 
 2338 640b 4D4F4E5F 		.ascii	"MON_EN_Pos)\000"
 2338      454E5F50 
 2338      6F732900 
 2339 6417 01       		.byte	0x1
 2340 6418 B005     		.uleb128 0x2b0
 2341 641a 436F7265 		.ascii	"CoreDebug_DEMCR_VC_HARDERR_Pos 10\000"
 2341      44656275 
 2341      675F4445 
 2341      4D43525F 
 2341      56435F48 
 2342 643c 01       		.byte	0x1
 2343 643d B105     		.uleb128 0x2b1
 2344 643f 436F7265 		.ascii	"CoreDebug_DEMCR_VC_HARDERR_Msk (1ul << CoreDebug_DE"
 2344      44656275 
 2344      675F4445 
 2344      4D43525F 
 2344      56435F48 
 2345 6472 4D43525F 		.ascii	"MCR_VC_HARDERR_Pos)\000"
 2345      56435F48 
 2345      41524445 
 2345      52525F50 
 2345      6F732900 
 2346 6486 01       		.byte	0x1
 2347 6487 B305     		.uleb128 0x2b3
 2348 6489 436F7265 		.ascii	"CoreDebug_DEMCR_VC_INTERR_Pos 9\000"
 2348      44656275 
 2348      675F4445 
 2348      4D43525F 
 2348      56435F49 
 2349 64a9 01       		.byte	0x1
 2350 64aa B405     		.uleb128 0x2b4
 2351 64ac 436F7265 		.ascii	"CoreDebug_DEMCR_VC_INTERR_Msk (1ul << CoreDebug_DEM"
 2351      44656275 
 2351      675F4445 
 2351      4D43525F 
 2351      56435F49 
 2352 64df 43525F56 		.ascii	"CR_VC_INTERR_Pos)\000"
 2352      435F494E 
 2352      54455252 
 2352      5F506F73 
 2352      2900
 2353 64f1 01       		.byte	0x1
 2354 64f2 B605     		.uleb128 0x2b6
 2355 64f4 436F7265 		.ascii	"CoreDebug_DEMCR_VC_BUSERR_Pos 8\000"
 2355      44656275 
 2355      675F4445 
 2355      4D43525F 
 2355      56435F42 
 2356 6514 01       		.byte	0x1
 2357 6515 B705     		.uleb128 0x2b7
 2358 6517 436F7265 		.ascii	"CoreDebug_DEMCR_VC_BUSERR_Msk (1ul << CoreDebug_DEM"
 2358      44656275 
 2358      675F4445 
ARM GAS  /tmp/cch3WSAd.s 			page 94


 2358      4D43525F 
 2358      56435F42 
 2359 654a 43525F56 		.ascii	"CR_VC_BUSERR_Pos)\000"
 2359      435F4255 
 2359      53455252 
 2359      5F506F73 
 2359      2900
 2360 655c 01       		.byte	0x1
 2361 655d B905     		.uleb128 0x2b9
 2362 655f 436F7265 		.ascii	"CoreDebug_DEMCR_VC_STATERR_Pos 7\000"
 2362      44656275 
 2362      675F4445 
 2362      4D43525F 
 2362      56435F53 
 2363 6580 01       		.byte	0x1
 2364 6581 BA05     		.uleb128 0x2ba
 2365 6583 436F7265 		.ascii	"CoreDebug_DEMCR_VC_STATERR_Msk (1ul << CoreDebug_DE"
 2365      44656275 
 2365      675F4445 
 2365      4D43525F 
 2365      56435F53 
 2366 65b6 4D43525F 		.ascii	"MCR_VC_STATERR_Pos)\000"
 2366      56435F53 
 2366      54415445 
 2366      52525F50 
 2366      6F732900 
 2367 65ca 01       		.byte	0x1
 2368 65cb BC05     		.uleb128 0x2bc
 2369 65cd 436F7265 		.ascii	"CoreDebug_DEMCR_VC_CHKERR_Pos 6\000"
 2369      44656275 
 2369      675F4445 
 2369      4D43525F 
 2369      56435F43 
 2370 65ed 01       		.byte	0x1
 2371 65ee BD05     		.uleb128 0x2bd
 2372 65f0 436F7265 		.ascii	"CoreDebug_DEMCR_VC_CHKERR_Msk (1ul << CoreDebug_DEM"
 2372      44656275 
 2372      675F4445 
 2372      4D43525F 
 2372      56435F43 
 2373 6623 43525F56 		.ascii	"CR_VC_CHKERR_Pos)\000"
 2373      435F4348 
 2373      4B455252 
 2373      5F506F73 
 2373      2900
 2374 6635 01       		.byte	0x1
 2375 6636 BF05     		.uleb128 0x2bf
 2376 6638 436F7265 		.ascii	"CoreDebug_DEMCR_VC_NOCPERR_Pos 5\000"
 2376      44656275 
 2376      675F4445 
 2376      4D43525F 
 2376      56435F4E 
 2377 6659 01       		.byte	0x1
 2378 665a C005     		.uleb128 0x2c0
 2379 665c 436F7265 		.ascii	"CoreDebug_DEMCR_VC_NOCPERR_Msk (1ul << CoreDebug_DE"
 2379      44656275 
 2379      675F4445 
ARM GAS  /tmp/cch3WSAd.s 			page 95


 2379      4D43525F 
 2379      56435F4E 
 2380 668f 4D43525F 		.ascii	"MCR_VC_NOCPERR_Pos)\000"
 2380      56435F4E 
 2380      4F435045 
 2380      52525F50 
 2380      6F732900 
 2381 66a3 01       		.byte	0x1
 2382 66a4 C205     		.uleb128 0x2c2
 2383 66a6 436F7265 		.ascii	"CoreDebug_DEMCR_VC_MMERR_Pos 4\000"
 2383      44656275 
 2383      675F4445 
 2383      4D43525F 
 2383      56435F4D 
 2384 66c5 01       		.byte	0x1
 2385 66c6 C305     		.uleb128 0x2c3
 2386 66c8 436F7265 		.ascii	"CoreDebug_DEMCR_VC_MMERR_Msk (1ul << CoreDebug_DEMC"
 2386      44656275 
 2386      675F4445 
 2386      4D43525F 
 2386      56435F4D 
 2387 66fb 525F5643 		.ascii	"R_VC_MMERR_Pos)\000"
 2387      5F4D4D45 
 2387      52525F50 
 2387      6F732900 
 2388 670b 01       		.byte	0x1
 2389 670c C505     		.uleb128 0x2c5
 2390 670e 436F7265 		.ascii	"CoreDebug_DEMCR_VC_CORERESET_Pos 0\000"
 2390      44656275 
 2390      675F4445 
 2390      4D43525F 
 2390      56435F43 
 2391 6731 01       		.byte	0x1
 2392 6732 C605     		.uleb128 0x2c6
 2393 6734 436F7265 		.ascii	"CoreDebug_DEMCR_VC_CORERESET_Msk (1ul << CoreDebug_"
 2393      44656275 
 2393      675F4445 
 2393      4D43525F 
 2393      56435F43 
 2394 6767 44454D43 		.ascii	"DEMCR_VC_CORERESET_Pos)\000"
 2394      525F5643 
 2394      5F434F52 
 2394      45524553 
 2394      45545F50 
 2395 677f 01       		.byte	0x1
 2396 6780 CB05     		.uleb128 0x2cb
 2397 6782 5343535F 		.ascii	"SCS_BASE (0xE000E000)\000"
 2397      42415345 
 2397      20283078 
 2397      45303030 
 2397      45303030 
 2398 6798 01       		.byte	0x1
 2399 6799 CC05     		.uleb128 0x2cc
 2400 679b 49544D5F 		.ascii	"ITM_BASE (0xE0000000)\000"
 2400      42415345 
 2400      20283078 
 2400      45303030 
ARM GAS  /tmp/cch3WSAd.s 			page 96


 2400      30303030 
 2401 67b1 01       		.byte	0x1
 2402 67b2 CD05     		.uleb128 0x2cd
 2403 67b4 436F7265 		.ascii	"CoreDebug_BASE (0xE000EDF0)\000"
 2403      44656275 
 2403      675F4241 
 2403      53452028 
 2403      30784530 
 2404 67d0 01       		.byte	0x1
 2405 67d1 CE05     		.uleb128 0x2ce
 2406 67d3 53797354 		.ascii	"SysTick_BASE (SCS_BASE + 0x0010)\000"
 2406      69636B5F 
 2406      42415345 
 2406      20285343 
 2406      535F4241 
 2407 67f4 01       		.byte	0x1
 2408 67f5 CF05     		.uleb128 0x2cf
 2409 67f7 4E564943 		.ascii	"NVIC_BASE (SCS_BASE + 0x0100)\000"
 2409      5F424153 
 2409      45202853 
 2409      43535F42 
 2409      41534520 
 2410 6815 01       		.byte	0x1
 2411 6816 D005     		.uleb128 0x2d0
 2412 6818 5343425F 		.ascii	"SCB_BASE (SCS_BASE + 0x0D00)\000"
 2412      42415345 
 2412      20285343 
 2412      535F4241 
 2412      5345202B 
 2413 6835 01       		.byte	0x1
 2414 6836 D205     		.uleb128 0x2d2
 2415 6838 496E7465 		.ascii	"InterruptType ((InterruptType_Type *) SCS_BASE)\000"
 2415      72727570 
 2415      74547970 
 2415      65202828 
 2415      496E7465 
 2416 6868 01       		.byte	0x1
 2417 6869 D305     		.uleb128 0x2d3
 2418 686b 53434220 		.ascii	"SCB ((SCB_Type *) SCB_BASE)\000"
 2418      28285343 
 2418      425F5479 
 2418      7065202A 
 2418      29205343 
 2419 6887 01       		.byte	0x1
 2420 6888 D405     		.uleb128 0x2d4
 2421 688a 53797354 		.ascii	"SysTick ((SysTick_Type *) SysTick_BASE)\000"
 2421      69636B20 
 2421      28285379 
 2421      73546963 
 2421      6B5F5479 
 2422 68b2 01       		.byte	0x1
 2423 68b3 D505     		.uleb128 0x2d5
 2424 68b5 4E564943 		.ascii	"NVIC ((NVIC_Type *) NVIC_BASE)\000"
 2424      2028284E 
 2424      5649435F 
 2424      54797065 
 2424      202A2920 
ARM GAS  /tmp/cch3WSAd.s 			page 97


 2425 68d4 01       		.byte	0x1
 2426 68d5 D605     		.uleb128 0x2d6
 2427 68d7 49544D20 		.ascii	"ITM ((ITM_Type *) ITM_BASE)\000"
 2427      28284954 
 2427      4D5F5479 
 2427      7065202A 
 2427      29204954 
 2428 68f3 01       		.byte	0x1
 2429 68f4 D705     		.uleb128 0x2d7
 2430 68f6 436F7265 		.ascii	"CoreDebug ((CoreDebug_Type *) CoreDebug_BASE)\000"
 2430      44656275 
 2430      67202828 
 2430      436F7265 
 2430      44656275 
 2431 6924 01       		.byte	0x1
 2432 6925 DA05     		.uleb128 0x2da
 2433 6927 4D50555F 		.ascii	"MPU_BASE (SCS_BASE + 0x0D90)\000"
 2433      42415345 
 2433      20285343 
 2433      535F4241 
 2433      5345202B 
 2434 6944 01       		.byte	0x1
 2435 6945 DB05     		.uleb128 0x2db
 2436 6947 4D505520 		.ascii	"MPU ((MPU_Type*) MPU_BASE)\000"
 2436      28284D50 
 2436      555F5479 
 2436      70652A29 
 2436      204D5055 
 2437 6962 01       		.byte	0x1
 2438 6963 EE05     		.uleb128 0x2ee
 2439 6965 5F5F4153 		.ascii	"__ASM __asm\000"
 2439      4D205F5F 
 2439      61736D00 
 2440 6971 01       		.byte	0x1
 2441 6972 EF05     		.uleb128 0x2ef
 2442 6974 5F5F494E 		.ascii	"__INLINE inline\000"
 2442      4C494E45 
 2442      20696E6C 
 2442      696E6500 
 2443 6984 01       		.byte	0x1
 2444 6985 CF0D     		.uleb128 0x6cf
 2445 6987 49544D5F 		.ascii	"ITM_RXBUFFER_EMPTY 0x5AA55AA5\000"
 2445      52584255 
 2445      46464552 
 2445      5F454D50 
 2445      54592030 
 2446 69a5 04       		.byte	0x4
 2447              		.file 24 "../../libs/CMSIS/CM3/DeviceSupport/NXP/LPC17xx/system_LPC17xx.h"
 2448 69a6 03       		.byte	0x3
 2449 69a7 61       		.uleb128 0x61
 2450 69a8 18       		.uleb128 0x18
 2451 69a9 01       		.byte	0x1
 2452 69aa 1B       		.uleb128 0x1b
 2453 69ab 5F5F5359 		.ascii	"__SYSTEM_LPC17xx_H \000"
 2453      5354454D 
 2453      5F4C5043 
 2453      31377878 
ARM GAS  /tmp/cch3WSAd.s 			page 98


 2453      5F482000 
 2454 69bf 04       		.byte	0x4
 2455 69c0 01       		.byte	0x1
 2456 69c1 9107     		.uleb128 0x391
 2457 69c3 4C50435F 		.ascii	"LPC_FLASH_BASE (0x00000000UL)\000"
 2457      464C4153 
 2457      485F4241 
 2457      53452028 
 2457      30783030 
 2458 69e1 01       		.byte	0x1
 2459 69e2 9207     		.uleb128 0x392
 2460 69e4 4C50435F 		.ascii	"LPC_RAM_BASE (0x10000000UL)\000"
 2460      52414D5F 
 2460      42415345 
 2460      20283078 
 2460      31303030 
 2461 6a00 01       		.byte	0x1
 2462 6a01 9307     		.uleb128 0x393
 2463 6a03 4C50435F 		.ascii	"LPC_GPIO_BASE (0x2009C000UL)\000"
 2463      4750494F 
 2463      5F424153 
 2463      45202830 
 2463      78323030 
 2464 6a20 01       		.byte	0x1
 2465 6a21 9407     		.uleb128 0x394
 2466 6a23 4C50435F 		.ascii	"LPC_APB0_BASE (0x40000000UL)\000"
 2466      41504230 
 2466      5F424153 
 2466      45202830 
 2466      78343030 
 2467 6a40 01       		.byte	0x1
 2468 6a41 9507     		.uleb128 0x395
 2469 6a43 4C50435F 		.ascii	"LPC_APB1_BASE (0x40080000UL)\000"
 2469      41504231 
 2469      5F424153 
 2469      45202830 
 2469      78343030 
 2470 6a60 01       		.byte	0x1
 2471 6a61 9607     		.uleb128 0x396
 2472 6a63 4C50435F 		.ascii	"LPC_AHB_BASE (0x50000000UL)\000"
 2472      4148425F 
 2472      42415345 
 2472      20283078 
 2472      35303030 
 2473 6a7f 01       		.byte	0x1
 2474 6a80 9707     		.uleb128 0x397
 2475 6a82 4C50435F 		.ascii	"LPC_CM3_BASE (0xE0000000UL)\000"
 2475      434D335F 
 2475      42415345 
 2475      20283078 
 2475      45303030 
 2476 6a9e 01       		.byte	0x1
 2477 6a9f 9A07     		.uleb128 0x39a
 2478 6aa1 4C50435F 		.ascii	"LPC_WDT_BASE (LPC_APB0_BASE + 0x00000)\000"
 2478      5744545F 
 2478      42415345 
 2478      20284C50 
ARM GAS  /tmp/cch3WSAd.s 			page 99


 2478      435F4150 
 2479 6ac8 01       		.byte	0x1
 2480 6ac9 9B07     		.uleb128 0x39b
 2481 6acb 4C50435F 		.ascii	"LPC_TIM0_BASE (LPC_APB0_BASE + 0x04000)\000"
 2481      54494D30 
 2481      5F424153 
 2481      4520284C 
 2481      50435F41 
 2482 6af3 01       		.byte	0x1
 2483 6af4 9C07     		.uleb128 0x39c
 2484 6af6 4C50435F 		.ascii	"LPC_TIM1_BASE (LPC_APB0_BASE + 0x08000)\000"
 2484      54494D31 
 2484      5F424153 
 2484      4520284C 
 2484      50435F41 
 2485 6b1e 01       		.byte	0x1
 2486 6b1f 9D07     		.uleb128 0x39d
 2487 6b21 4C50435F 		.ascii	"LPC_UART0_BASE (LPC_APB0_BASE + 0x0C000)\000"
 2487      55415254 
 2487      305F4241 
 2487      53452028 
 2487      4C50435F 
 2488 6b4a 01       		.byte	0x1
 2489 6b4b 9E07     		.uleb128 0x39e
 2490 6b4d 4C50435F 		.ascii	"LPC_UART1_BASE (LPC_APB0_BASE + 0x10000)\000"
 2490      55415254 
 2490      315F4241 
 2490      53452028 
 2490      4C50435F 
 2491 6b76 01       		.byte	0x1
 2492 6b77 9F07     		.uleb128 0x39f
 2493 6b79 4C50435F 		.ascii	"LPC_PWM1_BASE (LPC_APB0_BASE + 0x18000)\000"
 2493      50574D31 
 2493      5F424153 
 2493      4520284C 
 2493      50435F41 
 2494 6ba1 01       		.byte	0x1
 2495 6ba2 A007     		.uleb128 0x3a0
 2496 6ba4 4C50435F 		.ascii	"LPC_I2C0_BASE (LPC_APB0_BASE + 0x1C000)\000"
 2496      49324330 
 2496      5F424153 
 2496      4520284C 
 2496      50435F41 
 2497 6bcc 01       		.byte	0x1
 2498 6bcd A107     		.uleb128 0x3a1
 2499 6bcf 4C50435F 		.ascii	"LPC_SPI_BASE (LPC_APB0_BASE + 0x20000)\000"
 2499      5350495F 
 2499      42415345 
 2499      20284C50 
 2499      435F4150 
 2500 6bf6 01       		.byte	0x1
 2501 6bf7 A207     		.uleb128 0x3a2
 2502 6bf9 4C50435F 		.ascii	"LPC_RTC_BASE (LPC_APB0_BASE + 0x24000)\000"
 2502      5254435F 
 2502      42415345 
 2502      20284C50 
 2502      435F4150 
ARM GAS  /tmp/cch3WSAd.s 			page 100


 2503 6c20 01       		.byte	0x1
 2504 6c21 A307     		.uleb128 0x3a3
 2505 6c23 4C50435F 		.ascii	"LPC_GPIOINT_BASE (LPC_APB0_BASE + 0x28080)\000"
 2505      4750494F 
 2505      494E545F 
 2505      42415345 
 2505      20284C50 
 2506 6c4e 01       		.byte	0x1
 2507 6c4f A407     		.uleb128 0x3a4
 2508 6c51 4C50435F 		.ascii	"LPC_PINCON_BASE (LPC_APB0_BASE + 0x2C000)\000"
 2508      50494E43 
 2508      4F4E5F42 
 2508      41534520 
 2508      284C5043 
 2509 6c7b 01       		.byte	0x1
 2510 6c7c A507     		.uleb128 0x3a5
 2511 6c7e 4C50435F 		.ascii	"LPC_SSP1_BASE (LPC_APB0_BASE + 0x30000)\000"
 2511      53535031 
 2511      5F424153 
 2511      4520284C 
 2511      50435F41 
 2512 6ca6 01       		.byte	0x1
 2513 6ca7 A607     		.uleb128 0x3a6
 2514 6ca9 4C50435F 		.ascii	"LPC_ADC_BASE (LPC_APB0_BASE + 0x34000)\000"
 2514      4144435F 
 2514      42415345 
 2514      20284C50 
 2514      435F4150 
 2515 6cd0 01       		.byte	0x1
 2516 6cd1 A707     		.uleb128 0x3a7
 2517 6cd3 4C50435F 		.ascii	"LPC_CANAF_RAM_BASE (LPC_APB0_BASE + 0x38000)\000"
 2517      43414E41 
 2517      465F5241 
 2517      4D5F4241 
 2517      53452028 
 2518 6d00 01       		.byte	0x1
 2519 6d01 A807     		.uleb128 0x3a8
 2520 6d03 4C50435F 		.ascii	"LPC_CANAF_BASE (LPC_APB0_BASE + 0x3C000)\000"
 2520      43414E41 
 2520      465F4241 
 2520      53452028 
 2520      4C50435F 
 2521 6d2c 01       		.byte	0x1
 2522 6d2d A907     		.uleb128 0x3a9
 2523 6d2f 4C50435F 		.ascii	"LPC_CANCR_BASE (LPC_APB0_BASE + 0x40000)\000"
 2523      43414E43 
 2523      525F4241 
 2523      53452028 
 2523      4C50435F 
 2524 6d58 01       		.byte	0x1
 2525 6d59 AA07     		.uleb128 0x3aa
 2526 6d5b 4C50435F 		.ascii	"LPC_CAN1_BASE (LPC_APB0_BASE + 0x44000)\000"
 2526      43414E31 
 2526      5F424153 
 2526      4520284C 
 2526      50435F41 
 2527 6d83 01       		.byte	0x1
ARM GAS  /tmp/cch3WSAd.s 			page 101


 2528 6d84 AB07     		.uleb128 0x3ab
 2529 6d86 4C50435F 		.ascii	"LPC_CAN2_BASE (LPC_APB0_BASE + 0x48000)\000"
 2529      43414E32 
 2529      5F424153 
 2529      4520284C 
 2529      50435F41 
 2530 6dae 01       		.byte	0x1
 2531 6daf AC07     		.uleb128 0x3ac
 2532 6db1 4C50435F 		.ascii	"LPC_I2C1_BASE (LPC_APB0_BASE + 0x5C000)\000"
 2532      49324331 
 2532      5F424153 
 2532      4520284C 
 2532      50435F41 
 2533 6dd9 01       		.byte	0x1
 2534 6dda AF07     		.uleb128 0x3af
 2535 6ddc 4C50435F 		.ascii	"LPC_SSP0_BASE (LPC_APB1_BASE + 0x08000)\000"
 2535      53535030 
 2535      5F424153 
 2535      4520284C 
 2535      50435F41 
 2536 6e04 01       		.byte	0x1
 2537 6e05 B007     		.uleb128 0x3b0
 2538 6e07 4C50435F 		.ascii	"LPC_DAC_BASE (LPC_APB1_BASE + 0x0C000)\000"
 2538      4441435F 
 2538      42415345 
 2538      20284C50 
 2538      435F4150 
 2539 6e2e 01       		.byte	0x1
 2540 6e2f B107     		.uleb128 0x3b1
 2541 6e31 4C50435F 		.ascii	"LPC_TIM2_BASE (LPC_APB1_BASE + 0x10000)\000"
 2541      54494D32 
 2541      5F424153 
 2541      4520284C 
 2541      50435F41 
 2542 6e59 01       		.byte	0x1
 2543 6e5a B207     		.uleb128 0x3b2
 2544 6e5c 4C50435F 		.ascii	"LPC_TIM3_BASE (LPC_APB1_BASE + 0x14000)\000"
 2544      54494D33 
 2544      5F424153 
 2544      4520284C 
 2544      50435F41 
 2545 6e84 01       		.byte	0x1
 2546 6e85 B307     		.uleb128 0x3b3
 2547 6e87 4C50435F 		.ascii	"LPC_UART2_BASE (LPC_APB1_BASE + 0x18000)\000"
 2547      55415254 
 2547      325F4241 
 2547      53452028 
 2547      4C50435F 
 2548 6eb0 01       		.byte	0x1
 2549 6eb1 B407     		.uleb128 0x3b4
 2550 6eb3 4C50435F 		.ascii	"LPC_UART3_BASE (LPC_APB1_BASE + 0x1C000)\000"
 2550      55415254 
 2550      335F4241 
 2550      53452028 
 2550      4C50435F 
 2551 6edc 01       		.byte	0x1
 2552 6edd B507     		.uleb128 0x3b5
ARM GAS  /tmp/cch3WSAd.s 			page 102


 2553 6edf 4C50435F 		.ascii	"LPC_I2C2_BASE (LPC_APB1_BASE + 0x20000)\000"
 2553      49324332 
 2553      5F424153 
 2553      4520284C 
 2553      50435F41 
 2554 6f07 01       		.byte	0x1
 2555 6f08 B607     		.uleb128 0x3b6
 2556 6f0a 4C50435F 		.ascii	"LPC_I2S_BASE (LPC_APB1_BASE + 0x28000)\000"
 2556      4932535F 
 2556      42415345 
 2556      20284C50 
 2556      435F4150 
 2557 6f31 01       		.byte	0x1
 2558 6f32 B707     		.uleb128 0x3b7
 2559 6f34 4C50435F 		.ascii	"LPC_RIT_BASE (LPC_APB1_BASE + 0x30000)\000"
 2559      5249545F 
 2559      42415345 
 2559      20284C50 
 2559      435F4150 
 2560 6f5b 01       		.byte	0x1
 2561 6f5c B807     		.uleb128 0x3b8
 2562 6f5e 4C50435F 		.ascii	"LPC_MCPWM_BASE (LPC_APB1_BASE + 0x38000)\000"
 2562      4D435057 
 2562      4D5F4241 
 2562      53452028 
 2562      4C50435F 
 2563 6f87 01       		.byte	0x1
 2564 6f88 B907     		.uleb128 0x3b9
 2565 6f8a 4C50435F 		.ascii	"LPC_QEI_BASE (LPC_APB1_BASE + 0x3C000)\000"
 2565      5145495F 
 2565      42415345 
 2565      20284C50 
 2565      435F4150 
 2566 6fb1 01       		.byte	0x1
 2567 6fb2 BA07     		.uleb128 0x3ba
 2568 6fb4 4C50435F 		.ascii	"LPC_SC_BASE (LPC_APB1_BASE + 0x7C000)\000"
 2568      53435F42 
 2568      41534520 
 2568      284C5043 
 2568      5F415042 
 2569 6fda 01       		.byte	0x1
 2570 6fdb BD07     		.uleb128 0x3bd
 2571 6fdd 4C50435F 		.ascii	"LPC_EMAC_BASE (LPC_AHB_BASE + 0x00000)\000"
 2571      454D4143 
 2571      5F424153 
 2571      4520284C 
 2571      50435F41 
 2572 7004 01       		.byte	0x1
 2573 7005 BE07     		.uleb128 0x3be
 2574 7007 4C50435F 		.ascii	"LPC_GPDMA_BASE (LPC_AHB_BASE + 0x04000)\000"
 2574      4750444D 
 2574      415F4241 
 2574      53452028 
 2574      4C50435F 
 2575 702f 01       		.byte	0x1
 2576 7030 BF07     		.uleb128 0x3bf
 2577 7032 4C50435F 		.ascii	"LPC_GPDMACH0_BASE (LPC_AHB_BASE + 0x04100)\000"
ARM GAS  /tmp/cch3WSAd.s 			page 103


 2577      4750444D 
 2577      41434830 
 2577      5F424153 
 2577      4520284C 
 2578 705d 01       		.byte	0x1
 2579 705e C007     		.uleb128 0x3c0
 2580 7060 4C50435F 		.ascii	"LPC_GPDMACH1_BASE (LPC_AHB_BASE + 0x04120)\000"
 2580      4750444D 
 2580      41434831 
 2580      5F424153 
 2580      4520284C 
 2581 708b 01       		.byte	0x1
 2582 708c C107     		.uleb128 0x3c1
 2583 708e 4C50435F 		.ascii	"LPC_GPDMACH2_BASE (LPC_AHB_BASE + 0x04140)\000"
 2583      4750444D 
 2583      41434832 
 2583      5F424153 
 2583      4520284C 
 2584 70b9 01       		.byte	0x1
 2585 70ba C207     		.uleb128 0x3c2
 2586 70bc 4C50435F 		.ascii	"LPC_GPDMACH3_BASE (LPC_AHB_BASE + 0x04160)\000"
 2586      4750444D 
 2586      41434833 
 2586      5F424153 
 2586      4520284C 
 2587 70e7 01       		.byte	0x1
 2588 70e8 C307     		.uleb128 0x3c3
 2589 70ea 4C50435F 		.ascii	"LPC_GPDMACH4_BASE (LPC_AHB_BASE + 0x04180)\000"
 2589      4750444D 
 2589      41434834 
 2589      5F424153 
 2589      4520284C 
 2590 7115 01       		.byte	0x1
 2591 7116 C407     		.uleb128 0x3c4
 2592 7118 4C50435F 		.ascii	"LPC_GPDMACH5_BASE (LPC_AHB_BASE + 0x041A0)\000"
 2592      4750444D 
 2592      41434835 
 2592      5F424153 
 2592      4520284C 
 2593 7143 01       		.byte	0x1
 2594 7144 C507     		.uleb128 0x3c5
 2595 7146 4C50435F 		.ascii	"LPC_GPDMACH6_BASE (LPC_AHB_BASE + 0x041C0)\000"
 2595      4750444D 
 2595      41434836 
 2595      5F424153 
 2595      4520284C 
 2596 7171 01       		.byte	0x1
 2597 7172 C607     		.uleb128 0x3c6
 2598 7174 4C50435F 		.ascii	"LPC_GPDMACH7_BASE (LPC_AHB_BASE + 0x041E0)\000"
 2598      4750444D 
 2598      41434837 
 2598      5F424153 
 2598      4520284C 
 2599 719f 01       		.byte	0x1
 2600 71a0 C707     		.uleb128 0x3c7
 2601 71a2 4C50435F 		.ascii	"LPC_USB_BASE (LPC_AHB_BASE + 0x0C000)\000"
 2601      5553425F 
ARM GAS  /tmp/cch3WSAd.s 			page 104


 2601      42415345 
 2601      20284C50 
 2601      435F4148 
 2602 71c8 01       		.byte	0x1
 2603 71c9 CA07     		.uleb128 0x3ca
 2604 71cb 4C50435F 		.ascii	"LPC_GPIO0_BASE (LPC_GPIO_BASE + 0x00000)\000"
 2604      4750494F 
 2604      305F4241 
 2604      53452028 
 2604      4C50435F 
 2605 71f4 01       		.byte	0x1
 2606 71f5 CB07     		.uleb128 0x3cb
 2607 71f7 4C50435F 		.ascii	"LPC_GPIO1_BASE (LPC_GPIO_BASE + 0x00020)\000"
 2607      4750494F 
 2607      315F4241 
 2607      53452028 
 2607      4C50435F 
 2608 7220 01       		.byte	0x1
 2609 7221 CC07     		.uleb128 0x3cc
 2610 7223 4C50435F 		.ascii	"LPC_GPIO2_BASE (LPC_GPIO_BASE + 0x00040)\000"
 2610      4750494F 
 2610      325F4241 
 2610      53452028 
 2610      4C50435F 
 2611 724c 01       		.byte	0x1
 2612 724d CD07     		.uleb128 0x3cd
 2613 724f 4C50435F 		.ascii	"LPC_GPIO3_BASE (LPC_GPIO_BASE + 0x00060)\000"
 2613      4750494F 
 2613      335F4241 
 2613      53452028 
 2613      4C50435F 
 2614 7278 01       		.byte	0x1
 2615 7279 CE07     		.uleb128 0x3ce
 2616 727b 4C50435F 		.ascii	"LPC_GPIO4_BASE (LPC_GPIO_BASE + 0x00080)\000"
 2616      4750494F 
 2616      345F4241 
 2616      53452028 
 2616      4C50435F 
 2617 72a4 01       		.byte	0x1
 2618 72a5 D407     		.uleb128 0x3d4
 2619 72a7 4C50435F 		.ascii	"LPC_SC ((LPC_SC_TypeDef *) LPC_SC_BASE )\000"
 2619      53432028 
 2619      284C5043 
 2619      5F53435F 
 2619      54797065 
 2620 72d0 01       		.byte	0x1
 2621 72d1 D507     		.uleb128 0x3d5
 2622 72d3 4C50435F 		.ascii	"LPC_GPIO0 ((LPC_GPIO_TypeDef *) LPC_GPIO0_BASE )\000"
 2622      4750494F 
 2622      30202828 
 2622      4C50435F 
 2622      4750494F 
 2623 7304 01       		.byte	0x1
 2624 7305 D607     		.uleb128 0x3d6
 2625 7307 4C50435F 		.ascii	"LPC_GPIO1 ((LPC_GPIO_TypeDef *) LPC_GPIO1_BASE )\000"
 2625      4750494F 
 2625      31202828 
ARM GAS  /tmp/cch3WSAd.s 			page 105


 2625      4C50435F 
 2625      4750494F 
 2626 7338 01       		.byte	0x1
 2627 7339 D707     		.uleb128 0x3d7
 2628 733b 4C50435F 		.ascii	"LPC_GPIO2 ((LPC_GPIO_TypeDef *) LPC_GPIO2_BASE )\000"
 2628      4750494F 
 2628      32202828 
 2628      4C50435F 
 2628      4750494F 
 2629 736c 01       		.byte	0x1
 2630 736d D807     		.uleb128 0x3d8
 2631 736f 4C50435F 		.ascii	"LPC_GPIO3 ((LPC_GPIO_TypeDef *) LPC_GPIO3_BASE )\000"
 2631      4750494F 
 2631      33202828 
 2631      4C50435F 
 2631      4750494F 
 2632 73a0 01       		.byte	0x1
 2633 73a1 D907     		.uleb128 0x3d9
 2634 73a3 4C50435F 		.ascii	"LPC_GPIO4 ((LPC_GPIO_TypeDef *) LPC_GPIO4_BASE )\000"
 2634      4750494F 
 2634      34202828 
 2634      4C50435F 
 2634      4750494F 
 2635 73d4 01       		.byte	0x1
 2636 73d5 DA07     		.uleb128 0x3da
 2637 73d7 4C50435F 		.ascii	"LPC_WDT ((LPC_WDT_TypeDef *) LPC_WDT_BASE )\000"
 2637      57445420 
 2637      28284C50 
 2637      435F5744 
 2637      545F5479 
 2638 7403 01       		.byte	0x1
 2639 7404 DB07     		.uleb128 0x3db
 2640 7406 4C50435F 		.ascii	"LPC_TIM0 ((LPC_TIM_TypeDef *) LPC_TIM0_BASE )\000"
 2640      54494D30 
 2640      2028284C 
 2640      50435F54 
 2640      494D5F54 
 2641 7434 01       		.byte	0x1
 2642 7435 DC07     		.uleb128 0x3dc
 2643 7437 4C50435F 		.ascii	"LPC_TIM1 ((LPC_TIM_TypeDef *) LPC_TIM1_BASE )\000"
 2643      54494D31 
 2643      2028284C 
 2643      50435F54 
 2643      494D5F54 
 2644 7465 01       		.byte	0x1
 2645 7466 DD07     		.uleb128 0x3dd
 2646 7468 4C50435F 		.ascii	"LPC_TIM2 ((LPC_TIM_TypeDef *) LPC_TIM2_BASE )\000"
 2646      54494D32 
 2646      2028284C 
 2646      50435F54 
 2646      494D5F54 
 2647 7496 01       		.byte	0x1
 2648 7497 DE07     		.uleb128 0x3de
 2649 7499 4C50435F 		.ascii	"LPC_TIM3 ((LPC_TIM_TypeDef *) LPC_TIM3_BASE )\000"
 2649      54494D33 
 2649      2028284C 
 2649      50435F54 
ARM GAS  /tmp/cch3WSAd.s 			page 106


 2649      494D5F54 
 2650 74c7 01       		.byte	0x1
 2651 74c8 DF07     		.uleb128 0x3df
 2652 74ca 4C50435F 		.ascii	"LPC_RIT ((LPC_RIT_TypeDef *) LPC_RIT_BASE )\000"
 2652      52495420 
 2652      28284C50 
 2652      435F5249 
 2652      545F5479 
 2653 74f6 01       		.byte	0x1
 2654 74f7 E007     		.uleb128 0x3e0
 2655 74f9 4C50435F 		.ascii	"LPC_UART0 ((LPC_UART0_TypeDef *) LPC_UART0_BASE )\000"
 2655      55415254 
 2655      30202828 
 2655      4C50435F 
 2655      55415254 
 2656 752b 01       		.byte	0x1
 2657 752c E107     		.uleb128 0x3e1
 2658 752e 4C50435F 		.ascii	"LPC_UART1 ((LPC_UART1_TypeDef *) LPC_UART1_BASE )\000"
 2658      55415254 
 2658      31202828 
 2658      4C50435F 
 2658      55415254 
 2659 7560 01       		.byte	0x1
 2660 7561 E207     		.uleb128 0x3e2
 2661 7563 4C50435F 		.ascii	"LPC_UART2 ((LPC_UART_TypeDef *) LPC_UART2_BASE )\000"
 2661      55415254 
 2661      32202828 
 2661      4C50435F 
 2661      55415254 
 2662 7594 01       		.byte	0x1
 2663 7595 E307     		.uleb128 0x3e3
 2664 7597 4C50435F 		.ascii	"LPC_UART3 ((LPC_UART_TypeDef *) LPC_UART3_BASE )\000"
 2664      55415254 
 2664      33202828 
 2664      4C50435F 
 2664      55415254 
 2665 75c8 01       		.byte	0x1
 2666 75c9 E407     		.uleb128 0x3e4
 2667 75cb 4C50435F 		.ascii	"LPC_PWM1 ((LPC_PWM_TypeDef *) LPC_PWM1_BASE )\000"
 2667      50574D31 
 2667      2028284C 
 2667      50435F50 
 2667      574D5F54 
 2668 75f9 01       		.byte	0x1
 2669 75fa E507     		.uleb128 0x3e5
 2670 75fc 4C50435F 		.ascii	"LPC_I2C0 ((LPC_I2C_TypeDef *) LPC_I2C0_BASE )\000"
 2670      49324330 
 2670      2028284C 
 2670      50435F49 
 2670      32435F54 
 2671 762a 01       		.byte	0x1
 2672 762b E607     		.uleb128 0x3e6
 2673 762d 4C50435F 		.ascii	"LPC_I2C1 ((LPC_I2C_TypeDef *) LPC_I2C1_BASE )\000"
 2673      49324331 
 2673      2028284C 
 2673      50435F49 
 2673      32435F54 
ARM GAS  /tmp/cch3WSAd.s 			page 107


 2674 765b 01       		.byte	0x1
 2675 765c E707     		.uleb128 0x3e7
 2676 765e 4C50435F 		.ascii	"LPC_I2C2 ((LPC_I2C_TypeDef *) LPC_I2C2_BASE )\000"
 2676      49324332 
 2676      2028284C 
 2676      50435F49 
 2676      32435F54 
 2677 768c 01       		.byte	0x1
 2678 768d E807     		.uleb128 0x3e8
 2679 768f 4C50435F 		.ascii	"LPC_I2S ((LPC_I2S_TypeDef *) LPC_I2S_BASE )\000"
 2679      49325320 
 2679      28284C50 
 2679      435F4932 
 2679      535F5479 
 2680 76bb 01       		.byte	0x1
 2681 76bc E907     		.uleb128 0x3e9
 2682 76be 4C50435F 		.ascii	"LPC_SPI ((LPC_SPI_TypeDef *) LPC_SPI_BASE )\000"
 2682      53504920 
 2682      28284C50 
 2682      435F5350 
 2682      495F5479 
 2683 76ea 01       		.byte	0x1
 2684 76eb EA07     		.uleb128 0x3ea
 2685 76ed 4C50435F 		.ascii	"LPC_RTC ((LPC_RTC_TypeDef *) LPC_RTC_BASE )\000"
 2685      52544320 
 2685      28284C50 
 2685      435F5254 
 2685      435F5479 
 2686 7719 01       		.byte	0x1
 2687 771a EB07     		.uleb128 0x3eb
 2688 771c 4C50435F 		.ascii	"LPC_GPIOINT ((LPC_GPIOINT_TypeDef *) LPC_GPIOINT_BA"
 2688      4750494F 
 2688      494E5420 
 2688      28284C50 
 2688      435F4750 
 2689 774f 53452029 		.ascii	"SE )\000"
 2689      00
 2690 7754 01       		.byte	0x1
 2691 7755 EC07     		.uleb128 0x3ec
 2692 7757 4C50435F 		.ascii	"LPC_PINCON ((LPC_PINCON_TypeDef *) LPC_PINCON_BASE "
 2692      50494E43 
 2692      4F4E2028 
 2692      284C5043 
 2692      5F50494E 
 2693 778a 2900     		.ascii	")\000"
 2694 778c 01       		.byte	0x1
 2695 778d ED07     		.uleb128 0x3ed
 2696 778f 4C50435F 		.ascii	"LPC_SSP0 ((LPC_SSP_TypeDef *) LPC_SSP0_BASE )\000"
 2696      53535030 
 2696      2028284C 
 2696      50435F53 
 2696      53505F54 
 2697 77bd 01       		.byte	0x1
 2698 77be EE07     		.uleb128 0x3ee
 2699 77c0 4C50435F 		.ascii	"LPC_SSP1 ((LPC_SSP_TypeDef *) LPC_SSP1_BASE )\000"
 2699      53535031 
 2699      2028284C 
ARM GAS  /tmp/cch3WSAd.s 			page 108


 2699      50435F53 
 2699      53505F54 
 2700 77ee 01       		.byte	0x1
 2701 77ef EF07     		.uleb128 0x3ef
 2702 77f1 4C50435F 		.ascii	"LPC_ADC ((LPC_ADC_TypeDef *) LPC_ADC_BASE )\000"
 2702      41444320 
 2702      28284C50 
 2702      435F4144 
 2702      435F5479 
 2703 781d 01       		.byte	0x1
 2704 781e F007     		.uleb128 0x3f0
 2705 7820 4C50435F 		.ascii	"LPC_DAC ((LPC_DAC_TypeDef *) LPC_DAC_BASE )\000"
 2705      44414320 
 2705      28284C50 
 2705      435F4441 
 2705      435F5479 
 2706 784c 01       		.byte	0x1
 2707 784d F107     		.uleb128 0x3f1
 2708 784f 4C50435F 		.ascii	"LPC_CANAF_RAM ((LPC_CANAF_RAM_TypeDef *) LPC_CANAF_"
 2708      43414E41 
 2708      465F5241 
 2708      4D202828 
 2708      4C50435F 
 2709 7882 52414D5F 		.ascii	"RAM_BASE)\000"
 2709      42415345 
 2709      2900
 2710 788c 01       		.byte	0x1
 2711 788d F207     		.uleb128 0x3f2
 2712 788f 4C50435F 		.ascii	"LPC_CANAF ((LPC_CANAF_TypeDef *) LPC_CANAF_BASE )\000"
 2712      43414E41 
 2712      46202828 
 2712      4C50435F 
 2712      43414E41 
 2713 78c1 01       		.byte	0x1
 2714 78c2 F307     		.uleb128 0x3f3
 2715 78c4 4C50435F 		.ascii	"LPC_CANCR ((LPC_CANCR_TypeDef *) LPC_CANCR_BASE )\000"
 2715      43414E43 
 2715      52202828 
 2715      4C50435F 
 2715      43414E43 
 2716 78f6 01       		.byte	0x1
 2717 78f7 F407     		.uleb128 0x3f4
 2718 78f9 4C50435F 		.ascii	"LPC_CAN1 ((LPC_CAN_TypeDef *) LPC_CAN1_BASE )\000"
 2718      43414E31 
 2718      2028284C 
 2718      50435F43 
 2718      414E5F54 
 2719 7927 01       		.byte	0x1
 2720 7928 F507     		.uleb128 0x3f5
 2721 792a 4C50435F 		.ascii	"LPC_CAN2 ((LPC_CAN_TypeDef *) LPC_CAN2_BASE )\000"
 2721      43414E32 
 2721      2028284C 
 2721      50435F43 
 2721      414E5F54 
 2722 7958 01       		.byte	0x1
 2723 7959 F607     		.uleb128 0x3f6
 2724 795b 4C50435F 		.ascii	"LPC_MCPWM ((LPC_MCPWM_TypeDef *) LPC_MCPWM_BASE )\000"
ARM GAS  /tmp/cch3WSAd.s 			page 109


 2724      4D435057 
 2724      4D202828 
 2724      4C50435F 
 2724      4D435057 
 2725 798d 01       		.byte	0x1
 2726 798e F707     		.uleb128 0x3f7
 2727 7990 4C50435F 		.ascii	"LPC_QEI ((LPC_QEI_TypeDef *) LPC_QEI_BASE )\000"
 2727      51454920 
 2727      28284C50 
 2727      435F5145 
 2727      495F5479 
 2728 79bc 01       		.byte	0x1
 2729 79bd F807     		.uleb128 0x3f8
 2730 79bf 4C50435F 		.ascii	"LPC_EMAC ((LPC_EMAC_TypeDef *) LPC_EMAC_BASE )\000"
 2730      454D4143 
 2730      2028284C 
 2730      50435F45 
 2730      4D41435F 
 2731 79ee 01       		.byte	0x1
 2732 79ef F907     		.uleb128 0x3f9
 2733 79f1 4C50435F 		.ascii	"LPC_GPDMA ((LPC_GPDMA_TypeDef *) LPC_GPDMA_BASE )\000"
 2733      4750444D 
 2733      41202828 
 2733      4C50435F 
 2733      4750444D 
 2734 7a23 01       		.byte	0x1
 2735 7a24 FA07     		.uleb128 0x3fa
 2736 7a26 4C50435F 		.ascii	"LPC_GPDMACH0 ((LPC_GPDMACH_TypeDef *) LPC_GPDMACH0_"
 2736      4750444D 
 2736      41434830 
 2736      2028284C 
 2736      50435F47 
 2737 7a59 42415345 		.ascii	"BASE )\000"
 2737      202900
 2738 7a60 01       		.byte	0x1
 2739 7a61 FB07     		.uleb128 0x3fb
 2740 7a63 4C50435F 		.ascii	"LPC_GPDMACH1 ((LPC_GPDMACH_TypeDef *) LPC_GPDMACH1_"
 2740      4750444D 
 2740      41434831 
 2740      2028284C 
 2740      50435F47 
 2741 7a96 42415345 		.ascii	"BASE )\000"
 2741      202900
 2742 7a9d 01       		.byte	0x1
 2743 7a9e FC07     		.uleb128 0x3fc
 2744 7aa0 4C50435F 		.ascii	"LPC_GPDMACH2 ((LPC_GPDMACH_TypeDef *) LPC_GPDMACH2_"
 2744      4750444D 
 2744      41434832 
 2744      2028284C 
 2744      50435F47 
 2745 7ad3 42415345 		.ascii	"BASE )\000"
 2745      202900
 2746 7ada 01       		.byte	0x1
 2747 7adb FD07     		.uleb128 0x3fd
 2748 7add 4C50435F 		.ascii	"LPC_GPDMACH3 ((LPC_GPDMACH_TypeDef *) LPC_GPDMACH3_"
 2748      4750444D 
 2748      41434833 
ARM GAS  /tmp/cch3WSAd.s 			page 110


 2748      2028284C 
 2748      50435F47 
 2749 7b10 42415345 		.ascii	"BASE )\000"
 2749      202900
 2750 7b17 01       		.byte	0x1
 2751 7b18 FE07     		.uleb128 0x3fe
 2752 7b1a 4C50435F 		.ascii	"LPC_GPDMACH4 ((LPC_GPDMACH_TypeDef *) LPC_GPDMACH4_"
 2752      4750444D 
 2752      41434834 
 2752      2028284C 
 2752      50435F47 
 2753 7b4d 42415345 		.ascii	"BASE )\000"
 2753      202900
 2754 7b54 01       		.byte	0x1
 2755 7b55 FF07     		.uleb128 0x3ff
 2756 7b57 4C50435F 		.ascii	"LPC_GPDMACH5 ((LPC_GPDMACH_TypeDef *) LPC_GPDMACH5_"
 2756      4750444D 
 2756      41434835 
 2756      2028284C 
 2756      50435F47 
 2757 7b8a 42415345 		.ascii	"BASE )\000"
 2757      202900
 2758 7b91 01       		.byte	0x1
 2759 7b92 8008     		.uleb128 0x400
 2760 7b94 4C50435F 		.ascii	"LPC_GPDMACH6 ((LPC_GPDMACH_TypeDef *) LPC_GPDMACH6_"
 2760      4750444D 
 2760      41434836 
 2760      2028284C 
 2760      50435F47 
 2761 7bc7 42415345 		.ascii	"BASE )\000"
 2761      202900
 2762 7bce 01       		.byte	0x1
 2763 7bcf 8108     		.uleb128 0x401
 2764 7bd1 4C50435F 		.ascii	"LPC_GPDMACH7 ((LPC_GPDMACH_TypeDef *) LPC_GPDMACH7_"
 2764      4750444D 
 2764      41434837 
 2764      2028284C 
 2764      50435F47 
 2765 7c04 42415345 		.ascii	"BASE )\000"
 2765      202900
 2766 7c0b 01       		.byte	0x1
 2767 7c0c 8208     		.uleb128 0x402
 2768 7c0e 4C50435F 		.ascii	"LPC_USB ((LPC_USB_TypeDef *) LPC_USB_BASE )\000"
 2768      55534220 
 2768      28284C50 
 2768      435F5553 
 2768      425F5479 
 2769 7c3a 04       		.byte	0x4
 2770 7c3b 01       		.byte	0x1
 2771 7c3c 45       		.uleb128 0x45
 2772 7c3d 636F6E66 		.ascii	"configUSE_PREEMPTION 1\000"
 2772      69675553 
 2772      455F5052 
 2772      45454D50 
 2772      54494F4E 
 2773 7c54 01       		.byte	0x1
 2774 7c55 46       		.uleb128 0x46
ARM GAS  /tmp/cch3WSAd.s 			page 111


 2775 7c56 636F6E66 		.ascii	"configUSE_IDLE_HOOK 0\000"
 2775      69675553 
 2775      455F4944 
 2775      4C455F48 
 2775      4F4F4B20 
 2776 7c6c 01       		.byte	0x1
 2777 7c6d 47       		.uleb128 0x47
 2778 7c6e 636F6E66 		.ascii	"configMAX_PRIORITIES ( ( unsigned portBASE_TYPE ) 5"
 2778      69674D41 
 2778      585F5052 
 2778      494F5249 
 2778      54494553 
 2779 7ca1 202900   		.ascii	" )\000"
 2780 7ca4 01       		.byte	0x1
 2781 7ca5 48       		.uleb128 0x48
 2782 7ca6 636F6E66 		.ascii	"configUSE_TICK_HOOK 1\000"
 2782      69675553 
 2782      455F5449 
 2782      434B5F48 
 2782      4F4F4B20 
 2783 7cbc 01       		.byte	0x1
 2784 7cbd 49       		.uleb128 0x49
 2785 7cbe 636F6E66 		.ascii	"configCPU_CLOCK_HZ ( ( unsigned long ) 99000000 )\000"
 2785      69674350 
 2785      555F434C 
 2785      4F434B5F 
 2785      485A2028 
 2786 7cf0 01       		.byte	0x1
 2787 7cf1 4A       		.uleb128 0x4a
 2788 7cf2 636F6E66 		.ascii	"configTICK_RATE_HZ ( ( portTickType ) 1000 )\000"
 2788      69675449 
 2788      434B5F52 
 2788      4154455F 
 2788      485A2028 
 2789 7d1f 01       		.byte	0x1
 2790 7d20 4B       		.uleb128 0x4b
 2791 7d21 636F6E66 		.ascii	"configMINIMAL_STACK_SIZE ( ( unsigned short ) 80 )\000"
 2791      69674D49 
 2791      4E494D41 
 2791      4C5F5354 
 2791      41434B5F 
 2792 7d54 01       		.byte	0x1
 2793 7d55 4C       		.uleb128 0x4c
 2794 7d56 636F6E66 		.ascii	"configTOTAL_HEAP_SIZE ( ( size_t ) ( 19 * 1024 ) )\000"
 2794      6967544F 
 2794      54414C5F 
 2794      48454150 
 2794      5F53495A 
 2795 7d89 01       		.byte	0x1
 2796 7d8a 4D       		.uleb128 0x4d
 2797 7d8b 636F6E66 		.ascii	"configMAX_TASK_NAME_LEN ( 12 )\000"
 2797      69674D41 
 2797      585F5441 
 2797      534B5F4E 
 2797      414D455F 
 2798 7daa 01       		.byte	0x1
 2799 7dab 4E       		.uleb128 0x4e
ARM GAS  /tmp/cch3WSAd.s 			page 112


 2800 7dac 636F6E66 		.ascii	"configUSE_TRACE_FACILITY 0\000"
 2800      69675553 
 2800      455F5452 
 2800      4143455F 
 2800      46414349 
 2801 7dc7 01       		.byte	0x1
 2802 7dc8 4F       		.uleb128 0x4f
 2803 7dc9 636F6E66 		.ascii	"configUSE_16_BIT_TICKS 0\000"
 2803      69675553 
 2803      455F3136 
 2803      5F424954 
 2803      5F544943 
 2804 7de2 01       		.byte	0x1
 2805 7de3 50       		.uleb128 0x50
 2806 7de4 636F6E66 		.ascii	"configIDLE_SHOULD_YIELD 0\000"
 2806      69674944 
 2806      4C455F53 
 2806      484F554C 
 2806      445F5949 
 2807 7dfe 01       		.byte	0x1
 2808 7dff 51       		.uleb128 0x51
 2809 7e00 636F6E66 		.ascii	"configUSE_CO_ROUTINES 0\000"
 2809      69675553 
 2809      455F434F 
 2809      5F524F55 
 2809      54494E45 
 2810 7e18 01       		.byte	0x1
 2811 7e19 52       		.uleb128 0x52
 2812 7e1a 636F6E66 		.ascii	"configUSE_MUTEXES 0\000"
 2812      69675553 
 2812      455F4D55 
 2812      54455845 
 2812      53203000 
 2813 7e2e 01       		.byte	0x1
 2814 7e2f 54       		.uleb128 0x54
 2815 7e30 636F6E66 		.ascii	"configMAX_CO_ROUTINE_PRIORITIES ( 2 )\000"
 2815      69674D41 
 2815      585F434F 
 2815      5F524F55 
 2815      54494E45 
 2816 7e56 01       		.byte	0x1
 2817 7e57 56       		.uleb128 0x56
 2818 7e58 636F6E66 		.ascii	"configUSE_COUNTING_SEMAPHORES 0\000"
 2818      69675553 
 2818      455F434F 
 2818      554E5449 
 2818      4E475F53 
 2819 7e78 01       		.byte	0x1
 2820 7e79 57       		.uleb128 0x57
 2821 7e7a 636F6E66 		.ascii	"configUSE_ALTERNATIVE_API 0\000"
 2821      69675553 
 2821      455F414C 
 2821      5445524E 
 2821      41544956 
 2822 7e96 01       		.byte	0x1
 2823 7e97 58       		.uleb128 0x58
 2824 7e98 636F6E66 		.ascii	"configCHECK_FOR_STACK_OVERFLOW 0\000"
ARM GAS  /tmp/cch3WSAd.s 			page 113


 2824      69674348 
 2824      45434B5F 
 2824      464F525F 
 2824      53544143 
 2825 7eb9 01       		.byte	0x1
 2826 7eba 59       		.uleb128 0x59
 2827 7ebb 636F6E66 		.ascii	"configUSE_RECURSIVE_MUTEXES 0\000"
 2827      69675553 
 2827      455F5245 
 2827      43555253 
 2827      4956455F 
 2828 7ed9 01       		.byte	0x1
 2829 7eda 5A       		.uleb128 0x5a
 2830 7edb 636F6E66 		.ascii	"configQUEUE_REGISTRY_SIZE 10\000"
 2830      69675155 
 2830      4555455F 
 2830      52454749 
 2830      53545259 
 2831 7ef8 01       		.byte	0x1
 2832 7ef9 5B       		.uleb128 0x5b
 2833 7efa 636F6E66 		.ascii	"configGENERATE_RUN_TIME_STATS 0\000"
 2833      69674745 
 2833      4E455241 
 2833      54455F52 
 2833      554E5F54 
 2834 7f1a 01       		.byte	0x1
 2835 7f1b 60       		.uleb128 0x60
 2836 7f1c 494E434C 		.ascii	"INCLUDE_vTaskPrioritySet 1\000"
 2836      5544455F 
 2836      76546173 
 2836      6B507269 
 2836      6F726974 
 2837 7f37 01       		.byte	0x1
 2838 7f38 61       		.uleb128 0x61
 2839 7f39 494E434C 		.ascii	"INCLUDE_uxTaskPriorityGet 0\000"
 2839      5544455F 
 2839      75785461 
 2839      736B5072 
 2839      696F7269 
 2840 7f55 01       		.byte	0x1
 2841 7f56 62       		.uleb128 0x62
 2842 7f57 494E434C 		.ascii	"INCLUDE_vTaskDelete 0\000"
 2842      5544455F 
 2842      76546173 
 2842      6B44656C 
 2842      65746520 
 2843 7f6d 01       		.byte	0x1
 2844 7f6e 63       		.uleb128 0x63
 2845 7f6f 494E434C 		.ascii	"INCLUDE_vTaskCleanUpResources 0\000"
 2845      5544455F 
 2845      76546173 
 2845      6B436C65 
 2845      616E5570 
 2846 7f8f 01       		.byte	0x1
 2847 7f90 64       		.uleb128 0x64
 2848 7f91 494E434C 		.ascii	"INCLUDE_vTaskSuspend 1\000"
 2848      5544455F 
ARM GAS  /tmp/cch3WSAd.s 			page 114


 2848      76546173 
 2848      6B537573 
 2848      70656E64 
 2849 7fa8 01       		.byte	0x1
 2850 7fa9 65       		.uleb128 0x65
 2851 7faa 494E434C 		.ascii	"INCLUDE_vTaskDelayUntil 1\000"
 2851      5544455F 
 2851      76546173 
 2851      6B44656C 
 2851      6179556E 
 2852 7fc4 01       		.byte	0x1
 2853 7fc5 66       		.uleb128 0x66
 2854 7fc6 494E434C 		.ascii	"INCLUDE_vTaskDelay 1\000"
 2854      5544455F 
 2854      76546173 
 2854      6B44656C 
 2854      61792031 
 2855 7fdb 01       		.byte	0x1
 2856 7fdc 67       		.uleb128 0x67
 2857 7fdd 494E434C 		.ascii	"INCLUDE_uxTaskGetStackHighWaterMark 0\000"
 2857      5544455F 
 2857      75785461 
 2857      736B4765 
 2857      74537461 
 2858 8003 01       		.byte	0x1
 2859 8004 6F       		.uleb128 0x6f
 2860 8005 636F6E66 		.ascii	"configPRIO_BITS __NVIC_PRIO_BITS\000"
 2860      69675052 
 2860      494F5F42 
 2860      49545320 
 2860      5F5F4E56 
 2861 8026 01       		.byte	0x1
 2862 8027 75       		.uleb128 0x75
 2863 8028 636F6E66 		.ascii	"configKERNEL_INTERRUPT_PRIORITY ( 31 << (8 - config"
 2863      69674B45 
 2863      524E454C 
 2863      5F494E54 
 2863      45525255 
 2864 805b 5052494F 		.ascii	"PRIO_BITS) )\000"
 2864      5F424954 
 2864      53292029 
 2864      00
 2865 8068 01       		.byte	0x1
 2866 8069 77       		.uleb128 0x77
 2867 806a 636F6E66 		.ascii	"configMAX_SYSCALL_INTERRUPT_PRIORITY ( 5 << (8 - co"
 2867      69674D41 
 2867      585F5359 
 2867      5343414C 
 2867      4C5F494E 
 2868 809d 6E666967 		.ascii	"nfigPRIO_BITS) )\000"
 2868      5052494F 
 2868      5F424954 
 2868      53292029 
 2868      00
 2869 80ae 01       		.byte	0x1
 2870 80af 7E       		.uleb128 0x7e
 2871 80b0 706F7274 		.ascii	"portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() vConfigure"
ARM GAS  /tmp/cch3WSAd.s 			page 115


 2871      434F4E46 
 2871      49475552 
 2871      455F5449 
 2871      4D45525F 
 2872 80e3 54696D65 		.ascii	"TimerForRunTimeStats()\000"
 2872      72466F72 
 2872      52756E54 
 2872      696D6553 
 2872      74617473 
 2873 80fa 01       		.byte	0x1
 2874 80fb 7F       		.uleb128 0x7f
 2875 80fc 706F7274 		.ascii	"portGET_RUN_TIME_COUNTER_VALUE() LPC_TIM0->TC\000"
 2875      4745545F 
 2875      52554E5F 
 2875      54494D45 
 2875      5F434F55 
 2876 812a 04       		.byte	0x4
 2877              		.file 25 "./FreeRTOS/include/portable.h"
 2878 812b 03       		.byte	0x3
 2879 812c 46       		.uleb128 0x46
 2880 812d 19       		.uleb128 0x19
 2881 812e 01       		.byte	0x1
 2882 812f 3B       		.uleb128 0x3b
 2883 8130 504F5254 		.ascii	"PORTABLE_H \000"
 2883      41424C45 
 2883      5F482000 
 2884              		.file 26 "./FreeRTOS/portable/GCC/ARM_CM3/portmacro.h"
 2885 813c 03       		.byte	0x3
 2886 813d B302     		.uleb128 0x133
 2887 813f 1A       		.uleb128 0x1a
 2888 8140 01       		.byte	0x1
 2889 8141 38       		.uleb128 0x38
 2890 8142 504F5254 		.ascii	"PORTMACRO_H \000"
 2890      4D414352 
 2890      4F5F4820 
 2890      00
 2891 814f 01       		.byte	0x1
 2892 8150 49       		.uleb128 0x49
 2893 8151 706F7274 		.ascii	"portCHAR char\000"
 2893      43484152 
 2893      20636861 
 2893      7200
 2894 815f 01       		.byte	0x1
 2895 8160 4A       		.uleb128 0x4a
 2896 8161 706F7274 		.ascii	"portFLOAT float\000"
 2896      464C4F41 
 2896      5420666C 
 2896      6F617400 
 2897 8171 01       		.byte	0x1
 2898 8172 4B       		.uleb128 0x4b
 2899 8173 706F7274 		.ascii	"portDOUBLE double\000"
 2899      444F5542 
 2899      4C452064 
 2899      6F75626C 
 2899      6500
 2900 8185 01       		.byte	0x1
 2901 8186 4C       		.uleb128 0x4c
ARM GAS  /tmp/cch3WSAd.s 			page 116


 2902 8187 706F7274 		.ascii	"portLONG long\000"
 2902      4C4F4E47 
 2902      206C6F6E 
 2902      6700
 2903 8195 01       		.byte	0x1
 2904 8196 4D       		.uleb128 0x4d
 2905 8197 706F7274 		.ascii	"portSHORT short\000"
 2905      53484F52 
 2905      54207368 
 2905      6F727400 
 2906 81a7 01       		.byte	0x1
 2907 81a8 4E       		.uleb128 0x4e
 2908 81a9 706F7274 		.ascii	"portSTACK_TYPE unsigned portLONG\000"
 2908      53544143 
 2908      4B5F5459 
 2908      50452075 
 2908      6E736967 
 2909 81ca 01       		.byte	0x1
 2910 81cb 4F       		.uleb128 0x4f
 2911 81cc 706F7274 		.ascii	"portBASE_TYPE long\000"
 2911      42415345 
 2911      5F545950 
 2911      45206C6F 
 2911      6E6700
 2912 81df 01       		.byte	0x1
 2913 81e0 56       		.uleb128 0x56
 2914 81e1 706F7274 		.ascii	"portMAX_DELAY ( portTickType ) 0xffffffff\000"
 2914      4D41585F 
 2914      44454C41 
 2914      59202820 
 2914      706F7274 
 2915 820b 01       		.byte	0x1
 2916 820c 5B       		.uleb128 0x5b
 2917 820d 706F7274 		.ascii	"portSTACK_GROWTH ( -1 )\000"
 2917      53544143 
 2917      4B5F4752 
 2917      4F575448 
 2917      2028202D 
 2918 8225 01       		.byte	0x1
 2919 8226 5C       		.uleb128 0x5c
 2920 8227 706F7274 		.ascii	"portTICK_RATE_MS ( ( portTickType ) 1000 / configTI"
 2920      5449434B 
 2920      5F524154 
 2920      455F4D53 
 2920      20282028 
 2921 825a 434B5F52 		.ascii	"CK_RATE_HZ )\000"
 2921      4154455F 
 2921      485A2029 
 2921      00
 2922 8267 01       		.byte	0x1
 2923 8268 5D       		.uleb128 0x5d
 2924 8269 706F7274 		.ascii	"portBYTE_ALIGNMENT 8\000"
 2924      42595445 
 2924      5F414C49 
 2924      474E4D45 
 2924      4E542038 
 2925 827e 01       		.byte	0x1
ARM GAS  /tmp/cch3WSAd.s 			page 117


 2926 827f 64       		.uleb128 0x64
 2927 8280 706F7274 		.ascii	"portYIELD() vPortYieldFromISR()\000"
 2927      5949454C 
 2927      44282920 
 2927      76506F72 
 2927      74596965 
 2928 82a0 01       		.byte	0x1
 2929 82a1 66       		.uleb128 0x66
 2930 82a2 706F7274 		.ascii	"portEND_SWITCHING_ISR(xSwitchRequired) if( xSwitchR"
 2930      454E445F 
 2930      53574954 
 2930      4348494E 
 2930      475F4953 
 2931 82d5 65717569 		.ascii	"equired ) vPortYieldFromISR()\000"
 2931      72656420 
 2931      29207650 
 2931      6F727459 
 2931      69656C64 
 2932 82f3 01       		.byte	0x1
 2933 82f4 70       		.uleb128 0x70
 2934 82f5 706F7274 		.ascii	"portSET_INTERRUPT_MASK() __asm volatile ( \"\011mov"
 2934      5345545F 
 2934      494E5445 
 2934      52525550 
 2934      545F4D41 
 2935 8324 2072302C 		.ascii	" r0, %0\011\011\011\011\011\011\011\011\\n\" \"\011"
 2935      20253009 
 2935      09090909 
 2935      0909095C 
 2935      6E222022 
 2936 8339 6D737220 		.ascii	"msr basepri, r0\011\011\011\011\011\011\011\\n\" ::"
 2936      62617365 
 2936      7072692C 
 2936      20723009 
 2936      09090909 
 2937 8355 22692228 		.ascii	"\"i\"(configMAX_SYSCALL_INTERRUPT_PRIORITY):\"r0\" "
 2937      636F6E66 
 2937      69674D41 
 2937      585F5359 
 2937      5343414C 
 2938 8384 2900     		.ascii	")\000"
 2939 8386 01       		.byte	0x1
 2940 8387 7C       		.uleb128 0x7c
 2941 8388 706F7274 		.ascii	"portCLEAR_INTERRUPT_MASK() __asm volatile ( \"\011m"
 2941      434C4541 
 2941      525F494E 
 2941      54455252 
 2941      5550545F 
 2942 83b7 6F762072 		.ascii	"ov r0, #0\011\011\011\011\011\\n\" \"\011msr basepr"
 2942      302C2023 
 2942      30090909 
 2942      09095C6E 
 2942      22202209 
 2943 83d5 692C2072 		.ascii	"i, r0\011\011\011\011\\n\" :::\"r0\" )\000"
 2943      30090909 
 2943      095C6E22 
 2943      203A3A3A 
ARM GAS  /tmp/cch3WSAd.s 			page 118


 2943      22723022 
 2944 83ec 01       		.byte	0x1
 2945 83ed 8401     		.uleb128 0x84
 2946 83ef 706F7274 		.ascii	"portSET_INTERRUPT_MASK_FROM_ISR() 0;portSET_INTERRU"
 2946      5345545F 
 2946      494E5445 
 2946      52525550 
 2946      545F4D41 
 2947 8422 50545F4D 		.ascii	"PT_MASK()\000"
 2947      41534B28 
 2947      2900
 2948 842c 01       		.byte	0x1
 2949 842d 8501     		.uleb128 0x85
 2950 842f 706F7274 		.ascii	"portCLEAR_INTERRUPT_MASK_FROM_ISR(x) portCLEAR_INTE"
 2950      434C4541 
 2950      525F494E 
 2950      54455252 
 2950      5550545F 
 2951 8462 52525550 		.ascii	"RRUPT_MASK();(void)x\000"
 2951      545F4D41 
 2951      534B2829 
 2951      3B28766F 
 2951      69642978 
 2952 8477 01       		.byte	0x1
 2953 8478 8B01     		.uleb128 0x8b
 2954 847a 706F7274 		.ascii	"portDISABLE_INTERRUPTS() portSET_INTERRUPT_MASK()\000"
 2954      44495341 
 2954      424C455F 
 2954      494E5445 
 2954      52525550 
 2955 84ac 01       		.byte	0x1
 2956 84ad 8C01     		.uleb128 0x8c
 2957 84af 706F7274 		.ascii	"portENABLE_INTERRUPTS() portCLEAR_INTERRUPT_MASK()\000"
 2957      454E4142 
 2957      4C455F49 
 2957      4E544552 
 2957      52555054 
 2958 84e2 01       		.byte	0x1
 2959 84e3 8D01     		.uleb128 0x8d
 2960 84e5 706F7274 		.ascii	"portENTER_CRITICAL() vPortEnterCritical()\000"
 2960      454E5445 
 2960      525F4352 
 2960      49544943 
 2960      414C2829 
 2961 850f 01       		.byte	0x1
 2962 8510 8E01     		.uleb128 0x8e
 2963 8512 706F7274 		.ascii	"portEXIT_CRITICAL() vPortExitCritical()\000"
 2963      45584954 
 2963      5F435249 
 2963      54494341 
 2963      4C282920 
 2964 853a 01       		.byte	0x1
 2965 853b 9201     		.uleb128 0x92
 2966 853d 706F7274 		.ascii	"portTASK_FUNCTION_PROTO(vFunction,pvParameters) voi"
 2966      5441534B 
 2966      5F46554E 
 2966      4354494F 
ARM GAS  /tmp/cch3WSAd.s 			page 119


 2966      4E5F5052 
 2967 8570 64207646 		.ascii	"d vFunction( void *pvParameters )\000"
 2967      756E6374 
 2967      696F6E28 
 2967      20766F69 
 2967      64202A70 
 2968 8592 01       		.byte	0x1
 2969 8593 9301     		.uleb128 0x93
 2970 8595 706F7274 		.ascii	"portTASK_FUNCTION(vFunction,pvParameters) void vFun"
 2970      5441534B 
 2970      5F46554E 
 2970      4354494F 
 2970      4E287646 
 2971 85c8 6374696F 		.ascii	"ction( void *pvParameters )\000"
 2971      6E282076 
 2971      6F696420 
 2971      2A707650 
 2971      6172616D 
 2972 85e4 01       		.byte	0x1
 2973 85e5 9501     		.uleb128 0x95
 2974 85e7 706F7274 		.ascii	"portNOP() \000"
 2974      4E4F5028 
 2974      292000
 2975 85f2 04       		.byte	0x4
 2976 85f3 01       		.byte	0x1
 2977 85f4 B702     		.uleb128 0x137
 2978 85f6 706F7274 		.ascii	"portBYTE_ALIGNMENT_MASK ( 0x0007 )\000"
 2978      42595445 
 2978      5F414C49 
 2978      474E4D45 
 2978      4E545F4D 
 2979 8619 01       		.byte	0x1
 2980 861a CB02     		.uleb128 0x14b
 2981 861c 706F7274 		.ascii	"portNUM_CONFIGURABLE_REGIONS 1\000"
 2981      4E554D5F 
 2981      434F4E46 
 2981      49475552 
 2981      41424C45 
 2982              		.file 27 "./FreeRTOS/include/mpu_wrappers.h"
 2983 863b 03       		.byte	0x3
 2984 863c D202     		.uleb128 0x152
 2985 863e 1B       		.uleb128 0x1b
 2986 863f 01       		.byte	0x1
 2987 8640 37       		.uleb128 0x37
 2988 8641 4D50555F 		.ascii	"MPU_WRAPPERS_H \000"
 2988      57524150 
 2988      50455253 
 2988      5F482000 
 2989 8651 01       		.byte	0x1
 2990 8652 7F       		.uleb128 0x7f
 2991 8653 50524956 		.ascii	"PRIVILEGED_FUNCTION \000"
 2991      494C4547 
 2991      45445F46 
 2991      554E4354 
 2991      494F4E20 
 2992 8668 01       		.byte	0x1
 2993 8669 8001     		.uleb128 0x80
ARM GAS  /tmp/cch3WSAd.s 			page 120


 2994 866b 50524956 		.ascii	"PRIVILEGED_DATA \000"
 2994      494C4547 
 2994      45445F44 
 2994      41544120 
 2994      00
 2995 867c 01       		.byte	0x1
 2996 867d 8101     		.uleb128 0x81
 2997 867f 706F7274 		.ascii	"portUSING_MPU_WRAPPERS 0\000"
 2997      5553494E 
 2997      475F4D50 
 2997      555F5752 
 2997      41505045 
 2998 8698 04       		.byte	0x4
 2999 8699 04       		.byte	0x4
 3000 869a 01       		.byte	0x1
 3001 869b 8801     		.uleb128 0x88
 3002 869d 636F6E66 		.ascii	"configUSE_APPLICATION_TASK_TAG 0\000"
 3002      69675553 
 3002      455F4150 
 3002      504C4943 
 3002      4154494F 
 3003 86be 01       		.byte	0x1
 3004 86bf A001     		.uleb128 0xa0
 3005 86c1 706F7274 		.ascii	"portCRITICAL_NESTING_IN_TCB 0\000"
 3005      43524954 
 3005      4943414C 
 3005      5F4E4553 
 3005      54494E47 
 3006 86df 01       		.byte	0x1
 3007 86e0 B101     		.uleb128 0xb1
 3008 86e2 494E434C 		.ascii	"INCLUDE_xTaskResumeFromISR 1\000"
 3008      5544455F 
 3008      78546173 
 3008      6B526573 
 3008      756D6546 
 3009 86ff 01       		.byte	0x1
 3010 8700 B501     		.uleb128 0xb5
 3011 8702 494E434C 		.ascii	"INCLUDE_xTaskGetSchedulerState 0\000"
 3011      5544455F 
 3011      78546173 
 3011      6B476574 
 3011      53636865 
 3012 8723 01       		.byte	0x1
 3013 8724 BF01     		.uleb128 0xbf
 3014 8726 494E434C 		.ascii	"INCLUDE_xTaskGetCurrentTaskHandle 0\000"
 3014      5544455F 
 3014      78546173 
 3014      6B476574 
 3014      43757272 
 3015 874a 01       		.byte	0x1
 3016 874b DC01     		.uleb128 0xdc
 3017 874d 74726163 		.ascii	"traceSTART() \000"
 3017      65535441 
 3017      52542829 
 3017      2000
 3018 875b 01       		.byte	0x1
 3019 875c E201     		.uleb128 0xe2
ARM GAS  /tmp/cch3WSAd.s 			page 121


 3020 875e 74726163 		.ascii	"traceEND() \000"
 3020      65454E44 
 3020      28292000 
 3021 876a 01       		.byte	0x1
 3022 876b E801     		.uleb128 0xe8
 3023 876d 74726163 		.ascii	"traceTASK_SWITCHED_IN() \000"
 3023      65544153 
 3023      4B5F5357 
 3023      49544348 
 3023      45445F49 
 3024 8786 01       		.byte	0x1
 3025 8787 EE01     		.uleb128 0xee
 3026 8789 74726163 		.ascii	"traceTASK_SWITCHED_OUT() \000"
 3026      65544153 
 3026      4B5F5357 
 3026      49544348 
 3026      45445F4F 
 3027 87a3 01       		.byte	0x1
 3028 87a4 F601     		.uleb128 0xf6
 3029 87a6 74726163 		.ascii	"traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue) \000"
 3029      65424C4F 
 3029      434B494E 
 3029      475F4F4E 
 3029      5F515545 
 3030 87cf 01       		.byte	0x1
 3031 87d0 FE01     		.uleb128 0xfe
 3032 87d2 74726163 		.ascii	"traceBLOCKING_ON_QUEUE_SEND(pxQueue) \000"
 3032      65424C4F 
 3032      434B494E 
 3032      475F4F4E 
 3032      5F515545 
 3033 87f8 01       		.byte	0x1
 3034 87f9 8802     		.uleb128 0x108
 3035 87fb 74726163 		.ascii	"traceQUEUE_CREATE(pxNewQueue) \000"
 3035      65515545 
 3035      55455F43 
 3035      52454154 
 3035      45287078 
 3036 881a 01       		.byte	0x1
 3037 881b 8C02     		.uleb128 0x10c
 3038 881d 74726163 		.ascii	"traceQUEUE_CREATE_FAILED() \000"
 3038      65515545 
 3038      55455F43 
 3038      52454154 
 3038      455F4641 
 3039 8839 01       		.byte	0x1
 3040 883a 9002     		.uleb128 0x110
 3041 883c 74726163 		.ascii	"traceCREATE_MUTEX(pxNewQueue) \000"
 3041      65435245 
 3041      4154455F 
 3041      4D555445 
 3041      58287078 
 3042 885b 01       		.byte	0x1
 3043 885c 9402     		.uleb128 0x114
 3044 885e 74726163 		.ascii	"traceCREATE_MUTEX_FAILED() \000"
 3044      65435245 
 3044      4154455F 
ARM GAS  /tmp/cch3WSAd.s 			page 122


 3044      4D555445 
 3044      585F4641 
 3045 887a 01       		.byte	0x1
 3046 887b 9802     		.uleb128 0x118
 3047 887d 74726163 		.ascii	"traceGIVE_MUTEX_RECURSIVE(pxMutex) \000"
 3047      65474956 
 3047      455F4D55 
 3047      5445585F 
 3047      52454355 
 3048 88a1 01       		.byte	0x1
 3049 88a2 9C02     		.uleb128 0x11c
 3050 88a4 74726163 		.ascii	"traceGIVE_MUTEX_RECURSIVE_FAILED(pxMutex) \000"
 3050      65474956 
 3050      455F4D55 
 3050      5445585F 
 3050      52454355 
 3051 88cf 01       		.byte	0x1
 3052 88d0 A002     		.uleb128 0x120
 3053 88d2 74726163 		.ascii	"traceTAKE_MUTEX_RECURSIVE(pxMutex) \000"
 3053      6554414B 
 3053      455F4D55 
 3053      5445585F 
 3053      52454355 
 3054 88f6 01       		.byte	0x1
 3055 88f7 A402     		.uleb128 0x124
 3056 88f9 74726163 		.ascii	"traceCREATE_COUNTING_SEMAPHORE() \000"
 3056      65435245 
 3056      4154455F 
 3056      434F554E 
 3056      54494E47 
 3057 891b 01       		.byte	0x1
 3058 891c A802     		.uleb128 0x128
 3059 891e 74726163 		.ascii	"traceCREATE_COUNTING_SEMAPHORE_FAILED() \000"
 3059      65435245 
 3059      4154455F 
 3059      434F554E 
 3059      54494E47 
 3060 8947 01       		.byte	0x1
 3061 8948 AC02     		.uleb128 0x12c
 3062 894a 74726163 		.ascii	"traceQUEUE_SEND(pxQueue) \000"
 3062      65515545 
 3062      55455F53 
 3062      454E4428 
 3062      70785175 
 3063 8964 01       		.byte	0x1
 3064 8965 B002     		.uleb128 0x130
 3065 8967 74726163 		.ascii	"traceQUEUE_SEND_FAILED(pxQueue) \000"
 3065      65515545 
 3065      55455F53 
 3065      454E445F 
 3065      4641494C 
 3066 8988 01       		.byte	0x1
 3067 8989 B402     		.uleb128 0x134
 3068 898b 74726163 		.ascii	"traceQUEUE_RECEIVE(pxQueue) \000"
 3068      65515545 
 3068      55455F52 
 3068      45434549 
ARM GAS  /tmp/cch3WSAd.s 			page 123


 3068      56452870 
 3069 89a8 01       		.byte	0x1
 3070 89a9 B802     		.uleb128 0x138
 3071 89ab 74726163 		.ascii	"traceQUEUE_PEEK(pxQueue) \000"
 3071      65515545 
 3071      55455F50 
 3071      45454B28 
 3071      70785175 
 3072 89c5 01       		.byte	0x1
 3073 89c6 BC02     		.uleb128 0x13c
 3074 89c8 74726163 		.ascii	"traceQUEUE_RECEIVE_FAILED(pxQueue) \000"
 3074      65515545 
 3074      55455F52 
 3074      45434549 
 3074      56455F46 
 3075 89ec 01       		.byte	0x1
 3076 89ed C002     		.uleb128 0x140
 3077 89ef 74726163 		.ascii	"traceQUEUE_SEND_FROM_ISR(pxQueue) \000"
 3077      65515545 
 3077      55455F53 
 3077      454E445F 
 3077      46524F4D 
 3078 8a12 01       		.byte	0x1
 3079 8a13 C402     		.uleb128 0x144
 3080 8a15 74726163 		.ascii	"traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue) \000"
 3080      65515545 
 3080      55455F53 
 3080      454E445F 
 3080      46524F4D 
 3081 8a3f 01       		.byte	0x1
 3082 8a40 C802     		.uleb128 0x148
 3083 8a42 74726163 		.ascii	"traceQUEUE_RECEIVE_FROM_ISR(pxQueue) \000"
 3083      65515545 
 3083      55455F52 
 3083      45434549 
 3083      56455F46 
 3084 8a68 01       		.byte	0x1
 3085 8a69 CC02     		.uleb128 0x14c
 3086 8a6b 74726163 		.ascii	"traceQUEUE_RECEIVE_FROM_ISR_FAILED(pxQueue) \000"
 3086      65515545 
 3086      55455F52 
 3086      45434549 
 3086      56455F46 
 3087 8a98 01       		.byte	0x1
 3088 8a99 D002     		.uleb128 0x150
 3089 8a9b 74726163 		.ascii	"traceQUEUE_DELETE(pxQueue) \000"
 3089      65515545 
 3089      55455F44 
 3089      454C4554 
 3089      45287078 
 3090 8ab7 01       		.byte	0x1
 3091 8ab8 D402     		.uleb128 0x154
 3092 8aba 74726163 		.ascii	"traceTASK_CREATE(pxNewTCB) \000"
 3092      65544153 
 3092      4B5F4352 
 3092      45415445 
 3092      2870784E 
ARM GAS  /tmp/cch3WSAd.s 			page 124


 3093 8ad6 01       		.byte	0x1
 3094 8ad7 D802     		.uleb128 0x158
 3095 8ad9 74726163 		.ascii	"traceTASK_CREATE_FAILED(pxNewTCB) \000"
 3095      65544153 
 3095      4B5F4352 
 3095      45415445 
 3095      5F464149 
 3096 8afc 01       		.byte	0x1
 3097 8afd DC02     		.uleb128 0x15c
 3098 8aff 74726163 		.ascii	"traceTASK_DELETE(pxTaskToDelete) \000"
 3098      65544153 
 3098      4B5F4445 
 3098      4C455445 
 3098      28707854 
 3099 8b21 01       		.byte	0x1
 3100 8b22 E002     		.uleb128 0x160
 3101 8b24 74726163 		.ascii	"traceTASK_DELAY_UNTIL() \000"
 3101      65544153 
 3101      4B5F4445 
 3101      4C41595F 
 3101      554E5449 
 3102 8b3d 01       		.byte	0x1
 3103 8b3e E402     		.uleb128 0x164
 3104 8b40 74726163 		.ascii	"traceTASK_DELAY() \000"
 3104      65544153 
 3104      4B5F4445 
 3104      4C415928 
 3104      292000
 3105 8b53 01       		.byte	0x1
 3106 8b54 E802     		.uleb128 0x168
 3107 8b56 74726163 		.ascii	"traceTASK_PRIORITY_SET(pxTask,uxNewPriority) \000"
 3107      65544153 
 3107      4B5F5052 
 3107      494F5249 
 3107      54595F53 
 3108 8b84 01       		.byte	0x1
 3109 8b85 EC02     		.uleb128 0x16c
 3110 8b87 74726163 		.ascii	"traceTASK_SUSPEND(pxTaskToSuspend) \000"
 3110      65544153 
 3110      4B5F5355 
 3110      5350454E 
 3110      44287078 
 3111 8bab 01       		.byte	0x1
 3112 8bac F002     		.uleb128 0x170
 3113 8bae 74726163 		.ascii	"traceTASK_RESUME(pxTaskToResume) \000"
 3113      65544153 
 3113      4B5F5245 
 3113      53554D45 
 3113      28707854 
 3114 8bd0 01       		.byte	0x1
 3115 8bd1 F402     		.uleb128 0x174
 3116 8bd3 74726163 		.ascii	"traceTASK_RESUME_FROM_ISR(pxTaskToResume) \000"
 3116      65544153 
 3116      4B5F5245 
 3116      53554D45 
 3116      5F46524F 
 3117 8bfe 01       		.byte	0x1
ARM GAS  /tmp/cch3WSAd.s 			page 125


 3118 8bff F802     		.uleb128 0x178
 3119 8c01 74726163 		.ascii	"traceTASK_INCREMENT_TICK(xTickCount) \000"
 3119      65544153 
 3119      4B5F494E 
 3119      4352454D 
 3119      454E545F 
 3120 8c27 01       		.byte	0x1
 3121 8c28 9003     		.uleb128 0x190
 3122 8c2a 636F6E66 		.ascii	"configUSE_MALLOC_FAILED_HOOK 0\000"
 3122      69675553 
 3122      455F4D41 
 3122      4C4C4F43 
 3122      5F464149 
 3123 8c49 01       		.byte	0x1
 3124 8c4a 9403     		.uleb128 0x194
 3125 8c4c 706F7274 		.ascii	"portPRIVILEGE_BIT ( ( unsigned portBASE_TYPE ) 0x00"
 3125      50524956 
 3125      494C4547 
 3125      455F4249 
 3125      54202820 
 3126 8c7f 202900   		.ascii	" )\000"
 3127 8c82 01       		.byte	0x1
 3128 8c83 9803     		.uleb128 0x198
 3129 8c85 706F7274 		.ascii	"portYIELD_WITHIN_API portYIELD\000"
 3129      5949454C 
 3129      445F5749 
 3129      5448494E 
 3129      5F415049 
 3130 8ca4 01       		.byte	0x1
 3131 8ca5 9C03     		.uleb128 0x19c
 3132 8ca7 7076506F 		.ascii	"pvPortMallocAligned(xSize,pvBuffer) pvPortMalloc( x"
 3132      72744D61 
 3132      6C6C6F63 
 3132      416C6967 
 3132      6E656428 
 3133 8cda 53697A65 		.ascii	"Size ); ( void ) pvBuffer\000"
 3133      20293B20 
 3133      2820766F 
 3133      69642029 
 3133      20707642 
 3134 8cf4 01       		.byte	0x1
 3135 8cf5 A003     		.uleb128 0x1a0
 3136 8cf7 76506F72 		.ascii	"vPortFreeAligned(pvBlockToFree) vPortFree( pvBlockT"
 3136      74467265 
 3136      65416C69 
 3136      676E6564 
 3136      28707642 
 3137 8d2a 6F467265 		.ascii	"oFree )\000"
 3137      65202900 
 3138 8d32 04       		.byte	0x4
 3139              		.file 28 "./FreeRTOS/include/task.h"
 3140 8d33 03       		.byte	0x3
 3141 8d34 3F       		.uleb128 0x3f
 3142 8d35 1C       		.uleb128 0x1c
 3143 8d36 01       		.byte	0x1
 3144 8d37 3E       		.uleb128 0x3e
 3145 8d38 5441534B 		.ascii	"TASK_H \000"
ARM GAS  /tmp/cch3WSAd.s 			page 126


 3145      5F482000 
 3146              		.file 29 "./FreeRTOS/include/list.h"
 3147 8d40 03       		.byte	0x3
 3148 8d41 41       		.uleb128 0x41
 3149 8d42 1D       		.uleb128 0x1d
 3150 8d43 01       		.byte	0x1
 3151 8d44 5A       		.uleb128 0x5a
 3152 8d45 4C495354 		.ascii	"LIST_H \000"
 3152      5F482000 
 3153 8d4d 01       		.byte	0x1
 3154 8d4e 8501     		.uleb128 0x85
 3155 8d50 6C697374 		.ascii	"listSET_LIST_ITEM_OWNER(pxListItem,pxOwner) ( pxLis"
 3155      5345545F 
 3155      4C495354 
 3155      5F495445 
 3155      4D5F4F57 
 3156 8d83 74497465 		.ascii	"tItem )->pvOwner = ( void * ) pxOwner\000"
 3156      6D20292D 
 3156      3E70764F 
 3156      776E6572 
 3156      203D2028 
 3157 8da9 01       		.byte	0x1
 3158 8daa 8E01     		.uleb128 0x8e
 3159 8dac 6C697374 		.ascii	"listSET_LIST_ITEM_VALUE(pxListItem,xValue) ( pxList"
 3159      5345545F 
 3159      4C495354 
 3159      5F495445 
 3159      4D5F5641 
 3160 8ddf 4974656D 		.ascii	"Item )->xItemValue = xValue\000"
 3160      20292D3E 
 3160      78497465 
 3160      6D56616C 
 3160      7565203D 
 3161 8dfb 01       		.byte	0x1
 3162 8dfc 9801     		.uleb128 0x98
 3163 8dfe 6C697374 		.ascii	"listGET_LIST_ITEM_VALUE(pxListItem) ( ( pxListItem "
 3163      4745545F 
 3163      4C495354 
 3163      5F495445 
 3163      4D5F5641 
 3164 8e31 292D3E78 		.ascii	")->xItemValue )\000"
 3164      4974656D 
 3164      56616C75 
 3164      65202900 
 3165 8e41 01       		.byte	0x1
 3166 8e42 A101     		.uleb128 0xa1
 3167 8e44 6C697374 		.ascii	"listLIST_IS_EMPTY(pxList) ( ( pxList )->uxNumberOfI"
 3167      4C495354 
 3167      5F49535F 
 3167      454D5054 
 3167      59287078 
 3168 8e77 74656D73 		.ascii	"tems == ( unsigned portBASE_TYPE ) 0 )\000"
 3168      203D3D20 
 3168      2820756E 
 3168      7369676E 
 3168      65642070 
 3169 8e9e 01       		.byte	0x1
ARM GAS  /tmp/cch3WSAd.s 			page 127


 3170 8e9f A601     		.uleb128 0xa6
 3171 8ea1 6C697374 		.ascii	"listCURRENT_LIST_LENGTH(pxList) ( ( pxList )->uxNum"
 3171      43555252 
 3171      454E545F 
 3171      4C495354 
 3171      5F4C454E 
 3172 8ed4 6265724F 		.ascii	"berOfItems )\000"
 3172      66497465 
 3172      6D732029 
 3172      00
 3173 8ee1 01       		.byte	0x1
 3174 8ee2 BB01     		.uleb128 0xbb
 3175 8ee4 6C697374 		.ascii	"listGET_OWNER_OF_NEXT_ENTRY(pxTCB,pxList) { xList *"
 3175      4745545F 
 3175      4F574E45 
 3175      525F4F46 
 3175      5F4E4558 
 3176 8f17 20636F6E 		.ascii	" const pxConstList = pxList; ( pxConstList )->pxInd"
 3176      73742070 
 3176      78436F6E 
 3176      73744C69 
 3176      7374203D 
 3177 8f4a 6578203D 		.ascii	"ex = ( pxConstList )->pxIndex->pxNext; if( ( pxCons"
 3177      20282070 
 3177      78436F6E 
 3177      73744C69 
 3177      73742029 
 3178 8f7d 744C6973 		.ascii	"tList )->pxIndex == ( xListItem * ) &( ( pxConstLis"
 3178      7420292D 
 3178      3E707849 
 3178      6E646578 
 3178      203D3D20 
 3179 8fb0 7420292D 		.ascii	"t )->xListEnd ) ) { ( pxConstList )->pxIndex = ( px"
 3179      3E784C69 
 3179      7374456E 
 3179      64202920 
 3179      29207B20 
 3180 8fe3 436F6E73 		.ascii	"ConstList )->pxIndex->pxNext; } pxTCB = ( pxConstLi"
 3180      744C6973 
 3180      7420292D 
 3180      3E707849 
 3180      6E646578 
 3181 9016 73742029 		.ascii	"st )->pxIndex->pvOwner; }\000"
 3181      2D3E7078 
 3181      496E6465 
 3181      782D3E70 
 3181      764F776E 
 3182 9030 01       		.byte	0x1
 3183 9031 D901     		.uleb128 0xd9
 3184 9033 6C697374 		.ascii	"listGET_OWNER_OF_HEAD_ENTRY(pxList) ( ( pxList->uxN"
 3184      4745545F 
 3184      4F574E45 
 3184      525F4F46 
 3184      5F484541 
 3185 9066 756D6265 		.ascii	"umberOfItems != ( unsigned portBASE_TYPE ) 0 ) ? ( "
 3185      724F6649 
 3185      74656D73 
ARM GAS  /tmp/cch3WSAd.s 			page 128


 3185      20213D20 
 3185      2820756E 
 3186 9099 28262820 		.ascii	"(&( pxList->xListEnd ))->pxNext->pvOwner ) : ( NULL"
 3186      70784C69 
 3186      73742D3E 
 3186      784C6973 
 3186      74456E64 
 3187 90cc 20292029 		.ascii	" ) )\000"
 3187      00
 3188 90d1 01       		.byte	0x1
 3189 90d2 E501     		.uleb128 0xe5
 3190 90d4 6C697374 		.ascii	"listIS_CONTAINED_WITHIN(pxList,pxListItem) ( ( pxLi"
 3190      49535F43 
 3190      4F4E5441 
 3190      494E4544 
 3190      5F574954 
 3191 9107 73744974 		.ascii	"stItem )->pvContainer == ( void * ) pxList )\000"
 3191      656D2029 
 3191      2D3E7076 
 3191      436F6E74 
 3191      61696E65 
 3192 9134 04       		.byte	0x4
 3193 9135 01       		.byte	0x1
 3194 9136 4B       		.uleb128 0x4b
 3195 9137 74736B4B 		.ascii	"tskKERNEL_VERSION_NUMBER \"V6.0.0\"\000"
 3195      45524E45 
 3195      4C5F5645 
 3195      5253494F 
 3195      4E5F4E55 
 3196 9159 01       		.byte	0x1
 3197 915a 7F       		.uleb128 0x7f
 3198 915b 74736B49 		.ascii	"tskIDLE_PRIORITY ( ( unsigned portBASE_TYPE ) 0 )\000"
 3198      444C455F 
 3198      5052494F 
 3198      52495459 
 3198      20282028 
 3199 918d 01       		.byte	0x1
 3200 918e 8901     		.uleb128 0x89
 3201 9190 7461736B 		.ascii	"taskYIELD() portYIELD()\000"
 3201      5949454C 
 3201      44282920 
 3201      706F7274 
 3201      5949454C 
 3202 91a8 01       		.byte	0x1
 3203 91a9 9701     		.uleb128 0x97
 3204 91ab 7461736B 		.ascii	"taskENTER_CRITICAL() portENTER_CRITICAL()\000"
 3204      454E5445 
 3204      525F4352 
 3204      49544943 
 3204      414C2829 
 3205 91d5 01       		.byte	0x1
 3206 91d6 A501     		.uleb128 0xa5
 3207 91d8 7461736B 		.ascii	"taskEXIT_CRITICAL() portEXIT_CRITICAL()\000"
 3207      45584954 
 3207      5F435249 
 3207      54494341 
 3207      4C282920 
ARM GAS  /tmp/cch3WSAd.s 			page 129


 3208 9200 01       		.byte	0x1
 3209 9201 AF01     		.uleb128 0xaf
 3210 9203 7461736B 		.ascii	"taskDISABLE_INTERRUPTS() portDISABLE_INTERRUPTS()\000"
 3210      44495341 
 3210      424C455F 
 3210      494E5445 
 3210      52525550 
 3211 9235 01       		.byte	0x1
 3212 9236 B901     		.uleb128 0xb9
 3213 9238 7461736B 		.ascii	"taskENABLE_INTERRUPTS() portENABLE_INTERRUPTS()\000"
 3213      454E4142 
 3213      4C455F49 
 3213      4E544552 
 3213      52555054 
 3214 9268 01       		.byte	0x1
 3215 9269 BC01     		.uleb128 0xbc
 3216 926b 7461736B 		.ascii	"taskSCHEDULER_NOT_STARTED 0\000"
 3216      53434845 
 3216      44554C45 
 3216      525F4E4F 
 3216      545F5354 
 3217 9287 01       		.byte	0x1
 3218 9288 BD01     		.uleb128 0xbd
 3219 928a 7461736B 		.ascii	"taskSCHEDULER_RUNNING 1\000"
 3219      53434845 
 3219      44554C45 
 3219      525F5255 
 3219      4E4E494E 
 3220 92a2 01       		.byte	0x1
 3221 92a3 BE01     		.uleb128 0xbe
 3222 92a5 7461736B 		.ascii	"taskSCHEDULER_SUSPENDED 2\000"
 3222      53434845 
 3222      44554C45 
 3222      525F5355 
 3222      5350454E 
 3223 92bf 01       		.byte	0x1
 3224 92c0 9002     		.uleb128 0x110
 3225 92c2 78546173 		.ascii	"xTaskCreate(pvTaskCode,pcName,usStackDepth,pvParame"
 3225      6B437265 
 3225      61746528 
 3225      70765461 
 3225      736B436F 
 3226 92f5 74657273 		.ascii	"ters,uxPriority,pxCreatedTask) xTaskGenericCreate( "
 3226      2C757850 
 3226      72696F72 
 3226      6974792C 
 3226      70784372 
 3227 9328 28207076 		.ascii	"( pvTaskCode ), ( pcName ), ( usStackDepth ), ( pvP"
 3227      5461736B 
 3227      436F6465 
 3227      20292C20 
 3227      28207063 
 3228 935b 6172616D 		.ascii	"arameters ), ( uxPriority ), ( pxCreatedTask ), ( N"
 3228      65746572 
 3228      7320292C 
 3228      20282075 
 3228      78507269 
ARM GAS  /tmp/cch3WSAd.s 			page 130


 3229 938e 554C4C20 		.ascii	"ULL ), ( NULL ) )\000"
 3229      292C2028 
 3229      204E554C 
 3229      4C202920 
 3229      2900
 3230 93a0 01       		.byte	0x1
 3231 93a1 D902     		.uleb128 0x159
 3232 93a3 78546173 		.ascii	"xTaskCreateRestricted(x,pxCreatedTask) xTaskGeneric"
 3232      6B437265 
 3232      61746552 
 3232      65737472 
 3232      69637465 
 3233 93d6 43726561 		.ascii	"Create( ((x)->pvTaskCode), ((x)->pcName), ((x)->usS"
 3233      74652820 
 3233      28287829 
 3233      2D3E7076 
 3233      5461736B 
 3234 9409 7461636B 		.ascii	"tackDepth), ((x)->pvParameters), ((x)->uxPriority),"
 3234      44657074 
 3234      68292C20 
 3234      28287829 
 3234      2D3E7076 
 3235 943c 20287078 		.ascii	" (pxCreatedTask), ((x)->puxStackBuffer), ((x)->xReg"
 3235      43726561 
 3235      74656454 
 3235      61736B29 
 3235      2C202828 
 3236 946f 696F6E73 		.ascii	"ions) )\000"
 3236      29202900 
 3237 9477 04       		.byte	0x4
 3238              		.file 30 "./FreeRTOS/include/croutine.h"
 3239 9478 03       		.byte	0x3
 3240 9479 40       		.uleb128 0x40
 3241 947a 1E       		.uleb128 0x1e
 3242 947b 01       		.byte	0x1
 3243 947c 3E       		.uleb128 0x3e
 3244 947d 434F5F52 		.ascii	"CO_ROUTINE_H \000"
 3244      4F555449 
 3244      4E455F48 
 3244      2000
 3245 948b 01       		.byte	0x1
 3246 948c E901     		.uleb128 0xe9
 3247 948e 63725354 		.ascii	"crSTART(pxCRCB) switch( ( ( corCRCB * )pxCRCB )->ux"
 3247      41525428 
 3247      70784352 
 3247      43422920 
 3247      73776974 
 3248 94c1 53746174 		.ascii	"State ) { case 0:\000"
 3248      65202920 
 3248      7B206361 
 3248      73652030 
 3248      3A00
 3249 94d3 01       		.byte	0x1
 3250 94d4 8802     		.uleb128 0x108
 3251 94d6 6372454E 		.ascii	"crEND() }\000"
 3251      44282920 
 3251      7D00
ARM GAS  /tmp/cch3WSAd.s 			page 131


 3252 94e0 01       		.byte	0x1
 3253 94e1 8E02     		.uleb128 0x10e
 3254 94e3 63725345 		.ascii	"crSET_STATE0(xHandle) ( ( corCRCB * )xHandle)->uxSt"
 3254      545F5354 
 3254      41544530 
 3254      28784861 
 3254      6E646C65 
 3255 9516 61746520 		.ascii	"ate = (__LINE__ * 2); return; case (__LINE__ * 2):\000"
 3255      3D20285F 
 3255      5F4C494E 
 3255      455F5F20 
 3255      2A203229 
 3256 9549 01       		.byte	0x1
 3257 954a 8F02     		.uleb128 0x10f
 3258 954c 63725345 		.ascii	"crSET_STATE1(xHandle) ( ( corCRCB * )xHandle)->uxSt"
 3258      545F5354 
 3258      41544531 
 3258      28784861 
 3258      6E646C65 
 3259 957f 61746520 		.ascii	"ate = ((__LINE__ * 2)+1); return; case ((__LINE__ *"
 3259      3D202828 
 3259      5F5F4C49 
 3259      4E455F5F 
 3259      202A2032 
 3260 95b2 2032292B 		.ascii	" 2)+1):\000"
 3260      31293A00 
 3261 95ba 01       		.byte	0x1
 3262 95bb BF02     		.uleb128 0x13f
 3263 95bd 63724445 		.ascii	"crDELAY(xHandle,xTicksToDelay) if( xTicksToDelay > "
 3263      4C415928 
 3263      7848616E 
 3263      646C652C 
 3263      78546963 
 3264 95f0 30202920 		.ascii	"0 ) { vCoRoutineAddToDelayedList( xTicksToDelay, NU"
 3264      7B207643 
 3264      6F526F75 
 3264      74696E65 
 3264      41646454 
 3265 9623 4C4C2029 		.ascii	"LL ); } crSET_STATE0( xHandle );\000"
 3265      3B207D20 
 3265      63725345 
 3265      545F5354 
 3265      41544530 
 3266 9644 01       		.byte	0x1
 3267 9645 9903     		.uleb128 0x199
 3268 9647 63725155 		.ascii	"crQUEUE_SEND(xHandle,pxQueue,pvItemToQueue,xTicksTo"
 3268      4555455F 
 3268      53454E44 
 3268      28784861 
 3268      6E646C65 
 3269 967a 57616974 		.ascii	"Wait,pxResult) { *pxResult = xQueueCRSend( pxQueue,"
 3269      2C707852 
 3269      6573756C 
 3269      7429207B 
 3269      202A7078 
 3270 96ad 20707649 		.ascii	" pvItemToQueue, xTicksToWait ); if( *pxResult == er"
 3270      74656D54 
ARM GAS  /tmp/cch3WSAd.s 			page 132


 3270      6F517565 
 3270      75652C20 
 3270      78546963 
 3271 96e0 72515545 		.ascii	"rQUEUE_BLOCKED ) { crSET_STATE0( xHandle ); *pxResu"
 3271      55455F42 
 3271      4C4F434B 
 3271      45442029 
 3271      207B2063 
 3272 9713 6C74203D 		.ascii	"lt = xQueueCRSend( pxQueue, pvItemToQueue, 0 ); } i"
 3272      20785175 
 3272      65756543 
 3272      5253656E 
 3272      64282070 
 3273 9746 6628202A 		.ascii	"f( *pxResult == errQUEUE_YIELD ) { crSET_STATE1( xH"
 3273      70785265 
 3273      73756C74 
 3273      203D3D20 
 3273      65727251 
 3274 9779 616E646C 		.ascii	"andle ); *pxResult = pdPASS; } }\000"
 3274      6520293B 
 3274      202A7078 
 3274      52657375 
 3274      6C74203D 
 3275 979a 01       		.byte	0x1
 3276 979b F503     		.uleb128 0x1f5
 3277 979d 63725155 		.ascii	"crQUEUE_RECEIVE(xHandle,pxQueue,pvBuffer,xTicksToWa"
 3277      4555455F 
 3277      52454345 
 3277      49564528 
 3277      7848616E 
 3278 97d0 69742C70 		.ascii	"it,pxResult) { *pxResult = xQueueCRReceive( pxQueue"
 3278      78526573 
 3278      756C7429 
 3278      207B202A 
 3278      70785265 
 3279 9803 2C207076 		.ascii	", pvBuffer, xTicksToWait ); if( *pxResult == errQUE"
 3279      42756666 
 3279      65722C20 
 3279      78546963 
 3279      6B73546F 
 3280 9836 55455F42 		.ascii	"UE_BLOCKED ) { crSET_STATE0( xHandle ); *pxResult ="
 3280      4C4F434B 
 3280      45442029 
 3280      207B2063 
 3280      72534554 
 3281 9869 20785175 		.ascii	" xQueueCRReceive( pxQueue, pvBuffer, 0 ); } if( *px"
 3281      65756543 
 3281      52526563 
 3281      65697665 
 3281      28207078 
 3282 989c 52657375 		.ascii	"Result == errQUEUE_YIELD ) { crSET_STATE1( xHandle "
 3282      6C74203D 
 3282      3D206572 
 3282      72515545 
 3282      55455F59 
 3283 98cf 293B202A 		.ascii	"); *pxResult = pdPASS; } }\000"
 3283      70785265 
ARM GAS  /tmp/cch3WSAd.s 			page 133


 3283      73756C74 
 3283      203D2070 
 3283      64504153 
 3284 98ea 01       		.byte	0x1
 3285 98eb E204     		.uleb128 0x262
 3286 98ed 63725155 		.ascii	"crQUEUE_SEND_FROM_ISR(pxQueue,pvItemToQueue,xCoRout"
 3286      4555455F 
 3286      53454E44 
 3286      5F46524F 
 3286      4D5F4953 
 3287 9920 696E6550 		.ascii	"inePreviouslyWoken) xQueueCRSendFromISR( pxQueue, p"
 3287      72657669 
 3287      6F75736C 
 3287      79576F6B 
 3287      656E2920 
 3288 9953 76497465 		.ascii	"vItemToQueue, xCoRoutinePreviouslyWoken )\000"
 3288      6D546F51 
 3288      75657565 
 3288      2C207843 
 3288      6F526F75 
 3289 997d 01       		.byte	0x1
 3290 997e D305     		.uleb128 0x2d3
 3291 9980 63725155 		.ascii	"crQUEUE_RECEIVE_FROM_ISR(pxQueue,pvBuffer,pxCoRouti"
 3291      4555455F 
 3291      52454345 
 3291      4956455F 
 3291      46524F4D 
 3292 99b3 6E65576F 		.ascii	"neWoken) xQueueCRReceiveFromISR( pxQueue, pvBuffer,"
 3292      6B656E29 
 3292      20785175 
 3292      65756543 
 3292      52526563 
 3293 99e6 20707843 		.ascii	" pxCoRoutineWoken )\000"
 3293      6F526F75 
 3293      74696E65 
 3293      576F6B65 
 3293      6E202900 
 3294 99fa 04       		.byte	0x4
 3295 99fb 02       		.byte	0x2
 3296 99fc 42       		.uleb128 0x42
 3297 99fd 4D50555F 		.ascii	"MPU_WRAPPERS_INCLUDED_FROM_API_FILE\000"
 3297      57524150 
 3297      50455253 
 3297      5F494E43 
 3297      4C554445 
 3298 9a21 01       		.byte	0x1
 3299 9a22 49       		.uleb128 0x49
 3300 9a23 71756575 		.ascii	"queueUNLOCKED ( ( signed portBASE_TYPE ) -1 )\000"
 3300      65554E4C 
 3300      4F434B45 
 3300      44202820 
 3300      28207369 
 3301 9a51 01       		.byte	0x1
 3302 9a52 4A       		.uleb128 0x4a
 3303 9a53 71756575 		.ascii	"queueLOCKED_UNMODIFIED ( ( signed portBASE_TYPE ) 0"
 3303      654C4F43 
 3303      4B45445F 
ARM GAS  /tmp/cch3WSAd.s 			page 134


 3303      554E4D4F 
 3303      44494649 
 3304 9a86 202900   		.ascii	" )\000"
 3305 9a89 01       		.byte	0x1
 3306 9a8a 4C       		.uleb128 0x4c
 3307 9a8b 71756575 		.ascii	"queueERRONEOUS_UNBLOCK ( -1 )\000"
 3307      65455252 
 3307      4F4E454F 
 3307      55535F55 
 3307      4E424C4F 
 3308 9aa9 01       		.byte	0x1
 3309 9aaa 4F       		.uleb128 0x4f
 3310 9aab 71756575 		.ascii	"queueSEND_TO_BACK ( 0 )\000"
 3310      6553454E 
 3310      445F544F 
 3310      5F424143 
 3310      4B202820 
 3311 9ac3 01       		.byte	0x1
 3312 9ac4 50       		.uleb128 0x50
 3313 9ac5 71756575 		.ascii	"queueSEND_TO_FRONT ( 1 )\000"
 3313      6553454E 
 3313      445F544F 
 3313      5F46524F 
 3313      4E542028 
 3314 9ade 01       		.byte	0x1
 3315 9adf 53       		.uleb128 0x53
 3316 9ae0 70784D75 		.ascii	"pxMutexHolder pcTail\000"
 3316      74657848 
 3316      6F6C6465 
 3316      72207063 
 3316      5461696C 
 3317 9af5 01       		.byte	0x1
 3318 9af6 54       		.uleb128 0x54
 3319 9af7 75785175 		.ascii	"uxQueueType pcHead\000"
 3319      65756554 
 3319      79706520 
 3319      70634865 
 3319      616400
 3320 9b0a 01       		.byte	0x1
 3321 9b0b 55       		.uleb128 0x55
 3322 9b0c 75785265 		.ascii	"uxRecursiveCallCount pcReadFrom\000"
 3322      63757273 
 3322      69766543 
 3322      616C6C43 
 3322      6F756E74 
 3323 9b2c 01       		.byte	0x1
 3324 9b2d 56       		.uleb128 0x56
 3325 9b2e 71756575 		.ascii	"queueQUEUE_IS_MUTEX NULL\000"
 3325      65515545 
 3325      55455F49 
 3325      535F4D55 
 3325      54455820 
 3326 9b47 01       		.byte	0x1
 3327 9b48 5A       		.uleb128 0x5a
 3328 9b49 71756575 		.ascii	"queueSEMAPHORE_QUEUE_ITEM_LENGTH ( 0 )\000"
 3328      6553454D 
 3328      4150484F 
ARM GAS  /tmp/cch3WSAd.s 			page 135


 3328      52455F51 
 3328      55455545 
 3329 9b70 01       		.byte	0x1
 3330 9b71 5B       		.uleb128 0x5b
 3331 9b72 71756575 		.ascii	"queueDONT_BLOCK ( ( portTickType ) 0 )\000"
 3331      65444F4E 
 3331      545F424C 
 3331      4F434B20 
 3331      28202820 
 3332 9b99 01       		.byte	0x1
 3333 9b9a 5C       		.uleb128 0x5c
 3334 9b9b 71756575 		.ascii	"queueMUTEX_GIVE_BLOCK_TIME ( ( portTickType ) 0 )\000"
 3334      654D5554 
 3334      45585F47 
 3334      4956455F 
 3334      424C4F43 
 3335 9bcd 01       		.byte	0x1
 3336 9bce E101     		.uleb128 0xe1
 3337 9bd0 7072764C 		.ascii	"prvLockQueue(pxQueue) { taskENTER_CRITICAL(); { if("
 3337      6F636B51 
 3337      75657565 
 3337      28707851 
 3337      75657565 
 3338 9c03 20707851 		.ascii	" pxQueue->xRxLock == queueUNLOCKED ) { pxQueue->xRx"
 3338      75657565 
 3338      2D3E7852 
 3338      784C6F63 
 3338      6B203D3D 
 3339 9c36 4C6F636B 		.ascii	"Lock = queueLOCKED_UNMODIFIED; } if( pxQueue->xTxLo"
 3339      203D2071 
 3339      75657565 
 3339      4C4F434B 
 3339      45445F55 
 3340 9c69 636B203D 		.ascii	"ck == queueUNLOCKED ) { pxQueue->xTxLock = queueLOC"
 3340      3D207175 
 3340      65756555 
 3340      4E4C4F43 
 3340      4B454420 
 3341 9c9c 4B45445F 		.ascii	"KED_UNMODIFIED; } } taskEXIT_CRITICAL(); }\000"
 3341      554E4D4F 
 3341      44494649 
 3341      45443B20 
 3341      7D207D20 
 3342 9cc7 04       		.byte	0x4
 3343              		.comm	xQueueRegistry,80,4
 3344              		.section	.text.xQueueCreate,"ax",%progbits
 3345              		.align	2
 3346              		.global	xQueueCreate
 3347              		.thumb
 3348              		.thumb_func
 3349              		.type	xQueueCreate, %function
 3350              	xQueueCreate:
 3351              	.LFB29:
   1:FreeRTOS/queue.c **** /*
   2:FreeRTOS/queue.c ****     FreeRTOS V6.0.1 - Copyright (C) 2009 Real Time Engineers Ltd.
   3:FreeRTOS/queue.c **** 
   4:FreeRTOS/queue.c ****     ***************************************************************************
ARM GAS  /tmp/cch3WSAd.s 			page 136


   5:FreeRTOS/queue.c ****     *                                                                         *
   6:FreeRTOS/queue.c ****     * If you are:                                                             *
   7:FreeRTOS/queue.c ****     *                                                                         *
   8:FreeRTOS/queue.c ****     *    + New to FreeRTOS,                                                   *
   9:FreeRTOS/queue.c ****     *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
  10:FreeRTOS/queue.c ****     *    + Looking for basic training,                                        *
  11:FreeRTOS/queue.c ****     *    + Wanting to improve your FreeRTOS skills and productivity           *
  12:FreeRTOS/queue.c ****     *                                                                         *
  13:FreeRTOS/queue.c ****     * then take a look at the FreeRTOS eBook                                  *
  14:FreeRTOS/queue.c ****     *                                                                         *
  15:FreeRTOS/queue.c ****     *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
  16:FreeRTOS/queue.c ****     *                  http://www.FreeRTOS.org/Documentation                  *
  17:FreeRTOS/queue.c ****     *                                                                         *
  18:FreeRTOS/queue.c ****     * A pdf reference manual is also available.  Both are usually delivered   *
  19:FreeRTOS/queue.c ****     * to your inbox within 20 minutes to two hours when purchased between 8am *
  20:FreeRTOS/queue.c ****     * and 8pm GMT (although please allow up to 24 hours in case of            *
  21:FreeRTOS/queue.c ****     * exceptional circumstances).  Thank you for your support!                *
  22:FreeRTOS/queue.c ****     *                                                                         *
  23:FreeRTOS/queue.c ****     ***************************************************************************
  24:FreeRTOS/queue.c **** 
  25:FreeRTOS/queue.c ****     This file is part of the FreeRTOS distribution.
  26:FreeRTOS/queue.c **** 
  27:FreeRTOS/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:FreeRTOS/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:FreeRTOS/queue.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:FreeRTOS/queue.c ****     ***NOTE*** The exception to the GPL is included to allow you to distribute
  31:FreeRTOS/queue.c ****     a combined work that includes FreeRTOS without being obliged to provide the
  32:FreeRTOS/queue.c ****     source code for proprietary components outside of the FreeRTOS kernel.
  33:FreeRTOS/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
  34:FreeRTOS/queue.c ****     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  35:FreeRTOS/queue.c ****     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:FreeRTOS/queue.c ****     more details. You should have received a copy of the GNU General Public 
  37:FreeRTOS/queue.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it 
  38:FreeRTOS/queue.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained 
  39:FreeRTOS/queue.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:FreeRTOS/queue.c ****     FreeRTOS WEB site.
  41:FreeRTOS/queue.c **** 
  42:FreeRTOS/queue.c ****     1 tab == 4 spaces!
  43:FreeRTOS/queue.c **** 
  44:FreeRTOS/queue.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:FreeRTOS/queue.c ****     contact details.
  46:FreeRTOS/queue.c **** 
  47:FreeRTOS/queue.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:FreeRTOS/queue.c ****     critical systems.
  49:FreeRTOS/queue.c **** 
  50:FreeRTOS/queue.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:FreeRTOS/queue.c ****     licensing and training services.
  52:FreeRTOS/queue.c **** */
  53:FreeRTOS/queue.c **** 
  54:FreeRTOS/queue.c **** #include <stdlib.h>
  55:FreeRTOS/queue.c **** #include <string.h>
  56:FreeRTOS/queue.c **** 
  57:FreeRTOS/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  58:FreeRTOS/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  59:FreeRTOS/queue.c **** task.h is included from an application file. */
  60:FreeRTOS/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  61:FreeRTOS/queue.c **** 
ARM GAS  /tmp/cch3WSAd.s 			page 137


  62:FreeRTOS/queue.c **** #include "FreeRTOS.h"
  63:FreeRTOS/queue.c **** #include "task.h"
  64:FreeRTOS/queue.c **** #include "croutine.h"
  65:FreeRTOS/queue.c **** 
  66:FreeRTOS/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  67:FreeRTOS/queue.c **** 
  68:FreeRTOS/queue.c **** /*-----------------------------------------------------------
  69:FreeRTOS/queue.c ****  * PUBLIC LIST API documented in list.h
  70:FreeRTOS/queue.c ****  *----------------------------------------------------------*/
  71:FreeRTOS/queue.c **** 
  72:FreeRTOS/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  73:FreeRTOS/queue.c **** #define queueUNLOCKED					( ( signed portBASE_TYPE ) -1 )
  74:FreeRTOS/queue.c **** #define queueLOCKED_UNMODIFIED			( ( signed portBASE_TYPE ) 0 )
  75:FreeRTOS/queue.c **** 
  76:FreeRTOS/queue.c **** #define queueERRONEOUS_UNBLOCK			( -1 )
  77:FreeRTOS/queue.c **** 
  78:FreeRTOS/queue.c **** /* For internal use only. */
  79:FreeRTOS/queue.c **** #define	queueSEND_TO_BACK				( 0 )
  80:FreeRTOS/queue.c **** #define	queueSEND_TO_FRONT				( 1 )
  81:FreeRTOS/queue.c **** 
  82:FreeRTOS/queue.c **** /* Effectively make a union out of the xQUEUE structure. */
  83:FreeRTOS/queue.c **** #define pxMutexHolder					pcTail
  84:FreeRTOS/queue.c **** #define uxQueueType						pcHead
  85:FreeRTOS/queue.c **** #define uxRecursiveCallCount			pcReadFrom
  86:FreeRTOS/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  87:FreeRTOS/queue.c **** 
  88:FreeRTOS/queue.c **** /* Semaphores do not actually store or copy data, so have an items size of
  89:FreeRTOS/queue.c **** zero. */
  90:FreeRTOS/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( 0 )
  91:FreeRTOS/queue.c **** #define queueDONT_BLOCK					 ( ( portTickType ) 0 )
  92:FreeRTOS/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( portTickType ) 0 )
  93:FreeRTOS/queue.c **** 
  94:FreeRTOS/queue.c **** /*
  95:FreeRTOS/queue.c ****  * Definition of the queue used by the scheduler.
  96:FreeRTOS/queue.c ****  * Items are queued by copy, not reference.
  97:FreeRTOS/queue.c ****  */
  98:FreeRTOS/queue.c **** typedef struct QueueDefinition
  99:FreeRTOS/queue.c **** {
 100:FreeRTOS/queue.c **** 	signed char *pcHead;				/*< Points to the beginning of the queue storage area. */
 101:FreeRTOS/queue.c **** 	signed char *pcTail;				/*< Points to the byte at the end of the queue storage area.  Once more by
 102:FreeRTOS/queue.c **** 
 103:FreeRTOS/queue.c **** 	signed char *pcWriteTo;				/*< Points to the free next place in the storage area. */
 104:FreeRTOS/queue.c **** 	signed char *pcReadFrom;			/*< Points to the last place that a queued item was read from. */
 105:FreeRTOS/queue.c **** 
 106:FreeRTOS/queue.c **** 	xList xTasksWaitingToSend;				/*< List of tasks that are blocked waiting to post onto this queue. 
 107:FreeRTOS/queue.c **** 	xList xTasksWaitingToReceive;			/*< List of tasks that are blocked waiting to read from this queue
 108:FreeRTOS/queue.c **** 
 109:FreeRTOS/queue.c **** 	volatile unsigned portBASE_TYPE uxMessagesWaiting;/*< The number of items currently in the queue. 
 110:FreeRTOS/queue.c **** 	unsigned portBASE_TYPE uxLength;		/*< The length of the queue defined as the number of items it wi
 111:FreeRTOS/queue.c **** 	unsigned portBASE_TYPE uxItemSize;		/*< The size of each items that the queue will hold. */
 112:FreeRTOS/queue.c **** 
 113:FreeRTOS/queue.c **** 	signed portBASE_TYPE xRxLock;			/*< Stores the number of items received from the queue (removed fr
 114:FreeRTOS/queue.c **** 	signed portBASE_TYPE xTxLock;			/*< Stores the number of items transmitted to the queue (added to 
 115:FreeRTOS/queue.c **** 
 116:FreeRTOS/queue.c **** } xQUEUE;
 117:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 118:FreeRTOS/queue.c **** 
ARM GAS  /tmp/cch3WSAd.s 			page 138


 119:FreeRTOS/queue.c **** /*
 120:FreeRTOS/queue.c ****  * Inside this file xQueueHandle is a pointer to a xQUEUE structure.
 121:FreeRTOS/queue.c ****  * To keep the definition private the API header file defines it as a
 122:FreeRTOS/queue.c ****  * pointer to void.
 123:FreeRTOS/queue.c ****  */
 124:FreeRTOS/queue.c **** typedef xQUEUE * xQueueHandle;
 125:FreeRTOS/queue.c **** 
 126:FreeRTOS/queue.c **** /*
 127:FreeRTOS/queue.c ****  * Prototypes for public functions are included here so we don't have to
 128:FreeRTOS/queue.c ****  * include the API header file (as it defines xQueueHandle differently).  These
 129:FreeRTOS/queue.c ****  * functions are documented in the API header file.
 130:FreeRTOS/queue.c ****  */
 131:FreeRTOS/queue.c **** xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize 
 132:FreeRTOS/queue.c **** signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, port
 133:FreeRTOS/queue.c **** unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 134:FreeRTOS/queue.c **** void vQueueDelete( xQueueHandle xQueue ) PRIVILEGED_FUNCTION;
 135:FreeRTOS/queue.c **** signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQue
 136:FreeRTOS/queue.c **** signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickTyp
 137:FreeRTOS/queue.c **** signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed port
 138:FreeRTOS/queue.c **** xQueueHandle xQueueCreateMutex( void ) PRIVILEGED_FUNCTION;
 139:FreeRTOS/queue.c **** xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_
 140:FreeRTOS/queue.c **** portBASE_TYPE xQueueTakeMutexRecursive( xQueueHandle xMutex, portTickType xBlockTime ) PRIVILEGED_F
 141:FreeRTOS/queue.c **** portBASE_TYPE xQueueGiveMutexRecursive( xQueueHandle xMutex ) PRIVILEGED_FUNCTION;
 142:FreeRTOS/queue.c **** signed portBASE_TYPE xQueueAltGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, 
 143:FreeRTOS/queue.c **** signed portBASE_TYPE xQueueAltGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTick
 144:FreeRTOS/queue.c **** signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 145:FreeRTOS/queue.c **** signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 146:FreeRTOS/queue.c **** unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue ) PRIVILEGED_FUNCT
 147:FreeRTOS/queue.c **** 
 148:FreeRTOS/queue.c **** /*
 149:FreeRTOS/queue.c ****  * Co-routine queue functions differ from task queue functions.  Co-routines are
 150:FreeRTOS/queue.c ****  * an optional component.
 151:FreeRTOS/queue.c ****  */
 152:FreeRTOS/queue.c **** #if configUSE_CO_ROUTINES == 1
 153:FreeRTOS/queue.c **** 	signed portBASE_TYPE xQueueCRSendFromISR( xQueueHandle pxQueue, const void *pvItemToQueue, signed 
 154:FreeRTOS/queue.c **** 	signed portBASE_TYPE xQueueCRReceiveFromISR( xQueueHandle pxQueue, void *pvBuffer, signed portBASE
 155:FreeRTOS/queue.c **** 	signed portBASE_TYPE xQueueCRSend( xQueueHandle pxQueue, const void *pvItemToQueue, portTickType x
 156:FreeRTOS/queue.c **** 	signed portBASE_TYPE xQueueCRReceive( xQueueHandle pxQueue, void *pvBuffer, portTickType xTicksToW
 157:FreeRTOS/queue.c **** #endif
 158:FreeRTOS/queue.c **** 
 159:FreeRTOS/queue.c **** /*
 160:FreeRTOS/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 161:FreeRTOS/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 162:FreeRTOS/queue.c ****  */
 163:FreeRTOS/queue.c **** #if configQUEUE_REGISTRY_SIZE > 0
 164:FreeRTOS/queue.c **** 
 165:FreeRTOS/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 166:FreeRTOS/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 167:FreeRTOS/queue.c **** 	more user friendly. */
 168:FreeRTOS/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 169:FreeRTOS/queue.c **** 	{
 170:FreeRTOS/queue.c **** 		signed char *pcQueueName;
 171:FreeRTOS/queue.c **** 		xQueueHandle xHandle;
 172:FreeRTOS/queue.c **** 	} xQueueRegistryItem;
 173:FreeRTOS/queue.c **** 
 174:FreeRTOS/queue.c **** 	/* The queue registry is simply an array of xQueueRegistryItem structures.
 175:FreeRTOS/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
ARM GAS  /tmp/cch3WSAd.s 			page 139


 176:FreeRTOS/queue.c **** 	array position being vacant. */
 177:FreeRTOS/queue.c **** 	xQueueRegistryItem xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 178:FreeRTOS/queue.c **** 
 179:FreeRTOS/queue.c **** 	/* Removes a queue from the registry by simply setting the pcQueueName
 180:FreeRTOS/queue.c **** 	member to NULL. */
 181:FreeRTOS/queue.c **** 	static void vQueueUnregisterQueue( xQueueHandle xQueue ) PRIVILEGED_FUNCTION;
 182:FreeRTOS/queue.c **** 	void vQueueAddToRegistry( xQueueHandle xQueue, signed char *pcQueueName ) PRIVILEGED_FUNCTION;
 183:FreeRTOS/queue.c **** #endif
 184:FreeRTOS/queue.c **** 
 185:FreeRTOS/queue.c **** /*
 186:FreeRTOS/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 187:FreeRTOS/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 188:FreeRTOS/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 189:FreeRTOS/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 190:FreeRTOS/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 191:FreeRTOS/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 192:FreeRTOS/queue.c ****  */
 193:FreeRTOS/queue.c **** static void prvUnlockQueue( xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 194:FreeRTOS/queue.c **** 
 195:FreeRTOS/queue.c **** /*
 196:FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 197:FreeRTOS/queue.c ****  *
 198:FreeRTOS/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 199:FreeRTOS/queue.c ****  */
 200:FreeRTOS/queue.c **** static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 201:FreeRTOS/queue.c **** 
 202:FreeRTOS/queue.c **** /*
 203:FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 204:FreeRTOS/queue.c ****  *
 205:FreeRTOS/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 206:FreeRTOS/queue.c ****  */
 207:FreeRTOS/queue.c **** static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 208:FreeRTOS/queue.c **** 
 209:FreeRTOS/queue.c **** /*
 210:FreeRTOS/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 211:FreeRTOS/queue.c ****  * back of the queue.
 212:FreeRTOS/queue.c ****  */
 213:FreeRTOS/queue.c **** static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition
 214:FreeRTOS/queue.c **** 
 215:FreeRTOS/queue.c **** /*
 216:FreeRTOS/queue.c ****  * Copies an item out of a queue.
 217:FreeRTOS/queue.c ****  */
 218:FreeRTOS/queue.c **** static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer ) PRIVILEGED_FUNCTIO
 219:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 220:FreeRTOS/queue.c **** 
 221:FreeRTOS/queue.c **** /*
 222:FreeRTOS/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 223:FreeRTOS/queue.c ****  * accessing the queue event lists.
 224:FreeRTOS/queue.c ****  */
 225:FreeRTOS/queue.c **** #define prvLockQueue( pxQueue )							\
 226:FreeRTOS/queue.c **** {														\
 227:FreeRTOS/queue.c **** 	taskENTER_CRITICAL();								\
 228:FreeRTOS/queue.c **** 	{													\
 229:FreeRTOS/queue.c **** 		if( pxQueue->xRxLock == queueUNLOCKED )			\
 230:FreeRTOS/queue.c **** 		{												\
 231:FreeRTOS/queue.c **** 			pxQueue->xRxLock = queueLOCKED_UNMODIFIED;	\
 232:FreeRTOS/queue.c **** 		}												\
ARM GAS  /tmp/cch3WSAd.s 			page 140


 233:FreeRTOS/queue.c **** 		if( pxQueue->xTxLock == queueUNLOCKED )			\
 234:FreeRTOS/queue.c **** 		{												\
 235:FreeRTOS/queue.c **** 			pxQueue->xTxLock = queueLOCKED_UNMODIFIED;	\
 236:FreeRTOS/queue.c **** 		}												\
 237:FreeRTOS/queue.c **** 	}													\
 238:FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();								\
 239:FreeRTOS/queue.c **** }
 240:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 241:FreeRTOS/queue.c **** 
 242:FreeRTOS/queue.c **** 
 243:FreeRTOS/queue.c **** /*-----------------------------------------------------------
 244:FreeRTOS/queue.c ****  * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 245:FreeRTOS/queue.c ****  *----------------------------------------------------------*/
 246:FreeRTOS/queue.c **** 
 247:FreeRTOS/queue.c **** xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize 
 248:FreeRTOS/queue.c **** {
 3352              		.loc 1 248 0
 3353              		@ args = 0, pretend = 0, frame = 16
 3354              		@ frame_needed = 1, uses_anonymous_args = 0
 3355 0000 80B5     		push	{r7, lr}
 3356              	.LCFI0:
 3357 0002 84B0     		sub	sp, sp, #16
 3358              	.LCFI1:
 3359 0004 00AF     		add	r7, sp, #0
 3360              	.LCFI2:
 3361 0006 7860     		str	r0, [r7, #4]
 3362 0008 3960     		str	r1, [r7, #0]
 249:FreeRTOS/queue.c **** xQUEUE *pxNewQueue;
 250:FreeRTOS/queue.c **** size_t xQueueSizeInBytes;
 251:FreeRTOS/queue.c **** 
 252:FreeRTOS/queue.c **** 	/* Allocate the new queue structure. */
 253:FreeRTOS/queue.c **** 	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 3363              		.loc 1 253 0
 3364 000a 7B68     		ldr	r3, [r7, #4]
 3365 000c 002B     		cmp	r3, #0
 3366 000e 55D0     		beq	.L2
 254:FreeRTOS/queue.c **** 	{
 255:FreeRTOS/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 3367              		.loc 1 255 0
 3368 0010 4FF04C00 		mov	r0, #76
 3369 0014 FFF7FEFF 		bl	pvPortMalloc
 3370 0018 0346     		mov	r3, r0
 3371 001a BB60     		str	r3, [r7, #8]
 256:FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 3372              		.loc 1 256 0
 3373 001c BB68     		ldr	r3, [r7, #8]
 3374 001e 002B     		cmp	r3, #0
 3375 0020 4CD0     		beq	.L2
 257:FreeRTOS/queue.c **** 		{
 258:FreeRTOS/queue.c **** 			/* Create the list of pointers to queue items.  The queue is one byte
 259:FreeRTOS/queue.c **** 			longer than asked for to make wrap checking easier/faster. */
 260:FreeRTOS/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 3376              		.loc 1 260 0
 3377 0022 7B68     		ldr	r3, [r7, #4]
 3378 0024 3A68     		ldr	r2, [r7, #0]
 3379 0026 02FB03F3 		mul	r3, r2, r3
 3380 002a 03F10103 		add	r3, r3, #1
ARM GAS  /tmp/cch3WSAd.s 			page 141


 3381 002e FB60     		str	r3, [r7, #12]
 261:FreeRTOS/queue.c **** 
 262:FreeRTOS/queue.c **** 			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 3382              		.loc 1 262 0
 3383 0030 F868     		ldr	r0, [r7, #12]
 3384 0032 FFF7FEFF 		bl	pvPortMalloc
 3385 0036 0346     		mov	r3, r0
 3386 0038 1A46     		mov	r2, r3
 3387 003a BB68     		ldr	r3, [r7, #8]
 3388 003c 1A60     		str	r2, [r3, #0]
 263:FreeRTOS/queue.c **** 			if( pxNewQueue->pcHead != NULL )
 3389              		.loc 1 263 0
 3390 003e BB68     		ldr	r3, [r7, #8]
 3391 0040 1B68     		ldr	r3, [r3, #0]
 3392 0042 002B     		cmp	r3, #0
 3393 0044 37D0     		beq	.L3
 264:FreeRTOS/queue.c **** 			{
 265:FreeRTOS/queue.c **** 				/* Initialise the queue members as described above where the
 266:FreeRTOS/queue.c **** 				queue type is defined. */
 267:FreeRTOS/queue.c **** 				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
 3394              		.loc 1 267 0
 3395 0046 BB68     		ldr	r3, [r7, #8]
 3396 0048 1A68     		ldr	r2, [r3, #0]
 3397 004a 7B68     		ldr	r3, [r7, #4]
 3398 004c 3968     		ldr	r1, [r7, #0]
 3399 004e 01FB03F3 		mul	r3, r1, r3
 3400 0052 1A44     		add	r2, r2, r3
 3401 0054 BB68     		ldr	r3, [r7, #8]
 3402 0056 5A60     		str	r2, [r3, #4]
 268:FreeRTOS/queue.c **** 				pxNewQueue->uxMessagesWaiting = 0;
 3403              		.loc 1 268 0
 3404 0058 BB68     		ldr	r3, [r7, #8]
 3405 005a 4FF00002 		mov	r2, #0
 3406 005e 9A63     		str	r2, [r3, #56]
 269:FreeRTOS/queue.c **** 				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
 3407              		.loc 1 269 0
 3408 0060 BB68     		ldr	r3, [r7, #8]
 3409 0062 1A68     		ldr	r2, [r3, #0]
 3410 0064 BB68     		ldr	r3, [r7, #8]
 3411 0066 9A60     		str	r2, [r3, #8]
 270:FreeRTOS/queue.c **** 				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
 3412              		.loc 1 270 0
 3413 0068 BB68     		ldr	r3, [r7, #8]
 3414 006a 1A68     		ldr	r2, [r3, #0]
 3415 006c 7B68     		ldr	r3, [r7, #4]
 3416 006e 03F1FF33 		add	r3, r3, #-1
 3417 0072 3968     		ldr	r1, [r7, #0]
 3418 0074 01FB03F3 		mul	r3, r1, r3
 3419 0078 1A44     		add	r2, r2, r3
 3420 007a BB68     		ldr	r3, [r7, #8]
 3421 007c DA60     		str	r2, [r3, #12]
 271:FreeRTOS/queue.c **** 				pxNewQueue->uxLength = uxQueueLength;
 3422              		.loc 1 271 0
 3423 007e BB68     		ldr	r3, [r7, #8]
 3424 0080 7A68     		ldr	r2, [r7, #4]
 3425 0082 DA63     		str	r2, [r3, #60]
 272:FreeRTOS/queue.c **** 				pxNewQueue->uxItemSize = uxItemSize;
ARM GAS  /tmp/cch3WSAd.s 			page 142


 3426              		.loc 1 272 0
 3427 0084 BB68     		ldr	r3, [r7, #8]
 3428 0086 3A68     		ldr	r2, [r7, #0]
 3429 0088 1A64     		str	r2, [r3, #64]
 273:FreeRTOS/queue.c **** 				pxNewQueue->xRxLock = queueUNLOCKED;
 3430              		.loc 1 273 0
 3431 008a BB68     		ldr	r3, [r7, #8]
 3432 008c 4FF0FF32 		mov	r2, #-1
 3433 0090 5A64     		str	r2, [r3, #68]
 274:FreeRTOS/queue.c **** 				pxNewQueue->xTxLock = queueUNLOCKED;
 3434              		.loc 1 274 0
 3435 0092 BB68     		ldr	r3, [r7, #8]
 3436 0094 4FF0FF32 		mov	r2, #-1
 3437 0098 9A64     		str	r2, [r3, #72]
 275:FreeRTOS/queue.c **** 
 276:FreeRTOS/queue.c **** 				/* Likewise ensure the event queues start with the correct state. */
 277:FreeRTOS/queue.c **** 				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 3438              		.loc 1 277 0
 3439 009a BB68     		ldr	r3, [r7, #8]
 3440 009c 03F11003 		add	r3, r3, #16
 3441 00a0 1846     		mov	r0, r3
 3442 00a2 FFF7FEFF 		bl	vListInitialise
 278:FreeRTOS/queue.c **** 				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 3443              		.loc 1 278 0
 3444 00a6 BB68     		ldr	r3, [r7, #8]
 3445 00a8 03F12403 		add	r3, r3, #36
 3446 00ac 1846     		mov	r0, r3
 3447 00ae FFF7FEFF 		bl	vListInitialise
 279:FreeRTOS/queue.c **** 
 280:FreeRTOS/queue.c **** 				traceQUEUE_CREATE( pxNewQueue );
 281:FreeRTOS/queue.c **** 				return  pxNewQueue;
 3448              		.loc 1 281 0
 3449 00b2 BB68     		ldr	r3, [r7, #8]
 3450 00b4 04E0     		b	.L4
 3451              	.L3:
 282:FreeRTOS/queue.c **** 			}
 283:FreeRTOS/queue.c **** 			else
 284:FreeRTOS/queue.c **** 			{
 285:FreeRTOS/queue.c **** 				traceQUEUE_CREATE_FAILED();
 286:FreeRTOS/queue.c **** 				vPortFree( pxNewQueue );
 3452              		.loc 1 286 0
 3453 00b6 B868     		ldr	r0, [r7, #8]
 3454 00b8 FFF7FEFF 		bl	vPortFree
 3455              	.L2:
 287:FreeRTOS/queue.c **** 			}
 288:FreeRTOS/queue.c **** 		}
 289:FreeRTOS/queue.c **** 	}
 290:FreeRTOS/queue.c **** 
 291:FreeRTOS/queue.c **** 	/* Will only reach here if we could not allocate enough memory or no memory
 292:FreeRTOS/queue.c **** 	was required. */
 293:FreeRTOS/queue.c **** 	return NULL;
 3456              		.loc 1 293 0
 3457 00bc 4FF00003 		mov	r3, #0
 3458              	.L4:
 294:FreeRTOS/queue.c **** }
 3459              		.loc 1 294 0
 3460 00c0 1846     		mov	r0, r3
ARM GAS  /tmp/cch3WSAd.s 			page 143


 3461 00c2 07F11007 		add	r7, r7, #16
 3462 00c6 BD46     		mov	sp, r7
 3463 00c8 80BD     		pop	{r7, pc}
 3464              	.LFE29:
 3465              		.size	xQueueCreate, .-xQueueCreate
 3466 00ca 00BF     		.section	.text.xQueueGenericSend,"ax",%progbits
 3467              		.align	2
 3468              		.global	xQueueGenericSend
 3469              		.thumb
 3470              		.thumb_func
 3471              		.type	xQueueGenericSend, %function
 3472              	xQueueGenericSend:
 3473              	.LFB30:
 295:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 296:FreeRTOS/queue.c **** 
 297:FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 298:FreeRTOS/queue.c **** 
 299:FreeRTOS/queue.c **** 	xQueueHandle xQueueCreateMutex( void )
 300:FreeRTOS/queue.c **** 	{
 301:FreeRTOS/queue.c **** 	xQUEUE *pxNewQueue;
 302:FreeRTOS/queue.c **** 
 303:FreeRTOS/queue.c **** 		/* Allocate the new queue structure. */
 304:FreeRTOS/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 305:FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 306:FreeRTOS/queue.c **** 		{
 307:FreeRTOS/queue.c **** 			/* Information required for priority inheritance. */
 308:FreeRTOS/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 309:FreeRTOS/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 310:FreeRTOS/queue.c **** 
 311:FreeRTOS/queue.c **** 			/* Queues used as a mutex no data is actually copied into or out
 312:FreeRTOS/queue.c **** 			of the queue. */
 313:FreeRTOS/queue.c **** 			pxNewQueue->pcWriteTo = NULL;
 314:FreeRTOS/queue.c **** 			pxNewQueue->pcReadFrom = NULL;
 315:FreeRTOS/queue.c **** 
 316:FreeRTOS/queue.c **** 			/* Each mutex has a length of 1 (like a binary semaphore) and
 317:FreeRTOS/queue.c **** 			an item size of 0 as nothing is actually copied into or out
 318:FreeRTOS/queue.c **** 			of the mutex. */
 319:FreeRTOS/queue.c **** 			pxNewQueue->uxMessagesWaiting = 0;
 320:FreeRTOS/queue.c **** 			pxNewQueue->uxLength = 1;
 321:FreeRTOS/queue.c **** 			pxNewQueue->uxItemSize = 0;
 322:FreeRTOS/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 323:FreeRTOS/queue.c **** 			pxNewQueue->xTxLock = queueUNLOCKED;
 324:FreeRTOS/queue.c **** 
 325:FreeRTOS/queue.c **** 			/* Ensure the event queues start with the correct state. */
 326:FreeRTOS/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 327:FreeRTOS/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 328:FreeRTOS/queue.c **** 
 329:FreeRTOS/queue.c **** 			/* Start with the semaphore in the expected state. */
 330:FreeRTOS/queue.c **** 			xQueueGenericSend( pxNewQueue, NULL, 0, queueSEND_TO_BACK );
 331:FreeRTOS/queue.c **** 
 332:FreeRTOS/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 333:FreeRTOS/queue.c **** 		}
 334:FreeRTOS/queue.c **** 		else
 335:FreeRTOS/queue.c **** 		{
 336:FreeRTOS/queue.c **** 			traceCREATE_MUTEX_FAILED();
 337:FreeRTOS/queue.c **** 		}
 338:FreeRTOS/queue.c **** 
ARM GAS  /tmp/cch3WSAd.s 			page 144


 339:FreeRTOS/queue.c **** 		return pxNewQueue;
 340:FreeRTOS/queue.c **** 	}
 341:FreeRTOS/queue.c **** 
 342:FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 343:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 344:FreeRTOS/queue.c **** 
 345:FreeRTOS/queue.c **** #if configUSE_RECURSIVE_MUTEXES == 1
 346:FreeRTOS/queue.c **** 
 347:FreeRTOS/queue.c **** 	portBASE_TYPE xQueueGiveMutexRecursive( xQueueHandle pxMutex )
 348:FreeRTOS/queue.c **** 	{
 349:FreeRTOS/queue.c **** 	portBASE_TYPE xReturn;
 350:FreeRTOS/queue.c **** 
 351:FreeRTOS/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 352:FreeRTOS/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 353:FreeRTOS/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 354:FreeRTOS/queue.c **** 		this is the only condition we are interested in it does not matter if
 355:FreeRTOS/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 356:FreeRTOS/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 357:FreeRTOS/queue.c **** 		if( pxMutex->pxMutexHolder == xTaskGetCurrentTaskHandle() )
 358:FreeRTOS/queue.c **** 		{
 359:FreeRTOS/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 360:FreeRTOS/queue.c **** 
 361:FreeRTOS/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 362:FreeRTOS/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 363:FreeRTOS/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 364:FreeRTOS/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 365:FreeRTOS/queue.c **** 			uxRecursiveCallCount member. */
 366:FreeRTOS/queue.c **** 			( pxMutex->uxRecursiveCallCount )--;
 367:FreeRTOS/queue.c **** 
 368:FreeRTOS/queue.c **** 			/* Have we unwound the call count? */
 369:FreeRTOS/queue.c **** 			if( pxMutex->uxRecursiveCallCount == 0 )
 370:FreeRTOS/queue.c **** 			{
 371:FreeRTOS/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 372:FreeRTOS/queue.c **** 				task that might be waiting to access the mutex. */
 373:FreeRTOS/queue.c **** 				xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 374:FreeRTOS/queue.c **** 			}
 375:FreeRTOS/queue.c **** 
 376:FreeRTOS/queue.c **** 			xReturn = pdPASS;
 377:FreeRTOS/queue.c **** 		}
 378:FreeRTOS/queue.c **** 		else
 379:FreeRTOS/queue.c **** 		{
 380:FreeRTOS/queue.c **** 			/* We cannot give the mutex because we are not the holder. */
 381:FreeRTOS/queue.c **** 			xReturn = pdFAIL;
 382:FreeRTOS/queue.c **** 
 383:FreeRTOS/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 384:FreeRTOS/queue.c **** 		}
 385:FreeRTOS/queue.c **** 
 386:FreeRTOS/queue.c **** 		return xReturn;
 387:FreeRTOS/queue.c **** 	}
 388:FreeRTOS/queue.c **** 
 389:FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 390:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 391:FreeRTOS/queue.c **** 
 392:FreeRTOS/queue.c **** #if configUSE_RECURSIVE_MUTEXES == 1
 393:FreeRTOS/queue.c **** 
 394:FreeRTOS/queue.c **** 	portBASE_TYPE xQueueTakeMutexRecursive( xQueueHandle pxMutex, portTickType xBlockTime )
 395:FreeRTOS/queue.c **** 	{
ARM GAS  /tmp/cch3WSAd.s 			page 145


 396:FreeRTOS/queue.c **** 	portBASE_TYPE xReturn;
 397:FreeRTOS/queue.c **** 
 398:FreeRTOS/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 399:FreeRTOS/queue.c **** 		xQueueGiveMutexRecursive(). */
 400:FreeRTOS/queue.c **** 
 401:FreeRTOS/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 402:FreeRTOS/queue.c **** 
 403:FreeRTOS/queue.c **** 		if( pxMutex->pxMutexHolder == xTaskGetCurrentTaskHandle() )
 404:FreeRTOS/queue.c **** 		{
 405:FreeRTOS/queue.c **** 			( pxMutex->uxRecursiveCallCount )++;
 406:FreeRTOS/queue.c **** 			xReturn = pdPASS;
 407:FreeRTOS/queue.c **** 		}
 408:FreeRTOS/queue.c **** 		else
 409:FreeRTOS/queue.c **** 		{
 410:FreeRTOS/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xBlockTime, pdFALSE );
 411:FreeRTOS/queue.c **** 
 412:FreeRTOS/queue.c **** 			/* pdPASS will only be returned if we successfully obtained the mutex,
 413:FreeRTOS/queue.c **** 			we may have blocked to reach here. */
 414:FreeRTOS/queue.c **** 			if( xReturn == pdPASS )
 415:FreeRTOS/queue.c **** 			{
 416:FreeRTOS/queue.c **** 				( pxMutex->uxRecursiveCallCount )++;
 417:FreeRTOS/queue.c **** 			}
 418:FreeRTOS/queue.c **** 		}
 419:FreeRTOS/queue.c **** 
 420:FreeRTOS/queue.c **** 		return xReturn;
 421:FreeRTOS/queue.c **** 	}
 422:FreeRTOS/queue.c **** 
 423:FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 424:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 425:FreeRTOS/queue.c **** 
 426:FreeRTOS/queue.c **** #if configUSE_COUNTING_SEMAPHORES == 1
 427:FreeRTOS/queue.c **** 
 428:FreeRTOS/queue.c **** 	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE
 429:FreeRTOS/queue.c **** 	{
 430:FreeRTOS/queue.c **** 	xQueueHandle pxHandle;
 431:FreeRTOS/queue.c **** 
 432:FreeRTOS/queue.c **** 		pxHandle = xQueueCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGT
 433:FreeRTOS/queue.c **** 
 434:FreeRTOS/queue.c **** 		if( pxHandle != NULL )
 435:FreeRTOS/queue.c **** 		{
 436:FreeRTOS/queue.c **** 			pxHandle->uxMessagesWaiting = uxInitialCount;
 437:FreeRTOS/queue.c **** 
 438:FreeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 439:FreeRTOS/queue.c **** 		}
 440:FreeRTOS/queue.c **** 		else
 441:FreeRTOS/queue.c **** 		{
 442:FreeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 443:FreeRTOS/queue.c **** 		}
 444:FreeRTOS/queue.c **** 
 445:FreeRTOS/queue.c **** 		return pxHandle;
 446:FreeRTOS/queue.c **** 	}
 447:FreeRTOS/queue.c **** 
 448:FreeRTOS/queue.c **** #endif /* configUSE_COUNTING_SEMAPHORES */
 449:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 450:FreeRTOS/queue.c **** 
 451:FreeRTOS/queue.c **** signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, por
 452:FreeRTOS/queue.c **** {
ARM GAS  /tmp/cch3WSAd.s 			page 146


 3474              		.loc 1 452 0
 3475              		@ args = 0, pretend = 0, frame = 32
 3476              		@ frame_needed = 1, uses_anonymous_args = 0
 3477 0000 80B5     		push	{r7, lr}
 3478              	.LCFI3:
 3479 0002 88B0     		sub	sp, sp, #32
 3480              	.LCFI4:
 3481 0004 00AF     		add	r7, sp, #0
 3482              	.LCFI5:
 3483 0006 F860     		str	r0, [r7, #12]
 3484 0008 B960     		str	r1, [r7, #8]
 3485 000a 7A60     		str	r2, [r7, #4]
 3486 000c 3B60     		str	r3, [r7, #0]
 453:FreeRTOS/queue.c **** signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 3487              		.loc 1 453 0
 3488 000e 4FF00003 		mov	r3, #0
 3489 0012 FB61     		str	r3, [r7, #28]
 3490 0014 00E0     		b	.L18
 3491              	.L20:
 454:FreeRTOS/queue.c **** xTimeOutType xTimeOut;
 455:FreeRTOS/queue.c **** 
 456:FreeRTOS/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 457:FreeRTOS/queue.c **** 	statements within the function itself.  This is done in the interest
 458:FreeRTOS/queue.c **** 	of execution time efficiency. */
 459:FreeRTOS/queue.c **** 	for( ;; )
 460:FreeRTOS/queue.c **** 	{
 461:FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
 462:FreeRTOS/queue.c **** 		{
 463:FreeRTOS/queue.c **** 			/* Is there room on the queue now?  To be running we must be
 464:FreeRTOS/queue.c **** 			the highest priority task wanting to access the queue. */
 465:FreeRTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 466:FreeRTOS/queue.c **** 			{
 467:FreeRTOS/queue.c **** 				traceQUEUE_SEND( pxQueue );
 468:FreeRTOS/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 469:FreeRTOS/queue.c **** 
 470:FreeRTOS/queue.c **** 				/* If there was a task waiting for data to arrive on the
 471:FreeRTOS/queue.c **** 				queue then unblock it now. */
 472:FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 473:FreeRTOS/queue.c **** 				{
 474:FreeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 475:FreeRTOS/queue.c **** 					{
 476:FreeRTOS/queue.c **** 						/* The unblocked task has a priority higher than
 477:FreeRTOS/queue.c **** 						our own so yield immediately.  Yes it is ok to do
 478:FreeRTOS/queue.c **** 						this from within the critical section - the kernel
 479:FreeRTOS/queue.c **** 						takes care of that. */
 480:FreeRTOS/queue.c **** 						portYIELD_WITHIN_API();
 481:FreeRTOS/queue.c **** 					}
 482:FreeRTOS/queue.c **** 				}
 483:FreeRTOS/queue.c **** 
 484:FreeRTOS/queue.c **** 				taskEXIT_CRITICAL();
 485:FreeRTOS/queue.c **** 
 486:FreeRTOS/queue.c **** 				/* Return to the original privilege level before exiting the
 487:FreeRTOS/queue.c **** 				function. */
 488:FreeRTOS/queue.c **** 				return pdPASS;
 489:FreeRTOS/queue.c **** 			}
 490:FreeRTOS/queue.c **** 			else
 491:FreeRTOS/queue.c **** 			{
ARM GAS  /tmp/cch3WSAd.s 			page 147


 492:FreeRTOS/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
 493:FreeRTOS/queue.c **** 				{
 494:FreeRTOS/queue.c **** 					/* The queue was full and no block time is specified (or
 495:FreeRTOS/queue.c **** 					the block time has expired) so leave now. */
 496:FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
 497:FreeRTOS/queue.c **** 
 498:FreeRTOS/queue.c **** 					/* Return to the original privilege level before exiting
 499:FreeRTOS/queue.c **** 					the function. */
 500:FreeRTOS/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 501:FreeRTOS/queue.c **** 					return errQUEUE_FULL;
 502:FreeRTOS/queue.c **** 				}
 503:FreeRTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 504:FreeRTOS/queue.c **** 				{
 505:FreeRTOS/queue.c **** 					/* The queue was full and a block time was specified so
 506:FreeRTOS/queue.c **** 					configure the timeout structure. */
 507:FreeRTOS/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 508:FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 509:FreeRTOS/queue.c **** 				}
 510:FreeRTOS/queue.c **** 			}
 511:FreeRTOS/queue.c **** 		}
 512:FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
 513:FreeRTOS/queue.c **** 
 514:FreeRTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 515:FreeRTOS/queue.c **** 		now the critical section has been exited. */
 516:FreeRTOS/queue.c **** 
 517:FreeRTOS/queue.c **** 		vTaskSuspendAll();
 518:FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 519:FreeRTOS/queue.c **** 
 520:FreeRTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 521:FreeRTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 522:FreeRTOS/queue.c **** 		{
 523:FreeRTOS/queue.c **** 			if( prvIsQueueFull( pxQueue ) )
 524:FreeRTOS/queue.c **** 			{
 525:FreeRTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 526:FreeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 527:FreeRTOS/queue.c **** 
 528:FreeRTOS/queue.c **** 				/* Unlocking the queue means queue events can effect the
 529:FreeRTOS/queue.c **** 				event list.  It is possible	that interrupts occurring now
 530:FreeRTOS/queue.c **** 				remove this task from the event	list again - but as the
 531:FreeRTOS/queue.c **** 				scheduler is suspended the task will go onto the pending
 532:FreeRTOS/queue.c **** 				ready last instead of the actual ready list. */
 533:FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 534:FreeRTOS/queue.c **** 
 535:FreeRTOS/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 536:FreeRTOS/queue.c **** 				ready list into the ready list - so it is feasible that this
 537:FreeRTOS/queue.c **** 				task is already in a ready list before it yields - in which
 538:FreeRTOS/queue.c **** 				case the yield will not cause a context switch unless there
 539:FreeRTOS/queue.c **** 				is also a higher priority task in the pending ready list. */
 540:FreeRTOS/queue.c **** 				if( !xTaskResumeAll() )
 541:FreeRTOS/queue.c **** 				{
 542:FreeRTOS/queue.c **** 					portYIELD_WITHIN_API();
 543:FreeRTOS/queue.c **** 				}
 544:FreeRTOS/queue.c **** 			}
 545:FreeRTOS/queue.c **** 			else
 546:FreeRTOS/queue.c **** 			{
 547:FreeRTOS/queue.c **** 				/* Try again. */
 548:FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
ARM GAS  /tmp/cch3WSAd.s 			page 148


 549:FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 550:FreeRTOS/queue.c **** 			}
 551:FreeRTOS/queue.c **** 		}
 552:FreeRTOS/queue.c **** 		else
 553:FreeRTOS/queue.c **** 		{
 554:FreeRTOS/queue.c **** 			/* The timeout has expired. */
 555:FreeRTOS/queue.c **** 			prvUnlockQueue( pxQueue );
 556:FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 557:FreeRTOS/queue.c **** 
 558:FreeRTOS/queue.c **** 			/* Return to the original privilege level before exiting the
 559:FreeRTOS/queue.c **** 			function. */
 560:FreeRTOS/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 561:FreeRTOS/queue.c **** 			return errQUEUE_FULL;
 562:FreeRTOS/queue.c **** 		}
 563:FreeRTOS/queue.c **** 	}
 3492              		.loc 1 563 0
 3493 0016 00BF     		nop
 3494              	.L18:
 3495              		.loc 1 461 0
 3496 0018 FFF7FEFF 		bl	vPortEnterCritical
 3497              		.loc 1 465 0
 3498 001c FB68     		ldr	r3, [r7, #12]
 3499 001e 9A6B     		ldr	r2, [r3, #56]
 3500 0020 FB68     		ldr	r3, [r7, #12]
 3501 0022 DB6B     		ldr	r3, [r3, #60]
 3502 0024 9A42     		cmp	r2, r3
 3503 0026 18D2     		bcs	.L7
 3504              		.loc 1 468 0
 3505 0028 F868     		ldr	r0, [r7, #12]
 3506 002a B968     		ldr	r1, [r7, #8]
 3507 002c 3A68     		ldr	r2, [r7, #0]
 3508 002e FFF7FEFF 		bl	prvCopyDataToQueue
 3509              		.loc 1 472 0
 3510 0032 FB68     		ldr	r3, [r7, #12]
 3511 0034 5B6A     		ldr	r3, [r3, #36]
 3512 0036 002B     		cmp	r3, #0
 3513 0038 0AD0     		beq	.L8
 3514              		.loc 1 474 0
 3515 003a FB68     		ldr	r3, [r7, #12]
 3516 003c 03F12403 		add	r3, r3, #36
 3517 0040 1846     		mov	r0, r3
 3518 0042 FFF7FEFF 		bl	xTaskRemoveFromEventList
 3519 0046 0346     		mov	r3, r0
 3520 0048 012B     		cmp	r3, #1
 3521 004a 01D1     		bne	.L8
 3522              		.loc 1 480 0
 3523 004c FFF7FEFF 		bl	vPortYieldFromISR
 3524              	.L8:
 3525              		.loc 1 484 0
 3526 0050 FFF7FEFF 		bl	vPortExitCritical
 3527              		.loc 1 488 0
 3528 0054 4FF00103 		mov	r3, #1
 3529 0058 5DE0     		b	.L9
 3530              	.L7:
 3531              		.loc 1 492 0
 3532 005a 7B68     		ldr	r3, [r7, #4]
 3533 005c 002B     		cmp	r3, #0
ARM GAS  /tmp/cch3WSAd.s 			page 149


 3534 005e 04D1     		bne	.L10
 3535              		.loc 1 496 0
 3536 0060 FFF7FEFF 		bl	vPortExitCritical
 3537              		.loc 1 501 0
 3538 0064 4FF00003 		mov	r3, #0
 3539 0068 55E0     		b	.L9
 3540              	.L10:
 3541              		.loc 1 503 0
 3542 006a FB69     		ldr	r3, [r7, #28]
 3543 006c 002B     		cmp	r3, #0
 3544 006e 07D1     		bne	.L11
 3545              		.loc 1 507 0
 3546 0070 07F11403 		add	r3, r7, #20
 3547 0074 1846     		mov	r0, r3
 3548 0076 FFF7FEFF 		bl	vTaskSetTimeOutState
 3549              		.loc 1 508 0
 3550 007a 4FF00103 		mov	r3, #1
 3551 007e FB61     		str	r3, [r7, #28]
 3552              	.L11:
 3553              		.loc 1 512 0
 3554 0080 FFF7FEFF 		bl	vPortExitCritical
 3555              		.loc 1 517 0
 3556 0084 FFF7FEFF 		bl	vTaskSuspendAll
 3557              		.loc 1 518 0
 3558 0088 FFF7FEFF 		bl	vPortEnterCritical
 3559 008c FB68     		ldr	r3, [r7, #12]
 3560 008e 5B6C     		ldr	r3, [r3, #68]
 3561 0090 B3F1FF3F 		cmp	r3, #-1
 3562 0094 03D1     		bne	.L12
 3563 0096 FB68     		ldr	r3, [r7, #12]
 3564 0098 4FF00002 		mov	r2, #0
 3565 009c 5A64     		str	r2, [r3, #68]
 3566              	.L12:
 3567 009e FB68     		ldr	r3, [r7, #12]
 3568 00a0 9B6C     		ldr	r3, [r3, #72]
 3569 00a2 B3F1FF3F 		cmp	r3, #-1
 3570 00a6 03D1     		bne	.L13
 3571 00a8 FB68     		ldr	r3, [r7, #12]
 3572 00aa 4FF00002 		mov	r2, #0
 3573 00ae 9A64     		str	r2, [r3, #72]
 3574              	.L13:
 3575 00b0 FFF7FEFF 		bl	vPortExitCritical
 3576              		.loc 1 521 0
 3577 00b4 07F11402 		add	r2, r7, #20
 3578 00b8 07F10403 		add	r3, r7, #4
 3579 00bc 1046     		mov	r0, r2
 3580 00be 1946     		mov	r1, r3
 3581 00c0 FFF7FEFF 		bl	xTaskCheckForTimeOut
 3582 00c4 0346     		mov	r3, r0
 3583 00c6 002B     		cmp	r3, #0
 3584 00c8 1ED1     		bne	.L14
 3585              		.loc 1 523 0
 3586 00ca F868     		ldr	r0, [r7, #12]
 3587 00cc FFF7FEFF 		bl	prvIsQueueFull
 3588 00d0 0346     		mov	r3, r0
 3589 00d2 002B     		cmp	r3, #0
 3590 00d4 12D0     		beq	.L15
ARM GAS  /tmp/cch3WSAd.s 			page 150


 3591              		.loc 1 526 0
 3592 00d6 FB68     		ldr	r3, [r7, #12]
 3593 00d8 03F11002 		add	r2, r3, #16
 3594 00dc 7B68     		ldr	r3, [r7, #4]
 3595 00de 1046     		mov	r0, r2
 3596 00e0 1946     		mov	r1, r3
 3597 00e2 FFF7FEFF 		bl	vTaskPlaceOnEventList
 3598              		.loc 1 533 0
 3599 00e6 F868     		ldr	r0, [r7, #12]
 3600 00e8 FFF7FEFF 		bl	prvUnlockQueue
 3601              		.loc 1 540 0
 3602 00ec FFF7FEFF 		bl	xTaskResumeAll
 3603 00f0 0346     		mov	r3, r0
 3604 00f2 002B     		cmp	r3, #0
 3605 00f4 8FD1     		bne	.L20
 3606              		.loc 1 542 0
 3607 00f6 FFF7FEFF 		bl	vPortYieldFromISR
 3608              		.loc 1 563 0
 3609 00fa 8DE7     		b	.L18
 3610              	.L15:
 3611              		.loc 1 548 0
 3612 00fc F868     		ldr	r0, [r7, #12]
 3613 00fe FFF7FEFF 		bl	prvUnlockQueue
 3614              		.loc 1 549 0
 3615 0102 FFF7FEFF 		bl	xTaskResumeAll
 3616              		.loc 1 563 0
 3617 0106 87E7     		b	.L18
 3618              	.L14:
 3619              		.loc 1 555 0
 3620 0108 F868     		ldr	r0, [r7, #12]
 3621 010a FFF7FEFF 		bl	prvUnlockQueue
 3622              		.loc 1 556 0
 3623 010e FFF7FEFF 		bl	xTaskResumeAll
 3624              		.loc 1 561 0
 3625 0112 4FF00003 		mov	r3, #0
 3626              	.L9:
 564:FreeRTOS/queue.c **** }
 3627              		.loc 1 564 0
 3628 0116 1846     		mov	r0, r3
 3629 0118 07F12007 		add	r7, r7, #32
 3630 011c BD46     		mov	sp, r7
 3631 011e 80BD     		pop	{r7, pc}
 3632              	.LFE30:
 3633              		.size	xQueueGenericSend, .-xQueueGenericSend
 3634              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 3635              		.align	2
 3636              		.global	xQueueGenericSendFromISR
 3637              		.thumb
 3638              		.thumb_func
 3639              		.type	xQueueGenericSendFromISR, %function
 3640              	xQueueGenericSendFromISR:
 3641              	.LFB31:
 565:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 566:FreeRTOS/queue.c **** 
 567:FreeRTOS/queue.c **** #if configUSE_ALTERNATIVE_API == 1
 568:FreeRTOS/queue.c **** 
 569:FreeRTOS/queue.c **** 	signed portBASE_TYPE xQueueAltGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue,
ARM GAS  /tmp/cch3WSAd.s 			page 151


 570:FreeRTOS/queue.c **** 	{
 571:FreeRTOS/queue.c **** 	signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 572:FreeRTOS/queue.c **** 	xTimeOutType xTimeOut;
 573:FreeRTOS/queue.c **** 
 574:FreeRTOS/queue.c **** 		for( ;; )
 575:FreeRTOS/queue.c **** 		{
 576:FreeRTOS/queue.c **** 			taskENTER_CRITICAL();
 577:FreeRTOS/queue.c **** 			{
 578:FreeRTOS/queue.c **** 				/* Is there room on the queue now?  To be running we must be
 579:FreeRTOS/queue.c **** 				the highest priority task wanting to access the queue. */
 580:FreeRTOS/queue.c **** 				if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 581:FreeRTOS/queue.c **** 				{
 582:FreeRTOS/queue.c **** 					traceQUEUE_SEND( pxQueue );
 583:FreeRTOS/queue.c **** 					prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 584:FreeRTOS/queue.c **** 
 585:FreeRTOS/queue.c **** 					/* If there was a task waiting for data to arrive on the
 586:FreeRTOS/queue.c **** 					queue then unblock it now. */
 587:FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 588:FreeRTOS/queue.c **** 					{
 589:FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 590:FreeRTOS/queue.c **** 						{
 591:FreeRTOS/queue.c **** 							/* The unblocked task has a priority higher than
 592:FreeRTOS/queue.c **** 							our own so yield immediately. */
 593:FreeRTOS/queue.c **** 							portYIELD_WITHIN_API();
 594:FreeRTOS/queue.c **** 						}
 595:FreeRTOS/queue.c **** 					}
 596:FreeRTOS/queue.c **** 
 597:FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
 598:FreeRTOS/queue.c **** 					return pdPASS;
 599:FreeRTOS/queue.c **** 				}
 600:FreeRTOS/queue.c **** 				else
 601:FreeRTOS/queue.c **** 				{
 602:FreeRTOS/queue.c **** 					if( xTicksToWait == ( portTickType ) 0 )
 603:FreeRTOS/queue.c **** 					{
 604:FreeRTOS/queue.c **** 						taskEXIT_CRITICAL();
 605:FreeRTOS/queue.c **** 						return errQUEUE_FULL;
 606:FreeRTOS/queue.c **** 					}
 607:FreeRTOS/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
 608:FreeRTOS/queue.c **** 					{
 609:FreeRTOS/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
 610:FreeRTOS/queue.c **** 						xEntryTimeSet = pdTRUE;
 611:FreeRTOS/queue.c **** 					}
 612:FreeRTOS/queue.c **** 				}
 613:FreeRTOS/queue.c **** 			}
 614:FreeRTOS/queue.c **** 			taskEXIT_CRITICAL();
 615:FreeRTOS/queue.c **** 
 616:FreeRTOS/queue.c **** 			taskENTER_CRITICAL();
 617:FreeRTOS/queue.c **** 			{
 618:FreeRTOS/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 619:FreeRTOS/queue.c **** 				{
 620:FreeRTOS/queue.c **** 					if( prvIsQueueFull( pxQueue ) )
 621:FreeRTOS/queue.c **** 					{
 622:FreeRTOS/queue.c **** 						traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 623:FreeRTOS/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 624:FreeRTOS/queue.c **** 						portYIELD_WITHIN_API();
 625:FreeRTOS/queue.c **** 					}
 626:FreeRTOS/queue.c **** 				}
ARM GAS  /tmp/cch3WSAd.s 			page 152


 627:FreeRTOS/queue.c **** 				else
 628:FreeRTOS/queue.c **** 				{
 629:FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
 630:FreeRTOS/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 631:FreeRTOS/queue.c **** 					return errQUEUE_FULL;
 632:FreeRTOS/queue.c **** 				}
 633:FreeRTOS/queue.c **** 			}
 634:FreeRTOS/queue.c **** 			taskEXIT_CRITICAL();
 635:FreeRTOS/queue.c **** 		}
 636:FreeRTOS/queue.c **** 	}
 637:FreeRTOS/queue.c **** 
 638:FreeRTOS/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
 639:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 640:FreeRTOS/queue.c **** 
 641:FreeRTOS/queue.c **** #if configUSE_ALTERNATIVE_API == 1
 642:FreeRTOS/queue.c **** 
 643:FreeRTOS/queue.c **** 	signed portBASE_TYPE xQueueAltGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTic
 644:FreeRTOS/queue.c **** 	{
 645:FreeRTOS/queue.c **** 	signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 646:FreeRTOS/queue.c **** 	xTimeOutType xTimeOut;
 647:FreeRTOS/queue.c **** 	signed char *pcOriginalReadPosition;
 648:FreeRTOS/queue.c **** 
 649:FreeRTOS/queue.c **** 		for( ;; )
 650:FreeRTOS/queue.c **** 		{
 651:FreeRTOS/queue.c **** 			taskENTER_CRITICAL();
 652:FreeRTOS/queue.c **** 			{
 653:FreeRTOS/queue.c **** 				if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 654:FreeRTOS/queue.c **** 				{
 655:FreeRTOS/queue.c **** 					/* Remember our read position in case we are just peeking. */
 656:FreeRTOS/queue.c **** 					pcOriginalReadPosition = pxQueue->pcReadFrom;
 657:FreeRTOS/queue.c **** 
 658:FreeRTOS/queue.c **** 					prvCopyDataFromQueue( pxQueue, pvBuffer );
 659:FreeRTOS/queue.c **** 
 660:FreeRTOS/queue.c **** 					if( xJustPeeking == pdFALSE )
 661:FreeRTOS/queue.c **** 					{
 662:FreeRTOS/queue.c **** 						traceQUEUE_RECEIVE( pxQueue );
 663:FreeRTOS/queue.c **** 
 664:FreeRTOS/queue.c **** 						/* We are actually removing data. */
 665:FreeRTOS/queue.c **** 						--( pxQueue->uxMessagesWaiting );
 666:FreeRTOS/queue.c **** 
 667:FreeRTOS/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
 668:FreeRTOS/queue.c **** 						{
 669:FreeRTOS/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 670:FreeRTOS/queue.c **** 							{
 671:FreeRTOS/queue.c **** 								/* Record the information required to implement
 672:FreeRTOS/queue.c **** 								priority inheritance should it become necessary. */
 673:FreeRTOS/queue.c **** 								pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 674:FreeRTOS/queue.c **** 							}
 675:FreeRTOS/queue.c **** 						}
 676:FreeRTOS/queue.c **** 						#endif
 677:FreeRTOS/queue.c **** 
 678:FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 679:FreeRTOS/queue.c **** 						{
 680:FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 681:FreeRTOS/queue.c **** 							{
 682:FreeRTOS/queue.c **** 								portYIELD_WITHIN_API();
 683:FreeRTOS/queue.c **** 							}
ARM GAS  /tmp/cch3WSAd.s 			page 153


 684:FreeRTOS/queue.c **** 						}
 685:FreeRTOS/queue.c **** 					}
 686:FreeRTOS/queue.c **** 					else
 687:FreeRTOS/queue.c **** 					{
 688:FreeRTOS/queue.c **** 						traceQUEUE_PEEK( pxQueue );
 689:FreeRTOS/queue.c **** 
 690:FreeRTOS/queue.c **** 						/* We are not removing the data, so reset our read
 691:FreeRTOS/queue.c **** 						pointer. */
 692:FreeRTOS/queue.c **** 						pxQueue->pcReadFrom = pcOriginalReadPosition;
 693:FreeRTOS/queue.c **** 
 694:FreeRTOS/queue.c **** 						/* The data is being left in the queue, so see if there are
 695:FreeRTOS/queue.c **** 						any other tasks waiting for the data. */
 696:FreeRTOS/queue.c **** 						if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
 697:FreeRTOS/queue.c **** 						{
 698:FreeRTOS/queue.c **** 							/* Tasks that are removed from the event list will get added to
 699:FreeRTOS/queue.c **** 							the pending ready list as the scheduler is still suspended. */
 700:FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 701:FreeRTOS/queue.c **** 							{
 702:FreeRTOS/queue.c **** 								/* The task waiting has a higher priority than this task. */
 703:FreeRTOS/queue.c **** 								portYIELD_WITHIN_API();
 704:FreeRTOS/queue.c **** 							}
 705:FreeRTOS/queue.c **** 						}
 706:FreeRTOS/queue.c **** 
 707:FreeRTOS/queue.c **** 					}
 708:FreeRTOS/queue.c **** 
 709:FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
 710:FreeRTOS/queue.c **** 					return pdPASS;
 711:FreeRTOS/queue.c **** 				}
 712:FreeRTOS/queue.c **** 				else
 713:FreeRTOS/queue.c **** 				{
 714:FreeRTOS/queue.c **** 					if( xTicksToWait == ( portTickType ) 0 )
 715:FreeRTOS/queue.c **** 					{
 716:FreeRTOS/queue.c **** 						taskEXIT_CRITICAL();
 717:FreeRTOS/queue.c **** 						traceQUEUE_RECEIVE_FAILED( pxQueue );
 718:FreeRTOS/queue.c **** 						return errQUEUE_EMPTY;
 719:FreeRTOS/queue.c **** 					}
 720:FreeRTOS/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
 721:FreeRTOS/queue.c **** 					{
 722:FreeRTOS/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
 723:FreeRTOS/queue.c **** 						xEntryTimeSet = pdTRUE;
 724:FreeRTOS/queue.c **** 					}
 725:FreeRTOS/queue.c **** 				}
 726:FreeRTOS/queue.c **** 			}
 727:FreeRTOS/queue.c **** 			taskEXIT_CRITICAL();
 728:FreeRTOS/queue.c **** 
 729:FreeRTOS/queue.c **** 			taskENTER_CRITICAL();
 730:FreeRTOS/queue.c **** 			{
 731:FreeRTOS/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 732:FreeRTOS/queue.c **** 				{
 733:FreeRTOS/queue.c **** 					if( prvIsQueueEmpty( pxQueue ) )
 734:FreeRTOS/queue.c **** 					{
 735:FreeRTOS/queue.c **** 						traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 736:FreeRTOS/queue.c **** 
 737:FreeRTOS/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
 738:FreeRTOS/queue.c **** 						{
 739:FreeRTOS/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 740:FreeRTOS/queue.c **** 							{
ARM GAS  /tmp/cch3WSAd.s 			page 154


 741:FreeRTOS/queue.c **** 								portENTER_CRITICAL();
 742:FreeRTOS/queue.c **** 									vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 743:FreeRTOS/queue.c **** 								portEXIT_CRITICAL();
 744:FreeRTOS/queue.c **** 							}
 745:FreeRTOS/queue.c **** 						}
 746:FreeRTOS/queue.c **** 						#endif
 747:FreeRTOS/queue.c **** 
 748:FreeRTOS/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 749:FreeRTOS/queue.c **** 						portYIELD_WITHIN_API();
 750:FreeRTOS/queue.c **** 					}
 751:FreeRTOS/queue.c **** 				}
 752:FreeRTOS/queue.c **** 				else
 753:FreeRTOS/queue.c **** 				{
 754:FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
 755:FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 756:FreeRTOS/queue.c **** 					return errQUEUE_EMPTY;
 757:FreeRTOS/queue.c **** 				}
 758:FreeRTOS/queue.c **** 			}
 759:FreeRTOS/queue.c **** 			taskEXIT_CRITICAL();
 760:FreeRTOS/queue.c **** 		}
 761:FreeRTOS/queue.c **** 	}
 762:FreeRTOS/queue.c **** 
 763:FreeRTOS/queue.c **** 
 764:FreeRTOS/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
 765:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 766:FreeRTOS/queue.c **** 
 767:FreeRTOS/queue.c **** signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQue
 768:FreeRTOS/queue.c **** {
 3642              		.loc 1 768 0
 3643              		@ args = 0, pretend = 0, frame = 24
 3644              		@ frame_needed = 1, uses_anonymous_args = 0
 3645 0000 80B5     		push	{r7, lr}
 3646              	.LCFI6:
 3647 0002 86B0     		sub	sp, sp, #24
 3648              	.LCFI7:
 3649 0004 00AF     		add	r7, sp, #0
 3650              	.LCFI8:
 3651 0006 F860     		str	r0, [r7, #12]
 3652 0008 B960     		str	r1, [r7, #8]
 3653 000a 7A60     		str	r2, [r7, #4]
 3654 000c 3B60     		str	r3, [r7, #0]
 769:FreeRTOS/queue.c **** signed portBASE_TYPE xReturn;
 770:FreeRTOS/queue.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
 771:FreeRTOS/queue.c **** 
 772:FreeRTOS/queue.c **** 	/* Similar to xQueueGenericSend, except we don't block if there is no room
 773:FreeRTOS/queue.c **** 	in the queue.  Also we don't directly wake a task that was blocked on a
 774:FreeRTOS/queue.c **** 	queue read, instead we return a flag to say whether a context switch is
 775:FreeRTOS/queue.c **** 	required or not (i.e. has a task with a higher priority than us been woken
 776:FreeRTOS/queue.c **** 	by this	post). */
 777:FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 3655              		.loc 1 777 0
 3656 000e 4FF00003 		mov	r3, #0
 3657 0012 7B61     		str	r3, [r7, #20]
 3658              	@ 777 "FreeRTOS/queue.c" 1
 3659 0014 4FF02800 			mov r0, #40								
 3660 0018 80F31188 		msr basepri, r0							
 3661              	
ARM GAS  /tmp/cch3WSAd.s 			page 155


 3662              	@ 0 "" 2
 778:FreeRTOS/queue.c **** 	{
 779:FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 3663              		.loc 1 779 0
 3664              		.thumb
 3665 001c FB68     		ldr	r3, [r7, #12]
 3666 001e 9A6B     		ldr	r2, [r3, #56]
 3667 0020 FB68     		ldr	r3, [r7, #12]
 3668 0022 DB6B     		ldr	r3, [r3, #60]
 3669 0024 9A42     		cmp	r2, r3
 3670 0026 29D2     		bcs	.L22
 780:FreeRTOS/queue.c **** 		{
 781:FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 782:FreeRTOS/queue.c **** 
 783:FreeRTOS/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 3671              		.loc 1 783 0
 3672 0028 F868     		ldr	r0, [r7, #12]
 3673 002a B968     		ldr	r1, [r7, #8]
 3674 002c 3A68     		ldr	r2, [r7, #0]
 3675 002e FFF7FEFF 		bl	prvCopyDataToQueue
 784:FreeRTOS/queue.c **** 
 785:FreeRTOS/queue.c **** 			/* If the queue is locked we do not alter the event list.  This will
 786:FreeRTOS/queue.c **** 			be done when the queue is unlocked later. */
 787:FreeRTOS/queue.c **** 			if( pxQueue->xTxLock == queueUNLOCKED )
 3676              		.loc 1 787 0
 3677 0032 FB68     		ldr	r3, [r7, #12]
 3678 0034 9B6C     		ldr	r3, [r3, #72]
 3679 0036 B3F1FF3F 		cmp	r3, #-1
 3680 003a 11D1     		bne	.L23
 788:FreeRTOS/queue.c **** 			{
 789:FreeRTOS/queue.c **** 				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
 3681              		.loc 1 789 0
 3682 003c FB68     		ldr	r3, [r7, #12]
 3683 003e 5B6A     		ldr	r3, [r3, #36]
 3684 0040 002B     		cmp	r3, #0
 3685 0042 14D0     		beq	.L28
 790:FreeRTOS/queue.c **** 				{
 791:FreeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 3686              		.loc 1 791 0
 3687 0044 FB68     		ldr	r3, [r7, #12]
 3688 0046 03F12403 		add	r3, r3, #36
 3689 004a 1846     		mov	r0, r3
 3690 004c FFF7FEFF 		bl	xTaskRemoveFromEventList
 3691 0050 0346     		mov	r3, r0
 3692 0052 002B     		cmp	r3, #0
 3693 0054 0DD0     		beq	.L29
 792:FreeRTOS/queue.c **** 					{
 793:FreeRTOS/queue.c **** 						/* The task waiting has a higher priority so record that a
 794:FreeRTOS/queue.c **** 						context	switch is required. */
 795:FreeRTOS/queue.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 3694              		.loc 1 795 0
 3695 0056 7B68     		ldr	r3, [r7, #4]
 3696 0058 4FF00102 		mov	r2, #1
 3697 005c 1A60     		str	r2, [r3, #0]
 3698 005e 09E0     		b	.L25
 3699              	.L23:
 796:FreeRTOS/queue.c **** 					}
ARM GAS  /tmp/cch3WSAd.s 			page 156


 797:FreeRTOS/queue.c **** 				}
 798:FreeRTOS/queue.c **** 			}
 799:FreeRTOS/queue.c **** 			else
 800:FreeRTOS/queue.c **** 			{
 801:FreeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
 802:FreeRTOS/queue.c **** 				knows that data was posted while it was locked. */
 803:FreeRTOS/queue.c **** 				++( pxQueue->xTxLock );
 3700              		.loc 1 803 0
 3701 0060 FB68     		ldr	r3, [r7, #12]
 3702 0062 9B6C     		ldr	r3, [r3, #72]
 3703 0064 03F10102 		add	r2, r3, #1
 3704 0068 FB68     		ldr	r3, [r7, #12]
 3705 006a 9A64     		str	r2, [r3, #72]
 3706 006c 02E0     		b	.L25
 3707              	.L28:
 3708              		.loc 1 795 0
 3709 006e 00BF     		nop
 3710 0070 00E0     		b	.L25
 3711              	.L29:
 3712 0072 00BF     		nop
 3713              	.L25:
 804:FreeRTOS/queue.c **** 			}
 805:FreeRTOS/queue.c **** 
 806:FreeRTOS/queue.c **** 			xReturn = pdPASS;
 3714              		.loc 1 806 0
 3715 0074 4FF00103 		mov	r3, #1
 3716 0078 3B61     		str	r3, [r7, #16]
 3717 007a 02E0     		b	.L26
 3718              	.L22:
 807:FreeRTOS/queue.c **** 		}
 808:FreeRTOS/queue.c **** 		else
 809:FreeRTOS/queue.c **** 		{
 810:FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 811:FreeRTOS/queue.c **** 			xReturn = errQUEUE_FULL;
 3719              		.loc 1 811 0
 3720 007c 4FF00003 		mov	r3, #0
 3721 0080 3B61     		str	r3, [r7, #16]
 3722              	.L26:
 812:FreeRTOS/queue.c **** 		}
 813:FreeRTOS/queue.c **** 	}
 814:FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 3723              		.loc 1 814 0
 3724              	@ 814 "FreeRTOS/queue.c" 1
 3725 0082 4FF00000 			mov r0, #0					
 3726 0086 80F31188 		msr basepri, r0				
 3727              	
 3728              	@ 0 "" 2
 815:FreeRTOS/queue.c **** 
 816:FreeRTOS/queue.c **** 	return xReturn;
 3729              		.loc 1 816 0
 3730              		.thumb
 3731 008a 3B69     		ldr	r3, [r7, #16]
 817:FreeRTOS/queue.c **** }
 3732              		.loc 1 817 0
 3733 008c 1846     		mov	r0, r3
 3734 008e 07F11807 		add	r7, r7, #24
 3735 0092 BD46     		mov	sp, r7
ARM GAS  /tmp/cch3WSAd.s 			page 157


 3736 0094 80BD     		pop	{r7, pc}
 3737              	.LFE31:
 3738              		.size	xQueueGenericSendFromISR, .-xQueueGenericSendFromISR
 3739 0096 00BF     		.section	.text.xQueueGenericReceive,"ax",%progbits
 3740              		.align	2
 3741              		.global	xQueueGenericReceive
 3742              		.thumb
 3743              		.thumb_func
 3744              		.type	xQueueGenericReceive, %function
 3745              	xQueueGenericReceive:
 3746              	.LFB32:
 818:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 819:FreeRTOS/queue.c **** 
 820:FreeRTOS/queue.c **** signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickTyp
 821:FreeRTOS/queue.c **** {
 3747              		.loc 1 821 0
 3748              		@ args = 0, pretend = 0, frame = 32
 3749              		@ frame_needed = 1, uses_anonymous_args = 0
 3750 0000 80B5     		push	{r7, lr}
 3751              	.LCFI9:
 3752 0002 88B0     		sub	sp, sp, #32
 3753              	.LCFI10:
 3754 0004 00AF     		add	r7, sp, #0
 3755              	.LCFI11:
 3756 0006 F860     		str	r0, [r7, #12]
 3757 0008 B960     		str	r1, [r7, #8]
 3758 000a 7A60     		str	r2, [r7, #4]
 3759 000c 3B60     		str	r3, [r7, #0]
 822:FreeRTOS/queue.c **** signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 3760              		.loc 1 822 0
 3761 000e 4FF00003 		mov	r3, #0
 3762 0012 BB61     		str	r3, [r7, #24]
 3763 0014 00E0     		b	.L44
 3764              	.L48:
 823:FreeRTOS/queue.c **** xTimeOutType xTimeOut;
 824:FreeRTOS/queue.c **** signed char *pcOriginalReadPosition;
 825:FreeRTOS/queue.c **** 
 826:FreeRTOS/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 827:FreeRTOS/queue.c **** 	statements within the function itself.  This is done in the interest
 828:FreeRTOS/queue.c **** 	of execution time efficiency. */
 829:FreeRTOS/queue.c **** 
 830:FreeRTOS/queue.c **** 	for( ;; )
 831:FreeRTOS/queue.c **** 	{
 832:FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
 833:FreeRTOS/queue.c **** 		{
 834:FreeRTOS/queue.c **** 			/* Is there data in the queue now?  To be running we must be
 835:FreeRTOS/queue.c **** 			the highest priority task wanting to access the queue. */
 836:FreeRTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 837:FreeRTOS/queue.c **** 			{
 838:FreeRTOS/queue.c **** 				/* Remember our read position in case we are just peeking. */
 839:FreeRTOS/queue.c **** 				pcOriginalReadPosition = pxQueue->pcReadFrom;
 840:FreeRTOS/queue.c **** 
 841:FreeRTOS/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 842:FreeRTOS/queue.c **** 
 843:FreeRTOS/queue.c **** 				if( xJustPeeking == pdFALSE )
 844:FreeRTOS/queue.c **** 				{
 845:FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
ARM GAS  /tmp/cch3WSAd.s 			page 158


 846:FreeRTOS/queue.c **** 
 847:FreeRTOS/queue.c **** 					/* We are actually removing data. */
 848:FreeRTOS/queue.c **** 					--( pxQueue->uxMessagesWaiting );
 849:FreeRTOS/queue.c **** 
 850:FreeRTOS/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
 851:FreeRTOS/queue.c **** 					{
 852:FreeRTOS/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 853:FreeRTOS/queue.c **** 						{
 854:FreeRTOS/queue.c **** 							/* Record the information required to implement
 855:FreeRTOS/queue.c **** 							priority inheritance should it become necessary. */
 856:FreeRTOS/queue.c **** 							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 857:FreeRTOS/queue.c **** 						}
 858:FreeRTOS/queue.c **** 					}
 859:FreeRTOS/queue.c **** 					#endif
 860:FreeRTOS/queue.c **** 
 861:FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 862:FreeRTOS/queue.c **** 					{
 863:FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 864:FreeRTOS/queue.c **** 						{
 865:FreeRTOS/queue.c **** 							portYIELD_WITHIN_API();
 866:FreeRTOS/queue.c **** 						}
 867:FreeRTOS/queue.c **** 					}
 868:FreeRTOS/queue.c **** 				}
 869:FreeRTOS/queue.c **** 				else
 870:FreeRTOS/queue.c **** 				{
 871:FreeRTOS/queue.c **** 					traceQUEUE_PEEK( pxQueue );
 872:FreeRTOS/queue.c **** 
 873:FreeRTOS/queue.c **** 					/* We are not removing the data, so reset our read
 874:FreeRTOS/queue.c **** 					pointer. */
 875:FreeRTOS/queue.c **** 					pxQueue->pcReadFrom = pcOriginalReadPosition;
 876:FreeRTOS/queue.c **** 
 877:FreeRTOS/queue.c **** 					/* The data is being left in the queue, so see if there are
 878:FreeRTOS/queue.c **** 					any other tasks waiting for the data. */
 879:FreeRTOS/queue.c **** 					if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
 880:FreeRTOS/queue.c **** 					{
 881:FreeRTOS/queue.c **** 						/* Tasks that are removed from the event list will get added to
 882:FreeRTOS/queue.c **** 						the pending ready list as the scheduler is still suspended. */
 883:FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 884:FreeRTOS/queue.c **** 						{
 885:FreeRTOS/queue.c **** 							/* The task waiting has a higher priority than this task. */
 886:FreeRTOS/queue.c **** 							portYIELD_WITHIN_API();
 887:FreeRTOS/queue.c **** 						}
 888:FreeRTOS/queue.c **** 					}
 889:FreeRTOS/queue.c **** 
 890:FreeRTOS/queue.c **** 				}
 891:FreeRTOS/queue.c **** 
 892:FreeRTOS/queue.c **** 				taskEXIT_CRITICAL();
 893:FreeRTOS/queue.c **** 				return pdPASS;
 894:FreeRTOS/queue.c **** 			}
 895:FreeRTOS/queue.c **** 			else
 896:FreeRTOS/queue.c **** 			{
 897:FreeRTOS/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
 898:FreeRTOS/queue.c **** 				{
 899:FreeRTOS/queue.c **** 					/* The queue was empty and no block time is specified (or
 900:FreeRTOS/queue.c **** 					the block time has expired) so leave now. */
 901:FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
 902:FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
ARM GAS  /tmp/cch3WSAd.s 			page 159


 903:FreeRTOS/queue.c **** 					return errQUEUE_EMPTY;
 904:FreeRTOS/queue.c **** 				}
 905:FreeRTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 906:FreeRTOS/queue.c **** 				{
 907:FreeRTOS/queue.c **** 					/* The queue was empty and a block time was specified so
 908:FreeRTOS/queue.c **** 					configure the timeout structure. */
 909:FreeRTOS/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 910:FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 911:FreeRTOS/queue.c **** 				}
 912:FreeRTOS/queue.c **** 			}
 913:FreeRTOS/queue.c **** 		}
 914:FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
 915:FreeRTOS/queue.c **** 
 916:FreeRTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 917:FreeRTOS/queue.c **** 		now the critical section has been exited. */
 918:FreeRTOS/queue.c **** 
 919:FreeRTOS/queue.c **** 		vTaskSuspendAll();
 920:FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 921:FreeRTOS/queue.c **** 
 922:FreeRTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 923:FreeRTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 924:FreeRTOS/queue.c **** 		{
 925:FreeRTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) )
 926:FreeRTOS/queue.c **** 			{
 927:FreeRTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 928:FreeRTOS/queue.c **** 
 929:FreeRTOS/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
 930:FreeRTOS/queue.c **** 				{
 931:FreeRTOS/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 932:FreeRTOS/queue.c **** 					{
 933:FreeRTOS/queue.c **** 						portENTER_CRITICAL();
 934:FreeRTOS/queue.c **** 						{
 935:FreeRTOS/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 936:FreeRTOS/queue.c **** 						}
 937:FreeRTOS/queue.c **** 						portEXIT_CRITICAL();
 938:FreeRTOS/queue.c **** 					}
 939:FreeRTOS/queue.c **** 				}
 940:FreeRTOS/queue.c **** 				#endif
 941:FreeRTOS/queue.c **** 
 942:FreeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 943:FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 944:FreeRTOS/queue.c **** 				if( !xTaskResumeAll() )
 945:FreeRTOS/queue.c **** 				{
 946:FreeRTOS/queue.c **** 					portYIELD_WITHIN_API();
 947:FreeRTOS/queue.c **** 				}
 948:FreeRTOS/queue.c **** 			}
 949:FreeRTOS/queue.c **** 			else
 950:FreeRTOS/queue.c **** 			{
 951:FreeRTOS/queue.c **** 				/* Try again. */
 952:FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 953:FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 954:FreeRTOS/queue.c **** 			}
 955:FreeRTOS/queue.c **** 		}
 956:FreeRTOS/queue.c **** 		else
 957:FreeRTOS/queue.c **** 		{
 958:FreeRTOS/queue.c **** 			prvUnlockQueue( pxQueue );
 959:FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
ARM GAS  /tmp/cch3WSAd.s 			page 160


 960:FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FAILED( pxQueue );
 961:FreeRTOS/queue.c **** 			return errQUEUE_EMPTY;
 962:FreeRTOS/queue.c **** 		}
 963:FreeRTOS/queue.c **** 	}
 3765              		.loc 1 963 0
 3766 0016 00BF     		nop
 3767              	.L44:
 3768              		.loc 1 832 0
 3769 0018 FFF7FEFF 		bl	vPortEnterCritical
 3770              		.loc 1 836 0
 3771 001c FB68     		ldr	r3, [r7, #12]
 3772 001e 9B6B     		ldr	r3, [r3, #56]
 3773 0020 002B     		cmp	r3, #0
 3774 0022 3AD0     		beq	.L31
 3775              		.loc 1 839 0
 3776 0024 FB68     		ldr	r3, [r7, #12]
 3777 0026 DB68     		ldr	r3, [r3, #12]
 3778 0028 FB61     		str	r3, [r7, #28]
 3779              		.loc 1 841 0
 3780 002a F868     		ldr	r0, [r7, #12]
 3781 002c B968     		ldr	r1, [r7, #8]
 3782 002e FFF7FEFF 		bl	prvCopyDataFromQueue
 3783              		.loc 1 843 0
 3784 0032 3B68     		ldr	r3, [r7, #0]
 3785 0034 002B     		cmp	r3, #0
 3786 0036 15D1     		bne	.L32
 3787              		.loc 1 848 0
 3788 0038 FB68     		ldr	r3, [r7, #12]
 3789 003a 9B6B     		ldr	r3, [r3, #56]
 3790 003c 03F1FF32 		add	r2, r3, #-1
 3791 0040 FB68     		ldr	r3, [r7, #12]
 3792 0042 9A63     		str	r2, [r3, #56]
 3793              		.loc 1 861 0
 3794 0044 FB68     		ldr	r3, [r7, #12]
 3795 0046 1B69     		ldr	r3, [r3, #16]
 3796 0048 002B     		cmp	r3, #0
 3797 004a 1ED0     		beq	.L46
 3798              		.loc 1 863 0
 3799 004c FB68     		ldr	r3, [r7, #12]
 3800 004e 03F11003 		add	r3, r3, #16
 3801 0052 1846     		mov	r0, r3
 3802 0054 FFF7FEFF 		bl	xTaskRemoveFromEventList
 3803 0058 0346     		mov	r3, r0
 3804 005a 012B     		cmp	r3, #1
 3805 005c 17D1     		bne	.L47
 3806              		.loc 1 865 0
 3807 005e FFF7FEFF 		bl	vPortYieldFromISR
 3808 0062 15E0     		b	.L34
 3809              	.L32:
 3810              		.loc 1 875 0
 3811 0064 FB68     		ldr	r3, [r7, #12]
 3812 0066 FA69     		ldr	r2, [r7, #28]
 3813 0068 DA60     		str	r2, [r3, #12]
 3814              		.loc 1 879 0
 3815 006a FB68     		ldr	r3, [r7, #12]
 3816 006c 5B6A     		ldr	r3, [r3, #36]
 3817 006e 002B     		cmp	r3, #0
ARM GAS  /tmp/cch3WSAd.s 			page 161


 3818 0070 0ED0     		beq	.L34
 3819              		.loc 1 883 0
 3820 0072 FB68     		ldr	r3, [r7, #12]
 3821 0074 03F12403 		add	r3, r3, #36
 3822 0078 1846     		mov	r0, r3
 3823 007a FFF7FEFF 		bl	xTaskRemoveFromEventList
 3824 007e 0346     		mov	r3, r0
 3825 0080 002B     		cmp	r3, #0
 3826 0082 05D0     		beq	.L34
 3827              		.loc 1 886 0
 3828 0084 FFF7FEFF 		bl	vPortYieldFromISR
 3829 0088 02E0     		b	.L34
 3830              	.L46:
 3831              		.loc 1 865 0
 3832 008a 00BF     		nop
 3833 008c 00E0     		b	.L34
 3834              	.L47:
 3835 008e 00BF     		nop
 3836              	.L34:
 3837              		.loc 1 892 0
 3838 0090 FFF7FEFF 		bl	vPortExitCritical
 3839              		.loc 1 893 0
 3840 0094 4FF00103 		mov	r3, #1
 3841 0098 5EE0     		b	.L35
 3842              	.L31:
 3843              		.loc 1 897 0
 3844 009a 7B68     		ldr	r3, [r7, #4]
 3845 009c 002B     		cmp	r3, #0
 3846 009e 04D1     		bne	.L36
 3847              		.loc 1 901 0
 3848 00a0 FFF7FEFF 		bl	vPortExitCritical
 3849              		.loc 1 903 0
 3850 00a4 4FF00003 		mov	r3, #0
 3851 00a8 56E0     		b	.L35
 3852              	.L36:
 3853              		.loc 1 905 0
 3854 00aa BB69     		ldr	r3, [r7, #24]
 3855 00ac 002B     		cmp	r3, #0
 3856 00ae 07D1     		bne	.L37
 3857              		.loc 1 909 0
 3858 00b0 07F11003 		add	r3, r7, #16
 3859 00b4 1846     		mov	r0, r3
 3860 00b6 FFF7FEFF 		bl	vTaskSetTimeOutState
 3861              		.loc 1 910 0
 3862 00ba 4FF00103 		mov	r3, #1
 3863 00be BB61     		str	r3, [r7, #24]
 3864              	.L37:
 3865              		.loc 1 914 0
 3866 00c0 FFF7FEFF 		bl	vPortExitCritical
 3867              		.loc 1 919 0
 3868 00c4 FFF7FEFF 		bl	vTaskSuspendAll
 3869              		.loc 1 920 0
 3870 00c8 FFF7FEFF 		bl	vPortEnterCritical
 3871 00cc FB68     		ldr	r3, [r7, #12]
 3872 00ce 5B6C     		ldr	r3, [r3, #68]
 3873 00d0 B3F1FF3F 		cmp	r3, #-1
 3874 00d4 03D1     		bne	.L38
ARM GAS  /tmp/cch3WSAd.s 			page 162


 3875 00d6 FB68     		ldr	r3, [r7, #12]
 3876 00d8 4FF00002 		mov	r2, #0
 3877 00dc 5A64     		str	r2, [r3, #68]
 3878              	.L38:
 3879 00de FB68     		ldr	r3, [r7, #12]
 3880 00e0 9B6C     		ldr	r3, [r3, #72]
 3881 00e2 B3F1FF3F 		cmp	r3, #-1
 3882 00e6 03D1     		bne	.L39
 3883 00e8 FB68     		ldr	r3, [r7, #12]
 3884 00ea 4FF00002 		mov	r2, #0
 3885 00ee 9A64     		str	r2, [r3, #72]
 3886              	.L39:
 3887 00f0 FFF7FEFF 		bl	vPortExitCritical
 3888              		.loc 1 923 0
 3889 00f4 07F11002 		add	r2, r7, #16
 3890 00f8 07F10403 		add	r3, r7, #4
 3891 00fc 1046     		mov	r0, r2
 3892 00fe 1946     		mov	r1, r3
 3893 0100 FFF7FEFF 		bl	xTaskCheckForTimeOut
 3894 0104 0346     		mov	r3, r0
 3895 0106 002B     		cmp	r3, #0
 3896 0108 1FD1     		bne	.L40
 3897              		.loc 1 925 0
 3898 010a F868     		ldr	r0, [r7, #12]
 3899 010c FFF7FEFF 		bl	prvIsQueueEmpty
 3900 0110 0346     		mov	r3, r0
 3901 0112 002B     		cmp	r3, #0
 3902 0114 13D0     		beq	.L41
 3903              		.loc 1 942 0
 3904 0116 FB68     		ldr	r3, [r7, #12]
 3905 0118 03F12402 		add	r2, r3, #36
 3906 011c 7B68     		ldr	r3, [r7, #4]
 3907 011e 1046     		mov	r0, r2
 3908 0120 1946     		mov	r1, r3
 3909 0122 FFF7FEFF 		bl	vTaskPlaceOnEventList
 3910              		.loc 1 943 0
 3911 0126 F868     		ldr	r0, [r7, #12]
 3912 0128 FFF7FEFF 		bl	prvUnlockQueue
 3913              		.loc 1 944 0
 3914 012c FFF7FEFF 		bl	xTaskResumeAll
 3915 0130 0346     		mov	r3, r0
 3916 0132 002B     		cmp	r3, #0
 3917 0134 7FF46FAF 		bne	.L48
 3918              		.loc 1 946 0
 3919 0138 FFF7FEFF 		bl	vPortYieldFromISR
 3920              		.loc 1 963 0
 3921 013c 6CE7     		b	.L44
 3922              	.L41:
 3923              		.loc 1 952 0
 3924 013e F868     		ldr	r0, [r7, #12]
 3925 0140 FFF7FEFF 		bl	prvUnlockQueue
 3926              		.loc 1 953 0
 3927 0144 FFF7FEFF 		bl	xTaskResumeAll
 3928              		.loc 1 963 0
 3929 0148 66E7     		b	.L44
 3930              	.L40:
 3931              		.loc 1 958 0
ARM GAS  /tmp/cch3WSAd.s 			page 163


 3932 014a F868     		ldr	r0, [r7, #12]
 3933 014c FFF7FEFF 		bl	prvUnlockQueue
 3934              		.loc 1 959 0
 3935 0150 FFF7FEFF 		bl	xTaskResumeAll
 3936              		.loc 1 961 0
 3937 0154 4FF00003 		mov	r3, #0
 3938              	.L35:
 964:FreeRTOS/queue.c **** }
 3939              		.loc 1 964 0
 3940 0158 1846     		mov	r0, r3
 3941 015a 07F12007 		add	r7, r7, #32
 3942 015e BD46     		mov	sp, r7
 3943 0160 80BD     		pop	{r7, pc}
 3944              	.LFE32:
 3945              		.size	xQueueGenericReceive, .-xQueueGenericReceive
 3946 0162 00BF     		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 3947              		.align	2
 3948              		.global	xQueueReceiveFromISR
 3949              		.thumb
 3950              		.thumb_func
 3951              		.type	xQueueReceiveFromISR, %function
 3952              	xQueueReceiveFromISR:
 3953              	.LFB33:
 965:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 966:FreeRTOS/queue.c **** 
 967:FreeRTOS/queue.c **** signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed port
 968:FreeRTOS/queue.c **** {
 3954              		.loc 1 968 0
 3955              		@ args = 0, pretend = 0, frame = 24
 3956              		@ frame_needed = 1, uses_anonymous_args = 0
 3957 0000 80B5     		push	{r7, lr}
 3958              	.LCFI12:
 3959 0002 86B0     		sub	sp, sp, #24
 3960              	.LCFI13:
 3961 0004 00AF     		add	r7, sp, #0
 3962              	.LCFI14:
 3963 0006 F860     		str	r0, [r7, #12]
 3964 0008 B960     		str	r1, [r7, #8]
 3965 000a 7A60     		str	r2, [r7, #4]
 969:FreeRTOS/queue.c **** signed portBASE_TYPE xReturn;
 970:FreeRTOS/queue.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
 971:FreeRTOS/queue.c **** 
 972:FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 3966              		.loc 1 972 0
 3967 000c 4FF00003 		mov	r3, #0
 3968 0010 7B61     		str	r3, [r7, #20]
 3969              	@ 972 "FreeRTOS/queue.c" 1
 3970 0012 4FF02800 			mov r0, #40								
 3971 0016 80F31188 		msr basepri, r0							
 3972              	
 3973              	@ 0 "" 2
 973:FreeRTOS/queue.c **** 	{
 974:FreeRTOS/queue.c **** 		/* We cannot block from an ISR, so check there is data available. */
 975:FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 3974              		.loc 1 975 0
 3975              		.thumb
 3976 001a FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cch3WSAd.s 			page 164


 3977 001c 9B6B     		ldr	r3, [r3, #56]
 3978 001e 002B     		cmp	r3, #0
 3979 0020 2ED0     		beq	.L50
 976:FreeRTOS/queue.c **** 		{
 977:FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 978:FreeRTOS/queue.c **** 
 979:FreeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 3980              		.loc 1 979 0
 3981 0022 F868     		ldr	r0, [r7, #12]
 3982 0024 B968     		ldr	r1, [r7, #8]
 3983 0026 FFF7FEFF 		bl	prvCopyDataFromQueue
 980:FreeRTOS/queue.c **** 			--( pxQueue->uxMessagesWaiting );
 3984              		.loc 1 980 0
 3985 002a FB68     		ldr	r3, [r7, #12]
 3986 002c 9B6B     		ldr	r3, [r3, #56]
 3987 002e 03F1FF32 		add	r2, r3, #-1
 3988 0032 FB68     		ldr	r3, [r7, #12]
 3989 0034 9A63     		str	r2, [r3, #56]
 981:FreeRTOS/queue.c **** 
 982:FreeRTOS/queue.c **** 			/* If the queue is locked we will not modify the event list.  Instead
 983:FreeRTOS/queue.c **** 			we update the lock count so the task that unlocks the queue will know
 984:FreeRTOS/queue.c **** 			that an ISR has removed data while the queue was locked. */
 985:FreeRTOS/queue.c **** 			if( pxQueue->xRxLock == queueUNLOCKED )
 3990              		.loc 1 985 0
 3991 0036 FB68     		ldr	r3, [r7, #12]
 3992 0038 5B6C     		ldr	r3, [r3, #68]
 3993 003a B3F1FF3F 		cmp	r3, #-1
 3994 003e 11D1     		bne	.L51
 986:FreeRTOS/queue.c **** 			{
 987:FreeRTOS/queue.c **** 				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
 3995              		.loc 1 987 0
 3996 0040 FB68     		ldr	r3, [r7, #12]
 3997 0042 1B69     		ldr	r3, [r3, #16]
 3998 0044 002B     		cmp	r3, #0
 3999 0046 14D0     		beq	.L56
 988:FreeRTOS/queue.c **** 				{
 989:FreeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 4000              		.loc 1 989 0
 4001 0048 FB68     		ldr	r3, [r7, #12]
 4002 004a 03F11003 		add	r3, r3, #16
 4003 004e 1846     		mov	r0, r3
 4004 0050 FFF7FEFF 		bl	xTaskRemoveFromEventList
 4005 0054 0346     		mov	r3, r0
 4006 0056 002B     		cmp	r3, #0
 4007 0058 0DD0     		beq	.L57
 990:FreeRTOS/queue.c **** 					{
 991:FreeRTOS/queue.c **** 						/* The task waiting has a higher priority than us so
 992:FreeRTOS/queue.c **** 						force a context switch. */
 993:FreeRTOS/queue.c **** 						*pxTaskWoken = pdTRUE;
 4008              		.loc 1 993 0
 4009 005a 7B68     		ldr	r3, [r7, #4]
 4010 005c 4FF00102 		mov	r2, #1
 4011 0060 1A60     		str	r2, [r3, #0]
 4012 0062 09E0     		b	.L53
 4013              	.L51:
 994:FreeRTOS/queue.c **** 					}
 995:FreeRTOS/queue.c **** 				}
ARM GAS  /tmp/cch3WSAd.s 			page 165


 996:FreeRTOS/queue.c **** 			}
 997:FreeRTOS/queue.c **** 			else
 998:FreeRTOS/queue.c **** 			{
 999:FreeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1000:FreeRTOS/queue.c **** 				knows that data was removed while it was locked. */
1001:FreeRTOS/queue.c **** 				++( pxQueue->xRxLock );
 4014              		.loc 1 1001 0
 4015 0064 FB68     		ldr	r3, [r7, #12]
 4016 0066 5B6C     		ldr	r3, [r3, #68]
 4017 0068 03F10102 		add	r2, r3, #1
 4018 006c FB68     		ldr	r3, [r7, #12]
 4019 006e 5A64     		str	r2, [r3, #68]
 4020 0070 02E0     		b	.L53
 4021              	.L56:
 4022              		.loc 1 993 0
 4023 0072 00BF     		nop
 4024 0074 00E0     		b	.L53
 4025              	.L57:
 4026 0076 00BF     		nop
 4027              	.L53:
1002:FreeRTOS/queue.c **** 			}
1003:FreeRTOS/queue.c **** 
1004:FreeRTOS/queue.c **** 			xReturn = pdPASS;
 4028              		.loc 1 1004 0
 4029 0078 4FF00103 		mov	r3, #1
 4030 007c 3B61     		str	r3, [r7, #16]
 4031 007e 02E0     		b	.L54
 4032              	.L50:
1005:FreeRTOS/queue.c **** 		}
1006:FreeRTOS/queue.c **** 		else
1007:FreeRTOS/queue.c **** 		{
1008:FreeRTOS/queue.c **** 			xReturn = pdFAIL;
 4033              		.loc 1 1008 0
 4034 0080 4FF00003 		mov	r3, #0
 4035 0084 3B61     		str	r3, [r7, #16]
 4036              	.L54:
1009:FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1010:FreeRTOS/queue.c **** 		}
1011:FreeRTOS/queue.c **** 	}
1012:FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 4037              		.loc 1 1012 0
 4038              	@ 1012 "FreeRTOS/queue.c" 1
 4039 0086 4FF00000 			mov r0, #0					
 4040 008a 80F31188 		msr basepri, r0				
 4041              	
 4042              	@ 0 "" 2
1013:FreeRTOS/queue.c **** 
1014:FreeRTOS/queue.c **** 	return xReturn;
 4043              		.loc 1 1014 0
 4044              		.thumb
 4045 008e 3B69     		ldr	r3, [r7, #16]
1015:FreeRTOS/queue.c **** }
 4046              		.loc 1 1015 0
 4047 0090 1846     		mov	r0, r3
 4048 0092 07F11807 		add	r7, r7, #24
 4049 0096 BD46     		mov	sp, r7
 4050 0098 80BD     		pop	{r7, pc}
ARM GAS  /tmp/cch3WSAd.s 			page 166


 4051              	.LFE33:
 4052              		.size	xQueueReceiveFromISR, .-xQueueReceiveFromISR
 4053 009a 00BF     		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 4054              		.align	2
 4055              		.global	uxQueueMessagesWaiting
 4056              		.thumb
 4057              		.thumb_func
 4058              		.type	uxQueueMessagesWaiting, %function
 4059              	uxQueueMessagesWaiting:
 4060              	.LFB34:
1016:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1017:FreeRTOS/queue.c **** 
1018:FreeRTOS/queue.c **** unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
1019:FreeRTOS/queue.c **** {
 4061              		.loc 1 1019 0
 4062              		@ args = 0, pretend = 0, frame = 16
 4063              		@ frame_needed = 1, uses_anonymous_args = 0
 4064 0000 80B5     		push	{r7, lr}
 4065              	.LCFI15:
 4066 0002 84B0     		sub	sp, sp, #16
 4067              	.LCFI16:
 4068 0004 00AF     		add	r7, sp, #0
 4069              	.LCFI17:
 4070 0006 7860     		str	r0, [r7, #4]
1020:FreeRTOS/queue.c **** unsigned portBASE_TYPE uxReturn;
1021:FreeRTOS/queue.c **** 
1022:FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
 4071              		.loc 1 1022 0
 4072 0008 FFF7FEFF 		bl	vPortEnterCritical
1023:FreeRTOS/queue.c **** 		uxReturn = pxQueue->uxMessagesWaiting;
 4073              		.loc 1 1023 0
 4074 000c 7B68     		ldr	r3, [r7, #4]
 4075 000e 9B6B     		ldr	r3, [r3, #56]
 4076 0010 FB60     		str	r3, [r7, #12]
1024:FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
 4077              		.loc 1 1024 0
 4078 0012 FFF7FEFF 		bl	vPortExitCritical
1025:FreeRTOS/queue.c **** 
1026:FreeRTOS/queue.c **** 	return uxReturn;
 4079              		.loc 1 1026 0
 4080 0016 FB68     		ldr	r3, [r7, #12]
1027:FreeRTOS/queue.c **** }
 4081              		.loc 1 1027 0
 4082 0018 1846     		mov	r0, r3
 4083 001a 07F11007 		add	r7, r7, #16
 4084 001e BD46     		mov	sp, r7
 4085 0020 80BD     		pop	{r7, pc}
 4086              	.LFE34:
 4087              		.size	uxQueueMessagesWaiting, .-uxQueueMessagesWaiting
 4088 0022 00BF     		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 4089              		.align	2
 4090              		.global	uxQueueMessagesWaitingFromISR
 4091              		.thumb
 4092              		.thumb_func
 4093              		.type	uxQueueMessagesWaitingFromISR, %function
 4094              	uxQueueMessagesWaitingFromISR:
 4095              	.LFB35:
ARM GAS  /tmp/cch3WSAd.s 			page 167


1028:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1029:FreeRTOS/queue.c **** 
1030:FreeRTOS/queue.c **** unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
1031:FreeRTOS/queue.c **** {
 4096              		.loc 1 1031 0
 4097              		@ args = 0, pretend = 0, frame = 16
 4098              		@ frame_needed = 1, uses_anonymous_args = 0
 4099              		@ link register save eliminated.
 4100 0000 80B4     		push	{r7}
 4101              	.LCFI18:
 4102 0002 85B0     		sub	sp, sp, #20
 4103              	.LCFI19:
 4104 0004 00AF     		add	r7, sp, #0
 4105              	.LCFI20:
 4106 0006 7860     		str	r0, [r7, #4]
1032:FreeRTOS/queue.c **** unsigned portBASE_TYPE uxReturn;
1033:FreeRTOS/queue.c **** 
1034:FreeRTOS/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
 4107              		.loc 1 1034 0
 4108 0008 7B68     		ldr	r3, [r7, #4]
 4109 000a 9B6B     		ldr	r3, [r3, #56]
 4110 000c FB60     		str	r3, [r7, #12]
1035:FreeRTOS/queue.c **** 
1036:FreeRTOS/queue.c **** 	return uxReturn;
 4111              		.loc 1 1036 0
 4112 000e FB68     		ldr	r3, [r7, #12]
1037:FreeRTOS/queue.c **** }
 4113              		.loc 1 1037 0
 4114 0010 1846     		mov	r0, r3
 4115 0012 07F11407 		add	r7, r7, #20
 4116 0016 BD46     		mov	sp, r7
 4117 0018 80BC     		pop	{r7}
 4118 001a 7047     		bx	lr
 4119              	.LFE35:
 4120              		.size	uxQueueMessagesWaitingFromISR, .-uxQueueMessagesWaitingFromISR
 4121              		.section	.text.vQueueDelete,"ax",%progbits
 4122              		.align	2
 4123              		.global	vQueueDelete
 4124              		.thumb
 4125              		.thumb_func
 4126              		.type	vQueueDelete, %function
 4127              	vQueueDelete:
 4128              	.LFB36:
1038:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1039:FreeRTOS/queue.c **** 
1040:FreeRTOS/queue.c **** void vQueueDelete( xQueueHandle pxQueue )
1041:FreeRTOS/queue.c **** {
 4129              		.loc 1 1041 0
 4130              		@ args = 0, pretend = 0, frame = 8
 4131              		@ frame_needed = 1, uses_anonymous_args = 0
 4132 0000 80B5     		push	{r7, lr}
 4133              	.LCFI21:
 4134 0002 82B0     		sub	sp, sp, #8
 4135              	.LCFI22:
 4136 0004 00AF     		add	r7, sp, #0
 4137              	.LCFI23:
 4138 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/cch3WSAd.s 			page 168


1042:FreeRTOS/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1043:FreeRTOS/queue.c **** 	vQueueUnregisterQueue( pxQueue );
 4139              		.loc 1 1043 0
 4140 0008 7868     		ldr	r0, [r7, #4]
 4141 000a FFF7FEFF 		bl	vQueueUnregisterQueue
1044:FreeRTOS/queue.c **** 	vPortFree( pxQueue->pcHead );
 4142              		.loc 1 1044 0
 4143 000e 7B68     		ldr	r3, [r7, #4]
 4144 0010 1B68     		ldr	r3, [r3, #0]
 4145 0012 1846     		mov	r0, r3
 4146 0014 FFF7FEFF 		bl	vPortFree
1045:FreeRTOS/queue.c **** 	vPortFree( pxQueue );
 4147              		.loc 1 1045 0
 4148 0018 7868     		ldr	r0, [r7, #4]
 4149 001a FFF7FEFF 		bl	vPortFree
1046:FreeRTOS/queue.c **** }
 4150              		.loc 1 1046 0
 4151 001e 07F10807 		add	r7, r7, #8
 4152 0022 BD46     		mov	sp, r7
 4153 0024 80BD     		pop	{r7, pc}
 4154              	.LFE36:
 4155              		.size	vQueueDelete, .-vQueueDelete
 4156 0026 00BF     		.section	.text.prvCopyDataToQueue,"ax",%progbits
 4157              		.align	2
 4158              		.thumb
 4159              		.thumb_func
 4160              		.type	prvCopyDataToQueue, %function
 4161              	prvCopyDataToQueue:
 4162              	.LFB37:
1047:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1048:FreeRTOS/queue.c **** 
1049:FreeRTOS/queue.c **** static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition
1050:FreeRTOS/queue.c **** {
 4163              		.loc 1 1050 0
 4164              		@ args = 0, pretend = 0, frame = 16
 4165              		@ frame_needed = 1, uses_anonymous_args = 0
 4166 0000 80B5     		push	{r7, lr}
 4167              	.LCFI24:
 4168 0002 84B0     		sub	sp, sp, #16
 4169              	.LCFI25:
 4170 0004 00AF     		add	r7, sp, #0
 4171              	.LCFI26:
 4172 0006 F860     		str	r0, [r7, #12]
 4173 0008 B960     		str	r1, [r7, #8]
 4174 000a 7A60     		str	r2, [r7, #4]
1051:FreeRTOS/queue.c **** 	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 4175              		.loc 1 1051 0
 4176 000c FB68     		ldr	r3, [r7, #12]
 4177 000e 1B6C     		ldr	r3, [r3, #64]
 4178 0010 002B     		cmp	r3, #0
 4179 0012 40D0     		beq	.L66
 4180              	.L65:
1052:FreeRTOS/queue.c **** 	{
1053:FreeRTOS/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1054:FreeRTOS/queue.c **** 		{
1055:FreeRTOS/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1056:FreeRTOS/queue.c **** 			{
ARM GAS  /tmp/cch3WSAd.s 			page 169


1057:FreeRTOS/queue.c **** 				/* The mutex is no longer being held. */
1058:FreeRTOS/queue.c **** 				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1059:FreeRTOS/queue.c **** 				pxQueue->pxMutexHolder = NULL;
1060:FreeRTOS/queue.c **** 			}
1061:FreeRTOS/queue.c **** 		}
1062:FreeRTOS/queue.c **** 		#endif
1063:FreeRTOS/queue.c **** 	}
1064:FreeRTOS/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
 4181              		.loc 1 1064 0
 4182 0014 7B68     		ldr	r3, [r7, #4]
 4183 0016 002B     		cmp	r3, #0
 4184 0018 1AD1     		bne	.L67
1065:FreeRTOS/queue.c **** 	{
1066:FreeRTOS/queue.c **** 		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 4185              		.loc 1 1066 0
 4186 001a FB68     		ldr	r3, [r7, #12]
 4187 001c 9A68     		ldr	r2, [r3, #8]
 4188 001e FB68     		ldr	r3, [r7, #12]
 4189 0020 1B6C     		ldr	r3, [r3, #64]
 4190 0022 1046     		mov	r0, r2
 4191 0024 B968     		ldr	r1, [r7, #8]
 4192 0026 1A46     		mov	r2, r3
 4193 0028 FFF7FEFF 		bl	memcpy
1067:FreeRTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 4194              		.loc 1 1067 0
 4195 002c FB68     		ldr	r3, [r7, #12]
 4196 002e 9A68     		ldr	r2, [r3, #8]
 4197 0030 FB68     		ldr	r3, [r7, #12]
 4198 0032 1B6C     		ldr	r3, [r3, #64]
 4199 0034 1A44     		add	r2, r2, r3
 4200 0036 FB68     		ldr	r3, [r7, #12]
 4201 0038 9A60     		str	r2, [r3, #8]
1068:FreeRTOS/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 4202              		.loc 1 1068 0
 4203 003a FB68     		ldr	r3, [r7, #12]
 4204 003c 9A68     		ldr	r2, [r3, #8]
 4205 003e FB68     		ldr	r3, [r7, #12]
 4206 0040 5B68     		ldr	r3, [r3, #4]
 4207 0042 9A42     		cmp	r2, r3
 4208 0044 26D3     		bcc	.L70
1069:FreeRTOS/queue.c **** 		{
1070:FreeRTOS/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
 4209              		.loc 1 1070 0
 4210 0046 FB68     		ldr	r3, [r7, #12]
 4211 0048 1A68     		ldr	r2, [r3, #0]
 4212 004a FB68     		ldr	r3, [r7, #12]
 4213 004c 9A60     		str	r2, [r3, #8]
 4214 004e 22E0     		b	.L66
 4215              	.L67:
1071:FreeRTOS/queue.c **** 		}
1072:FreeRTOS/queue.c **** 	}
1073:FreeRTOS/queue.c **** 	else
1074:FreeRTOS/queue.c **** 	{
1075:FreeRTOS/queue.c **** 		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 4216              		.loc 1 1075 0
 4217 0050 FB68     		ldr	r3, [r7, #12]
 4218 0052 DA68     		ldr	r2, [r3, #12]
ARM GAS  /tmp/cch3WSAd.s 			page 170


 4219 0054 FB68     		ldr	r3, [r7, #12]
 4220 0056 1B6C     		ldr	r3, [r3, #64]
 4221 0058 1046     		mov	r0, r2
 4222 005a B968     		ldr	r1, [r7, #8]
 4223 005c 1A46     		mov	r2, r3
 4224 005e FFF7FEFF 		bl	memcpy
1076:FreeRTOS/queue.c **** 		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 4225              		.loc 1 1076 0
 4226 0062 FB68     		ldr	r3, [r7, #12]
 4227 0064 DA68     		ldr	r2, [r3, #12]
 4228 0066 FB68     		ldr	r3, [r7, #12]
 4229 0068 1B6C     		ldr	r3, [r3, #64]
 4230 006a C3F10003 		rsb	r3, r3, #0
 4231 006e 1A44     		add	r2, r2, r3
 4232 0070 FB68     		ldr	r3, [r7, #12]
 4233 0072 DA60     		str	r2, [r3, #12]
1077:FreeRTOS/queue.c **** 		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 4234              		.loc 1 1077 0
 4235 0074 FB68     		ldr	r3, [r7, #12]
 4236 0076 DA68     		ldr	r2, [r3, #12]
 4237 0078 FB68     		ldr	r3, [r7, #12]
 4238 007a 1B68     		ldr	r3, [r3, #0]
 4239 007c 9A42     		cmp	r2, r3
 4240 007e 0AD2     		bcs	.L66
1078:FreeRTOS/queue.c **** 		{
1079:FreeRTOS/queue.c **** 			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 4241              		.loc 1 1079 0
 4242 0080 FB68     		ldr	r3, [r7, #12]
 4243 0082 5A68     		ldr	r2, [r3, #4]
 4244 0084 FB68     		ldr	r3, [r7, #12]
 4245 0086 1B6C     		ldr	r3, [r3, #64]
 4246 0088 C3F10003 		rsb	r3, r3, #0
 4247 008c 1A44     		add	r2, r2, r3
 4248 008e FB68     		ldr	r3, [r7, #12]
 4249 0090 DA60     		str	r2, [r3, #12]
 4250 0092 00E0     		b	.L66
 4251              	.L70:
 4252              		.loc 1 1070 0
 4253 0094 00BF     		nop
 4254              	.L66:
1080:FreeRTOS/queue.c **** 		}
1081:FreeRTOS/queue.c **** 	}
1082:FreeRTOS/queue.c **** 
1083:FreeRTOS/queue.c **** 	++( pxQueue->uxMessagesWaiting );
 4255              		.loc 1 1083 0
 4256 0096 FB68     		ldr	r3, [r7, #12]
 4257 0098 9B6B     		ldr	r3, [r3, #56]
 4258 009a 03F10102 		add	r2, r3, #1
 4259 009e FB68     		ldr	r3, [r7, #12]
 4260 00a0 9A63     		str	r2, [r3, #56]
1084:FreeRTOS/queue.c **** }
 4261              		.loc 1 1084 0
 4262 00a2 07F11007 		add	r7, r7, #16
 4263 00a6 BD46     		mov	sp, r7
 4264 00a8 80BD     		pop	{r7, pc}
 4265              	.LFE37:
 4266              		.size	prvCopyDataToQueue, .-prvCopyDataToQueue
ARM GAS  /tmp/cch3WSAd.s 			page 171


 4267 00aa 00BF     		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 4268              		.align	2
 4269              		.thumb
 4270              		.thumb_func
 4271              		.type	prvCopyDataFromQueue, %function
 4272              	prvCopyDataFromQueue:
 4273              	.LFB38:
1085:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1086:FreeRTOS/queue.c **** 
1087:FreeRTOS/queue.c **** static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
1088:FreeRTOS/queue.c **** {
 4274              		.loc 1 1088 0
 4275              		@ args = 0, pretend = 0, frame = 8
 4276              		@ frame_needed = 1, uses_anonymous_args = 0
 4277 0000 80B5     		push	{r7, lr}
 4278              	.LCFI27:
 4279 0002 82B0     		sub	sp, sp, #8
 4280              	.LCFI28:
 4281 0004 00AF     		add	r7, sp, #0
 4282              	.LCFI29:
 4283 0006 7860     		str	r0, [r7, #4]
 4284 0008 3960     		str	r1, [r7, #0]
1089:FreeRTOS/queue.c **** 	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 4285              		.loc 1 1089 0
 4286 000a 7B68     		ldr	r3, [r7, #4]
 4287 000c 1B68     		ldr	r3, [r3, #0]
 4288 000e 002B     		cmp	r3, #0
 4289 0010 19D0     		beq	.L74
1090:FreeRTOS/queue.c **** 	{
1091:FreeRTOS/queue.c **** 		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 4290              		.loc 1 1091 0
 4291 0012 7B68     		ldr	r3, [r7, #4]
 4292 0014 DA68     		ldr	r2, [r3, #12]
 4293 0016 7B68     		ldr	r3, [r7, #4]
 4294 0018 1B6C     		ldr	r3, [r3, #64]
 4295 001a 1A44     		add	r2, r2, r3
 4296 001c 7B68     		ldr	r3, [r7, #4]
 4297 001e DA60     		str	r2, [r3, #12]
1092:FreeRTOS/queue.c **** 		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 4298              		.loc 1 1092 0
 4299 0020 7B68     		ldr	r3, [r7, #4]
 4300 0022 DA68     		ldr	r2, [r3, #12]
 4301 0024 7B68     		ldr	r3, [r7, #4]
 4302 0026 5B68     		ldr	r3, [r3, #4]
 4303 0028 9A42     		cmp	r2, r3
 4304 002a 03D3     		bcc	.L73
1093:FreeRTOS/queue.c **** 		{
1094:FreeRTOS/queue.c **** 			pxQueue->pcReadFrom = pxQueue->pcHead;
 4305              		.loc 1 1094 0
 4306 002c 7B68     		ldr	r3, [r7, #4]
 4307 002e 1A68     		ldr	r2, [r3, #0]
 4308 0030 7B68     		ldr	r3, [r7, #4]
 4309 0032 DA60     		str	r2, [r3, #12]
 4310              	.L73:
1095:FreeRTOS/queue.c **** 		}
1096:FreeRTOS/queue.c **** 		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 4311              		.loc 1 1096 0
ARM GAS  /tmp/cch3WSAd.s 			page 172


 4312 0034 7B68     		ldr	r3, [r7, #4]
 4313 0036 DA68     		ldr	r2, [r3, #12]
 4314 0038 7B68     		ldr	r3, [r7, #4]
 4315 003a 1B6C     		ldr	r3, [r3, #64]
 4316 003c 3868     		ldr	r0, [r7, #0]
 4317 003e 1146     		mov	r1, r2
 4318 0040 1A46     		mov	r2, r3
 4319 0042 FFF7FEFF 		bl	memcpy
 4320              	.L74:
1097:FreeRTOS/queue.c **** 	}
1098:FreeRTOS/queue.c **** }
 4321              		.loc 1 1098 0
 4322 0046 07F10807 		add	r7, r7, #8
 4323 004a BD46     		mov	sp, r7
 4324 004c 80BD     		pop	{r7, pc}
 4325              	.LFE38:
 4326              		.size	prvCopyDataFromQueue, .-prvCopyDataFromQueue
 4327 004e 00BF     		.section	.text.prvUnlockQueue,"ax",%progbits
 4328              		.align	2
 4329              		.thumb
 4330              		.thumb_func
 4331              		.type	prvUnlockQueue, %function
 4332              	prvUnlockQueue:
 4333              	.LFB39:
1099:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1100:FreeRTOS/queue.c **** 
1101:FreeRTOS/queue.c **** static void prvUnlockQueue( xQueueHandle pxQueue )
1102:FreeRTOS/queue.c **** {
 4334              		.loc 1 1102 0
 4335              		@ args = 0, pretend = 0, frame = 8
 4336              		@ frame_needed = 1, uses_anonymous_args = 0
 4337 0000 80B5     		push	{r7, lr}
 4338              	.LCFI30:
 4339 0002 82B0     		sub	sp, sp, #8
 4340              	.LCFI31:
 4341 0004 00AF     		add	r7, sp, #0
 4342              	.LCFI32:
 4343 0006 7860     		str	r0, [r7, #4]
1103:FreeRTOS/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1104:FreeRTOS/queue.c **** 
1105:FreeRTOS/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1106:FreeRTOS/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1107:FreeRTOS/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1108:FreeRTOS/queue.c **** 	updated. */
1109:FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
 4344              		.loc 1 1109 0
 4345 0008 FFF7FEFF 		bl	vPortEnterCritical
1110:FreeRTOS/queue.c **** 	{
1111:FreeRTOS/queue.c **** 		/* See if data was added to the queue while it was locked. */
1112:FreeRTOS/queue.c **** 		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 4346              		.loc 1 1112 0
 4347 000c 14E0     		b	.L76
 4348              	.L80:
1113:FreeRTOS/queue.c **** 		{
1114:FreeRTOS/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1115:FreeRTOS/queue.c **** 			blocked waiting for data to become available? */
1116:FreeRTOS/queue.c **** 			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
ARM GAS  /tmp/cch3WSAd.s 			page 173


 4349              		.loc 1 1116 0
 4350 000e 7B68     		ldr	r3, [r7, #4]
 4351 0010 5B6A     		ldr	r3, [r3, #36]
 4352 0012 002B     		cmp	r3, #0
 4353 0014 15D0     		beq	.L87
1117:FreeRTOS/queue.c **** 			{
1118:FreeRTOS/queue.c **** 				/* Tasks that are removed from the event list will get added to
1119:FreeRTOS/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1120:FreeRTOS/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 4354              		.loc 1 1120 0
 4355 0016 7B68     		ldr	r3, [r7, #4]
 4356 0018 03F12403 		add	r3, r3, #36
 4357 001c 1846     		mov	r0, r3
 4358 001e FFF7FEFF 		bl	xTaskRemoveFromEventList
 4359 0022 0346     		mov	r3, r0
 4360 0024 002B     		cmp	r3, #0
 4361 0026 01D0     		beq	.L78
1121:FreeRTOS/queue.c **** 				{
1122:FreeRTOS/queue.c **** 					/* The task waiting has a higher priority so record that a
1123:FreeRTOS/queue.c **** 					context	switch is required. */
1124:FreeRTOS/queue.c **** 					vTaskMissedYield();
 4362              		.loc 1 1124 0
 4363 0028 FFF7FEFF 		bl	vTaskMissedYield
 4364              	.L78:
1125:FreeRTOS/queue.c **** 				}
1126:FreeRTOS/queue.c **** 
1127:FreeRTOS/queue.c **** 				--( pxQueue->xTxLock );
 4365              		.loc 1 1127 0
 4366 002c 7B68     		ldr	r3, [r7, #4]
 4367 002e 9B6C     		ldr	r3, [r3, #72]
 4368 0030 03F1FF32 		add	r2, r3, #-1
 4369 0034 7B68     		ldr	r3, [r7, #4]
 4370 0036 9A64     		str	r2, [r3, #72]
 4371              	.L76:
 4372              		.loc 1 1112 0
 4373 0038 7B68     		ldr	r3, [r7, #4]
 4374 003a 9B6C     		ldr	r3, [r3, #72]
 4375 003c 002B     		cmp	r3, #0
 4376 003e E6DC     		bgt	.L80
 4377 0040 00E0     		b	.L79
 4378              	.L87:
1128:FreeRTOS/queue.c **** 			}
1129:FreeRTOS/queue.c **** 			else
1130:FreeRTOS/queue.c **** 			{
1131:FreeRTOS/queue.c **** 				break;
 4379              		.loc 1 1131 0
 4380 0042 00BF     		nop
 4381              	.L79:
1132:FreeRTOS/queue.c **** 			}
1133:FreeRTOS/queue.c **** 		}
1134:FreeRTOS/queue.c **** 
1135:FreeRTOS/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 4382              		.loc 1 1135 0
 4383 0044 7B68     		ldr	r3, [r7, #4]
 4384 0046 4FF0FF32 		mov	r2, #-1
 4385 004a 9A64     		str	r2, [r3, #72]
1136:FreeRTOS/queue.c **** 	}
ARM GAS  /tmp/cch3WSAd.s 			page 174


1137:FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
 4386              		.loc 1 1137 0
 4387 004c FFF7FEFF 		bl	vPortExitCritical
1138:FreeRTOS/queue.c **** 
1139:FreeRTOS/queue.c **** 	/* Do the same for the Rx lock. */
1140:FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
 4388              		.loc 1 1140 0
 4389 0050 FFF7FEFF 		bl	vPortEnterCritical
1141:FreeRTOS/queue.c **** 	{
1142:FreeRTOS/queue.c **** 		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 4390              		.loc 1 1142 0
 4391 0054 14E0     		b	.L81
 4392              	.L85:
1143:FreeRTOS/queue.c **** 		{
1144:FreeRTOS/queue.c **** 			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
 4393              		.loc 1 1144 0
 4394 0056 7B68     		ldr	r3, [r7, #4]
 4395 0058 1B69     		ldr	r3, [r3, #16]
 4396 005a 002B     		cmp	r3, #0
 4397 005c 15D0     		beq	.L88
1145:FreeRTOS/queue.c **** 			{
1146:FreeRTOS/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 4398              		.loc 1 1146 0
 4399 005e 7B68     		ldr	r3, [r7, #4]
 4400 0060 03F11003 		add	r3, r3, #16
 4401 0064 1846     		mov	r0, r3
 4402 0066 FFF7FEFF 		bl	xTaskRemoveFromEventList
 4403 006a 0346     		mov	r3, r0
 4404 006c 002B     		cmp	r3, #0
 4405 006e 01D0     		beq	.L83
1147:FreeRTOS/queue.c **** 				{
1148:FreeRTOS/queue.c **** 					vTaskMissedYield();
 4406              		.loc 1 1148 0
 4407 0070 FFF7FEFF 		bl	vTaskMissedYield
 4408              	.L83:
1149:FreeRTOS/queue.c **** 				}
1150:FreeRTOS/queue.c **** 
1151:FreeRTOS/queue.c **** 				--( pxQueue->xRxLock );
 4409              		.loc 1 1151 0
 4410 0074 7B68     		ldr	r3, [r7, #4]
 4411 0076 5B6C     		ldr	r3, [r3, #68]
 4412 0078 03F1FF32 		add	r2, r3, #-1
 4413 007c 7B68     		ldr	r3, [r7, #4]
 4414 007e 5A64     		str	r2, [r3, #68]
 4415              	.L81:
 4416              		.loc 1 1142 0
 4417 0080 7B68     		ldr	r3, [r7, #4]
 4418 0082 5B6C     		ldr	r3, [r3, #68]
 4419 0084 002B     		cmp	r3, #0
 4420 0086 E6DC     		bgt	.L85
 4421 0088 00E0     		b	.L84
 4422              	.L88:
1152:FreeRTOS/queue.c **** 			}
1153:FreeRTOS/queue.c **** 			else
1154:FreeRTOS/queue.c **** 			{
1155:FreeRTOS/queue.c **** 				break;
 4423              		.loc 1 1155 0
ARM GAS  /tmp/cch3WSAd.s 			page 175


 4424 008a 00BF     		nop
 4425              	.L84:
1156:FreeRTOS/queue.c **** 			}
1157:FreeRTOS/queue.c **** 		}
1158:FreeRTOS/queue.c **** 
1159:FreeRTOS/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 4426              		.loc 1 1159 0
 4427 008c 7B68     		ldr	r3, [r7, #4]
 4428 008e 4FF0FF32 		mov	r2, #-1
 4429 0092 5A64     		str	r2, [r3, #68]
1160:FreeRTOS/queue.c **** 	}
1161:FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
 4430              		.loc 1 1161 0
 4431 0094 FFF7FEFF 		bl	vPortExitCritical
1162:FreeRTOS/queue.c **** }
 4432              		.loc 1 1162 0
 4433 0098 07F10807 		add	r7, r7, #8
 4434 009c BD46     		mov	sp, r7
 4435 009e 80BD     		pop	{r7, pc}
 4436              	.LFE39:
 4437              		.size	prvUnlockQueue, .-prvUnlockQueue
 4438              		.section	.text.prvIsQueueEmpty,"ax",%progbits
 4439              		.align	2
 4440              		.thumb
 4441              		.thumb_func
 4442              		.type	prvIsQueueEmpty, %function
 4443              	prvIsQueueEmpty:
 4444              	.LFB40:
1163:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1164:FreeRTOS/queue.c **** 
1165:FreeRTOS/queue.c **** static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
1166:FreeRTOS/queue.c **** {
 4445              		.loc 1 1166 0
 4446              		@ args = 0, pretend = 0, frame = 16
 4447              		@ frame_needed = 1, uses_anonymous_args = 0
 4448 0000 80B5     		push	{r7, lr}
 4449              	.LCFI33:
 4450 0002 84B0     		sub	sp, sp, #16
 4451              	.LCFI34:
 4452 0004 00AF     		add	r7, sp, #0
 4453              	.LCFI35:
 4454 0006 7860     		str	r0, [r7, #4]
1167:FreeRTOS/queue.c **** signed portBASE_TYPE xReturn;
1168:FreeRTOS/queue.c **** 
1169:FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
 4455              		.loc 1 1169 0
 4456 0008 FFF7FEFF 		bl	vPortEnterCritical
1170:FreeRTOS/queue.c **** 		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 4457              		.loc 1 1170 0
 4458 000c 7B68     		ldr	r3, [r7, #4]
 4459 000e 9B6B     		ldr	r3, [r3, #56]
 4460 0010 002B     		cmp	r3, #0
 4461 0012 14BF     		ite	ne
 4462 0014 0023     		movne	r3, #0
 4463 0016 0123     		moveq	r3, #1
 4464 0018 FB60     		str	r3, [r7, #12]
1171:FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
ARM GAS  /tmp/cch3WSAd.s 			page 176


 4465              		.loc 1 1171 0
 4466 001a FFF7FEFF 		bl	vPortExitCritical
1172:FreeRTOS/queue.c **** 
1173:FreeRTOS/queue.c **** 	return xReturn;
 4467              		.loc 1 1173 0
 4468 001e FB68     		ldr	r3, [r7, #12]
1174:FreeRTOS/queue.c **** }
 4469              		.loc 1 1174 0
 4470 0020 1846     		mov	r0, r3
 4471 0022 07F11007 		add	r7, r7, #16
 4472 0026 BD46     		mov	sp, r7
 4473 0028 80BD     		pop	{r7, pc}
 4474              	.LFE40:
 4475              		.size	prvIsQueueEmpty, .-prvIsQueueEmpty
 4476 002a 00BF     		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 4477              		.align	2
 4478              		.global	xQueueIsQueueEmptyFromISR
 4479              		.thumb
 4480              		.thumb_func
 4481              		.type	xQueueIsQueueEmptyFromISR, %function
 4482              	xQueueIsQueueEmptyFromISR:
 4483              	.LFB41:
1175:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1176:FreeRTOS/queue.c **** 
1177:FreeRTOS/queue.c **** signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
1178:FreeRTOS/queue.c **** {
 4484              		.loc 1 1178 0
 4485              		@ args = 0, pretend = 0, frame = 16
 4486              		@ frame_needed = 1, uses_anonymous_args = 0
 4487              		@ link register save eliminated.
 4488 0000 80B4     		push	{r7}
 4489              	.LCFI36:
 4490 0002 85B0     		sub	sp, sp, #20
 4491              	.LCFI37:
 4492 0004 00AF     		add	r7, sp, #0
 4493              	.LCFI38:
 4494 0006 7860     		str	r0, [r7, #4]
1179:FreeRTOS/queue.c **** signed portBASE_TYPE xReturn;
1180:FreeRTOS/queue.c **** 
1181:FreeRTOS/queue.c **** 	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 4495              		.loc 1 1181 0
 4496 0008 7B68     		ldr	r3, [r7, #4]
 4497 000a 9B6B     		ldr	r3, [r3, #56]
 4498 000c 002B     		cmp	r3, #0
 4499 000e 14BF     		ite	ne
 4500 0010 0023     		movne	r3, #0
 4501 0012 0123     		moveq	r3, #1
 4502 0014 FB60     		str	r3, [r7, #12]
1182:FreeRTOS/queue.c **** 
1183:FreeRTOS/queue.c **** 	return xReturn;
 4503              		.loc 1 1183 0
 4504 0016 FB68     		ldr	r3, [r7, #12]
1184:FreeRTOS/queue.c **** }
 4505              		.loc 1 1184 0
 4506 0018 1846     		mov	r0, r3
 4507 001a 07F11407 		add	r7, r7, #20
 4508 001e BD46     		mov	sp, r7
ARM GAS  /tmp/cch3WSAd.s 			page 177


 4509 0020 80BC     		pop	{r7}
 4510 0022 7047     		bx	lr
 4511              	.LFE41:
 4512              		.size	xQueueIsQueueEmptyFromISR, .-xQueueIsQueueEmptyFromISR
 4513              		.section	.text.prvIsQueueFull,"ax",%progbits
 4514              		.align	2
 4515              		.thumb
 4516              		.thumb_func
 4517              		.type	prvIsQueueFull, %function
 4518              	prvIsQueueFull:
 4519              	.LFB42:
1185:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1186:FreeRTOS/queue.c **** 
1187:FreeRTOS/queue.c **** static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
1188:FreeRTOS/queue.c **** {
 4520              		.loc 1 1188 0
 4521              		@ args = 0, pretend = 0, frame = 16
 4522              		@ frame_needed = 1, uses_anonymous_args = 0
 4523 0000 80B5     		push	{r7, lr}
 4524              	.LCFI39:
 4525 0002 84B0     		sub	sp, sp, #16
 4526              	.LCFI40:
 4527 0004 00AF     		add	r7, sp, #0
 4528              	.LCFI41:
 4529 0006 7860     		str	r0, [r7, #4]
1189:FreeRTOS/queue.c **** signed portBASE_TYPE xReturn;
1190:FreeRTOS/queue.c **** 
1191:FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
 4530              		.loc 1 1191 0
 4531 0008 FFF7FEFF 		bl	vPortEnterCritical
1192:FreeRTOS/queue.c **** 		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 4532              		.loc 1 1192 0
 4533 000c 7B68     		ldr	r3, [r7, #4]
 4534 000e 9A6B     		ldr	r2, [r3, #56]
 4535 0010 7B68     		ldr	r3, [r7, #4]
 4536 0012 DB6B     		ldr	r3, [r3, #60]
 4537 0014 9A42     		cmp	r2, r3
 4538 0016 14BF     		ite	ne
 4539 0018 0023     		movne	r3, #0
 4540 001a 0123     		moveq	r3, #1
 4541 001c FB60     		str	r3, [r7, #12]
1193:FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
 4542              		.loc 1 1193 0
 4543 001e FFF7FEFF 		bl	vPortExitCritical
1194:FreeRTOS/queue.c **** 
1195:FreeRTOS/queue.c **** 	return xReturn;
 4544              		.loc 1 1195 0
 4545 0022 FB68     		ldr	r3, [r7, #12]
1196:FreeRTOS/queue.c **** }
 4546              		.loc 1 1196 0
 4547 0024 1846     		mov	r0, r3
 4548 0026 07F11007 		add	r7, r7, #16
 4549 002a BD46     		mov	sp, r7
 4550 002c 80BD     		pop	{r7, pc}
 4551              	.LFE42:
 4552              		.size	prvIsQueueFull, .-prvIsQueueFull
 4553 002e 00BF     		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
ARM GAS  /tmp/cch3WSAd.s 			page 178


 4554              		.align	2
 4555              		.global	xQueueIsQueueFullFromISR
 4556              		.thumb
 4557              		.thumb_func
 4558              		.type	xQueueIsQueueFullFromISR, %function
 4559              	xQueueIsQueueFullFromISR:
 4560              	.LFB43:
1197:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1198:FreeRTOS/queue.c **** 
1199:FreeRTOS/queue.c **** signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
1200:FreeRTOS/queue.c **** {
 4561              		.loc 1 1200 0
 4562              		@ args = 0, pretend = 0, frame = 16
 4563              		@ frame_needed = 1, uses_anonymous_args = 0
 4564              		@ link register save eliminated.
 4565 0000 80B4     		push	{r7}
 4566              	.LCFI42:
 4567 0002 85B0     		sub	sp, sp, #20
 4568              	.LCFI43:
 4569 0004 00AF     		add	r7, sp, #0
 4570              	.LCFI44:
 4571 0006 7860     		str	r0, [r7, #4]
1201:FreeRTOS/queue.c **** signed portBASE_TYPE xReturn;
1202:FreeRTOS/queue.c **** 
1203:FreeRTOS/queue.c **** 	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 4572              		.loc 1 1203 0
 4573 0008 7B68     		ldr	r3, [r7, #4]
 4574 000a 9A6B     		ldr	r2, [r3, #56]
 4575 000c 7B68     		ldr	r3, [r7, #4]
 4576 000e DB6B     		ldr	r3, [r3, #60]
 4577 0010 9A42     		cmp	r2, r3
 4578 0012 14BF     		ite	ne
 4579 0014 0023     		movne	r3, #0
 4580 0016 0123     		moveq	r3, #1
 4581 0018 FB60     		str	r3, [r7, #12]
1204:FreeRTOS/queue.c **** 
1205:FreeRTOS/queue.c **** 	return xReturn;
 4582              		.loc 1 1205 0
 4583 001a FB68     		ldr	r3, [r7, #12]
1206:FreeRTOS/queue.c **** }
 4584              		.loc 1 1206 0
 4585 001c 1846     		mov	r0, r3
 4586 001e 07F11407 		add	r7, r7, #20
 4587 0022 BD46     		mov	sp, r7
 4588 0024 80BC     		pop	{r7}
 4589 0026 7047     		bx	lr
 4590              	.LFE43:
 4591              		.size	xQueueIsQueueFullFromISR, .-xQueueIsQueueFullFromISR
 4592              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 4593              		.align	2
 4594              		.global	vQueueAddToRegistry
 4595              		.thumb
 4596              		.thumb_func
 4597              		.type	vQueueAddToRegistry, %function
 4598              	vQueueAddToRegistry:
 4599              	.LFB44:
1207:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cch3WSAd.s 			page 179


1208:FreeRTOS/queue.c **** 
1209:FreeRTOS/queue.c **** #if configUSE_CO_ROUTINES == 1
1210:FreeRTOS/queue.c **** signed portBASE_TYPE xQueueCRSend( xQueueHandle pxQueue, const void *pvItemToQueue, portTickType xT
1211:FreeRTOS/queue.c **** {
1212:FreeRTOS/queue.c **** signed portBASE_TYPE xReturn;
1213:FreeRTOS/queue.c **** 
1214:FreeRTOS/queue.c **** 	/* If the queue is already full we may have to block.  A critical section
1215:FreeRTOS/queue.c **** 	is required to prevent an interrupt removing something from the queue
1216:FreeRTOS/queue.c **** 	between the check to see if the queue is full and blocking on the queue. */
1217:FreeRTOS/queue.c **** 	portDISABLE_INTERRUPTS();
1218:FreeRTOS/queue.c **** 	{
1219:FreeRTOS/queue.c **** 		if( prvIsQueueFull( pxQueue ) )
1220:FreeRTOS/queue.c **** 		{
1221:FreeRTOS/queue.c **** 			/* The queue is full - do we want to block or just leave without
1222:FreeRTOS/queue.c **** 			posting? */
1223:FreeRTOS/queue.c **** 			if( xTicksToWait > ( portTickType ) 0 )
1224:FreeRTOS/queue.c **** 			{
1225:FreeRTOS/queue.c **** 				/* As this is called from a coroutine we cannot block directly, but
1226:FreeRTOS/queue.c **** 				return indicating that we need to block. */
1227:FreeRTOS/queue.c **** 				vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
1228:FreeRTOS/queue.c **** 				portENABLE_INTERRUPTS();
1229:FreeRTOS/queue.c **** 				return errQUEUE_BLOCKED;
1230:FreeRTOS/queue.c **** 			}
1231:FreeRTOS/queue.c **** 			else
1232:FreeRTOS/queue.c **** 			{
1233:FreeRTOS/queue.c **** 				portENABLE_INTERRUPTS();
1234:FreeRTOS/queue.c **** 				return errQUEUE_FULL;
1235:FreeRTOS/queue.c **** 			}
1236:FreeRTOS/queue.c **** 		}
1237:FreeRTOS/queue.c **** 	}
1238:FreeRTOS/queue.c **** 	portENABLE_INTERRUPTS();
1239:FreeRTOS/queue.c **** 
1240:FreeRTOS/queue.c **** 	portNOP();
1241:FreeRTOS/queue.c **** 
1242:FreeRTOS/queue.c **** 	portDISABLE_INTERRUPTS();
1243:FreeRTOS/queue.c **** 	{
1244:FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
1245:FreeRTOS/queue.c **** 		{
1246:FreeRTOS/queue.c **** 			/* There is room in the queue, copy the data into the queue. */
1247:FreeRTOS/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
1248:FreeRTOS/queue.c **** 			xReturn = pdPASS;
1249:FreeRTOS/queue.c **** 
1250:FreeRTOS/queue.c **** 			/* Were any co-routines waiting for data to become available? */
1251:FreeRTOS/queue.c **** 			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
1252:FreeRTOS/queue.c **** 			{
1253:FreeRTOS/queue.c **** 				/* In this instance the co-routine could be placed directly
1254:FreeRTOS/queue.c **** 				into the ready list as we are within a critical section.
1255:FreeRTOS/queue.c **** 				Instead the same pending ready list mechanism is used as if
1256:FreeRTOS/queue.c **** 				the event were caused from within an interrupt. */
1257:FreeRTOS/queue.c **** 				if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1258:FreeRTOS/queue.c **** 				{
1259:FreeRTOS/queue.c **** 					/* The co-routine waiting has a higher priority so record
1260:FreeRTOS/queue.c **** 					that a yield might be appropriate. */
1261:FreeRTOS/queue.c **** 					xReturn = errQUEUE_YIELD;
1262:FreeRTOS/queue.c **** 				}
1263:FreeRTOS/queue.c **** 			}
1264:FreeRTOS/queue.c **** 		}
ARM GAS  /tmp/cch3WSAd.s 			page 180


1265:FreeRTOS/queue.c **** 		else
1266:FreeRTOS/queue.c **** 		{
1267:FreeRTOS/queue.c **** 			xReturn = errQUEUE_FULL;
1268:FreeRTOS/queue.c **** 		}
1269:FreeRTOS/queue.c **** 	}
1270:FreeRTOS/queue.c **** 	portENABLE_INTERRUPTS();
1271:FreeRTOS/queue.c **** 
1272:FreeRTOS/queue.c **** 	return xReturn;
1273:FreeRTOS/queue.c **** }
1274:FreeRTOS/queue.c **** #endif
1275:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1276:FreeRTOS/queue.c **** 
1277:FreeRTOS/queue.c **** #if configUSE_CO_ROUTINES == 1
1278:FreeRTOS/queue.c **** signed portBASE_TYPE xQueueCRReceive( xQueueHandle pxQueue, void *pvBuffer, portTickType xTicksToWa
1279:FreeRTOS/queue.c **** {
1280:FreeRTOS/queue.c **** signed portBASE_TYPE xReturn;
1281:FreeRTOS/queue.c **** 
1282:FreeRTOS/queue.c **** 	/* If the queue is already empty we may have to block.  A critical section
1283:FreeRTOS/queue.c **** 	is required to prevent an interrupt adding something to the queue
1284:FreeRTOS/queue.c **** 	between the check to see if the queue is empty and blocking on the queue. */
1285:FreeRTOS/queue.c **** 	portDISABLE_INTERRUPTS();
1286:FreeRTOS/queue.c **** 	{
1287:FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 )
1288:FreeRTOS/queue.c **** 		{
1289:FreeRTOS/queue.c **** 			/* There are no messages in the queue, do we want to block or just
1290:FreeRTOS/queue.c **** 			leave with nothing? */
1291:FreeRTOS/queue.c **** 			if( xTicksToWait > ( portTickType ) 0 )
1292:FreeRTOS/queue.c **** 			{
1293:FreeRTOS/queue.c **** 				/* As this is a co-routine we cannot block directly, but return
1294:FreeRTOS/queue.c **** 				indicating that we need to block. */
1295:FreeRTOS/queue.c **** 				vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
1296:FreeRTOS/queue.c **** 				portENABLE_INTERRUPTS();
1297:FreeRTOS/queue.c **** 				return errQUEUE_BLOCKED;
1298:FreeRTOS/queue.c **** 			}
1299:FreeRTOS/queue.c **** 			else
1300:FreeRTOS/queue.c **** 			{
1301:FreeRTOS/queue.c **** 				portENABLE_INTERRUPTS();
1302:FreeRTOS/queue.c **** 				return errQUEUE_FULL;
1303:FreeRTOS/queue.c **** 			}
1304:FreeRTOS/queue.c **** 		}
1305:FreeRTOS/queue.c **** 	}
1306:FreeRTOS/queue.c **** 	portENABLE_INTERRUPTS();
1307:FreeRTOS/queue.c **** 
1308:FreeRTOS/queue.c **** 	portNOP();
1309:FreeRTOS/queue.c **** 
1310:FreeRTOS/queue.c **** 	portDISABLE_INTERRUPTS();
1311:FreeRTOS/queue.c **** 	{
1312:FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
1313:FreeRTOS/queue.c **** 		{
1314:FreeRTOS/queue.c **** 			/* Data is available from the queue. */
1315:FreeRTOS/queue.c **** 			pxQueue->pcReadFrom += pxQueue->uxItemSize;
1316:FreeRTOS/queue.c **** 			if( pxQueue->pcReadFrom >= pxQueue->pcTail )
1317:FreeRTOS/queue.c **** 			{
1318:FreeRTOS/queue.c **** 				pxQueue->pcReadFrom = pxQueue->pcHead;
1319:FreeRTOS/queue.c **** 			}
1320:FreeRTOS/queue.c **** 			--( pxQueue->uxMessagesWaiting );
1321:FreeRTOS/queue.c **** 			memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
ARM GAS  /tmp/cch3WSAd.s 			page 181


1322:FreeRTOS/queue.c **** 
1323:FreeRTOS/queue.c **** 			xReturn = pdPASS;
1324:FreeRTOS/queue.c **** 
1325:FreeRTOS/queue.c **** 			/* Were any co-routines waiting for space to become available? */
1326:FreeRTOS/queue.c **** 			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
1327:FreeRTOS/queue.c **** 			{
1328:FreeRTOS/queue.c **** 				/* In this instance the co-routine could be placed directly
1329:FreeRTOS/queue.c **** 				into the ready list as we are within a critical section.
1330:FreeRTOS/queue.c **** 				Instead the same pending ready list mechanism is used as if
1331:FreeRTOS/queue.c **** 				the event were caused from within an interrupt. */
1332:FreeRTOS/queue.c **** 				if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1333:FreeRTOS/queue.c **** 				{
1334:FreeRTOS/queue.c **** 					xReturn = errQUEUE_YIELD;
1335:FreeRTOS/queue.c **** 				}
1336:FreeRTOS/queue.c **** 			}
1337:FreeRTOS/queue.c **** 		}
1338:FreeRTOS/queue.c **** 		else
1339:FreeRTOS/queue.c **** 		{
1340:FreeRTOS/queue.c **** 			xReturn = pdFAIL;
1341:FreeRTOS/queue.c **** 		}
1342:FreeRTOS/queue.c **** 	}
1343:FreeRTOS/queue.c **** 	portENABLE_INTERRUPTS();
1344:FreeRTOS/queue.c **** 
1345:FreeRTOS/queue.c **** 	return xReturn;
1346:FreeRTOS/queue.c **** }
1347:FreeRTOS/queue.c **** #endif
1348:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1349:FreeRTOS/queue.c **** 
1350:FreeRTOS/queue.c **** 
1351:FreeRTOS/queue.c **** 
1352:FreeRTOS/queue.c **** #if configUSE_CO_ROUTINES == 1
1353:FreeRTOS/queue.c **** signed portBASE_TYPE xQueueCRSendFromISR( xQueueHandle pxQueue, const void *pvItemToQueue, signed p
1354:FreeRTOS/queue.c **** {
1355:FreeRTOS/queue.c **** 	/* Cannot block within an ISR so if there is no space on the queue then
1356:FreeRTOS/queue.c **** 	exit without doing anything. */
1357:FreeRTOS/queue.c **** 	if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
1358:FreeRTOS/queue.c **** 	{
1359:FreeRTOS/queue.c **** 		prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
1360:FreeRTOS/queue.c **** 
1361:FreeRTOS/queue.c **** 		/* We only want to wake one co-routine per ISR, so check that a
1362:FreeRTOS/queue.c **** 		co-routine has not already been woken. */
1363:FreeRTOS/queue.c **** 		if( !xCoRoutinePreviouslyWoken )
1364:FreeRTOS/queue.c **** 		{
1365:FreeRTOS/queue.c **** 			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
1366:FreeRTOS/queue.c **** 			{
1367:FreeRTOS/queue.c **** 				if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1368:FreeRTOS/queue.c **** 				{
1369:FreeRTOS/queue.c **** 					return pdTRUE;
1370:FreeRTOS/queue.c **** 				}
1371:FreeRTOS/queue.c **** 			}
1372:FreeRTOS/queue.c **** 		}
1373:FreeRTOS/queue.c **** 	}
1374:FreeRTOS/queue.c **** 
1375:FreeRTOS/queue.c **** 	return xCoRoutinePreviouslyWoken;
1376:FreeRTOS/queue.c **** }
1377:FreeRTOS/queue.c **** #endif
1378:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cch3WSAd.s 			page 182


1379:FreeRTOS/queue.c **** 
1380:FreeRTOS/queue.c **** #if configUSE_CO_ROUTINES == 1
1381:FreeRTOS/queue.c **** signed portBASE_TYPE xQueueCRReceiveFromISR( xQueueHandle pxQueue, void *pvBuffer, signed portBASE_
1382:FreeRTOS/queue.c **** {
1383:FreeRTOS/queue.c **** signed portBASE_TYPE xReturn;
1384:FreeRTOS/queue.c **** 
1385:FreeRTOS/queue.c **** 	/* We cannot block from an ISR, so check there is data available. If
1386:FreeRTOS/queue.c **** 	not then just leave without doing anything. */
1387:FreeRTOS/queue.c **** 	if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
1388:FreeRTOS/queue.c **** 	{
1389:FreeRTOS/queue.c **** 		/* Copy the data from the queue. */
1390:FreeRTOS/queue.c **** 		pxQueue->pcReadFrom += pxQueue->uxItemSize;
1391:FreeRTOS/queue.c **** 		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
1392:FreeRTOS/queue.c **** 		{
1393:FreeRTOS/queue.c **** 			pxQueue->pcReadFrom = pxQueue->pcHead;
1394:FreeRTOS/queue.c **** 		}
1395:FreeRTOS/queue.c **** 		--( pxQueue->uxMessagesWaiting );
1396:FreeRTOS/queue.c **** 		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
1397:FreeRTOS/queue.c **** 
1398:FreeRTOS/queue.c **** 		if( !( *pxCoRoutineWoken ) )
1399:FreeRTOS/queue.c **** 		{
1400:FreeRTOS/queue.c **** 			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
1401:FreeRTOS/queue.c **** 			{
1402:FreeRTOS/queue.c **** 				if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1403:FreeRTOS/queue.c **** 				{
1404:FreeRTOS/queue.c **** 					*pxCoRoutineWoken = pdTRUE;
1405:FreeRTOS/queue.c **** 				}
1406:FreeRTOS/queue.c **** 			}
1407:FreeRTOS/queue.c **** 		}
1408:FreeRTOS/queue.c **** 
1409:FreeRTOS/queue.c **** 		xReturn = pdPASS;
1410:FreeRTOS/queue.c **** 	}
1411:FreeRTOS/queue.c **** 	else
1412:FreeRTOS/queue.c **** 	{
1413:FreeRTOS/queue.c **** 		xReturn = pdFAIL;
1414:FreeRTOS/queue.c **** 	}
1415:FreeRTOS/queue.c **** 
1416:FreeRTOS/queue.c **** 	return xReturn;
1417:FreeRTOS/queue.c **** }
1418:FreeRTOS/queue.c **** #endif
1419:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1420:FreeRTOS/queue.c **** 
1421:FreeRTOS/queue.c **** #if configQUEUE_REGISTRY_SIZE > 0
1422:FreeRTOS/queue.c **** 
1423:FreeRTOS/queue.c **** 	void vQueueAddToRegistry( xQueueHandle xQueue, signed char *pcQueueName )
1424:FreeRTOS/queue.c **** 	{
 4600              		.loc 1 1424 0
 4601              		@ args = 0, pretend = 0, frame = 16
 4602              		@ frame_needed = 1, uses_anonymous_args = 0
 4603              		@ link register save eliminated.
 4604 0000 80B4     		push	{r7}
 4605              	.LCFI45:
 4606 0002 85B0     		sub	sp, sp, #20
 4607              	.LCFI46:
 4608 0004 00AF     		add	r7, sp, #0
 4609              	.LCFI47:
 4610 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/cch3WSAd.s 			page 183


 4611 0008 3960     		str	r1, [r7, #0]
1425:FreeRTOS/queue.c **** 	unsigned portBASE_TYPE ux;
1426:FreeRTOS/queue.c **** 
1427:FreeRTOS/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
1428:FreeRTOS/queue.c **** 		a free slot. */
1429:FreeRTOS/queue.c **** 		for( ux = 0; ux < configQUEUE_REGISTRY_SIZE; ux++ )
 4612              		.loc 1 1429 0
 4613 000a 4FF00003 		mov	r3, #0
 4614 000e FB60     		str	r3, [r7, #12]
 4615 0010 1FE0     		b	.L98
 4616              	.L101:
1430:FreeRTOS/queue.c **** 		{
1431:FreeRTOS/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 4617              		.loc 1 1431 0
 4618 0012 FA68     		ldr	r2, [r7, #12]
 4619 0014 40F20003 		movw	r3, #:lower16:xQueueRegistry
 4620 0018 C0F20003 		movt	r3, #:upper16:xQueueRegistry
 4621 001c 53F83230 		ldr	r3, [r3, r2, lsl #3]
 4622 0020 002B     		cmp	r3, #0
 4623 0022 12D1     		bne	.L99
1432:FreeRTOS/queue.c **** 			{
1433:FreeRTOS/queue.c **** 				/* Store the information on this queue. */
1434:FreeRTOS/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 4624              		.loc 1 1434 0
 4625 0024 FA68     		ldr	r2, [r7, #12]
 4626 0026 40F20003 		movw	r3, #:lower16:xQueueRegistry
 4627 002a C0F20003 		movt	r3, #:upper16:xQueueRegistry
 4628 002e 3968     		ldr	r1, [r7, #0]
 4629 0030 43F83210 		str	r1, [r3, r2, lsl #3]
1435:FreeRTOS/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 4630              		.loc 1 1435 0
 4631 0034 FB68     		ldr	r3, [r7, #12]
 4632 0036 40F20002 		movw	r2, #:lower16:xQueueRegistry
 4633 003a C0F20002 		movt	r2, #:upper16:xQueueRegistry
 4634 003e 4FEAC303 		lsl	r3, r3, #3
 4635 0042 1344     		add	r3, r3, r2
 4636 0044 7A68     		ldr	r2, [r7, #4]
 4637 0046 5A60     		str	r2, [r3, #4]
1436:FreeRTOS/queue.c **** 				break;
 4638              		.loc 1 1436 0
 4639 0048 06E0     		b	.L102
 4640              	.L99:
 4641              		.loc 1 1429 0
 4642 004a FB68     		ldr	r3, [r7, #12]
 4643 004c 03F10103 		add	r3, r3, #1
 4644 0050 FB60     		str	r3, [r7, #12]
 4645              	.L98:
 4646 0052 FB68     		ldr	r3, [r7, #12]
 4647 0054 092B     		cmp	r3, #9
 4648 0056 DCD9     		bls	.L101
 4649              	.L102:
1437:FreeRTOS/queue.c **** 			}
1438:FreeRTOS/queue.c **** 		}
1439:FreeRTOS/queue.c **** 	}
 4650              		.loc 1 1439 0
 4651 0058 07F11407 		add	r7, r7, #20
 4652 005c BD46     		mov	sp, r7
ARM GAS  /tmp/cch3WSAd.s 			page 184


 4653 005e 80BC     		pop	{r7}
 4654 0060 7047     		bx	lr
 4655              	.LFE44:
 4656              		.size	vQueueAddToRegistry, .-vQueueAddToRegistry
 4657 0062 00BF     		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 4658              		.align	2
 4659              		.thumb
 4660              		.thumb_func
 4661              		.type	vQueueUnregisterQueue, %function
 4662              	vQueueUnregisterQueue:
 4663              	.LFB45:
1440:FreeRTOS/queue.c **** 
1441:FreeRTOS/queue.c **** #endif
1442:FreeRTOS/queue.c **** 	/*-----------------------------------------------------------*/
1443:FreeRTOS/queue.c **** 
1444:FreeRTOS/queue.c **** #if configQUEUE_REGISTRY_SIZE > 0
1445:FreeRTOS/queue.c **** 
1446:FreeRTOS/queue.c **** 	static void vQueueUnregisterQueue( xQueueHandle xQueue )
1447:FreeRTOS/queue.c **** 	{
 4664              		.loc 1 1447 0
 4665              		@ args = 0, pretend = 0, frame = 16
 4666              		@ frame_needed = 1, uses_anonymous_args = 0
 4667              		@ link register save eliminated.
 4668 0000 80B4     		push	{r7}
 4669              	.LCFI48:
 4670 0002 85B0     		sub	sp, sp, #20
 4671              	.LCFI49:
 4672 0004 00AF     		add	r7, sp, #0
 4673              	.LCFI50:
 4674 0006 7860     		str	r0, [r7, #4]
1448:FreeRTOS/queue.c **** 	unsigned portBASE_TYPE ux;
1449:FreeRTOS/queue.c **** 
1450:FreeRTOS/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
1451:FreeRTOS/queue.c **** 		registry. */
1452:FreeRTOS/queue.c **** 		for( ux = 0; ux < configQUEUE_REGISTRY_SIZE; ux++ )
 4675              		.loc 1 1452 0
 4676 0008 4FF00003 		mov	r3, #0
 4677 000c FB60     		str	r3, [r7, #12]
 4678 000e 19E0     		b	.L104
 4679              	.L107:
1453:FreeRTOS/queue.c **** 		{
1454:FreeRTOS/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 4680              		.loc 1 1454 0
 4681 0010 FB68     		ldr	r3, [r7, #12]
 4682 0012 40F20002 		movw	r2, #:lower16:xQueueRegistry
 4683 0016 C0F20002 		movt	r2, #:upper16:xQueueRegistry
 4684 001a 4FEAC303 		lsl	r3, r3, #3
 4685 001e 1344     		add	r3, r3, r2
 4686 0020 5A68     		ldr	r2, [r3, #4]
 4687 0022 7B68     		ldr	r3, [r7, #4]
 4688 0024 9A42     		cmp	r2, r3
 4689 0026 09D1     		bne	.L105
1455:FreeRTOS/queue.c **** 			{
1456:FreeRTOS/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
1457:FreeRTOS/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 4690              		.loc 1 1457 0
 4691 0028 FA68     		ldr	r2, [r7, #12]
ARM GAS  /tmp/cch3WSAd.s 			page 185


 4692 002a 40F20003 		movw	r3, #:lower16:xQueueRegistry
 4693 002e C0F20003 		movt	r3, #:upper16:xQueueRegistry
 4694 0032 4FF00001 		mov	r1, #0
 4695 0036 43F83210 		str	r1, [r3, r2, lsl #3]
1458:FreeRTOS/queue.c **** 				break;
 4696              		.loc 1 1458 0
 4697 003a 06E0     		b	.L108
 4698              	.L105:
 4699              		.loc 1 1452 0
 4700 003c FB68     		ldr	r3, [r7, #12]
 4701 003e 03F10103 		add	r3, r3, #1
 4702 0042 FB60     		str	r3, [r7, #12]
 4703              	.L104:
 4704 0044 FB68     		ldr	r3, [r7, #12]
 4705 0046 092B     		cmp	r3, #9
 4706 0048 E2D9     		bls	.L107
 4707              	.L108:
1459:FreeRTOS/queue.c **** 			}
1460:FreeRTOS/queue.c **** 		}
1461:FreeRTOS/queue.c **** 
1462:FreeRTOS/queue.c **** 	}
 4708              		.loc 1 1462 0
 4709 004a 07F11407 		add	r7, r7, #20
 4710 004e BD46     		mov	sp, r7
 4711 0050 80BC     		pop	{r7}
 4712 0052 7047     		bx	lr
 4713              	.LFE45:
 4714              		.size	vQueueUnregisterQueue, .-vQueueUnregisterQueue
 4715              		.section	.debug_frame,"",%progbits
 4716              	.Lframe0:
 4717 0000 0C000000 		.4byte	.LECIE0-.LSCIE0
 4718              	.LSCIE0:
 4719 0004 FFFFFFFF 		.4byte	0xffffffff
 4720 0008 01       		.byte	0x1
 4721 0009 00       		.ascii	"\000"
 4722 000a 01       		.uleb128 0x1
 4723 000b 7C       		.sleb128 -4
 4724 000c 0E       		.byte	0xe
 4725 000d 0C       		.byte	0xc
 4726 000e 0D       		.uleb128 0xd
 4727 000f 00       		.uleb128 0x0
 4728              		.align	2
 4729              	.LECIE0:
 4730              	.LSFDE0:
 4731 0010 1C000000 		.4byte	.LEFDE0-.LASFDE0
 4732              	.LASFDE0:
 4733 0014 00000000 		.4byte	.Lframe0
 4734 0018 00000000 		.4byte	.LFB29
 4735 001c CA000000 		.4byte	.LFE29-.LFB29
 4736 0020 42       		.byte	0x4
 4737              		.4byte	.LCFI0-.LFB29
 4738 0021 0E       		.byte	0xe
 4739 0022 08       		.uleb128 0x8
 4740 0023 42       		.byte	0x4
 4741              		.4byte	.LCFI1-.LCFI0
 4742 0024 0E       		.byte	0xe
 4743 0025 18       		.uleb128 0x18
ARM GAS  /tmp/cch3WSAd.s 			page 186


 4744 0026 11       		.byte	0x11
 4745 0027 0E       		.uleb128 0xe
 4746 0028 01       		.sleb128 1
 4747 0029 11       		.byte	0x11
 4748 002a 07       		.uleb128 0x7
 4749 002b 02       		.sleb128 2
 4750 002c 42       		.byte	0x4
 4751              		.4byte	.LCFI2-.LCFI1
 4752 002d 0D       		.byte	0xd
 4753 002e 07       		.uleb128 0x7
 4754 002f 00       		.align	2
 4755              	.LEFDE0:
 4756              	.LSFDE2:
 4757 0030 1C000000 		.4byte	.LEFDE2-.LASFDE2
 4758              	.LASFDE2:
 4759 0034 00000000 		.4byte	.Lframe0
 4760 0038 00000000 		.4byte	.LFB30
 4761 003c 20010000 		.4byte	.LFE30-.LFB30
 4762 0040 42       		.byte	0x4
 4763              		.4byte	.LCFI3-.LFB30
 4764 0041 0E       		.byte	0xe
 4765 0042 08       		.uleb128 0x8
 4766 0043 42       		.byte	0x4
 4767              		.4byte	.LCFI4-.LCFI3
 4768 0044 0E       		.byte	0xe
 4769 0045 28       		.uleb128 0x28
 4770 0046 11       		.byte	0x11
 4771 0047 0E       		.uleb128 0xe
 4772 0048 01       		.sleb128 1
 4773 0049 11       		.byte	0x11
 4774 004a 07       		.uleb128 0x7
 4775 004b 02       		.sleb128 2
 4776 004c 42       		.byte	0x4
 4777              		.4byte	.LCFI5-.LCFI4
 4778 004d 0D       		.byte	0xd
 4779 004e 07       		.uleb128 0x7
 4780 004f 00       		.align	2
 4781              	.LEFDE2:
 4782              	.LSFDE4:
 4783 0050 1C000000 		.4byte	.LEFDE4-.LASFDE4
 4784              	.LASFDE4:
 4785 0054 00000000 		.4byte	.Lframe0
 4786 0058 00000000 		.4byte	.LFB31
 4787 005c 96000000 		.4byte	.LFE31-.LFB31
 4788 0060 42       		.byte	0x4
 4789              		.4byte	.LCFI6-.LFB31
 4790 0061 0E       		.byte	0xe
 4791 0062 08       		.uleb128 0x8
 4792 0063 42       		.byte	0x4
 4793              		.4byte	.LCFI7-.LCFI6
 4794 0064 0E       		.byte	0xe
 4795 0065 20       		.uleb128 0x20
 4796 0066 11       		.byte	0x11
 4797 0067 0E       		.uleb128 0xe
 4798 0068 01       		.sleb128 1
 4799 0069 11       		.byte	0x11
 4800 006a 07       		.uleb128 0x7
ARM GAS  /tmp/cch3WSAd.s 			page 187


 4801 006b 02       		.sleb128 2
 4802 006c 42       		.byte	0x4
 4803              		.4byte	.LCFI8-.LCFI7
 4804 006d 0D       		.byte	0xd
 4805 006e 07       		.uleb128 0x7
 4806 006f 00       		.align	2
 4807              	.LEFDE4:
 4808              	.LSFDE6:
 4809 0070 1C000000 		.4byte	.LEFDE6-.LASFDE6
 4810              	.LASFDE6:
 4811 0074 00000000 		.4byte	.Lframe0
 4812 0078 00000000 		.4byte	.LFB32
 4813 007c 62010000 		.4byte	.LFE32-.LFB32
 4814 0080 42       		.byte	0x4
 4815              		.4byte	.LCFI9-.LFB32
 4816 0081 0E       		.byte	0xe
 4817 0082 08       		.uleb128 0x8
 4818 0083 42       		.byte	0x4
 4819              		.4byte	.LCFI10-.LCFI9
 4820 0084 0E       		.byte	0xe
 4821 0085 28       		.uleb128 0x28
 4822 0086 11       		.byte	0x11
 4823 0087 0E       		.uleb128 0xe
 4824 0088 01       		.sleb128 1
 4825 0089 11       		.byte	0x11
 4826 008a 07       		.uleb128 0x7
 4827 008b 02       		.sleb128 2
 4828 008c 42       		.byte	0x4
 4829              		.4byte	.LCFI11-.LCFI10
 4830 008d 0D       		.byte	0xd
 4831 008e 07       		.uleb128 0x7
 4832 008f 00       		.align	2
 4833              	.LEFDE6:
 4834              	.LSFDE8:
 4835 0090 1C000000 		.4byte	.LEFDE8-.LASFDE8
 4836              	.LASFDE8:
 4837 0094 00000000 		.4byte	.Lframe0
 4838 0098 00000000 		.4byte	.LFB33
 4839 009c 9A000000 		.4byte	.LFE33-.LFB33
 4840 00a0 42       		.byte	0x4
 4841              		.4byte	.LCFI12-.LFB33
 4842 00a1 0E       		.byte	0xe
 4843 00a2 08       		.uleb128 0x8
 4844 00a3 42       		.byte	0x4
 4845              		.4byte	.LCFI13-.LCFI12
 4846 00a4 0E       		.byte	0xe
 4847 00a5 20       		.uleb128 0x20
 4848 00a6 11       		.byte	0x11
 4849 00a7 0E       		.uleb128 0xe
 4850 00a8 01       		.sleb128 1
 4851 00a9 11       		.byte	0x11
 4852 00aa 07       		.uleb128 0x7
 4853 00ab 02       		.sleb128 2
 4854 00ac 42       		.byte	0x4
 4855              		.4byte	.LCFI14-.LCFI13
 4856 00ad 0D       		.byte	0xd
 4857 00ae 07       		.uleb128 0x7
ARM GAS  /tmp/cch3WSAd.s 			page 188


 4858 00af 00       		.align	2
 4859              	.LEFDE8:
 4860              	.LSFDE10:
 4861 00b0 1C000000 		.4byte	.LEFDE10-.LASFDE10
 4862              	.LASFDE10:
 4863 00b4 00000000 		.4byte	.Lframe0
 4864 00b8 00000000 		.4byte	.LFB34
 4865 00bc 22000000 		.4byte	.LFE34-.LFB34
 4866 00c0 42       		.byte	0x4
 4867              		.4byte	.LCFI15-.LFB34
 4868 00c1 0E       		.byte	0xe
 4869 00c2 08       		.uleb128 0x8
 4870 00c3 42       		.byte	0x4
 4871              		.4byte	.LCFI16-.LCFI15
 4872 00c4 0E       		.byte	0xe
 4873 00c5 18       		.uleb128 0x18
 4874 00c6 11       		.byte	0x11
 4875 00c7 0E       		.uleb128 0xe
 4876 00c8 01       		.sleb128 1
 4877 00c9 11       		.byte	0x11
 4878 00ca 07       		.uleb128 0x7
 4879 00cb 02       		.sleb128 2
 4880 00cc 42       		.byte	0x4
 4881              		.4byte	.LCFI17-.LCFI16
 4882 00cd 0D       		.byte	0xd
 4883 00ce 07       		.uleb128 0x7
 4884 00cf 00       		.align	2
 4885              	.LEFDE10:
 4886              	.LSFDE12:
 4887 00d0 18000000 		.4byte	.LEFDE12-.LASFDE12
 4888              	.LASFDE12:
 4889 00d4 00000000 		.4byte	.Lframe0
 4890 00d8 00000000 		.4byte	.LFB35
 4891 00dc 1C000000 		.4byte	.LFE35-.LFB35
 4892 00e0 42       		.byte	0x4
 4893              		.4byte	.LCFI18-.LFB35
 4894 00e1 0E       		.byte	0xe
 4895 00e2 04       		.uleb128 0x4
 4896 00e3 42       		.byte	0x4
 4897              		.4byte	.LCFI19-.LCFI18
 4898 00e4 0E       		.byte	0xe
 4899 00e5 18       		.uleb128 0x18
 4900 00e6 11       		.byte	0x11
 4901 00e7 07       		.uleb128 0x7
 4902 00e8 01       		.sleb128 1
 4903 00e9 42       		.byte	0x4
 4904              		.4byte	.LCFI20-.LCFI19
 4905 00ea 0D       		.byte	0xd
 4906 00eb 07       		.uleb128 0x7
 4907              		.align	2
 4908              	.LEFDE12:
 4909              	.LSFDE14:
 4910 00ec 1C000000 		.4byte	.LEFDE14-.LASFDE14
 4911              	.LASFDE14:
 4912 00f0 00000000 		.4byte	.Lframe0
 4913 00f4 00000000 		.4byte	.LFB36
 4914 00f8 26000000 		.4byte	.LFE36-.LFB36
ARM GAS  /tmp/cch3WSAd.s 			page 189


 4915 00fc 42       		.byte	0x4
 4916              		.4byte	.LCFI21-.LFB36
 4917 00fd 0E       		.byte	0xe
 4918 00fe 08       		.uleb128 0x8
 4919 00ff 42       		.byte	0x4
 4920              		.4byte	.LCFI22-.LCFI21
 4921 0100 0E       		.byte	0xe
 4922 0101 10       		.uleb128 0x10
 4923 0102 11       		.byte	0x11
 4924 0103 0E       		.uleb128 0xe
 4925 0104 01       		.sleb128 1
 4926 0105 11       		.byte	0x11
 4927 0106 07       		.uleb128 0x7
 4928 0107 02       		.sleb128 2
 4929 0108 42       		.byte	0x4
 4930              		.4byte	.LCFI23-.LCFI22
 4931 0109 0D       		.byte	0xd
 4932 010a 07       		.uleb128 0x7
 4933 010b 00       		.align	2
 4934              	.LEFDE14:
 4935              	.LSFDE16:
 4936 010c 1C000000 		.4byte	.LEFDE16-.LASFDE16
 4937              	.LASFDE16:
 4938 0110 00000000 		.4byte	.Lframe0
 4939 0114 00000000 		.4byte	.LFB37
 4940 0118 AA000000 		.4byte	.LFE37-.LFB37
 4941 011c 42       		.byte	0x4
 4942              		.4byte	.LCFI24-.LFB37
 4943 011d 0E       		.byte	0xe
 4944 011e 08       		.uleb128 0x8
 4945 011f 42       		.byte	0x4
 4946              		.4byte	.LCFI25-.LCFI24
 4947 0120 0E       		.byte	0xe
 4948 0121 18       		.uleb128 0x18
 4949 0122 11       		.byte	0x11
 4950 0123 0E       		.uleb128 0xe
 4951 0124 01       		.sleb128 1
 4952 0125 11       		.byte	0x11
 4953 0126 07       		.uleb128 0x7
 4954 0127 02       		.sleb128 2
 4955 0128 42       		.byte	0x4
 4956              		.4byte	.LCFI26-.LCFI25
 4957 0129 0D       		.byte	0xd
 4958 012a 07       		.uleb128 0x7
 4959 012b 00       		.align	2
 4960              	.LEFDE16:
 4961              	.LSFDE18:
 4962 012c 1C000000 		.4byte	.LEFDE18-.LASFDE18
 4963              	.LASFDE18:
 4964 0130 00000000 		.4byte	.Lframe0
 4965 0134 00000000 		.4byte	.LFB38
 4966 0138 4E000000 		.4byte	.LFE38-.LFB38
 4967 013c 42       		.byte	0x4
 4968              		.4byte	.LCFI27-.LFB38
 4969 013d 0E       		.byte	0xe
 4970 013e 08       		.uleb128 0x8
 4971 013f 42       		.byte	0x4
ARM GAS  /tmp/cch3WSAd.s 			page 190


 4972              		.4byte	.LCFI28-.LCFI27
 4973 0140 0E       		.byte	0xe
 4974 0141 10       		.uleb128 0x10
 4975 0142 11       		.byte	0x11
 4976 0143 0E       		.uleb128 0xe
 4977 0144 01       		.sleb128 1
 4978 0145 11       		.byte	0x11
 4979 0146 07       		.uleb128 0x7
 4980 0147 02       		.sleb128 2
 4981 0148 42       		.byte	0x4
 4982              		.4byte	.LCFI29-.LCFI28
 4983 0149 0D       		.byte	0xd
 4984 014a 07       		.uleb128 0x7
 4985 014b 00       		.align	2
 4986              	.LEFDE18:
 4987              	.LSFDE20:
 4988 014c 1C000000 		.4byte	.LEFDE20-.LASFDE20
 4989              	.LASFDE20:
 4990 0150 00000000 		.4byte	.Lframe0
 4991 0154 00000000 		.4byte	.LFB39
 4992 0158 A0000000 		.4byte	.LFE39-.LFB39
 4993 015c 42       		.byte	0x4
 4994              		.4byte	.LCFI30-.LFB39
 4995 015d 0E       		.byte	0xe
 4996 015e 08       		.uleb128 0x8
 4997 015f 42       		.byte	0x4
 4998              		.4byte	.LCFI31-.LCFI30
 4999 0160 0E       		.byte	0xe
 5000 0161 10       		.uleb128 0x10
 5001 0162 11       		.byte	0x11
 5002 0163 0E       		.uleb128 0xe
 5003 0164 01       		.sleb128 1
 5004 0165 11       		.byte	0x11
 5005 0166 07       		.uleb128 0x7
 5006 0167 02       		.sleb128 2
 5007 0168 42       		.byte	0x4
 5008              		.4byte	.LCFI32-.LCFI31
 5009 0169 0D       		.byte	0xd
 5010 016a 07       		.uleb128 0x7
 5011 016b 00       		.align	2
 5012              	.LEFDE20:
 5013              	.LSFDE22:
 5014 016c 1C000000 		.4byte	.LEFDE22-.LASFDE22
 5015              	.LASFDE22:
 5016 0170 00000000 		.4byte	.Lframe0
 5017 0174 00000000 		.4byte	.LFB40
 5018 0178 2A000000 		.4byte	.LFE40-.LFB40
 5019 017c 42       		.byte	0x4
 5020              		.4byte	.LCFI33-.LFB40
 5021 017d 0E       		.byte	0xe
 5022 017e 08       		.uleb128 0x8
 5023 017f 42       		.byte	0x4
 5024              		.4byte	.LCFI34-.LCFI33
 5025 0180 0E       		.byte	0xe
 5026 0181 18       		.uleb128 0x18
 5027 0182 11       		.byte	0x11
 5028 0183 0E       		.uleb128 0xe
ARM GAS  /tmp/cch3WSAd.s 			page 191


 5029 0184 01       		.sleb128 1
 5030 0185 11       		.byte	0x11
 5031 0186 07       		.uleb128 0x7
 5032 0187 02       		.sleb128 2
 5033 0188 42       		.byte	0x4
 5034              		.4byte	.LCFI35-.LCFI34
 5035 0189 0D       		.byte	0xd
 5036 018a 07       		.uleb128 0x7
 5037 018b 00       		.align	2
 5038              	.LEFDE22:
 5039              	.LSFDE24:
 5040 018c 18000000 		.4byte	.LEFDE24-.LASFDE24
 5041              	.LASFDE24:
 5042 0190 00000000 		.4byte	.Lframe0
 5043 0194 00000000 		.4byte	.LFB41
 5044 0198 24000000 		.4byte	.LFE41-.LFB41
 5045 019c 42       		.byte	0x4
 5046              		.4byte	.LCFI36-.LFB41
 5047 019d 0E       		.byte	0xe
 5048 019e 04       		.uleb128 0x4
 5049 019f 42       		.byte	0x4
 5050              		.4byte	.LCFI37-.LCFI36
 5051 01a0 0E       		.byte	0xe
 5052 01a1 18       		.uleb128 0x18
 5053 01a2 11       		.byte	0x11
 5054 01a3 07       		.uleb128 0x7
 5055 01a4 01       		.sleb128 1
 5056 01a5 42       		.byte	0x4
 5057              		.4byte	.LCFI38-.LCFI37
 5058 01a6 0D       		.byte	0xd
 5059 01a7 07       		.uleb128 0x7
 5060              		.align	2
 5061              	.LEFDE24:
 5062              	.LSFDE26:
 5063 01a8 1C000000 		.4byte	.LEFDE26-.LASFDE26
 5064              	.LASFDE26:
 5065 01ac 00000000 		.4byte	.Lframe0
 5066 01b0 00000000 		.4byte	.LFB42
 5067 01b4 2E000000 		.4byte	.LFE42-.LFB42
 5068 01b8 42       		.byte	0x4
 5069              		.4byte	.LCFI39-.LFB42
 5070 01b9 0E       		.byte	0xe
 5071 01ba 08       		.uleb128 0x8
 5072 01bb 42       		.byte	0x4
 5073              		.4byte	.LCFI40-.LCFI39
 5074 01bc 0E       		.byte	0xe
 5075 01bd 18       		.uleb128 0x18
 5076 01be 11       		.byte	0x11
 5077 01bf 0E       		.uleb128 0xe
 5078 01c0 01       		.sleb128 1
 5079 01c1 11       		.byte	0x11
 5080 01c2 07       		.uleb128 0x7
 5081 01c3 02       		.sleb128 2
 5082 01c4 42       		.byte	0x4
 5083              		.4byte	.LCFI41-.LCFI40
 5084 01c5 0D       		.byte	0xd
 5085 01c6 07       		.uleb128 0x7
ARM GAS  /tmp/cch3WSAd.s 			page 192


 5086 01c7 00       		.align	2
 5087              	.LEFDE26:
 5088              	.LSFDE28:
 5089 01c8 18000000 		.4byte	.LEFDE28-.LASFDE28
 5090              	.LASFDE28:
 5091 01cc 00000000 		.4byte	.Lframe0
 5092 01d0 00000000 		.4byte	.LFB43
 5093 01d4 28000000 		.4byte	.LFE43-.LFB43
 5094 01d8 42       		.byte	0x4
 5095              		.4byte	.LCFI42-.LFB43
 5096 01d9 0E       		.byte	0xe
 5097 01da 04       		.uleb128 0x4
 5098 01db 42       		.byte	0x4
 5099              		.4byte	.LCFI43-.LCFI42
 5100 01dc 0E       		.byte	0xe
 5101 01dd 18       		.uleb128 0x18
 5102 01de 11       		.byte	0x11
 5103 01df 07       		.uleb128 0x7
 5104 01e0 01       		.sleb128 1
 5105 01e1 42       		.byte	0x4
 5106              		.4byte	.LCFI44-.LCFI43
 5107 01e2 0D       		.byte	0xd
 5108 01e3 07       		.uleb128 0x7
 5109              		.align	2
 5110              	.LEFDE28:
 5111              	.LSFDE30:
 5112 01e4 18000000 		.4byte	.LEFDE30-.LASFDE30
 5113              	.LASFDE30:
 5114 01e8 00000000 		.4byte	.Lframe0
 5115 01ec 00000000 		.4byte	.LFB44
 5116 01f0 62000000 		.4byte	.LFE44-.LFB44
 5117 01f4 42       		.byte	0x4
 5118              		.4byte	.LCFI45-.LFB44
 5119 01f5 0E       		.byte	0xe
 5120 01f6 04       		.uleb128 0x4
 5121 01f7 42       		.byte	0x4
 5122              		.4byte	.LCFI46-.LCFI45
 5123 01f8 0E       		.byte	0xe
 5124 01f9 18       		.uleb128 0x18
 5125 01fa 11       		.byte	0x11
 5126 01fb 07       		.uleb128 0x7
 5127 01fc 01       		.sleb128 1
 5128 01fd 42       		.byte	0x4
 5129              		.4byte	.LCFI47-.LCFI46
 5130 01fe 0D       		.byte	0xd
 5131 01ff 07       		.uleb128 0x7
 5132              		.align	2
 5133              	.LEFDE30:
 5134              	.LSFDE32:
 5135 0200 18000000 		.4byte	.LEFDE32-.LASFDE32
 5136              	.LASFDE32:
 5137 0204 00000000 		.4byte	.Lframe0
 5138 0208 00000000 		.4byte	.LFB45
 5139 020c 54000000 		.4byte	.LFE45-.LFB45
 5140 0210 42       		.byte	0x4
 5141              		.4byte	.LCFI48-.LFB45
 5142 0211 0E       		.byte	0xe
ARM GAS  /tmp/cch3WSAd.s 			page 193


 5143 0212 04       		.uleb128 0x4
 5144 0213 42       		.byte	0x4
 5145              		.4byte	.LCFI49-.LCFI48
 5146 0214 0E       		.byte	0xe
 5147 0215 18       		.uleb128 0x18
 5148 0216 11       		.byte	0x11
 5149 0217 07       		.uleb128 0x7
 5150 0218 01       		.sleb128 1
 5151 0219 42       		.byte	0x4
 5152              		.4byte	.LCFI50-.LCFI49
 5153 021a 0D       		.byte	0xd
 5154 021b 07       		.uleb128 0x7
 5155              		.align	2
 5156              	.LEFDE32:
 5157              		.text
 5158              	.Letext0:
 5159              		.section	.debug_loc,"",%progbits
 5160              	.Ldebug_loc0:
 5161              	.LLST0:
 5162 0000 00000000 		.4byte	.LFB29
 5163 0004 02000000 		.4byte	.LCFI0
 5164 0008 0100     		.2byte	0x1
 5165 000a 5D       		.byte	0x5d
 5166 000b 02000000 		.4byte	.LCFI0
 5167 000f 04000000 		.4byte	.LCFI1
 5168 0013 0200     		.2byte	0x2
 5169 0015 7D       		.byte	0x7d
 5170 0016 08       		.sleb128 8
 5171 0017 04000000 		.4byte	.LCFI1
 5172 001b 06000000 		.4byte	.LCFI2
 5173 001f 0200     		.2byte	0x2
 5174 0021 7D       		.byte	0x7d
 5175 0022 18       		.sleb128 24
 5176 0023 06000000 		.4byte	.LCFI2
 5177 0027 CA000000 		.4byte	.LFE29
 5178 002b 0200     		.2byte	0x2
 5179 002d 77       		.byte	0x77
 5180 002e 18       		.sleb128 24
 5181 002f 00000000 		.4byte	0x0
 5182 0033 00000000 		.4byte	0x0
 5183              	.LLST1:
 5184 0037 00000000 		.4byte	.LFB30
 5185 003b 02000000 		.4byte	.LCFI3
 5186 003f 0100     		.2byte	0x1
 5187 0041 5D       		.byte	0x5d
 5188 0042 02000000 		.4byte	.LCFI3
 5189 0046 04000000 		.4byte	.LCFI4
 5190 004a 0200     		.2byte	0x2
 5191 004c 7D       		.byte	0x7d
 5192 004d 08       		.sleb128 8
 5193 004e 04000000 		.4byte	.LCFI4
 5194 0052 06000000 		.4byte	.LCFI5
 5195 0056 0200     		.2byte	0x2
 5196 0058 7D       		.byte	0x7d
 5197 0059 28       		.sleb128 40
 5198 005a 06000000 		.4byte	.LCFI5
 5199 005e 20010000 		.4byte	.LFE30
ARM GAS  /tmp/cch3WSAd.s 			page 194


 5200 0062 0200     		.2byte	0x2
 5201 0064 77       		.byte	0x77
 5202 0065 28       		.sleb128 40
 5203 0066 00000000 		.4byte	0x0
 5204 006a 00000000 		.4byte	0x0
 5205              	.LLST2:
 5206 006e 00000000 		.4byte	.LFB31
 5207 0072 02000000 		.4byte	.LCFI6
 5208 0076 0100     		.2byte	0x1
 5209 0078 5D       		.byte	0x5d
 5210 0079 02000000 		.4byte	.LCFI6
 5211 007d 04000000 		.4byte	.LCFI7
 5212 0081 0200     		.2byte	0x2
 5213 0083 7D       		.byte	0x7d
 5214 0084 08       		.sleb128 8
 5215 0085 04000000 		.4byte	.LCFI7
 5216 0089 06000000 		.4byte	.LCFI8
 5217 008d 0200     		.2byte	0x2
 5218 008f 7D       		.byte	0x7d
 5219 0090 20       		.sleb128 32
 5220 0091 06000000 		.4byte	.LCFI8
 5221 0095 96000000 		.4byte	.LFE31
 5222 0099 0200     		.2byte	0x2
 5223 009b 77       		.byte	0x77
 5224 009c 20       		.sleb128 32
 5225 009d 00000000 		.4byte	0x0
 5226 00a1 00000000 		.4byte	0x0
 5227              	.LLST3:
 5228 00a5 00000000 		.4byte	.LFB32
 5229 00a9 02000000 		.4byte	.LCFI9
 5230 00ad 0100     		.2byte	0x1
 5231 00af 5D       		.byte	0x5d
 5232 00b0 02000000 		.4byte	.LCFI9
 5233 00b4 04000000 		.4byte	.LCFI10
 5234 00b8 0200     		.2byte	0x2
 5235 00ba 7D       		.byte	0x7d
 5236 00bb 08       		.sleb128 8
 5237 00bc 04000000 		.4byte	.LCFI10
 5238 00c0 06000000 		.4byte	.LCFI11
 5239 00c4 0200     		.2byte	0x2
 5240 00c6 7D       		.byte	0x7d
 5241 00c7 28       		.sleb128 40
 5242 00c8 06000000 		.4byte	.LCFI11
 5243 00cc 62010000 		.4byte	.LFE32
 5244 00d0 0200     		.2byte	0x2
 5245 00d2 77       		.byte	0x77
 5246 00d3 28       		.sleb128 40
 5247 00d4 00000000 		.4byte	0x0
 5248 00d8 00000000 		.4byte	0x0
 5249              	.LLST4:
 5250 00dc 00000000 		.4byte	.LFB33
 5251 00e0 02000000 		.4byte	.LCFI12
 5252 00e4 0100     		.2byte	0x1
 5253 00e6 5D       		.byte	0x5d
 5254 00e7 02000000 		.4byte	.LCFI12
 5255 00eb 04000000 		.4byte	.LCFI13
 5256 00ef 0200     		.2byte	0x2
ARM GAS  /tmp/cch3WSAd.s 			page 195


 5257 00f1 7D       		.byte	0x7d
 5258 00f2 08       		.sleb128 8
 5259 00f3 04000000 		.4byte	.LCFI13
 5260 00f7 06000000 		.4byte	.LCFI14
 5261 00fb 0200     		.2byte	0x2
 5262 00fd 7D       		.byte	0x7d
 5263 00fe 20       		.sleb128 32
 5264 00ff 06000000 		.4byte	.LCFI14
 5265 0103 9A000000 		.4byte	.LFE33
 5266 0107 0200     		.2byte	0x2
 5267 0109 77       		.byte	0x77
 5268 010a 20       		.sleb128 32
 5269 010b 00000000 		.4byte	0x0
 5270 010f 00000000 		.4byte	0x0
 5271              	.LLST5:
 5272 0113 00000000 		.4byte	.LFB34
 5273 0117 02000000 		.4byte	.LCFI15
 5274 011b 0100     		.2byte	0x1
 5275 011d 5D       		.byte	0x5d
 5276 011e 02000000 		.4byte	.LCFI15
 5277 0122 04000000 		.4byte	.LCFI16
 5278 0126 0200     		.2byte	0x2
 5279 0128 7D       		.byte	0x7d
 5280 0129 08       		.sleb128 8
 5281 012a 04000000 		.4byte	.LCFI16
 5282 012e 06000000 		.4byte	.LCFI17
 5283 0132 0200     		.2byte	0x2
 5284 0134 7D       		.byte	0x7d
 5285 0135 18       		.sleb128 24
 5286 0136 06000000 		.4byte	.LCFI17
 5287 013a 22000000 		.4byte	.LFE34
 5288 013e 0200     		.2byte	0x2
 5289 0140 77       		.byte	0x77
 5290 0141 18       		.sleb128 24
 5291 0142 00000000 		.4byte	0x0
 5292 0146 00000000 		.4byte	0x0
 5293              	.LLST6:
 5294 014a 00000000 		.4byte	.LFB35
 5295 014e 02000000 		.4byte	.LCFI18
 5296 0152 0100     		.2byte	0x1
 5297 0154 5D       		.byte	0x5d
 5298 0155 02000000 		.4byte	.LCFI18
 5299 0159 04000000 		.4byte	.LCFI19
 5300 015d 0200     		.2byte	0x2
 5301 015f 7D       		.byte	0x7d
 5302 0160 04       		.sleb128 4
 5303 0161 04000000 		.4byte	.LCFI19
 5304 0165 06000000 		.4byte	.LCFI20
 5305 0169 0200     		.2byte	0x2
 5306 016b 7D       		.byte	0x7d
 5307 016c 18       		.sleb128 24
 5308 016d 06000000 		.4byte	.LCFI20
 5309 0171 1C000000 		.4byte	.LFE35
 5310 0175 0200     		.2byte	0x2
 5311 0177 77       		.byte	0x77
 5312 0178 18       		.sleb128 24
 5313 0179 00000000 		.4byte	0x0
ARM GAS  /tmp/cch3WSAd.s 			page 196


 5314 017d 00000000 		.4byte	0x0
 5315              	.LLST7:
 5316 0181 00000000 		.4byte	.LFB36
 5317 0185 02000000 		.4byte	.LCFI21
 5318 0189 0100     		.2byte	0x1
 5319 018b 5D       		.byte	0x5d
 5320 018c 02000000 		.4byte	.LCFI21
 5321 0190 04000000 		.4byte	.LCFI22
 5322 0194 0200     		.2byte	0x2
 5323 0196 7D       		.byte	0x7d
 5324 0197 08       		.sleb128 8
 5325 0198 04000000 		.4byte	.LCFI22
 5326 019c 06000000 		.4byte	.LCFI23
 5327 01a0 0200     		.2byte	0x2
 5328 01a2 7D       		.byte	0x7d
 5329 01a3 10       		.sleb128 16
 5330 01a4 06000000 		.4byte	.LCFI23
 5331 01a8 26000000 		.4byte	.LFE36
 5332 01ac 0200     		.2byte	0x2
 5333 01ae 77       		.byte	0x77
 5334 01af 10       		.sleb128 16
 5335 01b0 00000000 		.4byte	0x0
 5336 01b4 00000000 		.4byte	0x0
 5337              	.LLST8:
 5338 01b8 00000000 		.4byte	.LFB37
 5339 01bc 02000000 		.4byte	.LCFI24
 5340 01c0 0100     		.2byte	0x1
 5341 01c2 5D       		.byte	0x5d
 5342 01c3 02000000 		.4byte	.LCFI24
 5343 01c7 04000000 		.4byte	.LCFI25
 5344 01cb 0200     		.2byte	0x2
 5345 01cd 7D       		.byte	0x7d
 5346 01ce 08       		.sleb128 8
 5347 01cf 04000000 		.4byte	.LCFI25
 5348 01d3 06000000 		.4byte	.LCFI26
 5349 01d7 0200     		.2byte	0x2
 5350 01d9 7D       		.byte	0x7d
 5351 01da 18       		.sleb128 24
 5352 01db 06000000 		.4byte	.LCFI26
 5353 01df AA000000 		.4byte	.LFE37
 5354 01e3 0200     		.2byte	0x2
 5355 01e5 77       		.byte	0x77
 5356 01e6 18       		.sleb128 24
 5357 01e7 00000000 		.4byte	0x0
 5358 01eb 00000000 		.4byte	0x0
 5359              	.LLST9:
 5360 01ef 00000000 		.4byte	.LFB38
 5361 01f3 02000000 		.4byte	.LCFI27
 5362 01f7 0100     		.2byte	0x1
 5363 01f9 5D       		.byte	0x5d
 5364 01fa 02000000 		.4byte	.LCFI27
 5365 01fe 04000000 		.4byte	.LCFI28
 5366 0202 0200     		.2byte	0x2
 5367 0204 7D       		.byte	0x7d
 5368 0205 08       		.sleb128 8
 5369 0206 04000000 		.4byte	.LCFI28
 5370 020a 06000000 		.4byte	.LCFI29
ARM GAS  /tmp/cch3WSAd.s 			page 197


 5371 020e 0200     		.2byte	0x2
 5372 0210 7D       		.byte	0x7d
 5373 0211 10       		.sleb128 16
 5374 0212 06000000 		.4byte	.LCFI29
 5375 0216 4E000000 		.4byte	.LFE38
 5376 021a 0200     		.2byte	0x2
 5377 021c 77       		.byte	0x77
 5378 021d 10       		.sleb128 16
 5379 021e 00000000 		.4byte	0x0
 5380 0222 00000000 		.4byte	0x0
 5381              	.LLST10:
 5382 0226 00000000 		.4byte	.LFB39
 5383 022a 02000000 		.4byte	.LCFI30
 5384 022e 0100     		.2byte	0x1
 5385 0230 5D       		.byte	0x5d
 5386 0231 02000000 		.4byte	.LCFI30
 5387 0235 04000000 		.4byte	.LCFI31
 5388 0239 0200     		.2byte	0x2
 5389 023b 7D       		.byte	0x7d
 5390 023c 08       		.sleb128 8
 5391 023d 04000000 		.4byte	.LCFI31
 5392 0241 06000000 		.4byte	.LCFI32
 5393 0245 0200     		.2byte	0x2
 5394 0247 7D       		.byte	0x7d
 5395 0248 10       		.sleb128 16
 5396 0249 06000000 		.4byte	.LCFI32
 5397 024d A0000000 		.4byte	.LFE39
 5398 0251 0200     		.2byte	0x2
 5399 0253 77       		.byte	0x77
 5400 0254 10       		.sleb128 16
 5401 0255 00000000 		.4byte	0x0
 5402 0259 00000000 		.4byte	0x0
 5403              	.LLST11:
 5404 025d 00000000 		.4byte	.LFB40
 5405 0261 02000000 		.4byte	.LCFI33
 5406 0265 0100     		.2byte	0x1
 5407 0267 5D       		.byte	0x5d
 5408 0268 02000000 		.4byte	.LCFI33
 5409 026c 04000000 		.4byte	.LCFI34
 5410 0270 0200     		.2byte	0x2
 5411 0272 7D       		.byte	0x7d
 5412 0273 08       		.sleb128 8
 5413 0274 04000000 		.4byte	.LCFI34
 5414 0278 06000000 		.4byte	.LCFI35
 5415 027c 0200     		.2byte	0x2
 5416 027e 7D       		.byte	0x7d
 5417 027f 18       		.sleb128 24
 5418 0280 06000000 		.4byte	.LCFI35
 5419 0284 2A000000 		.4byte	.LFE40
 5420 0288 0200     		.2byte	0x2
 5421 028a 77       		.byte	0x77
 5422 028b 18       		.sleb128 24
 5423 028c 00000000 		.4byte	0x0
 5424 0290 00000000 		.4byte	0x0
 5425              	.LLST12:
 5426 0294 00000000 		.4byte	.LFB41
 5427 0298 02000000 		.4byte	.LCFI36
ARM GAS  /tmp/cch3WSAd.s 			page 198


 5428 029c 0100     		.2byte	0x1
 5429 029e 5D       		.byte	0x5d
 5430 029f 02000000 		.4byte	.LCFI36
 5431 02a3 04000000 		.4byte	.LCFI37
 5432 02a7 0200     		.2byte	0x2
 5433 02a9 7D       		.byte	0x7d
 5434 02aa 04       		.sleb128 4
 5435 02ab 04000000 		.4byte	.LCFI37
 5436 02af 06000000 		.4byte	.LCFI38
 5437 02b3 0200     		.2byte	0x2
 5438 02b5 7D       		.byte	0x7d
 5439 02b6 18       		.sleb128 24
 5440 02b7 06000000 		.4byte	.LCFI38
 5441 02bb 24000000 		.4byte	.LFE41
 5442 02bf 0200     		.2byte	0x2
 5443 02c1 77       		.byte	0x77
 5444 02c2 18       		.sleb128 24
 5445 02c3 00000000 		.4byte	0x0
 5446 02c7 00000000 		.4byte	0x0
 5447              	.LLST13:
 5448 02cb 00000000 		.4byte	.LFB42
 5449 02cf 02000000 		.4byte	.LCFI39
 5450 02d3 0100     		.2byte	0x1
 5451 02d5 5D       		.byte	0x5d
 5452 02d6 02000000 		.4byte	.LCFI39
 5453 02da 04000000 		.4byte	.LCFI40
 5454 02de 0200     		.2byte	0x2
 5455 02e0 7D       		.byte	0x7d
 5456 02e1 08       		.sleb128 8
 5457 02e2 04000000 		.4byte	.LCFI40
 5458 02e6 06000000 		.4byte	.LCFI41
 5459 02ea 0200     		.2byte	0x2
 5460 02ec 7D       		.byte	0x7d
 5461 02ed 18       		.sleb128 24
 5462 02ee 06000000 		.4byte	.LCFI41
 5463 02f2 2E000000 		.4byte	.LFE42
 5464 02f6 0200     		.2byte	0x2
 5465 02f8 77       		.byte	0x77
 5466 02f9 18       		.sleb128 24
 5467 02fa 00000000 		.4byte	0x0
 5468 02fe 00000000 		.4byte	0x0
 5469              	.LLST14:
 5470 0302 00000000 		.4byte	.LFB43
 5471 0306 02000000 		.4byte	.LCFI42
 5472 030a 0100     		.2byte	0x1
 5473 030c 5D       		.byte	0x5d
 5474 030d 02000000 		.4byte	.LCFI42
 5475 0311 04000000 		.4byte	.LCFI43
 5476 0315 0200     		.2byte	0x2
 5477 0317 7D       		.byte	0x7d
 5478 0318 04       		.sleb128 4
 5479 0319 04000000 		.4byte	.LCFI43
 5480 031d 06000000 		.4byte	.LCFI44
 5481 0321 0200     		.2byte	0x2
 5482 0323 7D       		.byte	0x7d
 5483 0324 18       		.sleb128 24
 5484 0325 06000000 		.4byte	.LCFI44
ARM GAS  /tmp/cch3WSAd.s 			page 199


 5485 0329 28000000 		.4byte	.LFE43
 5486 032d 0200     		.2byte	0x2
 5487 032f 77       		.byte	0x77
 5488 0330 18       		.sleb128 24
 5489 0331 00000000 		.4byte	0x0
 5490 0335 00000000 		.4byte	0x0
 5491              	.LLST15:
 5492 0339 00000000 		.4byte	.LFB44
 5493 033d 02000000 		.4byte	.LCFI45
 5494 0341 0100     		.2byte	0x1
 5495 0343 5D       		.byte	0x5d
 5496 0344 02000000 		.4byte	.LCFI45
 5497 0348 04000000 		.4byte	.LCFI46
 5498 034c 0200     		.2byte	0x2
 5499 034e 7D       		.byte	0x7d
 5500 034f 04       		.sleb128 4
 5501 0350 04000000 		.4byte	.LCFI46
 5502 0354 06000000 		.4byte	.LCFI47
 5503 0358 0200     		.2byte	0x2
 5504 035a 7D       		.byte	0x7d
 5505 035b 18       		.sleb128 24
 5506 035c 06000000 		.4byte	.LCFI47
 5507 0360 62000000 		.4byte	.LFE44
 5508 0364 0200     		.2byte	0x2
 5509 0366 77       		.byte	0x77
 5510 0367 18       		.sleb128 24
 5511 0368 00000000 		.4byte	0x0
 5512 036c 00000000 		.4byte	0x0
 5513              	.LLST16:
 5514 0370 00000000 		.4byte	.LFB45
 5515 0374 02000000 		.4byte	.LCFI48
 5516 0378 0100     		.2byte	0x1
 5517 037a 5D       		.byte	0x5d
 5518 037b 02000000 		.4byte	.LCFI48
 5519 037f 04000000 		.4byte	.LCFI49
 5520 0383 0200     		.2byte	0x2
 5521 0385 7D       		.byte	0x7d
 5522 0386 04       		.sleb128 4
 5523 0387 04000000 		.4byte	.LCFI49
 5524 038b 06000000 		.4byte	.LCFI50
 5525 038f 0200     		.2byte	0x2
 5526 0391 7D       		.byte	0x7d
 5527 0392 18       		.sleb128 24
 5528 0393 06000000 		.4byte	.LCFI50
 5529 0397 54000000 		.4byte	.LFE45
 5530 039b 0200     		.2byte	0x2
 5531 039d 77       		.byte	0x77
 5532 039e 18       		.sleb128 24
 5533 039f 00000000 		.4byte	0x0
 5534 03a3 00000000 		.4byte	0x0
 5535              		.section	.debug_info
 5536 0000 15080000 		.4byte	0x815
 5537 0004 0200     		.2byte	0x2
 5538 0006 00000000 		.4byte	.Ldebug_abbrev0
 5539 000a 04       		.byte	0x4
 5540 000b 01       		.uleb128 0x1
 5541 000c F3040000 		.4byte	.LASF86
ARM GAS  /tmp/cch3WSAd.s 			page 200


 5542 0010 01       		.byte	0x1
 5543 0011 38050000 		.4byte	.LASF87
 5544 0015 95010000 		.4byte	.LASF88
 5545 0019 00000000 		.4byte	0x0
 5546 001d 00000000 		.4byte	0x0
 5547 0021 00000000 		.4byte	.Ldebug_ranges0+0x0
 5548 0025 00000000 		.4byte	.Ldebug_line0
 5549 0029 00000000 		.4byte	.Ldebug_macinfo0
 5550 002d 02       		.uleb128 0x2
 5551 002e 17000000 		.4byte	.LASF10
 5552 0032 07       		.byte	0x7
 5553 0033 D3       		.byte	0xd3
 5554 0034 38000000 		.4byte	0x38
 5555 0038 03       		.uleb128 0x3
 5556 0039 04       		.byte	0x4
 5557 003a 07       		.byte	0x7
 5558 003b 02030000 		.4byte	.LASF0
 5559 003f 03       		.uleb128 0x3
 5560 0040 01       		.byte	0x1
 5561 0041 06       		.byte	0x6
 5562 0042 AD020000 		.4byte	.LASF1
 5563 0046 03       		.uleb128 0x3
 5564 0047 01       		.byte	0x1
 5565 0048 08       		.byte	0x8
 5566 0049 80020000 		.4byte	.LASF2
 5567 004d 03       		.uleb128 0x3
 5568 004e 02       		.byte	0x2
 5569 004f 05       		.byte	0x5
 5570 0050 08020000 		.4byte	.LASF3
 5571 0054 03       		.uleb128 0x3
 5572 0055 02       		.byte	0x2
 5573 0056 07       		.byte	0x7
 5574 0057 73030000 		.4byte	.LASF4
 5575 005b 04       		.uleb128 0x4
 5576 005c 04       		.byte	0x4
 5577 005d 05       		.byte	0x5
 5578 005e 696E7400 		.ascii	"int\000"
 5579 0062 03       		.uleb128 0x3
 5580 0063 08       		.byte	0x8
 5581 0064 05       		.byte	0x5
 5582 0065 54010000 		.4byte	.LASF5
 5583 0069 03       		.uleb128 0x3
 5584 006a 08       		.byte	0x8
 5585 006b 07       		.byte	0x7
 5586 006c CE020000 		.4byte	.LASF6
 5587 0070 03       		.uleb128 0x3
 5588 0071 04       		.byte	0x4
 5589 0072 05       		.byte	0x5
 5590 0073 79010000 		.4byte	.LASF7
 5591 0077 05       		.uleb128 0x5
 5592 0078 04       		.byte	0x4
 5593 0079 07       		.byte	0x7
 5594 007a 06       		.uleb128 0x6
 5595 007b 04       		.byte	0x4
 5596 007c 03       		.uleb128 0x3
 5597 007d 04       		.byte	0x4
 5598 007e 07       		.byte	0x7
ARM GAS  /tmp/cch3WSAd.s 			page 201


 5599 007f 2F040000 		.4byte	.LASF8
 5600 0083 03       		.uleb128 0x3
 5601 0084 01       		.byte	0x1
 5602 0085 08       		.byte	0x8
 5603 0086 B5030000 		.4byte	.LASF9
 5604 008a 02       		.uleb128 0x2
 5605 008b 84000000 		.4byte	.LASF11
 5606 008f 1A       		.byte	0x1a
 5607 0090 55       		.byte	0x55
 5608 0091 7C000000 		.4byte	0x7c
 5609 0095 07       		.uleb128 0x7
 5610 0096 58020000 		.4byte	.LASF18
 5611 009a 14       		.byte	0x14
 5612 009b 1D       		.byte	0x1d
 5613 009c 63       		.byte	0x63
 5614 009d E8000000 		.4byte	0xe8
 5615 00a1 08       		.uleb128 0x8
 5616 00a2 12020000 		.4byte	.LASF12
 5617 00a6 1D       		.byte	0x1d
 5618 00a7 64       		.byte	0x64
 5619 00a8 8A000000 		.4byte	0x8a
 5620 00ac 02       		.byte	0x2
 5621 00ad 23       		.byte	0x23
 5622 00ae 00       		.uleb128 0x0
 5623 00af 08       		.uleb128 0x8
 5624 00b0 35000000 		.4byte	.LASF13
 5625 00b4 1D       		.byte	0x1d
 5626 00b5 65       		.byte	0x65
 5627 00b6 E8000000 		.4byte	0xe8
 5628 00ba 02       		.byte	0x2
 5629 00bb 23       		.byte	0x23
 5630 00bc 04       		.uleb128 0x4
 5631 00bd 08       		.uleb128 0x8
 5632 00be 1E000000 		.4byte	.LASF14
 5633 00c2 1D       		.byte	0x1d
 5634 00c3 66       		.byte	0x66
 5635 00c4 E8000000 		.4byte	0xe8
 5636 00c8 02       		.byte	0x2
 5637 00c9 23       		.byte	0x23
 5638 00ca 08       		.uleb128 0x8
 5639 00cb 08       		.uleb128 0x8
 5640 00cc AB000000 		.4byte	.LASF15
 5641 00d0 1D       		.byte	0x1d
 5642 00d1 67       		.byte	0x67
 5643 00d2 7A000000 		.4byte	0x7a
 5644 00d6 02       		.byte	0x2
 5645 00d7 23       		.byte	0x23
 5646 00d8 0C       		.uleb128 0xc
 5647 00d9 08       		.uleb128 0x8
 5648 00da 18030000 		.4byte	.LASF16
 5649 00de 1D       		.byte	0x1d
 5650 00df 68       		.byte	0x68
 5651 00e0 7A000000 		.4byte	0x7a
 5652 00e4 02       		.byte	0x2
 5653 00e5 23       		.byte	0x23
 5654 00e6 10       		.uleb128 0x10
 5655 00e7 00       		.byte	0x0
ARM GAS  /tmp/cch3WSAd.s 			page 202


 5656 00e8 09       		.uleb128 0x9
 5657 00e9 04       		.byte	0x4
 5658 00ea EE000000 		.4byte	0xee
 5659 00ee 0A       		.uleb128 0xa
 5660 00ef 58020000 		.4byte	.LASF18
 5661 00f3 95000000 		.4byte	0x95
 5662 00f7 02       		.uleb128 0x2
 5663 00f8 61040000 		.4byte	.LASF17
 5664 00fc 1D       		.byte	0x1d
 5665 00fd 6A       		.byte	0x6a
 5666 00fe 95000000 		.4byte	0x95
 5667 0102 07       		.uleb128 0x7
 5668 0103 28050000 		.4byte	.LASF19
 5669 0107 0C       		.byte	0xc
 5670 0108 1D       		.byte	0x1d
 5671 0109 6D       		.byte	0x6d
 5672 010a 39010000 		.4byte	0x139
 5673 010e 08       		.uleb128 0x8
 5674 010f 12020000 		.4byte	.LASF12
 5675 0113 1D       		.byte	0x1d
 5676 0114 6E       		.byte	0x6e
 5677 0115 8A000000 		.4byte	0x8a
 5678 0119 02       		.byte	0x2
 5679 011a 23       		.byte	0x23
 5680 011b 00       		.uleb128 0x0
 5681 011c 08       		.uleb128 0x8
 5682 011d 35000000 		.4byte	.LASF13
 5683 0121 1D       		.byte	0x1d
 5684 0122 6F       		.byte	0x6f
 5685 0123 E8000000 		.4byte	0xe8
 5686 0127 02       		.byte	0x2
 5687 0128 23       		.byte	0x23
 5688 0129 04       		.uleb128 0x4
 5689 012a 08       		.uleb128 0x8
 5690 012b 1E000000 		.4byte	.LASF14
 5691 012f 1D       		.byte	0x1d
 5692 0130 70       		.byte	0x70
 5693 0131 E8000000 		.4byte	0xe8
 5694 0135 02       		.byte	0x2
 5695 0136 23       		.byte	0x23
 5696 0137 08       		.uleb128 0x8
 5697 0138 00       		.byte	0x0
 5698 0139 02       		.uleb128 0x2
 5699 013a 63020000 		.4byte	.LASF20
 5700 013e 1D       		.byte	0x1d
 5701 013f 72       		.byte	0x72
 5702 0140 02010000 		.4byte	0x102
 5703 0144 07       		.uleb128 0x7
 5704 0145 82010000 		.4byte	.LASF21
 5705 0149 14       		.byte	0x14
 5706 014a 1D       		.byte	0x1d
 5707 014b 78       		.byte	0x78
 5708 014c 7B010000 		.4byte	0x17b
 5709 0150 08       		.uleb128 0x8
 5710 0151 51040000 		.4byte	.LASF22
 5711 0155 1D       		.byte	0x1d
 5712 0156 79       		.byte	0x79
ARM GAS  /tmp/cch3WSAd.s 			page 203


 5713 0157 7B010000 		.4byte	0x17b
 5714 015b 02       		.byte	0x2
 5715 015c 23       		.byte	0x23
 5716 015d 00       		.uleb128 0x0
 5717 015e 08       		.uleb128 0x8
 5718 015f 13050000 		.4byte	.LASF23
 5719 0163 1D       		.byte	0x1d
 5720 0164 7A       		.byte	0x7a
 5721 0165 80010000 		.4byte	0x180
 5722 0169 02       		.byte	0x2
 5723 016a 23       		.byte	0x23
 5724 016b 04       		.uleb128 0x4
 5725 016c 08       		.uleb128 0x8
 5726 016d 0F030000 		.4byte	.LASF24
 5727 0171 1D       		.byte	0x1d
 5728 0172 7B       		.byte	0x7b
 5729 0173 8B010000 		.4byte	0x18b
 5730 0177 02       		.byte	0x2
 5731 0178 23       		.byte	0x23
 5732 0179 08       		.uleb128 0x8
 5733 017a 00       		.byte	0x0
 5734 017b 0B       		.uleb128 0xb
 5735 017c 7C000000 		.4byte	0x7c
 5736 0180 09       		.uleb128 0x9
 5737 0181 04       		.byte	0x4
 5738 0182 86010000 		.4byte	0x186
 5739 0186 0B       		.uleb128 0xb
 5740 0187 F7000000 		.4byte	0xf7
 5741 018b 0B       		.uleb128 0xb
 5742 018c 39010000 		.4byte	0x139
 5743 0190 02       		.uleb128 0x2
 5744 0191 6A010000 		.4byte	.LASF25
 5745 0195 1D       		.byte	0x1d
 5746 0196 7C       		.byte	0x7c
 5747 0197 44010000 		.4byte	0x144
 5748 019b 07       		.uleb128 0x7
 5749 019c 0D000000 		.4byte	.LASF26
 5750 01a0 08       		.byte	0x8
 5751 01a1 1C       		.byte	0x1c
 5752 01a2 5D       		.byte	0x5d
 5753 01a3 C4010000 		.4byte	0x1c4
 5754 01a7 08       		.uleb128 0x8
 5755 01a8 9E020000 		.4byte	.LASF27
 5756 01ac 1C       		.byte	0x1c
 5757 01ad 5E       		.byte	0x5e
 5758 01ae 70000000 		.4byte	0x70
 5759 01b2 02       		.byte	0x2
 5760 01b3 23       		.byte	0x23
 5761 01b4 00       		.uleb128 0x0
 5762 01b5 08       		.uleb128 0x8
 5763 01b6 8E020000 		.4byte	.LASF28
 5764 01ba 1C       		.byte	0x1c
 5765 01bb 5F       		.byte	0x5f
 5766 01bc 8A000000 		.4byte	0x8a
 5767 01c0 02       		.byte	0x2
 5768 01c1 23       		.byte	0x23
 5769 01c2 04       		.uleb128 0x4
ARM GAS  /tmp/cch3WSAd.s 			page 204


 5770 01c3 00       		.byte	0x0
 5771 01c4 02       		.uleb128 0x2
 5772 01c5 99040000 		.4byte	.LASF29
 5773 01c9 1C       		.byte	0x1c
 5774 01ca 60       		.byte	0x60
 5775 01cb 9B010000 		.4byte	0x19b
 5776 01cf 07       		.uleb128 0x7
 5777 01d0 4D030000 		.4byte	.LASF30
 5778 01d4 4C       		.byte	0x4c
 5779 01d5 01       		.byte	0x1
 5780 01d6 63       		.byte	0x63
 5781 01d7 76020000 		.4byte	0x276
 5782 01db 08       		.uleb128 0x8
 5783 01dc E5020000 		.4byte	.LASF31
 5784 01e0 01       		.byte	0x1
 5785 01e1 64       		.byte	0x64
 5786 01e2 76020000 		.4byte	0x276
 5787 01e6 02       		.byte	0x2
 5788 01e7 23       		.byte	0x23
 5789 01e8 00       		.uleb128 0x0
 5790 01e9 08       		.uleb128 0x8
 5791 01ea 25010000 		.4byte	.LASF32
 5792 01ee 01       		.byte	0x1
 5793 01ef 65       		.byte	0x65
 5794 01f0 76020000 		.4byte	0x276
 5795 01f4 02       		.byte	0x2
 5796 01f5 23       		.byte	0x23
 5797 01f6 04       		.uleb128 0x4
 5798 01f7 08       		.uleb128 0x8
 5799 01f8 BA030000 		.4byte	.LASF33
 5800 01fc 01       		.byte	0x1
 5801 01fd 67       		.byte	0x67
 5802 01fe 76020000 		.4byte	0x276
 5803 0202 02       		.byte	0x2
 5804 0203 23       		.byte	0x23
 5805 0204 08       		.uleb128 0x8
 5806 0205 08       		.uleb128 0x8
 5807 0206 EB030000 		.4byte	.LASF34
 5808 020a 01       		.byte	0x1
 5809 020b 68       		.byte	0x68
 5810 020c 76020000 		.4byte	0x276
 5811 0210 02       		.byte	0x2
 5812 0211 23       		.byte	0x23
 5813 0212 0C       		.uleb128 0xc
 5814 0213 08       		.uleb128 0x8
 5815 0214 FF040000 		.4byte	.LASF35
 5816 0218 01       		.byte	0x1
 5817 0219 6A       		.byte	0x6a
 5818 021a 90010000 		.4byte	0x190
 5819 021e 02       		.byte	0x2
 5820 021f 23       		.byte	0x23
 5821 0220 10       		.uleb128 0x10
 5822 0221 08       		.uleb128 0x8
 5823 0222 24030000 		.4byte	.LASF36
 5824 0226 01       		.byte	0x1
 5825 0227 6B       		.byte	0x6b
 5826 0228 90010000 		.4byte	0x190
ARM GAS  /tmp/cch3WSAd.s 			page 205


 5827 022c 02       		.byte	0x2
 5828 022d 23       		.byte	0x23
 5829 022e 24       		.uleb128 0x24
 5830 022f 08       		.uleb128 0x8
 5831 0230 73040000 		.4byte	.LASF37
 5832 0234 01       		.byte	0x1
 5833 0235 6D       		.byte	0x6d
 5834 0236 7B010000 		.4byte	0x17b
 5835 023a 02       		.byte	0x2
 5836 023b 23       		.byte	0x23
 5837 023c 38       		.uleb128 0x38
 5838 023d 08       		.uleb128 0x8
 5839 023e 70010000 		.4byte	.LASF38
 5840 0242 01       		.byte	0x1
 5841 0243 6E       		.byte	0x6e
 5842 0244 7C000000 		.4byte	0x7c
 5843 0248 02       		.byte	0x2
 5844 0249 23       		.byte	0x23
 5845 024a 3C       		.uleb128 0x3c
 5846 024b 08       		.uleb128 0x8
 5847 024c 42020000 		.4byte	.LASF39
 5848 0250 01       		.byte	0x1
 5849 0251 6F       		.byte	0x6f
 5850 0252 7C000000 		.4byte	0x7c
 5851 0256 02       		.byte	0x2
 5852 0257 23       		.byte	0x23
 5853 0258 40       		.uleb128 0x40
 5854 0259 08       		.uleb128 0x8
 5855 025a 91040000 		.4byte	.LASF40
 5856 025e 01       		.byte	0x1
 5857 025f 71       		.byte	0x71
 5858 0260 70000000 		.4byte	0x70
 5859 0264 02       		.byte	0x2
 5860 0265 23       		.byte	0x23
 5861 0266 44       		.uleb128 0x44
 5862 0267 08       		.uleb128 0x8
 5863 0268 62010000 		.4byte	.LASF41
 5864 026c 01       		.byte	0x1
 5865 026d 72       		.byte	0x72
 5866 026e 70000000 		.4byte	0x70
 5867 0272 02       		.byte	0x2
 5868 0273 23       		.byte	0x23
 5869 0274 48       		.uleb128 0x48
 5870 0275 00       		.byte	0x0
 5871 0276 09       		.uleb128 0x9
 5872 0277 04       		.byte	0x4
 5873 0278 3F000000 		.4byte	0x3f
 5874 027c 02       		.uleb128 0x2
 5875 027d 3B020000 		.4byte	.LASF42
 5876 0281 01       		.byte	0x1
 5877 0282 74       		.byte	0x74
 5878 0283 CF010000 		.4byte	0x1cf
 5879 0287 02       		.uleb128 0x2
 5880 0288 88010000 		.4byte	.LASF43
 5881 028c 01       		.byte	0x1
 5882 028d 7C       		.byte	0x7c
 5883 028e 92020000 		.4byte	0x292
ARM GAS  /tmp/cch3WSAd.s 			page 206


 5884 0292 09       		.uleb128 0x9
 5885 0293 04       		.byte	0x4
 5886 0294 7C020000 		.4byte	0x27c
 5887 0298 07       		.uleb128 0x7
 5888 0299 3C000000 		.4byte	.LASF44
 5889 029d 08       		.byte	0x8
 5890 029e 01       		.byte	0x1
 5891 029f A9       		.byte	0xa9
 5892 02a0 C1020000 		.4byte	0x2c1
 5893 02a4 08       		.uleb128 0x8
 5894 02a5 29000000 		.4byte	.LASF45
 5895 02a9 01       		.byte	0x1
 5896 02aa AA       		.byte	0xaa
 5897 02ab 76020000 		.4byte	0x276
 5898 02af 02       		.byte	0x2
 5899 02b0 23       		.byte	0x23
 5900 02b1 00       		.uleb128 0x0
 5901 02b2 08       		.uleb128 0x8
 5902 02b3 6B040000 		.4byte	.LASF46
 5903 02b7 01       		.byte	0x1
 5904 02b8 AB       		.byte	0xab
 5905 02b9 87020000 		.4byte	0x287
 5906 02bd 02       		.byte	0x2
 5907 02be 23       		.byte	0x23
 5908 02bf 04       		.uleb128 0x4
 5909 02c0 00       		.byte	0x0
 5910 02c1 02       		.uleb128 0x2
 5911 02c2 D7000000 		.4byte	.LASF47
 5912 02c6 01       		.byte	0x1
 5913 02c7 AC       		.byte	0xac
 5914 02c8 98020000 		.4byte	0x298
 5915 02cc 0C       		.uleb128 0xc
 5916 02cd 01       		.byte	0x1
 5917 02ce 00000000 		.4byte	.LASF51
 5918 02d2 01       		.byte	0x1
 5919 02d3 F7       		.byte	0xf7
 5920 02d4 01       		.byte	0x1
 5921 02d5 87020000 		.4byte	0x287
 5922 02d9 00000000 		.4byte	.LFB29
 5923 02dd CA000000 		.4byte	.LFE29
 5924 02e1 00000000 		.4byte	.LLST0
 5925 02e5 22030000 		.4byte	0x322
 5926 02e9 0D       		.uleb128 0xd
 5927 02ea 86030000 		.4byte	.LASF48
 5928 02ee 01       		.byte	0x1
 5929 02ef F7       		.byte	0xf7
 5930 02f0 7C000000 		.4byte	0x7c
 5931 02f4 02       		.byte	0x2
 5932 02f5 91       		.byte	0x91
 5933 02f6 6C       		.sleb128 -20
 5934 02f7 0D       		.uleb128 0xd
 5935 02f8 42020000 		.4byte	.LASF39
 5936 02fc 01       		.byte	0x1
 5937 02fd F7       		.byte	0xf7
 5938 02fe 7C000000 		.4byte	0x7c
 5939 0302 02       		.byte	0x2
 5940 0303 91       		.byte	0x91
ARM GAS  /tmp/cch3WSAd.s 			page 207


 5941 0304 68       		.sleb128 -24
 5942 0305 0E       		.uleb128 0xe
 5943 0306 4D020000 		.4byte	.LASF49
 5944 030a 01       		.byte	0x1
 5945 030b F9       		.byte	0xf9
 5946 030c 92020000 		.4byte	0x292
 5947 0310 02       		.byte	0x2
 5948 0311 91       		.byte	0x91
 5949 0312 70       		.sleb128 -16
 5950 0313 0E       		.uleb128 0xe
 5951 0314 3B030000 		.4byte	.LASF50
 5952 0318 01       		.byte	0x1
 5953 0319 FA       		.byte	0xfa
 5954 031a 2D000000 		.4byte	0x2d
 5955 031e 02       		.byte	0x2
 5956 031f 91       		.byte	0x91
 5957 0320 74       		.sleb128 -12
 5958 0321 00       		.byte	0x0
 5959 0322 0F       		.uleb128 0xf
 5960 0323 01       		.byte	0x1
 5961 0324 2C010000 		.4byte	.LASF52
 5962 0328 01       		.byte	0x1
 5963 0329 C301     		.2byte	0x1c3
 5964 032b 01       		.byte	0x1
 5965 032c 70000000 		.4byte	0x70
 5966 0330 00000000 		.4byte	.LFB30
 5967 0334 20010000 		.4byte	.LFE30
 5968 0338 37000000 		.4byte	.LLST1
 5969 033c 9B030000 		.4byte	0x39b
 5970 0340 10       		.uleb128 0x10
 5971 0341 94030000 		.4byte	.LASF53
 5972 0345 01       		.byte	0x1
 5973 0346 C301     		.2byte	0x1c3
 5974 0348 87020000 		.4byte	0x287
 5975 034c 02       		.byte	0x2
 5976 034d 91       		.byte	0x91
 5977 034e 64       		.sleb128 -28
 5978 034f 10       		.uleb128 0x10
 5979 0350 C4030000 		.4byte	.LASF54
 5980 0354 01       		.byte	0x1
 5981 0355 C301     		.2byte	0x1c3
 5982 0357 9B030000 		.4byte	0x39b
 5983 035b 02       		.byte	0x2
 5984 035c 91       		.byte	0x91
 5985 035d 60       		.sleb128 -32
 5986 035e 10       		.uleb128 0x10
 5987 035f 47010000 		.4byte	.LASF55
 5988 0363 01       		.byte	0x1
 5989 0364 C301     		.2byte	0x1c3
 5990 0366 8A000000 		.4byte	0x8a
 5991 036a 02       		.byte	0x2
 5992 036b 91       		.byte	0x91
 5993 036c 5C       		.sleb128 -36
 5994 036d 10       		.uleb128 0x10
 5995 036e C0000000 		.4byte	.LASF56
 5996 0372 01       		.byte	0x1
 5997 0373 C301     		.2byte	0x1c3
ARM GAS  /tmp/cch3WSAd.s 			page 208


 5998 0375 70000000 		.4byte	0x70
 5999 0379 02       		.byte	0x2
 6000 037a 91       		.byte	0x91
 6001 037b 58       		.sleb128 -40
 6002 037c 11       		.uleb128 0x11
 6003 037d 0B040000 		.4byte	.LASF57
 6004 0381 01       		.byte	0x1
 6005 0382 C501     		.2byte	0x1c5
 6006 0384 70000000 		.4byte	0x70
 6007 0388 02       		.byte	0x2
 6008 0389 91       		.byte	0x91
 6009 038a 74       		.sleb128 -12
 6010 038b 11       		.uleb128 0x11
 6011 038c CE000000 		.4byte	.LASF58
 6012 0390 01       		.byte	0x1
 6013 0391 C601     		.2byte	0x1c6
 6014 0393 C4010000 		.4byte	0x1c4
 6015 0397 02       		.byte	0x2
 6016 0398 91       		.byte	0x91
 6017 0399 6C       		.sleb128 -20
 6018 039a 00       		.byte	0x0
 6019 039b 12       		.uleb128 0x12
 6020 039c A0030000 		.4byte	0x3a0
 6021 03a0 09       		.uleb128 0x9
 6022 03a1 04       		.byte	0x4
 6023 03a2 A6030000 		.4byte	0x3a6
 6024 03a6 13       		.uleb128 0x13
 6025 03a7 0F       		.uleb128 0xf
 6026 03a8 01       		.byte	0x1
 6027 03a9 9C030000 		.4byte	.LASF59
 6028 03ad 01       		.byte	0x1
 6029 03ae FF02     		.2byte	0x2ff
 6030 03b0 01       		.byte	0x1
 6031 03b1 70000000 		.4byte	0x70
 6032 03b5 00000000 		.4byte	.LFB31
 6033 03b9 96000000 		.4byte	.LFE31
 6034 03bd 6E000000 		.4byte	.LLST2
 6035 03c1 20040000 		.4byte	0x420
 6036 03c5 10       		.uleb128 0x10
 6037 03c6 94030000 		.4byte	.LASF53
 6038 03ca 01       		.byte	0x1
 6039 03cb FF02     		.2byte	0x2ff
 6040 03cd 87020000 		.4byte	0x287
 6041 03d1 02       		.byte	0x2
 6042 03d2 91       		.byte	0x91
 6043 03d3 6C       		.sleb128 -20
 6044 03d4 10       		.uleb128 0x10
 6045 03d5 C4030000 		.4byte	.LASF54
 6046 03d9 01       		.byte	0x1
 6047 03da FF02     		.2byte	0x2ff
 6048 03dc 9B030000 		.4byte	0x39b
 6049 03e0 02       		.byte	0x2
 6050 03e1 91       		.byte	0x91
 6051 03e2 68       		.sleb128 -24
 6052 03e3 10       		.uleb128 0x10
 6053 03e4 C5040000 		.4byte	.LASF60
 6054 03e8 01       		.byte	0x1
ARM GAS  /tmp/cch3WSAd.s 			page 209


 6055 03e9 FF02     		.2byte	0x2ff
 6056 03eb 20040000 		.4byte	0x420
 6057 03ef 02       		.byte	0x2
 6058 03f0 91       		.byte	0x91
 6059 03f1 64       		.sleb128 -28
 6060 03f2 10       		.uleb128 0x10
 6061 03f3 C0000000 		.4byte	.LASF56
 6062 03f7 01       		.byte	0x1
 6063 03f8 FF02     		.2byte	0x2ff
 6064 03fa 70000000 		.4byte	0x70
 6065 03fe 02       		.byte	0x2
 6066 03ff 91       		.byte	0x91
 6067 0400 60       		.sleb128 -32
 6068 0401 11       		.uleb128 0x11
 6069 0402 BD040000 		.4byte	.LASF61
 6070 0406 01       		.byte	0x1
 6071 0407 0103     		.2byte	0x301
 6072 0409 70000000 		.4byte	0x70
 6073 040d 02       		.byte	0x2
 6074 040e 91       		.byte	0x91
 6075 040f 70       		.sleb128 -16
 6076 0410 11       		.uleb128 0x11
 6077 0411 A6040000 		.4byte	.LASF62
 6078 0415 01       		.byte	0x1
 6079 0416 0203     		.2byte	0x302
 6080 0418 7C000000 		.4byte	0x7c
 6081 041c 02       		.byte	0x2
 6082 041d 91       		.byte	0x91
 6083 041e 74       		.sleb128 -12
 6084 041f 00       		.byte	0x0
 6085 0420 09       		.uleb128 0x9
 6086 0421 04       		.byte	0x4
 6087 0422 70000000 		.4byte	0x70
 6088 0426 0F       		.uleb128 0xf
 6089 0427 01       		.byte	0x1
 6090 0428 F6030000 		.4byte	.LASF63
 6091 042c 01       		.byte	0x1
 6092 042d 3403     		.2byte	0x334
 6093 042f 01       		.byte	0x1
 6094 0430 70000000 		.4byte	0x70
 6095 0434 00000000 		.4byte	.LFB32
 6096 0438 62010000 		.4byte	.LFE32
 6097 043c A5000000 		.4byte	.LLST3
 6098 0440 AE040000 		.4byte	0x4ae
 6099 0444 10       		.uleb128 0x10
 6100 0445 94030000 		.4byte	.LASF53
 6101 0449 01       		.byte	0x1
 6102 044a 3403     		.2byte	0x334
 6103 044c 87020000 		.4byte	0x287
 6104 0450 02       		.byte	0x2
 6105 0451 91       		.byte	0x91
 6106 0452 64       		.sleb128 -28
 6107 0453 10       		.uleb128 0x10
 6108 0454 3E010000 		.4byte	.LASF64
 6109 0458 01       		.byte	0x1
 6110 0459 3403     		.2byte	0x334
 6111 045b AE040000 		.4byte	0x4ae
ARM GAS  /tmp/cch3WSAd.s 			page 210


 6112 045f 02       		.byte	0x2
 6113 0460 91       		.byte	0x91
 6114 0461 60       		.sleb128 -32
 6115 0462 10       		.uleb128 0x10
 6116 0463 47010000 		.4byte	.LASF55
 6117 0467 01       		.byte	0x1
 6118 0468 3403     		.2byte	0x334
 6119 046a 8A000000 		.4byte	0x8a
 6120 046e 02       		.byte	0x2
 6121 046f 91       		.byte	0x91
 6122 0470 5C       		.sleb128 -36
 6123 0471 10       		.uleb128 0x10
 6124 0472 B3000000 		.4byte	.LASF65
 6125 0476 01       		.byte	0x1
 6126 0477 3403     		.2byte	0x334
 6127 0479 70000000 		.4byte	0x70
 6128 047d 02       		.byte	0x2
 6129 047e 91       		.byte	0x91
 6130 047f 58       		.sleb128 -40
 6131 0480 11       		.uleb128 0x11
 6132 0481 0B040000 		.4byte	.LASF57
 6133 0485 01       		.byte	0x1
 6134 0486 3603     		.2byte	0x336
 6135 0488 70000000 		.4byte	0x70
 6136 048c 02       		.byte	0x2
 6137 048d 91       		.byte	0x91
 6138 048e 70       		.sleb128 -16
 6139 048f 11       		.uleb128 0x11
 6140 0490 CE000000 		.4byte	.LASF58
 6141 0494 01       		.byte	0x1
 6142 0495 3703     		.2byte	0x337
 6143 0497 C4010000 		.4byte	0x1c4
 6144 049b 02       		.byte	0x2
 6145 049c 91       		.byte	0x91
 6146 049d 68       		.sleb128 -24
 6147 049e 11       		.uleb128 0x11
 6148 049f FF000000 		.4byte	.LASF66
 6149 04a3 01       		.byte	0x1
 6150 04a4 3803     		.2byte	0x338
 6151 04a6 76020000 		.4byte	0x276
 6152 04aa 02       		.byte	0x2
 6153 04ab 91       		.byte	0x91
 6154 04ac 74       		.sleb128 -12
 6155 04ad 00       		.byte	0x0
 6156 04ae 12       		.uleb128 0x12
 6157 04af 7A000000 		.4byte	0x7a
 6158 04b3 0F       		.uleb128 0xf
 6159 04b4 01       		.byte	0x1
 6160 04b5 EA000000 		.4byte	.LASF67
 6161 04b9 01       		.byte	0x1
 6162 04ba C703     		.2byte	0x3c7
 6163 04bc 01       		.byte	0x1
 6164 04bd 70000000 		.4byte	0x70
 6165 04c1 00000000 		.4byte	.LFB33
 6166 04c5 9A000000 		.4byte	.LFE33
 6167 04c9 DC000000 		.4byte	.LLST4
 6168 04cd 1D050000 		.4byte	0x51d
ARM GAS  /tmp/cch3WSAd.s 			page 211


 6169 04d1 10       		.uleb128 0x10
 6170 04d2 94030000 		.4byte	.LASF53
 6171 04d6 01       		.byte	0x1
 6172 04d7 C703     		.2byte	0x3c7
 6173 04d9 87020000 		.4byte	0x287
 6174 04dd 02       		.byte	0x2
 6175 04de 91       		.byte	0x91
 6176 04df 6C       		.sleb128 -20
 6177 04e0 10       		.uleb128 0x10
 6178 04e1 3E010000 		.4byte	.LASF64
 6179 04e5 01       		.byte	0x1
 6180 04e6 C703     		.2byte	0x3c7
 6181 04e8 AE040000 		.4byte	0x4ae
 6182 04ec 02       		.byte	0x2
 6183 04ed 91       		.byte	0x91
 6184 04ee 68       		.sleb128 -24
 6185 04ef 10       		.uleb128 0x10
 6186 04f0 85040000 		.4byte	.LASF68
 6187 04f4 01       		.byte	0x1
 6188 04f5 C703     		.2byte	0x3c7
 6189 04f7 20040000 		.4byte	0x420
 6190 04fb 02       		.byte	0x2
 6191 04fc 91       		.byte	0x91
 6192 04fd 64       		.sleb128 -28
 6193 04fe 11       		.uleb128 0x11
 6194 04ff BD040000 		.4byte	.LASF61
 6195 0503 01       		.byte	0x1
 6196 0504 C903     		.2byte	0x3c9
 6197 0506 70000000 		.4byte	0x70
 6198 050a 02       		.byte	0x2
 6199 050b 91       		.byte	0x91
 6200 050c 70       		.sleb128 -16
 6201 050d 11       		.uleb128 0x11
 6202 050e A6040000 		.4byte	.LASF62
 6203 0512 01       		.byte	0x1
 6204 0513 CA03     		.2byte	0x3ca
 6205 0515 7C000000 		.4byte	0x7c
 6206 0519 02       		.byte	0x2
 6207 051a 91       		.byte	0x91
 6208 051b 74       		.sleb128 -12
 6209 051c 00       		.byte	0x0
 6210 051d 0F       		.uleb128 0xf
 6211 051e 01       		.byte	0x1
 6212 051f 6D000000 		.4byte	.LASF69
 6213 0523 01       		.byte	0x1
 6214 0524 FA03     		.2byte	0x3fa
 6215 0526 01       		.byte	0x1
 6216 0527 7C000000 		.4byte	0x7c
 6217 052b 00000000 		.4byte	.LFB34
 6218 052f 22000000 		.4byte	.LFE34
 6219 0533 13010000 		.4byte	.LLST5
 6220 0537 5A050000 		.4byte	0x55a
 6221 053b 10       		.uleb128 0x10
 6222 053c 94030000 		.4byte	.LASF53
 6223 0540 01       		.byte	0x1
 6224 0541 FA03     		.2byte	0x3fa
 6225 0543 5A050000 		.4byte	0x55a
ARM GAS  /tmp/cch3WSAd.s 			page 212


 6226 0547 02       		.byte	0x2
 6227 0548 91       		.byte	0x91
 6228 0549 6C       		.sleb128 -20
 6229 054a 11       		.uleb128 0x11
 6230 054b 26040000 		.4byte	.LASF70
 6231 054f 01       		.byte	0x1
 6232 0550 FC03     		.2byte	0x3fc
 6233 0552 7C000000 		.4byte	0x7c
 6234 0556 02       		.byte	0x2
 6235 0557 91       		.byte	0x91
 6236 0558 74       		.sleb128 -12
 6237 0559 00       		.byte	0x0
 6238 055a 12       		.uleb128 0x12
 6239 055b 87020000 		.4byte	0x287
 6240 055f 0F       		.uleb128 0xf
 6241 0560 01       		.byte	0x1
 6242 0561 1D020000 		.4byte	.LASF71
 6243 0565 01       		.byte	0x1
 6244 0566 0604     		.2byte	0x406
 6245 0568 01       		.byte	0x1
 6246 0569 7C000000 		.4byte	0x7c
 6247 056d 00000000 		.4byte	.LFB35
 6248 0571 1C000000 		.4byte	.LFE35
 6249 0575 4A010000 		.4byte	.LLST6
 6250 0579 9C050000 		.4byte	0x59c
 6251 057d 10       		.uleb128 0x10
 6252 057e 94030000 		.4byte	.LASF53
 6253 0582 01       		.byte	0x1
 6254 0583 0604     		.2byte	0x406
 6255 0585 5A050000 		.4byte	0x55a
 6256 0589 02       		.byte	0x2
 6257 058a 91       		.byte	0x91
 6258 058b 6C       		.sleb128 -20
 6259 058c 11       		.uleb128 0x11
 6260 058d 26040000 		.4byte	.LASF70
 6261 0591 01       		.byte	0x1
 6262 0592 0804     		.2byte	0x408
 6263 0594 7C000000 		.4byte	0x7c
 6264 0598 02       		.byte	0x2
 6265 0599 91       		.byte	0x91
 6266 059a 74       		.sleb128 -12
 6267 059b 00       		.byte	0x0
 6268 059c 14       		.uleb128 0x14
 6269 059d 01       		.byte	0x1
 6270 059e 19040000 		.4byte	.LASF80
 6271 05a2 01       		.byte	0x1
 6272 05a3 1004     		.2byte	0x410
 6273 05a5 01       		.byte	0x1
 6274 05a6 00000000 		.4byte	.LFB36
 6275 05aa 26000000 		.4byte	.LFE36
 6276 05ae 81010000 		.4byte	.LLST7
 6277 05b2 C6050000 		.4byte	0x5c6
 6278 05b6 10       		.uleb128 0x10
 6279 05b7 94030000 		.4byte	.LASF53
 6280 05bb 01       		.byte	0x1
 6281 05bc 1004     		.2byte	0x410
 6282 05be 87020000 		.4byte	0x287
ARM GAS  /tmp/cch3WSAd.s 			page 213


 6283 05c2 02       		.byte	0x2
 6284 05c3 91       		.byte	0x91
 6285 05c4 74       		.sleb128 -12
 6286 05c5 00       		.byte	0x0
 6287 05c6 15       		.uleb128 0x15
 6288 05c7 5A000000 		.4byte	.LASF73
 6289 05cb 01       		.byte	0x1
 6290 05cc 1904     		.2byte	0x419
 6291 05ce 01       		.byte	0x1
 6292 05cf 00000000 		.4byte	.LFB37
 6293 05d3 AA000000 		.4byte	.LFE37
 6294 05d7 B8010000 		.4byte	.LLST8
 6295 05db 0D060000 		.4byte	0x60d
 6296 05df 10       		.uleb128 0x10
 6297 05e0 94030000 		.4byte	.LASF53
 6298 05e4 01       		.byte	0x1
 6299 05e5 1904     		.2byte	0x419
 6300 05e7 92020000 		.4byte	0x292
 6301 05eb 02       		.byte	0x2
 6302 05ec 91       		.byte	0x91
 6303 05ed 74       		.sleb128 -12
 6304 05ee 10       		.uleb128 0x10
 6305 05ef C4030000 		.4byte	.LASF54
 6306 05f3 01       		.byte	0x1
 6307 05f4 1904     		.2byte	0x419
 6308 05f6 A0030000 		.4byte	0x3a0
 6309 05fa 02       		.byte	0x2
 6310 05fb 91       		.byte	0x91
 6311 05fc 70       		.sleb128 -16
 6312 05fd 10       		.uleb128 0x10
 6313 05fe 50000000 		.4byte	.LASF72
 6314 0602 01       		.byte	0x1
 6315 0603 1904     		.2byte	0x419
 6316 0605 70000000 		.4byte	0x70
 6317 0609 02       		.byte	0x2
 6318 060a 91       		.byte	0x91
 6319 060b 6C       		.sleb128 -20
 6320 060c 00       		.byte	0x0
 6321 060d 15       		.uleb128 0x15
 6322 060e B9020000 		.4byte	.LASF74
 6323 0612 01       		.byte	0x1
 6324 0613 3F04     		.2byte	0x43f
 6325 0615 01       		.byte	0x1
 6326 0616 00000000 		.4byte	.LFB38
 6327 061a 4E000000 		.4byte	.LFE38
 6328 061e EF010000 		.4byte	.LLST9
 6329 0622 45060000 		.4byte	0x645
 6330 0626 10       		.uleb128 0x10
 6331 0627 94030000 		.4byte	.LASF53
 6332 062b 01       		.byte	0x1
 6333 062c 3F04     		.2byte	0x43f
 6334 062e 45060000 		.4byte	0x645
 6335 0632 02       		.byte	0x2
 6336 0633 91       		.byte	0x91
 6337 0634 74       		.sleb128 -12
 6338 0635 10       		.uleb128 0x10
 6339 0636 3E010000 		.4byte	.LASF64
ARM GAS  /tmp/cch3WSAd.s 			page 214


 6340 063a 01       		.byte	0x1
 6341 063b 3F04     		.2byte	0x43f
 6342 063d A0030000 		.4byte	0x3a0
 6343 0641 02       		.byte	0x2
 6344 0642 91       		.byte	0x91
 6345 0643 70       		.sleb128 -16
 6346 0644 00       		.byte	0x0
 6347 0645 12       		.uleb128 0x12
 6348 0646 92020000 		.4byte	0x292
 6349 064a 15       		.uleb128 0x15
 6350 064b 5D030000 		.4byte	.LASF75
 6351 064f 01       		.byte	0x1
 6352 0650 4D04     		.2byte	0x44d
 6353 0652 01       		.byte	0x1
 6354 0653 00000000 		.4byte	.LFB39
 6355 0657 A0000000 		.4byte	.LFE39
 6356 065b 26020000 		.4byte	.LLST10
 6357 065f 73060000 		.4byte	0x673
 6358 0663 10       		.uleb128 0x10
 6359 0664 94030000 		.4byte	.LASF53
 6360 0668 01       		.byte	0x1
 6361 0669 4D04     		.2byte	0x44d
 6362 066b 87020000 		.4byte	0x287
 6363 066f 02       		.byte	0x2
 6364 0670 91       		.byte	0x91
 6365 0671 74       		.sleb128 -12
 6366 0672 00       		.byte	0x0
 6367 0673 16       		.uleb128 0x16
 6368 0674 41040000 		.4byte	.LASF77
 6369 0678 01       		.byte	0x1
 6370 0679 8D04     		.2byte	0x48d
 6371 067b 01       		.byte	0x1
 6372 067c 70000000 		.4byte	0x70
 6373 0680 00000000 		.4byte	.LFB40
 6374 0684 2A000000 		.4byte	.LFE40
 6375 0688 5D020000 		.4byte	.LLST11
 6376 068c AF060000 		.4byte	0x6af
 6377 0690 10       		.uleb128 0x10
 6378 0691 94030000 		.4byte	.LASF53
 6379 0695 01       		.byte	0x1
 6380 0696 8D04     		.2byte	0x48d
 6381 0698 5A050000 		.4byte	0x55a
 6382 069c 02       		.byte	0x2
 6383 069d 91       		.byte	0x91
 6384 069e 6C       		.sleb128 -20
 6385 069f 11       		.uleb128 0x11
 6386 06a0 BD040000 		.4byte	.LASF61
 6387 06a4 01       		.byte	0x1
 6388 06a5 8F04     		.2byte	0x48f
 6389 06a7 70000000 		.4byte	0x70
 6390 06ab 02       		.byte	0x2
 6391 06ac 91       		.byte	0x91
 6392 06ad 74       		.sleb128 -12
 6393 06ae 00       		.byte	0x0
 6394 06af 0F       		.uleb128 0xf
 6395 06b0 01       		.byte	0x1
 6396 06b1 91000000 		.4byte	.LASF76
ARM GAS  /tmp/cch3WSAd.s 			page 215


 6397 06b5 01       		.byte	0x1
 6398 06b6 9904     		.2byte	0x499
 6399 06b8 01       		.byte	0x1
 6400 06b9 70000000 		.4byte	0x70
 6401 06bd 00000000 		.4byte	.LFB41
 6402 06c1 24000000 		.4byte	.LFE41
 6403 06c5 94020000 		.4byte	.LLST12
 6404 06c9 EC060000 		.4byte	0x6ec
 6405 06cd 10       		.uleb128 0x10
 6406 06ce 94030000 		.4byte	.LASF53
 6407 06d2 01       		.byte	0x1
 6408 06d3 9904     		.2byte	0x499
 6409 06d5 5A050000 		.4byte	0x55a
 6410 06d9 02       		.byte	0x2
 6411 06da 91       		.byte	0x91
 6412 06db 6C       		.sleb128 -20
 6413 06dc 11       		.uleb128 0x11
 6414 06dd BD040000 		.4byte	.LASF61
 6415 06e1 01       		.byte	0x1
 6416 06e2 9B04     		.2byte	0x49b
 6417 06e4 70000000 		.4byte	0x70
 6418 06e8 02       		.byte	0x2
 6419 06e9 91       		.byte	0x91
 6420 06ea 74       		.sleb128 -12
 6421 06eb 00       		.byte	0x0
 6422 06ec 16       		.uleb128 0x16
 6423 06ed 16010000 		.4byte	.LASF78
 6424 06f1 01       		.byte	0x1
 6425 06f2 A304     		.2byte	0x4a3
 6426 06f4 01       		.byte	0x1
 6427 06f5 70000000 		.4byte	0x70
 6428 06f9 00000000 		.4byte	.LFB42
 6429 06fd 2E000000 		.4byte	.LFE42
 6430 0701 CB020000 		.4byte	.LLST13
 6431 0705 28070000 		.4byte	0x728
 6432 0709 10       		.uleb128 0x10
 6433 070a 94030000 		.4byte	.LASF53
 6434 070e 01       		.byte	0x1
 6435 070f A304     		.2byte	0x4a3
 6436 0711 5A050000 		.4byte	0x55a
 6437 0715 02       		.byte	0x2
 6438 0716 91       		.byte	0x91
 6439 0717 6C       		.sleb128 -20
 6440 0718 11       		.uleb128 0x11
 6441 0719 BD040000 		.4byte	.LASF61
 6442 071d 01       		.byte	0x1
 6443 071e A504     		.2byte	0x4a5
 6444 0720 70000000 		.4byte	0x70
 6445 0724 02       		.byte	0x2
 6446 0725 91       		.byte	0x91
 6447 0726 74       		.sleb128 -12
 6448 0727 00       		.byte	0x0
 6449 0728 0F       		.uleb128 0xf
 6450 0729 01       		.byte	0x1
 6451 072a D2030000 		.4byte	.LASF79
 6452 072e 01       		.byte	0x1
 6453 072f AF04     		.2byte	0x4af
ARM GAS  /tmp/cch3WSAd.s 			page 216


 6454 0731 01       		.byte	0x1
 6455 0732 70000000 		.4byte	0x70
 6456 0736 00000000 		.4byte	.LFB43
 6457 073a 28000000 		.4byte	.LFE43
 6458 073e 02030000 		.4byte	.LLST14
 6459 0742 65070000 		.4byte	0x765
 6460 0746 10       		.uleb128 0x10
 6461 0747 94030000 		.4byte	.LASF53
 6462 074b 01       		.byte	0x1
 6463 074c AF04     		.2byte	0x4af
 6464 074e 5A050000 		.4byte	0x55a
 6465 0752 02       		.byte	0x2
 6466 0753 91       		.byte	0x91
 6467 0754 6C       		.sleb128 -20
 6468 0755 11       		.uleb128 0x11
 6469 0756 BD040000 		.4byte	.LASF61
 6470 075a 01       		.byte	0x1
 6471 075b B104     		.2byte	0x4b1
 6472 075d 70000000 		.4byte	0x70
 6473 0761 02       		.byte	0x2
 6474 0762 91       		.byte	0x91
 6475 0763 74       		.sleb128 -12
 6476 0764 00       		.byte	0x0
 6477 0765 14       		.uleb128 0x14
 6478 0766 01       		.byte	0x1
 6479 0767 DF040000 		.4byte	.LASF81
 6480 076b 01       		.byte	0x1
 6481 076c 8F05     		.2byte	0x58f
 6482 076e 01       		.byte	0x1
 6483 076f 00000000 		.4byte	.LFB44
 6484 0773 62000000 		.4byte	.LFE44
 6485 0777 39030000 		.4byte	.LLST15
 6486 077b AC070000 		.4byte	0x7ac
 6487 077f 10       		.uleb128 0x10
 6488 0780 6C030000 		.4byte	.LASF82
 6489 0784 01       		.byte	0x1
 6490 0785 8F05     		.2byte	0x58f
 6491 0787 87020000 		.4byte	0x287
 6492 078b 02       		.byte	0x2
 6493 078c 91       		.byte	0x91
 6494 078d 6C       		.sleb128 -20
 6495 078e 10       		.uleb128 0x10
 6496 078f 29000000 		.4byte	.LASF45
 6497 0793 01       		.byte	0x1
 6498 0794 8F05     		.2byte	0x58f
 6499 0796 76020000 		.4byte	0x276
 6500 079a 02       		.byte	0x2
 6501 079b 91       		.byte	0x91
 6502 079c 68       		.sleb128 -24
 6503 079d 17       		.uleb128 0x17
 6504 079e 757800   		.ascii	"ux\000"
 6505 07a1 01       		.byte	0x1
 6506 07a2 9105     		.2byte	0x591
 6507 07a4 7C000000 		.4byte	0x7c
 6508 07a8 02       		.byte	0x2
 6509 07a9 91       		.byte	0x91
 6510 07aa 74       		.sleb128 -12
ARM GAS  /tmp/cch3WSAd.s 			page 217


 6511 07ab 00       		.byte	0x0
 6512 07ac 15       		.uleb128 0x15
 6513 07ad EC020000 		.4byte	.LASF83
 6514 07b1 01       		.byte	0x1
 6515 07b2 A605     		.2byte	0x5a6
 6516 07b4 01       		.byte	0x1
 6517 07b5 00000000 		.4byte	.LFB45
 6518 07b9 54000000 		.4byte	.LFE45
 6519 07bd 70030000 		.4byte	.LLST16
 6520 07c1 E3070000 		.4byte	0x7e3
 6521 07c5 10       		.uleb128 0x10
 6522 07c6 6C030000 		.4byte	.LASF82
 6523 07ca 01       		.byte	0x1
 6524 07cb A605     		.2byte	0x5a6
 6525 07cd 87020000 		.4byte	0x287
 6526 07d1 02       		.byte	0x2
 6527 07d2 91       		.byte	0x91
 6528 07d3 6C       		.sleb128 -20
 6529 07d4 17       		.uleb128 0x17
 6530 07d5 757800   		.ascii	"ux\000"
 6531 07d8 01       		.byte	0x1
 6532 07d9 A805     		.2byte	0x5a8
 6533 07db 7C000000 		.4byte	0x7c
 6534 07df 02       		.byte	0x2
 6535 07e0 91       		.byte	0x91
 6536 07e1 74       		.sleb128 -12
 6537 07e2 00       		.byte	0x0
 6538 07e3 18       		.uleb128 0x18
 6539 07e4 1B050000 		.4byte	.LASF84
 6540 07e8 16       		.byte	0x16
 6541 07e9 CE06     		.2byte	0x6ce
 6542 07eb F1070000 		.4byte	0x7f1
 6543 07ef 01       		.byte	0x1
 6544 07f0 01       		.byte	0x1
 6545 07f1 0B       		.uleb128 0xb
 6546 07f2 5B000000 		.4byte	0x5b
 6547 07f6 19       		.uleb128 0x19
 6548 07f7 C1020000 		.4byte	0x2c1
 6549 07fb 06080000 		.4byte	0x806
 6550 07ff 1A       		.uleb128 0x1a
 6551 0800 77000000 		.4byte	0x77
 6552 0804 09       		.byte	0x9
 6553 0805 00       		.byte	0x0
 6554 0806 1B       		.uleb128 0x1b
 6555 0807 71020000 		.4byte	.LASF85
 6556 080b 01       		.byte	0x1
 6557 080c B1       		.byte	0xb1
 6558 080d F6070000 		.4byte	0x7f6
 6559 0811 01       		.byte	0x1
 6560 0812 05       		.byte	0x5
 6561 0813 03       		.byte	0x3
 6562 0814 00000000 		.4byte	xQueueRegistry
 6563 0818 00       		.byte	0x0
 6564              		.section	.debug_abbrev
 6565 0000 01       		.uleb128 0x1
 6566 0001 11       		.uleb128 0x11
 6567 0002 01       		.byte	0x1
ARM GAS  /tmp/cch3WSAd.s 			page 218


 6568 0003 25       		.uleb128 0x25
 6569 0004 0E       		.uleb128 0xe
 6570 0005 13       		.uleb128 0x13
 6571 0006 0B       		.uleb128 0xb
 6572 0007 03       		.uleb128 0x3
 6573 0008 0E       		.uleb128 0xe
 6574 0009 1B       		.uleb128 0x1b
 6575 000a 0E       		.uleb128 0xe
 6576 000b 11       		.uleb128 0x11
 6577 000c 01       		.uleb128 0x1
 6578 000d 52       		.uleb128 0x52
 6579 000e 01       		.uleb128 0x1
 6580 000f 55       		.uleb128 0x55
 6581 0010 06       		.uleb128 0x6
 6582 0011 10       		.uleb128 0x10
 6583 0012 06       		.uleb128 0x6
 6584 0013 43       		.uleb128 0x43
 6585 0014 06       		.uleb128 0x6
 6586 0015 00       		.byte	0x0
 6587 0016 00       		.byte	0x0
 6588 0017 02       		.uleb128 0x2
 6589 0018 16       		.uleb128 0x16
 6590 0019 00       		.byte	0x0
 6591 001a 03       		.uleb128 0x3
 6592 001b 0E       		.uleb128 0xe
 6593 001c 3A       		.uleb128 0x3a
 6594 001d 0B       		.uleb128 0xb
 6595 001e 3B       		.uleb128 0x3b
 6596 001f 0B       		.uleb128 0xb
 6597 0020 49       		.uleb128 0x49
 6598 0021 13       		.uleb128 0x13
 6599 0022 00       		.byte	0x0
 6600 0023 00       		.byte	0x0
 6601 0024 03       		.uleb128 0x3
 6602 0025 24       		.uleb128 0x24
 6603 0026 00       		.byte	0x0
 6604 0027 0B       		.uleb128 0xb
 6605 0028 0B       		.uleb128 0xb
 6606 0029 3E       		.uleb128 0x3e
 6607 002a 0B       		.uleb128 0xb
 6608 002b 03       		.uleb128 0x3
 6609 002c 0E       		.uleb128 0xe
 6610 002d 00       		.byte	0x0
 6611 002e 00       		.byte	0x0
 6612 002f 04       		.uleb128 0x4
 6613 0030 24       		.uleb128 0x24
 6614 0031 00       		.byte	0x0
 6615 0032 0B       		.uleb128 0xb
 6616 0033 0B       		.uleb128 0xb
 6617 0034 3E       		.uleb128 0x3e
 6618 0035 0B       		.uleb128 0xb
 6619 0036 03       		.uleb128 0x3
 6620 0037 08       		.uleb128 0x8
 6621 0038 00       		.byte	0x0
 6622 0039 00       		.byte	0x0
 6623 003a 05       		.uleb128 0x5
 6624 003b 24       		.uleb128 0x24
ARM GAS  /tmp/cch3WSAd.s 			page 219


 6625 003c 00       		.byte	0x0
 6626 003d 0B       		.uleb128 0xb
 6627 003e 0B       		.uleb128 0xb
 6628 003f 3E       		.uleb128 0x3e
 6629 0040 0B       		.uleb128 0xb
 6630 0041 00       		.byte	0x0
 6631 0042 00       		.byte	0x0
 6632 0043 06       		.uleb128 0x6
 6633 0044 0F       		.uleb128 0xf
 6634 0045 00       		.byte	0x0
 6635 0046 0B       		.uleb128 0xb
 6636 0047 0B       		.uleb128 0xb
 6637 0048 00       		.byte	0x0
 6638 0049 00       		.byte	0x0
 6639 004a 07       		.uleb128 0x7
 6640 004b 13       		.uleb128 0x13
 6641 004c 01       		.byte	0x1
 6642 004d 03       		.uleb128 0x3
 6643 004e 0E       		.uleb128 0xe
 6644 004f 0B       		.uleb128 0xb
 6645 0050 0B       		.uleb128 0xb
 6646 0051 3A       		.uleb128 0x3a
 6647 0052 0B       		.uleb128 0xb
 6648 0053 3B       		.uleb128 0x3b
 6649 0054 0B       		.uleb128 0xb
 6650 0055 01       		.uleb128 0x1
 6651 0056 13       		.uleb128 0x13
 6652 0057 00       		.byte	0x0
 6653 0058 00       		.byte	0x0
 6654 0059 08       		.uleb128 0x8
 6655 005a 0D       		.uleb128 0xd
 6656 005b 00       		.byte	0x0
 6657 005c 03       		.uleb128 0x3
 6658 005d 0E       		.uleb128 0xe
 6659 005e 3A       		.uleb128 0x3a
 6660 005f 0B       		.uleb128 0xb
 6661 0060 3B       		.uleb128 0x3b
 6662 0061 0B       		.uleb128 0xb
 6663 0062 49       		.uleb128 0x49
 6664 0063 13       		.uleb128 0x13
 6665 0064 38       		.uleb128 0x38
 6666 0065 0A       		.uleb128 0xa
 6667 0066 00       		.byte	0x0
 6668 0067 00       		.byte	0x0
 6669 0068 09       		.uleb128 0x9
 6670 0069 0F       		.uleb128 0xf
 6671 006a 00       		.byte	0x0
 6672 006b 0B       		.uleb128 0xb
 6673 006c 0B       		.uleb128 0xb
 6674 006d 49       		.uleb128 0x49
 6675 006e 13       		.uleb128 0x13
 6676 006f 00       		.byte	0x0
 6677 0070 00       		.byte	0x0
 6678 0071 0A       		.uleb128 0xa
 6679 0072 35       		.uleb128 0x35
 6680 0073 00       		.byte	0x0
 6681 0074 03       		.uleb128 0x3
ARM GAS  /tmp/cch3WSAd.s 			page 220


 6682 0075 0E       		.uleb128 0xe
 6683 0076 49       		.uleb128 0x49
 6684 0077 13       		.uleb128 0x13
 6685 0078 00       		.byte	0x0
 6686 0079 00       		.byte	0x0
 6687 007a 0B       		.uleb128 0xb
 6688 007b 35       		.uleb128 0x35
 6689 007c 00       		.byte	0x0
 6690 007d 49       		.uleb128 0x49
 6691 007e 13       		.uleb128 0x13
 6692 007f 00       		.byte	0x0
 6693 0080 00       		.byte	0x0
 6694 0081 0C       		.uleb128 0xc
 6695 0082 2E       		.uleb128 0x2e
 6696 0083 01       		.byte	0x1
 6697 0084 3F       		.uleb128 0x3f
 6698 0085 0C       		.uleb128 0xc
 6699 0086 03       		.uleb128 0x3
 6700 0087 0E       		.uleb128 0xe
 6701 0088 3A       		.uleb128 0x3a
 6702 0089 0B       		.uleb128 0xb
 6703 008a 3B       		.uleb128 0x3b
 6704 008b 0B       		.uleb128 0xb
 6705 008c 27       		.uleb128 0x27
 6706 008d 0C       		.uleb128 0xc
 6707 008e 49       		.uleb128 0x49
 6708 008f 13       		.uleb128 0x13
 6709 0090 11       		.uleb128 0x11
 6710 0091 01       		.uleb128 0x1
 6711 0092 12       		.uleb128 0x12
 6712 0093 01       		.uleb128 0x1
 6713 0094 40       		.uleb128 0x40
 6714 0095 06       		.uleb128 0x6
 6715 0096 01       		.uleb128 0x1
 6716 0097 13       		.uleb128 0x13
 6717 0098 00       		.byte	0x0
 6718 0099 00       		.byte	0x0
 6719 009a 0D       		.uleb128 0xd
 6720 009b 05       		.uleb128 0x5
 6721 009c 00       		.byte	0x0
 6722 009d 03       		.uleb128 0x3
 6723 009e 0E       		.uleb128 0xe
 6724 009f 3A       		.uleb128 0x3a
 6725 00a0 0B       		.uleb128 0xb
 6726 00a1 3B       		.uleb128 0x3b
 6727 00a2 0B       		.uleb128 0xb
 6728 00a3 49       		.uleb128 0x49
 6729 00a4 13       		.uleb128 0x13
 6730 00a5 02       		.uleb128 0x2
 6731 00a6 0A       		.uleb128 0xa
 6732 00a7 00       		.byte	0x0
 6733 00a8 00       		.byte	0x0
 6734 00a9 0E       		.uleb128 0xe
 6735 00aa 34       		.uleb128 0x34
 6736 00ab 00       		.byte	0x0
 6737 00ac 03       		.uleb128 0x3
 6738 00ad 0E       		.uleb128 0xe
ARM GAS  /tmp/cch3WSAd.s 			page 221


 6739 00ae 3A       		.uleb128 0x3a
 6740 00af 0B       		.uleb128 0xb
 6741 00b0 3B       		.uleb128 0x3b
 6742 00b1 0B       		.uleb128 0xb
 6743 00b2 49       		.uleb128 0x49
 6744 00b3 13       		.uleb128 0x13
 6745 00b4 02       		.uleb128 0x2
 6746 00b5 0A       		.uleb128 0xa
 6747 00b6 00       		.byte	0x0
 6748 00b7 00       		.byte	0x0
 6749 00b8 0F       		.uleb128 0xf
 6750 00b9 2E       		.uleb128 0x2e
 6751 00ba 01       		.byte	0x1
 6752 00bb 3F       		.uleb128 0x3f
 6753 00bc 0C       		.uleb128 0xc
 6754 00bd 03       		.uleb128 0x3
 6755 00be 0E       		.uleb128 0xe
 6756 00bf 3A       		.uleb128 0x3a
 6757 00c0 0B       		.uleb128 0xb
 6758 00c1 3B       		.uleb128 0x3b
 6759 00c2 05       		.uleb128 0x5
 6760 00c3 27       		.uleb128 0x27
 6761 00c4 0C       		.uleb128 0xc
 6762 00c5 49       		.uleb128 0x49
 6763 00c6 13       		.uleb128 0x13
 6764 00c7 11       		.uleb128 0x11
 6765 00c8 01       		.uleb128 0x1
 6766 00c9 12       		.uleb128 0x12
 6767 00ca 01       		.uleb128 0x1
 6768 00cb 40       		.uleb128 0x40
 6769 00cc 06       		.uleb128 0x6
 6770 00cd 01       		.uleb128 0x1
 6771 00ce 13       		.uleb128 0x13
 6772 00cf 00       		.byte	0x0
 6773 00d0 00       		.byte	0x0
 6774 00d1 10       		.uleb128 0x10
 6775 00d2 05       		.uleb128 0x5
 6776 00d3 00       		.byte	0x0
 6777 00d4 03       		.uleb128 0x3
 6778 00d5 0E       		.uleb128 0xe
 6779 00d6 3A       		.uleb128 0x3a
 6780 00d7 0B       		.uleb128 0xb
 6781 00d8 3B       		.uleb128 0x3b
 6782 00d9 05       		.uleb128 0x5
 6783 00da 49       		.uleb128 0x49
 6784 00db 13       		.uleb128 0x13
 6785 00dc 02       		.uleb128 0x2
 6786 00dd 0A       		.uleb128 0xa
 6787 00de 00       		.byte	0x0
 6788 00df 00       		.byte	0x0
 6789 00e0 11       		.uleb128 0x11
 6790 00e1 34       		.uleb128 0x34
 6791 00e2 00       		.byte	0x0
 6792 00e3 03       		.uleb128 0x3
 6793 00e4 0E       		.uleb128 0xe
 6794 00e5 3A       		.uleb128 0x3a
 6795 00e6 0B       		.uleb128 0xb
ARM GAS  /tmp/cch3WSAd.s 			page 222


 6796 00e7 3B       		.uleb128 0x3b
 6797 00e8 05       		.uleb128 0x5
 6798 00e9 49       		.uleb128 0x49
 6799 00ea 13       		.uleb128 0x13
 6800 00eb 02       		.uleb128 0x2
 6801 00ec 0A       		.uleb128 0xa
 6802 00ed 00       		.byte	0x0
 6803 00ee 00       		.byte	0x0
 6804 00ef 12       		.uleb128 0x12
 6805 00f0 26       		.uleb128 0x26
 6806 00f1 00       		.byte	0x0
 6807 00f2 49       		.uleb128 0x49
 6808 00f3 13       		.uleb128 0x13
 6809 00f4 00       		.byte	0x0
 6810 00f5 00       		.byte	0x0
 6811 00f6 13       		.uleb128 0x13
 6812 00f7 26       		.uleb128 0x26
 6813 00f8 00       		.byte	0x0
 6814 00f9 00       		.byte	0x0
 6815 00fa 00       		.byte	0x0
 6816 00fb 14       		.uleb128 0x14
 6817 00fc 2E       		.uleb128 0x2e
 6818 00fd 01       		.byte	0x1
 6819 00fe 3F       		.uleb128 0x3f
 6820 00ff 0C       		.uleb128 0xc
 6821 0100 03       		.uleb128 0x3
 6822 0101 0E       		.uleb128 0xe
 6823 0102 3A       		.uleb128 0x3a
 6824 0103 0B       		.uleb128 0xb
 6825 0104 3B       		.uleb128 0x3b
 6826 0105 05       		.uleb128 0x5
 6827 0106 27       		.uleb128 0x27
 6828 0107 0C       		.uleb128 0xc
 6829 0108 11       		.uleb128 0x11
 6830 0109 01       		.uleb128 0x1
 6831 010a 12       		.uleb128 0x12
 6832 010b 01       		.uleb128 0x1
 6833 010c 40       		.uleb128 0x40
 6834 010d 06       		.uleb128 0x6
 6835 010e 01       		.uleb128 0x1
 6836 010f 13       		.uleb128 0x13
 6837 0110 00       		.byte	0x0
 6838 0111 00       		.byte	0x0
 6839 0112 15       		.uleb128 0x15
 6840 0113 2E       		.uleb128 0x2e
 6841 0114 01       		.byte	0x1
 6842 0115 03       		.uleb128 0x3
 6843 0116 0E       		.uleb128 0xe
 6844 0117 3A       		.uleb128 0x3a
 6845 0118 0B       		.uleb128 0xb
 6846 0119 3B       		.uleb128 0x3b
 6847 011a 05       		.uleb128 0x5
 6848 011b 27       		.uleb128 0x27
 6849 011c 0C       		.uleb128 0xc
 6850 011d 11       		.uleb128 0x11
 6851 011e 01       		.uleb128 0x1
 6852 011f 12       		.uleb128 0x12
ARM GAS  /tmp/cch3WSAd.s 			page 223


 6853 0120 01       		.uleb128 0x1
 6854 0121 40       		.uleb128 0x40
 6855 0122 06       		.uleb128 0x6
 6856 0123 01       		.uleb128 0x1
 6857 0124 13       		.uleb128 0x13
 6858 0125 00       		.byte	0x0
 6859 0126 00       		.byte	0x0
 6860 0127 16       		.uleb128 0x16
 6861 0128 2E       		.uleb128 0x2e
 6862 0129 01       		.byte	0x1
 6863 012a 03       		.uleb128 0x3
 6864 012b 0E       		.uleb128 0xe
 6865 012c 3A       		.uleb128 0x3a
 6866 012d 0B       		.uleb128 0xb
 6867 012e 3B       		.uleb128 0x3b
 6868 012f 05       		.uleb128 0x5
 6869 0130 27       		.uleb128 0x27
 6870 0131 0C       		.uleb128 0xc
 6871 0132 49       		.uleb128 0x49
 6872 0133 13       		.uleb128 0x13
 6873 0134 11       		.uleb128 0x11
 6874 0135 01       		.uleb128 0x1
 6875 0136 12       		.uleb128 0x12
 6876 0137 01       		.uleb128 0x1
 6877 0138 40       		.uleb128 0x40
 6878 0139 06       		.uleb128 0x6
 6879 013a 01       		.uleb128 0x1
 6880 013b 13       		.uleb128 0x13
 6881 013c 00       		.byte	0x0
 6882 013d 00       		.byte	0x0
 6883 013e 17       		.uleb128 0x17
 6884 013f 34       		.uleb128 0x34
 6885 0140 00       		.byte	0x0
 6886 0141 03       		.uleb128 0x3
 6887 0142 08       		.uleb128 0x8
 6888 0143 3A       		.uleb128 0x3a
 6889 0144 0B       		.uleb128 0xb
 6890 0145 3B       		.uleb128 0x3b
 6891 0146 05       		.uleb128 0x5
 6892 0147 49       		.uleb128 0x49
 6893 0148 13       		.uleb128 0x13
 6894 0149 02       		.uleb128 0x2
 6895 014a 0A       		.uleb128 0xa
 6896 014b 00       		.byte	0x0
 6897 014c 00       		.byte	0x0
 6898 014d 18       		.uleb128 0x18
 6899 014e 34       		.uleb128 0x34
 6900 014f 00       		.byte	0x0
 6901 0150 03       		.uleb128 0x3
 6902 0151 0E       		.uleb128 0xe
 6903 0152 3A       		.uleb128 0x3a
 6904 0153 0B       		.uleb128 0xb
 6905 0154 3B       		.uleb128 0x3b
 6906 0155 05       		.uleb128 0x5
 6907 0156 49       		.uleb128 0x49
 6908 0157 13       		.uleb128 0x13
 6909 0158 3F       		.uleb128 0x3f
ARM GAS  /tmp/cch3WSAd.s 			page 224


 6910 0159 0C       		.uleb128 0xc
 6911 015a 3C       		.uleb128 0x3c
 6912 015b 0C       		.uleb128 0xc
 6913 015c 00       		.byte	0x0
 6914 015d 00       		.byte	0x0
 6915 015e 19       		.uleb128 0x19
 6916 015f 01       		.uleb128 0x1
 6917 0160 01       		.byte	0x1
 6918 0161 49       		.uleb128 0x49
 6919 0162 13       		.uleb128 0x13
 6920 0163 01       		.uleb128 0x1
 6921 0164 13       		.uleb128 0x13
 6922 0165 00       		.byte	0x0
 6923 0166 00       		.byte	0x0
 6924 0167 1A       		.uleb128 0x1a
 6925 0168 21       		.uleb128 0x21
 6926 0169 00       		.byte	0x0
 6927 016a 49       		.uleb128 0x49
 6928 016b 13       		.uleb128 0x13
 6929 016c 2F       		.uleb128 0x2f
 6930 016d 0B       		.uleb128 0xb
 6931 016e 00       		.byte	0x0
 6932 016f 00       		.byte	0x0
 6933 0170 1B       		.uleb128 0x1b
 6934 0171 34       		.uleb128 0x34
 6935 0172 00       		.byte	0x0
 6936 0173 03       		.uleb128 0x3
 6937 0174 0E       		.uleb128 0xe
 6938 0175 3A       		.uleb128 0x3a
 6939 0176 0B       		.uleb128 0xb
 6940 0177 3B       		.uleb128 0x3b
 6941 0178 0B       		.uleb128 0xb
 6942 0179 49       		.uleb128 0x49
 6943 017a 13       		.uleb128 0x13
 6944 017b 3F       		.uleb128 0x3f
 6945 017c 0C       		.uleb128 0xc
 6946 017d 02       		.uleb128 0x2
 6947 017e 0A       		.uleb128 0xa
 6948 017f 00       		.byte	0x0
 6949 0180 00       		.byte	0x0
 6950 0181 00       		.byte	0x0
 6951              		.section	.debug_pubnames,"",%progbits
 6952 0000 38010000 		.4byte	0x138
 6953 0004 0200     		.2byte	0x2
 6954 0006 00000000 		.4byte	.Ldebug_info0
 6955 000a 19080000 		.4byte	0x819
 6956 000e CC020000 		.4byte	0x2cc
 6957 0012 78517565 		.ascii	"xQueueCreate\000"
 6957      75654372 
 6957      65617465 
 6957      00
 6958 001f 22030000 		.4byte	0x322
 6959 0023 78517565 		.ascii	"xQueueGenericSend\000"
 6959      75654765 
 6959      6E657269 
 6959      6353656E 
 6959      6400
ARM GAS  /tmp/cch3WSAd.s 			page 225


 6960 0035 A7030000 		.4byte	0x3a7
 6961 0039 78517565 		.ascii	"xQueueGenericSendFromISR\000"
 6961      75654765 
 6961      6E657269 
 6961      6353656E 
 6961      6446726F 
 6962 0052 26040000 		.4byte	0x426
 6963 0056 78517565 		.ascii	"xQueueGenericReceive\000"
 6963      75654765 
 6963      6E657269 
 6963      63526563 
 6963      65697665 
 6964 006b B3040000 		.4byte	0x4b3
 6965 006f 78517565 		.ascii	"xQueueReceiveFromISR\000"
 6965      75655265 
 6965      63656976 
 6965      6546726F 
 6965      6D495352 
 6966 0084 1D050000 		.4byte	0x51d
 6967 0088 75785175 		.ascii	"uxQueueMessagesWaiting\000"
 6967      6575654D 
 6967      65737361 
 6967      67657357 
 6967      61697469 
 6968 009f 5F050000 		.4byte	0x55f
 6969 00a3 75785175 		.ascii	"uxQueueMessagesWaitingFromISR\000"
 6969      6575654D 
 6969      65737361 
 6969      67657357 
 6969      61697469 
 6970 00c1 9C050000 		.4byte	0x59c
 6971 00c5 76517565 		.ascii	"vQueueDelete\000"
 6971      75654465 
 6971      6C657465 
 6971      00
 6972 00d2 AF060000 		.4byte	0x6af
 6973 00d6 78517565 		.ascii	"xQueueIsQueueEmptyFromISR\000"
 6973      75654973 
 6973      51756575 
 6973      65456D70 
 6973      74794672 
 6974 00f0 28070000 		.4byte	0x728
 6975 00f4 78517565 		.ascii	"xQueueIsQueueFullFromISR\000"
 6975      75654973 
 6975      51756575 
 6975      6546756C 
 6975      6C46726F 
 6976 010d 65070000 		.4byte	0x765
 6977 0111 76517565 		.ascii	"vQueueAddToRegistry\000"
 6977      75654164 
 6977      64546F52 
 6977      65676973 
 6977      74727900 
 6978 0125 06080000 		.4byte	0x806
 6979 0129 78517565 		.ascii	"xQueueRegistry\000"
 6979      75655265 
 6979      67697374 
ARM GAS  /tmp/cch3WSAd.s 			page 226


 6979      727900
 6980 0138 00000000 		.4byte	0x0
 6981              		.section	.debug_aranges,"",%progbits
 6982 0000 9C000000 		.4byte	0x9c
 6983 0004 0200     		.2byte	0x2
 6984 0006 00000000 		.4byte	.Ldebug_info0
 6985 000a 04       		.byte	0x4
 6986 000b 00       		.byte	0x0
 6987 000c 0000     		.2byte	0x0
 6988 000e 0000     		.2byte	0x0
 6989 0010 00000000 		.4byte	.LFB29
 6990 0014 CA000000 		.4byte	.LFE29-.LFB29
 6991 0018 00000000 		.4byte	.LFB30
 6992 001c 20010000 		.4byte	.LFE30-.LFB30
 6993 0020 00000000 		.4byte	.LFB31
 6994 0024 96000000 		.4byte	.LFE31-.LFB31
 6995 0028 00000000 		.4byte	.LFB32
 6996 002c 62010000 		.4byte	.LFE32-.LFB32
 6997 0030 00000000 		.4byte	.LFB33
 6998 0034 9A000000 		.4byte	.LFE33-.LFB33
 6999 0038 00000000 		.4byte	.LFB34
 7000 003c 22000000 		.4byte	.LFE34-.LFB34
 7001 0040 00000000 		.4byte	.LFB35
 7002 0044 1C000000 		.4byte	.LFE35-.LFB35
 7003 0048 00000000 		.4byte	.LFB36
 7004 004c 26000000 		.4byte	.LFE36-.LFB36
 7005 0050 00000000 		.4byte	.LFB37
 7006 0054 AA000000 		.4byte	.LFE37-.LFB37
 7007 0058 00000000 		.4byte	.LFB38
 7008 005c 4E000000 		.4byte	.LFE38-.LFB38
 7009 0060 00000000 		.4byte	.LFB39
 7010 0064 A0000000 		.4byte	.LFE39-.LFB39
 7011 0068 00000000 		.4byte	.LFB40
 7012 006c 2A000000 		.4byte	.LFE40-.LFB40
 7013 0070 00000000 		.4byte	.LFB41
 7014 0074 24000000 		.4byte	.LFE41-.LFB41
 7015 0078 00000000 		.4byte	.LFB42
 7016 007c 2E000000 		.4byte	.LFE42-.LFB42
 7017 0080 00000000 		.4byte	.LFB43
 7018 0084 28000000 		.4byte	.LFE43-.LFB43
 7019 0088 00000000 		.4byte	.LFB44
 7020 008c 62000000 		.4byte	.LFE44-.LFB44
 7021 0090 00000000 		.4byte	.LFB45
 7022 0094 54000000 		.4byte	.LFE45-.LFB45
 7023 0098 00000000 		.4byte	0x0
 7024 009c 00000000 		.4byte	0x0
 7025              		.section	.debug_ranges,"",%progbits
 7026              	.Ldebug_ranges0:
 7027 0000 00000000 		.4byte	.Ltext0
 7028 0004 00000000 		.4byte	.Letext0
 7029 0008 00000000 		.4byte	.LFB29
 7030 000c CA000000 		.4byte	.LFE29
 7031 0010 00000000 		.4byte	.LFB30
 7032 0014 20010000 		.4byte	.LFE30
 7033 0018 00000000 		.4byte	.LFB31
 7034 001c 96000000 		.4byte	.LFE31
 7035 0020 00000000 		.4byte	.LFB32
ARM GAS  /tmp/cch3WSAd.s 			page 227


 7036 0024 62010000 		.4byte	.LFE32
 7037 0028 00000000 		.4byte	.LFB33
 7038 002c 9A000000 		.4byte	.LFE33
 7039 0030 00000000 		.4byte	.LFB34
 7040 0034 22000000 		.4byte	.LFE34
 7041 0038 00000000 		.4byte	.LFB35
 7042 003c 1C000000 		.4byte	.LFE35
 7043 0040 00000000 		.4byte	.LFB36
 7044 0044 26000000 		.4byte	.LFE36
 7045 0048 00000000 		.4byte	.LFB37
 7046 004c AA000000 		.4byte	.LFE37
 7047 0050 00000000 		.4byte	.LFB38
 7048 0054 4E000000 		.4byte	.LFE38
 7049 0058 00000000 		.4byte	.LFB39
 7050 005c A0000000 		.4byte	.LFE39
 7051 0060 00000000 		.4byte	.LFB40
 7052 0064 2A000000 		.4byte	.LFE40
 7053 0068 00000000 		.4byte	.LFB41
 7054 006c 24000000 		.4byte	.LFE41
 7055 0070 00000000 		.4byte	.LFB42
 7056 0074 2E000000 		.4byte	.LFE42
 7057 0078 00000000 		.4byte	.LFB43
 7058 007c 28000000 		.4byte	.LFE43
 7059 0080 00000000 		.4byte	.LFB44
 7060 0084 62000000 		.4byte	.LFE44
 7061 0088 00000000 		.4byte	.LFB45
 7062 008c 54000000 		.4byte	.LFE45
 7063 0090 00000000 		.4byte	0x0
 7064 0094 00000000 		.4byte	0x0
 7065              		.section	.debug_macinfo
 7066 9cc8 00       		.byte	0x0
 7067              		.section	.debug_str,"MS",%progbits,1
 7068              	.LASF51:
 7069 0000 78517565 		.ascii	"xQueueCreate\000"
 7069      75654372 
 7069      65617465 
 7069      00
 7070              	.LASF26:
 7071 000d 7854494D 		.ascii	"xTIME_OUT\000"
 7071      455F4F55 
 7071      5400
 7072              	.LASF10:
 7073 0017 73697A65 		.ascii	"size_t\000"
 7073      5F7400
 7074              	.LASF14:
 7075 001e 70785072 		.ascii	"pxPrevious\000"
 7075      6576696F 
 7075      757300
 7076              	.LASF45:
 7077 0029 70635175 		.ascii	"pcQueueName\000"
 7077      6575654E 
 7077      616D6500 
 7078              	.LASF13:
 7079 0035 70784E65 		.ascii	"pxNext\000"
 7079      787400
 7080              	.LASF44:
 7081 003c 51554555 		.ascii	"QUEUE_REGISTRY_ITEM\000"
ARM GAS  /tmp/cch3WSAd.s 			page 228


 7081      455F5245 
 7081      47495354 
 7081      52595F49 
 7081      54454D00 
 7082              	.LASF72:
 7083 0050 78506F73 		.ascii	"xPosition\000"
 7083      6974696F 
 7083      6E00
 7084              	.LASF73:
 7085 005a 70727643 		.ascii	"prvCopyDataToQueue\000"
 7085      6F707944 
 7085      61746154 
 7085      6F517565 
 7085      756500
 7086              	.LASF69:
 7087 006d 75785175 		.ascii	"uxQueueMessagesWaiting\000"
 7087      6575654D 
 7087      65737361 
 7087      67657357 
 7087      61697469 
 7088              	.LASF11:
 7089 0084 706F7274 		.ascii	"portTickType\000"
 7089      5469636B 
 7089      54797065 
 7089      00
 7090              	.LASF76:
 7091 0091 78517565 		.ascii	"xQueueIsQueueEmptyFromISR\000"
 7091      75654973 
 7091      51756575 
 7091      65456D70 
 7091      74794672 
 7092              	.LASF15:
 7093 00ab 70764F77 		.ascii	"pvOwner\000"
 7093      6E657200 
 7094              	.LASF65:
 7095 00b3 784A7573 		.ascii	"xJustPeeking\000"
 7095      74506565 
 7095      6B696E67 
 7095      00
 7096              	.LASF56:
 7097 00c0 78436F70 		.ascii	"xCopyPosition\000"
 7097      79506F73 
 7097      6974696F 
 7097      6E00
 7098              	.LASF58:
 7099 00ce 7854696D 		.ascii	"xTimeOut\000"
 7099      654F7574 
 7099      00
 7100              	.LASF47:
 7101 00d7 78517565 		.ascii	"xQueueRegistryItem\000"
 7101      75655265 
 7101      67697374 
 7101      72794974 
 7101      656D00
 7102              	.LASF67:
 7103 00ea 78517565 		.ascii	"xQueueReceiveFromISR\000"
 7103      75655265 
ARM GAS  /tmp/cch3WSAd.s 			page 229


 7103      63656976 
 7103      6546726F 
 7103      6D495352 
 7104              	.LASF66:
 7105 00ff 70634F72 		.ascii	"pcOriginalReadPosition\000"
 7105      6967696E 
 7105      616C5265 
 7105      6164506F 
 7105      73697469 
 7106              	.LASF78:
 7107 0116 70727649 		.ascii	"prvIsQueueFull\000"
 7107      73517565 
 7107      75654675 
 7107      6C6C00
 7108              	.LASF32:
 7109 0125 70635461 		.ascii	"pcTail\000"
 7109      696C00
 7110              	.LASF52:
 7111 012c 78517565 		.ascii	"xQueueGenericSend\000"
 7111      75654765 
 7111      6E657269 
 7111      6353656E 
 7111      6400
 7112              	.LASF64:
 7113 013e 70764275 		.ascii	"pvBuffer\000"
 7113      66666572 
 7113      00
 7114              	.LASF55:
 7115 0147 78546963 		.ascii	"xTicksToWait\000"
 7115      6B73546F 
 7115      57616974 
 7115      00
 7116              	.LASF5:
 7117 0154 6C6F6E67 		.ascii	"long long int\000"
 7117      206C6F6E 
 7117      6720696E 
 7117      7400
 7118              	.LASF41:
 7119 0162 7854784C 		.ascii	"xTxLock\000"
 7119      6F636B00 
 7120              	.LASF25:
 7121 016a 784C6973 		.ascii	"xList\000"
 7121      7400
 7122              	.LASF38:
 7123 0170 75784C65 		.ascii	"uxLength\000"
 7123      6E677468 
 7123      00
 7124              	.LASF7:
 7125 0179 6C6F6E67 		.ascii	"long int\000"
 7125      20696E74 
 7125      00
 7126              	.LASF21:
 7127 0182 784C4953 		.ascii	"xLIST\000"
 7127      5400
 7128              	.LASF43:
 7129 0188 78517565 		.ascii	"xQueueHandle\000"
 7129      75654861 
ARM GAS  /tmp/cch3WSAd.s 			page 230


 7129      6E646C65 
 7129      00
 7130              	.LASF88:
 7131 0195 2F686F6D 		.ascii	"/home/cas/Documentos/casainho-projects/trunk/sdcard"
 7131      652F6361 
 7131      732F446F 
 7131      63756D65 
 7131      6E746F73 
 7132 01c8 5F626174 		.ascii	"_bathroom_scale/firmware/beurer_bg_16/Firmware/Free"
 7132      68726F6F 
 7132      6D5F7363 
 7132      616C652F 
 7132      6669726D 
 7133 01fb 52544F53 		.ascii	"RTOS-LPC17x8\000"
 7133      2D4C5043 
 7133      31377838 
 7133      00
 7134              	.LASF3:
 7135 0208 73686F72 		.ascii	"short int\000"
 7135      7420696E 
 7135      7400
 7136              	.LASF12:
 7137 0212 78497465 		.ascii	"xItemValue\000"
 7137      6D56616C 
 7137      756500
 7138              	.LASF71:
 7139 021d 75785175 		.ascii	"uxQueueMessagesWaitingFromISR\000"
 7139      6575654D 
 7139      65737361 
 7139      67657357 
 7139      61697469 
 7140              	.LASF42:
 7141 023b 78515545 		.ascii	"xQUEUE\000"
 7141      554500
 7142              	.LASF39:
 7143 0242 75784974 		.ascii	"uxItemSize\000"
 7143      656D5369 
 7143      7A6500
 7144              	.LASF49:
 7145 024d 70784E65 		.ascii	"pxNewQueue\000"
 7145      77517565 
 7145      756500
 7146              	.LASF18:
 7147 0258 784C4953 		.ascii	"xLIST_ITEM\000"
 7147      545F4954 
 7147      454D00
 7148              	.LASF20:
 7149 0263 784D696E 		.ascii	"xMiniListItem\000"
 7149      694C6973 
 7149      74497465 
 7149      6D00
 7150              	.LASF85:
 7151 0271 78517565 		.ascii	"xQueueRegistry\000"
 7151      75655265 
 7151      67697374 
 7151      727900
 7152              	.LASF2:
ARM GAS  /tmp/cch3WSAd.s 			page 231


 7153 0280 756E7369 		.ascii	"unsigned char\000"
 7153      676E6564 
 7153      20636861 
 7153      7200
 7154              	.LASF28:
 7155 028e 7854696D 		.ascii	"xTimeOnEntering\000"
 7155      654F6E45 
 7155      6E746572 
 7155      696E6700 
 7156              	.LASF27:
 7157 029e 784F7665 		.ascii	"xOverflowCount\000"
 7157      72666C6F 
 7157      77436F75 
 7157      6E7400
 7158              	.LASF1:
 7159 02ad 7369676E 		.ascii	"signed char\000"
 7159      65642063 
 7159      68617200 
 7160              	.LASF74:
 7161 02b9 70727643 		.ascii	"prvCopyDataFromQueue\000"
 7161      6F707944 
 7161      61746146 
 7161      726F6D51 
 7161      75657565 
 7162              	.LASF6:
 7163 02ce 6C6F6E67 		.ascii	"long long unsigned int\000"
 7163      206C6F6E 
 7163      6720756E 
 7163      7369676E 
 7163      65642069 
 7164              	.LASF31:
 7165 02e5 70634865 		.ascii	"pcHead\000"
 7165      616400
 7166              	.LASF83:
 7167 02ec 76517565 		.ascii	"vQueueUnregisterQueue\000"
 7167      7565556E 
 7167      72656769 
 7167      73746572 
 7167      51756575 
 7168              	.LASF0:
 7169 0302 756E7369 		.ascii	"unsigned int\000"
 7169      676E6564 
 7169      20696E74 
 7169      00
 7170              	.LASF24:
 7171 030f 784C6973 		.ascii	"xListEnd\000"
 7171      74456E64 
 7171      00
 7172              	.LASF16:
 7173 0318 7076436F 		.ascii	"pvContainer\000"
 7173      6E746169 
 7173      6E657200 
 7174              	.LASF36:
 7175 0324 78546173 		.ascii	"xTasksWaitingToReceive\000"
 7175      6B735761 
 7175      6974696E 
 7175      67546F52 
ARM GAS  /tmp/cch3WSAd.s 			page 232


 7175      65636569 
 7176              	.LASF50:
 7177 033b 78517565 		.ascii	"xQueueSizeInBytes\000"
 7177      75655369 
 7177      7A65496E 
 7177      42797465 
 7177      7300
 7178              	.LASF30:
 7179 034d 51756575 		.ascii	"QueueDefinition\000"
 7179      65446566 
 7179      696E6974 
 7179      696F6E00 
 7180              	.LASF75:
 7181 035d 70727655 		.ascii	"prvUnlockQueue\000"
 7181      6E6C6F63 
 7181      6B517565 
 7181      756500
 7182              	.LASF82:
 7183 036c 78517565 		.ascii	"xQueue\000"
 7183      756500
 7184              	.LASF4:
 7185 0373 73686F72 		.ascii	"short unsigned int\000"
 7185      7420756E 
 7185      7369676E 
 7185      65642069 
 7185      6E7400
 7186              	.LASF48:
 7187 0386 75785175 		.ascii	"uxQueueLength\000"
 7187      6575654C 
 7187      656E6774 
 7187      6800
 7188              	.LASF53:
 7189 0394 70785175 		.ascii	"pxQueue\000"
 7189      65756500 
 7190              	.LASF59:
 7191 039c 78517565 		.ascii	"xQueueGenericSendFromISR\000"
 7191      75654765 
 7191      6E657269 
 7191      6353656E 
 7191      6446726F 
 7192              	.LASF9:
 7193 03b5 63686172 		.ascii	"char\000"
 7193      00
 7194              	.LASF33:
 7195 03ba 70635772 		.ascii	"pcWriteTo\000"
 7195      69746554 
 7195      6F00
 7196              	.LASF54:
 7197 03c4 70764974 		.ascii	"pvItemToQueue\000"
 7197      656D546F 
 7197      51756575 
 7197      6500
 7198              	.LASF79:
 7199 03d2 78517565 		.ascii	"xQueueIsQueueFullFromISR\000"
 7199      75654973 
 7199      51756575 
 7199      6546756C 
ARM GAS  /tmp/cch3WSAd.s 			page 233


 7199      6C46726F 
 7200              	.LASF34:
 7201 03eb 70635265 		.ascii	"pcReadFrom\000"
 7201      61644672 
 7201      6F6D00
 7202              	.LASF63:
 7203 03f6 78517565 		.ascii	"xQueueGenericReceive\000"
 7203      75654765 
 7203      6E657269 
 7203      63526563 
 7203      65697665 
 7204              	.LASF57:
 7205 040b 78456E74 		.ascii	"xEntryTimeSet\000"
 7205      72795469 
 7205      6D655365 
 7205      7400
 7206              	.LASF80:
 7207 0419 76517565 		.ascii	"vQueueDelete\000"
 7207      75654465 
 7207      6C657465 
 7207      00
 7208              	.LASF70:
 7209 0426 75785265 		.ascii	"uxReturn\000"
 7209      7475726E 
 7209      00
 7210              	.LASF8:
 7211 042f 6C6F6E67 		.ascii	"long unsigned int\000"
 7211      20756E73 
 7211      69676E65 
 7211      6420696E 
 7211      7400
 7212              	.LASF77:
 7213 0441 70727649 		.ascii	"prvIsQueueEmpty\000"
 7213      73517565 
 7213      7565456D 
 7213      70747900 
 7214              	.LASF22:
 7215 0451 75784E75 		.ascii	"uxNumberOfItems\000"
 7215      6D626572 
 7215      4F664974 
 7215      656D7300 
 7216              	.LASF17:
 7217 0461 784C6973 		.ascii	"xListItem\000"
 7217      74497465 
 7217      6D00
 7218              	.LASF46:
 7219 046b 7848616E 		.ascii	"xHandle\000"
 7219      646C6500 
 7220              	.LASF37:
 7221 0473 75784D65 		.ascii	"uxMessagesWaiting\000"
 7221      73736167 
 7221      65735761 
 7221      6974696E 
 7221      6700
 7222              	.LASF68:
 7223 0485 70785461 		.ascii	"pxTaskWoken\000"
 7223      736B576F 
ARM GAS  /tmp/cch3WSAd.s 			page 234


 7223      6B656E00 
 7224              	.LASF40:
 7225 0491 7852784C 		.ascii	"xRxLock\000"
 7225      6F636B00 
 7226              	.LASF29:
 7227 0499 7854696D 		.ascii	"xTimeOutType\000"
 7227      654F7574 
 7227      54797065 
 7227      00
 7228              	.LASF62:
 7229 04a6 75785361 		.ascii	"uxSavedInterruptStatus\000"
 7229      76656449 
 7229      6E746572 
 7229      72757074 
 7229      53746174 
 7230              	.LASF61:
 7231 04bd 78526574 		.ascii	"xReturn\000"
 7231      75726E00 
 7232              	.LASF60:
 7233 04c5 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 7233      67686572 
 7233      5072696F 
 7233      72697479 
 7233      5461736B 
 7234              	.LASF81:
 7235 04df 76517565 		.ascii	"vQueueAddToRegistry\000"
 7235      75654164 
 7235      64546F52 
 7235      65676973 
 7235      74727900 
 7236              	.LASF86:
 7237 04f3 474E5520 		.ascii	"GNU C 4.4.1\000"
 7237      4320342E 
 7237      342E3100 
 7238              	.LASF35:
 7239 04ff 78546173 		.ascii	"xTasksWaitingToSend\000"
 7239      6B735761 
 7239      6974696E 
 7239      67546F53 
 7239      656E6400 
 7240              	.LASF23:
 7241 0513 7078496E 		.ascii	"pxIndex\000"
 7241      64657800 
 7242              	.LASF84:
 7243 051b 49544D5F 		.ascii	"ITM_RxBuffer\000"
 7243      52784275 
 7243      66666572 
 7243      00
 7244              	.LASF19:
 7245 0528 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 7245      495F4C49 
 7245      53545F49 
 7245      54454D00 
 7246              	.LASF87:
 7247 0538 46726565 		.ascii	"FreeRTOS/queue.c\000"
 7247      52544F53 
 7247      2F717565 
ARM GAS  /tmp/cch3WSAd.s 			page 235


 7247      75652E63 
 7247      00
 7248              		.ident	"GCC: (Sourcery G++ Lite 2009q3-68) 4.4.1"
ARM GAS  /tmp/cch3WSAd.s 			page 236


DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
                            *COM*:00000050 xQueueRegistry
     /tmp/cch3WSAd.s:3345   .text.xQueueCreate:00000000 $t
     /tmp/cch3WSAd.s:3350   .text.xQueueCreate:00000000 xQueueCreate
     /tmp/cch3WSAd.s:3467   .text.xQueueGenericSend:00000000 $t
     /tmp/cch3WSAd.s:3472   .text.xQueueGenericSend:00000000 xQueueGenericSend
     /tmp/cch3WSAd.s:4161   .text.prvCopyDataToQueue:00000000 prvCopyDataToQueue
     /tmp/cch3WSAd.s:4518   .text.prvIsQueueFull:00000000 prvIsQueueFull
     /tmp/cch3WSAd.s:4332   .text.prvUnlockQueue:00000000 prvUnlockQueue
     /tmp/cch3WSAd.s:3635   .text.xQueueGenericSendFromISR:00000000 $t
     /tmp/cch3WSAd.s:3640   .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
     /tmp/cch3WSAd.s:3740   .text.xQueueGenericReceive:00000000 $t
     /tmp/cch3WSAd.s:3745   .text.xQueueGenericReceive:00000000 xQueueGenericReceive
     /tmp/cch3WSAd.s:4272   .text.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
     /tmp/cch3WSAd.s:4443   .text.prvIsQueueEmpty:00000000 prvIsQueueEmpty
     /tmp/cch3WSAd.s:3947   .text.xQueueReceiveFromISR:00000000 $t
     /tmp/cch3WSAd.s:3952   .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
     /tmp/cch3WSAd.s:4054   .text.uxQueueMessagesWaiting:00000000 $t
     /tmp/cch3WSAd.s:4059   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
     /tmp/cch3WSAd.s:4089   .text.uxQueueMessagesWaitingFromISR:00000000 $t
     /tmp/cch3WSAd.s:4094   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
     /tmp/cch3WSAd.s:4122   .text.vQueueDelete:00000000 $t
     /tmp/cch3WSAd.s:4127   .text.vQueueDelete:00000000 vQueueDelete
     /tmp/cch3WSAd.s:4662   .text.vQueueUnregisterQueue:00000000 vQueueUnregisterQueue
     /tmp/cch3WSAd.s:4157   .text.prvCopyDataToQueue:00000000 $t
     /tmp/cch3WSAd.s:4268   .text.prvCopyDataFromQueue:00000000 $t
     /tmp/cch3WSAd.s:4328   .text.prvUnlockQueue:00000000 $t
     /tmp/cch3WSAd.s:4439   .text.prvIsQueueEmpty:00000000 $t
     /tmp/cch3WSAd.s:4477   .text.xQueueIsQueueEmptyFromISR:00000000 $t
     /tmp/cch3WSAd.s:4482   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
     /tmp/cch3WSAd.s:4514   .text.prvIsQueueFull:00000000 $t
     /tmp/cch3WSAd.s:4554   .text.xQueueIsQueueFullFromISR:00000000 $t
     /tmp/cch3WSAd.s:4559   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR
     /tmp/cch3WSAd.s:4593   .text.vQueueAddToRegistry:00000000 $t
     /tmp/cch3WSAd.s:4598   .text.vQueueAddToRegistry:00000000 vQueueAddToRegistry
     /tmp/cch3WSAd.s:4658   .text.vQueueUnregisterQueue:00000000 $t
     /tmp/cch3WSAd.s:4728   .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
vPortFree
vPortEnterCritical
xTaskRemoveFromEventList
vPortYieldFromISR
vPortExitCritical
vTaskSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
memcpy
vTaskMissedYield
